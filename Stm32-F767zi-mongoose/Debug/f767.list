
f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f134  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001008c  0801f338  0801f338  00020338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f3c4  0802f3c4  00031484  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f3c4  0802f3c4  000303c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f3cc  0802f3cc  00031484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f3cc  0802f3cc  000303cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f3d0  0802f3d0  000303d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0802f3d4  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000344  0802f718  00031344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200003e4  0802f7b8  000313e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000034b8  20000488  0802f858  00031488  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20003940  0802f858  00031940  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00031484  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021d69  00000000  00000000  000314b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bf9  00000000  00000000  0005321b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c88  00000000  00000000  00055e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017df  00000000  00000000  00057aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b264  00000000  00000000  0005927f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fb27  00000000  00000000  000844e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103192  00000000  00000000  000a400a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a719c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008dd0  00000000  00000000  001a71e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  001affb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000488 	.word	0x20000488
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f31c 	.word	0x0801f31c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000048c 	.word	0x2000048c
 800023c:	0801f31c 	.word	0x0801f31c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e01a      	b.n	8000682 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4619      	mov	r1, r3
 8000652:	4810      	ldr	r0, [pc, #64]	@ (8000694 <mg_random+0x58>)
 8000654:	f002 fc30 	bl	8002eb8 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	18d0      	adds	r0, r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3304      	adds	r3, #4
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	429a      	cmp	r2, r3
 8000666:	d203      	bcs.n	8000670 <mg_random+0x34>
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	e000      	b.n	8000672 <mg_random+0x36>
 8000670:	2304      	movs	r3, #4
 8000672:	f107 0108 	add.w	r1, r7, #8
 8000676:	461a      	mov	r2, r3
 8000678:	f01e f931 	bl	801e8de <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3304      	adds	r3, #4
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	d3e0      	bcc.n	800064c <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000058c 	.word	0x2000058c

08000698 <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d002      	beq.n	80006b0 <_write+0x18>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d107      	bne.n	80006c0 <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80006b8:	68b9      	ldr	r1, [r7, #8]
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <_write+0x34>)
 80006bc:	f002 fca0 	bl	8003000 <HAL_UART_Transmit>
  }
  return len;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000059c 	.word	0x2000059c

080006d0 <mg_millis>:

uint64_t mg_millis(void) {
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006d4:	f000 fc64 	bl	8000fa0 <HAL_GetTick>
 80006d8:	4603      	mov	r3, r0
 80006da:	2200      	movs	r2, #0
 80006dc:	461c      	mov	r4, r3
 80006de:	4615      	mov	r5, r2
 80006e0:	4622      	mov	r2, r4
 80006e2:	462b      	mov	r3, r5
}
 80006e4:	4610      	mov	r0, r2
 80006e6:	4619      	mov	r1, r3
 80006e8:	bdb0      	pop	{r4, r5, r7, pc}

080006ea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 fc06 	bl	8000efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f80d 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f90b 	bl	8000910 <MX_GPIO_Init>
  MX_ETH_Init();
 80006fa:	f000 f877 	bl	80007ec <MX_ETH_Init>
  MX_RNG_Init();
 80006fe:	f000 f8c3 	bl	8000888 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8000702:	f000 f8d5 	bl	80008b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  run_mongoose();
 8000706:	f01d fc55 	bl	801dfb4 <mongoose_init>
 800070a:	f01d fca9 	bl	801e060 <mongoose_poll>
 800070e:	e7fc      	b.n	800070a <main+0x20>

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f01d ffa7 	bl	801e672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <SystemClock_Config+0xd4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a2a      	ldr	r2, [pc, #168]	@ (80007e4 <SystemClock_Config+0xd4>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <SystemClock_Config+0xd4>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <SystemClock_Config+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a25      	ldr	r2, [pc, #148]	@ (80007e8 <SystemClock_Config+0xd8>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800077c:	23d8      	movs	r3, #216	@ 0xd8
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000784:	2309      	movs	r3, #9
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4618      	mov	r0, r3
 8000792:	f001 faab 	bl	8001cec <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800079c:	f000 f91c 	bl	80009d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a0:	f001 fa54 	bl	8001c4c <HAL_PWREx_EnableOverDrive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f915 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	2107      	movs	r1, #7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fd3b 	bl	8002248 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007d8:	f000 f8fe 	bl	80009d8 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	@ 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <MX_ETH_Init+0x84>)
 80007f2:	4a20      	ldr	r2, [pc, #128]	@ (8000874 <MX_ETH_Init+0x88>)
 80007f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007f6:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <MX_ETH_Init+0x8c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <MX_ETH_Init+0x8c>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_ETH_Init+0x8c>)
 8000804:	22e1      	movs	r2, #225	@ 0xe1
 8000806:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_ETH_Init+0x8c>)
 800080a:	2200      	movs	r2, #0
 800080c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_ETH_Init+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000814:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_ETH_Init+0x8c>)
 8000816:	2200      	movs	r2, #0
 8000818:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_ETH_Init+0x84>)
 800081c:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <MX_ETH_Init+0x8c>)
 800081e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_ETH_Init+0x84>)
 8000822:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000826:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000828:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_ETH_Init+0x84>)
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <MX_ETH_Init+0x90>)
 800082c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_ETH_Init+0x84>)
 8000830:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <MX_ETH_Init+0x94>)
 8000832:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_ETH_Init+0x84>)
 8000836:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800083a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <MX_ETH_Init+0x84>)
 800083e:	f000 fcf1 	bl	8001224 <HAL_ETH_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000848:	f000 f8c6 	bl	80009d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800084c:	2238      	movs	r2, #56	@ 0x38
 800084e:	2100      	movs	r1, #0
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_ETH_Init+0x98>)
 8000852:	f01d ff0e 	bl	801e672 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_ETH_Init+0x98>)
 8000858:	2221      	movs	r2, #33	@ 0x21
 800085a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_ETH_Init+0x98>)
 800085e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000862:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <MX_ETH_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200004dc 	.word	0x200004dc
 8000874:	40028000 	.word	0x40028000
 8000878:	20000624 	.word	0x20000624
 800087c:	200003e4 	.word	0x200003e4
 8000880:	20000344 	.word	0x20000344
 8000884:	200004a4 	.word	0x200004a4

08000888 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_RNG_Init+0x20>)
 800088e:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <MX_RNG_Init+0x24>)
 8000890:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_RNG_Init+0x20>)
 8000894:	f002 fae6 	bl	8002e64 <HAL_RNG_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800089e:	f000 f89b 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000058c 	.word	0x2000058c
 80008ac:	50060800 	.word	0x50060800

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	@ (800090c <MX_USART3_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_USART3_UART_Init+0x58>)
 80008f4:	f002 fb36 	bl	8002f64 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f86b 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000059c 	.word	0x2000059c
 800090c:	40004800 	.word	0x40004800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a29      	ldr	r2, [pc, #164]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a23      	ldr	r2, [pc, #140]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a1d      	ldr	r2, [pc, #116]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0xc0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009a4:	480b      	ldr	r0, [pc, #44]	@ (80009d4 <MX_GPIO_Init+0xc4>)
 80009a6:	f001 f937 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80009aa:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_GPIO_Init+0xc4>)
 80009c4:	f000 ff7c 	bl	80018c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	@ 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a52      	ldr	r2, [pc, #328]	@ (8000b94 <HAL_ETH_MspInit+0x168>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	f040 809e 	bne.w	8000b8c <HAL_ETH_MspInit+0x160>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a50:	4b51      	ldr	r3, [pc, #324]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a50      	ldr	r2, [pc, #320]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a74:	4b48      	ldr	r3, [pc, #288]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a7c:	61fb      	str	r3, [r7, #28]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	4b45      	ldr	r3, [pc, #276]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	4a44      	ldr	r2, [pc, #272]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8c:	4b42      	ldr	r3, [pc, #264]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a98:	4b3f      	ldr	r3, [pc, #252]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	4a3e      	ldr	r2, [pc, #248]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b39      	ldr	r3, [pc, #228]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	4a38      	ldr	r2, [pc, #224]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abc:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4b33      	ldr	r3, [pc, #204]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000acc:	4a32      	ldr	r2, [pc, #200]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad4:	4b30      	ldr	r3, [pc, #192]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aec:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <HAL_ETH_MspInit+0x16c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000af8:	2332      	movs	r3, #50	@ 0x32
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b08:	230b      	movs	r3, #11
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4822      	ldr	r0, [pc, #136]	@ (8000b9c <HAL_ETH_MspInit+0x170>)
 8000b14:	f000 fed4 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b18:	2386      	movs	r3, #134	@ 0x86
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	@ (8000ba0 <HAL_ETH_MspInit+0x174>)
 8000b34:	f000 fec4 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4a:	230b      	movs	r3, #11
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <HAL_ETH_MspInit+0x178>)
 8000b56:	f000 feb3 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <HAL_ETH_MspInit+0x17c>)
 8000b78:	f000 fea2 	bl	80018c0 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	203d      	movs	r0, #61	@ 0x3d
 8000b82:	f000 fb18 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000b86:	203d      	movs	r0, #61	@ 0x3d
 8000b88:	f000 fb31 	bl	80011ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3738      	adds	r7, #56	@ 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40028000 	.word	0x40028000
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40021800 	.word	0x40021800

08000bac <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0a8      	sub	sp, #160	@ 0xa0
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2290      	movs	r2, #144	@ 0x90
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f01d fd58 	bl	801e672 <memset>
  if(hrng->Instance==RNG)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a11      	ldr	r2, [pc, #68]	@ (8000c0c <HAL_RNG_MspInit+0x60>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d11b      	bne.n	8000c04 <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fd19 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000be8:	f7ff fef6 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_RNG_MspInit+0x64>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_RNG_MspInit+0x64>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_RNG_MspInit+0x64>)
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000c04:	bf00      	nop
 8000c06:	37a0      	adds	r7, #160	@ 0xa0
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	50060800 	.word	0x50060800
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0ae      	sub	sp, #184	@ 0xb8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2290      	movs	r2, #144	@ 0x90
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f01d fd1c 	bl	801e672 <memset>
  if(huart->Instance==USART3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a22      	ldr	r2, [pc, #136]	@ (8000cc8 <HAL_UART_MspInit+0xb4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d13c      	bne.n	8000cbe <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fcde 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c5e:	f7ff febb 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a19      	ldr	r2, [pc, #100]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <HAL_UART_MspInit+0xb8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cac:	2307      	movs	r3, #7
 8000cae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <HAL_UART_MspInit+0xbc>)
 8000cba:	f000 fe01 	bl	80018c0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cbe:	bf00      	nop
 8000cc0:	37b8      	adds	r7, #184	@ 0xb8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020c00 	.word	0x40020c00

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2a:	f000 f925 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <_kill>:

int _kill(int pid, int sig)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d4c:	f01d fd92 	bl	801e874 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2216      	movs	r2, #22
 8000d54:	601a      	str	r2, [r3, #0]
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_exit>:

void _exit (int status)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffe7 	bl	8000d42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <_exit+0x12>

08000d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00a      	b.n	8000da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8a:	f3af 8000 	nop.w
 8000d8e:	4601      	mov	r1, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf0      	blt.n	8000d8a <_read+0x12>
  }

  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f01d fd12 	bl	801e874 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20080000 	.word	0x20080000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	2000062c 	.word	0x2000062c
 8000e84:	20003940 	.word	0x20003940

08000e88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ee4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb0:	f7ff ffea 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	@ (8000eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f01d fcd1 	bl	801e880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fc04 	bl	80006ea <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8000ef0:	0802f3d4 	.word	0x0802f3d4
  ldr r2, =_sbss
 8000ef4:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8000ef8:	20003940 	.word	0x20003940

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>

08000efe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f02:	2003      	movs	r0, #3
 8000f04:	f000 f94c 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f08:	200f      	movs	r0, #15
 8000f0a:	f000 f805 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0e:	f7ff fd69 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f967 	bl	800120a <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	f000 f92f 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000630 	.word	0x20000630

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000630 	.word	0x20000630

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	4313      	orrs	r3, r2
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <__NVIC_SetPriorityGrouping+0x40>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0000 	.word	0x05fa0000

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff3e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff31 	bl	8001064 <__NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffa2 	bl	800115c <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e086      	b.n	8001344 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800123c:	2b00      	cmp	r3, #0
 800123e:	d106      	bne.n	800124e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2223      	movs	r2, #35	@ 0x23
 8001244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fbef 	bl	8000a2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b3f      	ldr	r3, [pc, #252]	@ (800134c <HAL_ETH_Init+0x128>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a3e      	ldr	r2, [pc, #248]	@ (800134c <HAL_ETH_Init+0x128>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <HAL_ETH_Init+0x128>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001266:	4b3a      	ldr	r3, [pc, #232]	@ (8001350 <HAL_ETH_Init+0x12c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a39      	ldr	r2, [pc, #228]	@ (8001350 <HAL_ETH_Init+0x12c>)
 800126c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001270:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <HAL_ETH_Init+0x12c>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_ETH_Init+0x12c>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001280:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <HAL_ETH_Init+0x12c>)
 8001282:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800129a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800129c:	f7ff fe80 	bl	8000fa0 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012a2:	e011      	b.n	80012c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012a4:	f7ff fe7c 	bl	8000fa0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012b2:	d909      	bls.n	80012c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	22e0      	movs	r2, #224	@ 0xe0
 80012c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e03d      	b.n	8001344 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e4      	bne.n	80012a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f97a 	bl	80015d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fa25 	bl	8001730 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fa7b 	bl	80017e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	461a      	mov	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f9e3 	bl	80016c0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_ETH_Init+0x130>)
 8001318:	430b      	orrs	r3, r1
 800131a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800132e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2210      	movs	r2, #16
 800133e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	00020060 	.word	0x00020060

08001358 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <ETH_SetMACConfig+0x164>)
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7b9b      	ldrb	r3, [r3, #14]
 8001376:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	7c12      	ldrb	r2, [r2, #16]
 800137c:	2a00      	cmp	r2, #0
 800137e:	d102      	bne.n	8001386 <ETH_SetMACConfig+0x2e>
 8001380:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001384:	e000      	b.n	8001388 <ETH_SetMACConfig+0x30>
 8001386:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001388:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	7c52      	ldrb	r2, [r2, #17]
 800138e:	2a00      	cmp	r2, #0
 8001390:	d102      	bne.n	8001398 <ETH_SetMACConfig+0x40>
 8001392:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001396:	e000      	b.n	800139a <ETH_SetMACConfig+0x42>
 8001398:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800139a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7fdb      	ldrb	r3, [r3, #31]
 80013a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	7f92      	ldrb	r2, [r2, #30]
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	d102      	bne.n	80013be <ETH_SetMACConfig+0x66>
 80013b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013bc:	e000      	b.n	80013c0 <ETH_SetMACConfig+0x68>
 80013be:	2200      	movs	r2, #0
                        macconf->Speed |
 80013c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
 80013c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	791b      	ldrb	r3, [r3, #4]
 80013d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013de:	2a00      	cmp	r2, #0
 80013e0:	d102      	bne.n	80013e8 <ETH_SetMACConfig+0x90>
 80013e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e6:	e000      	b.n	80013ea <ETH_SetMACConfig+0x92>
 80013e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	7bdb      	ldrb	r3, [r3, #15]
 80013f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001400:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001402:	4313      	orrs	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fdcc 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001446:	2a00      	cmp	r2, #0
 8001448:	d101      	bne.n	800144e <ETH_SetMACConfig+0xf6>
 800144a:	2280      	movs	r2, #128	@ 0x80
 800144c:	e000      	b.n	8001450 <ETH_SetMACConfig+0xf8>
 800144e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001450:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001456:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800145e:	2a01      	cmp	r2, #1
 8001460:	d101      	bne.n	8001466 <ETH_SetMACConfig+0x10e>
 8001462:	2208      	movs	r2, #8
 8001464:	e000      	b.n	8001468 <ETH_SetMACConfig+0x110>
 8001466:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001468:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001470:	2a01      	cmp	r2, #1
 8001472:	d101      	bne.n	8001478 <ETH_SetMACConfig+0x120>
 8001474:	2204      	movs	r2, #4
 8001476:	e000      	b.n	800147a <ETH_SetMACConfig+0x122>
 8001478:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800147a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001482:	2a01      	cmp	r2, #1
 8001484:	d101      	bne.n	800148a <ETH_SetMACConfig+0x132>
 8001486:	2202      	movs	r2, #2
 8001488:	e000      	b.n	800148c <ETH_SetMACConfig+0x134>
 800148a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800148c:	4313      	orrs	r3, r2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fd87 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	619a      	str	r2, [r3, #24]
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	fd20810f 	.word	0xfd20810f

080014c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <ETH_SetDMAConfig+0x110>)
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7b1b      	ldrb	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetDMAConfig+0x2c>
 80014e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014ea:	e000      	b.n	80014ee <ETH_SetDMAConfig+0x2e>
 80014ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	7b5b      	ldrb	r3, [r3, #13]
 80014f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	7f52      	ldrb	r2, [r2, #29]
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d102      	bne.n	8001504 <ETH_SetDMAConfig+0x44>
 80014fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001502:	e000      	b.n	8001506 <ETH_SetDMAConfig+0x46>
 8001504:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001506:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7b9b      	ldrb	r3, [r3, #14]
 800150c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800150e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001514:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7f1b      	ldrb	r3, [r3, #28]
 800151a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800151c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7f9b      	ldrb	r3, [r3, #30]
 8001522:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001524:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001532:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001534:	4313      	orrs	r3, r2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fd2e 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001564:	461a      	mov	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001574:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800157a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001580:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001588:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800158a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001592:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001598:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff fcff 	bl	8000fb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	f8de3f23 	.word	0xf8de3f23

080015d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0a6      	sub	sp, #152	@ 0x98
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001616:	2300      	movs	r3, #0
 8001618:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001620:	2300      	movs	r3, #0
 8001622:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800163c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800164e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001652:	4619      	mov	r1, r3
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fe7f 	bl	8001358 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800168a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001690:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001694:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001696:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff05 	bl	80014c0 <ETH_SetDMAConfig>
}
 80016b6:	bf00      	nop
 80016b8:	3798      	adds	r7, #152	@ 0x98
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3305      	adds	r3, #5
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	3204      	adds	r2, #4
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <ETH_MACAddressConfig+0x68>)
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3303      	adds	r3, #3
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3302      	adds	r3, #2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3301      	adds	r3, #1
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <ETH_MACAddressConfig+0x6c>)
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40028040 	.word	0x40028040
 800172c:	40028044 	.word	0x40028044

08001730 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e03e      	b.n	80017bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68d9      	ldr	r1, [r3, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	3206      	adds	r2, #6
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d80c      	bhi.n	80017a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68d9      	ldr	r1, [r3, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	461a      	mov	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	e004      	b.n	80017aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d9bd      	bls.n	800173e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d4:	611a      	str	r2, [r3, #16]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e048      	b.n	8001882 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6919      	ldr	r1, [r3, #16]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800182c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	3212      	adds	r2, #18
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d80c      	bhi.n	8001872 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	e004      	b.n	800187c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d9b3      	bls.n	80017f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e175      	b.n	8001bcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8164 	bne.w	8001bc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d005      	beq.n	8001916 <HAL_GPIO_Init+0x56>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d130      	bne.n	8001978 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b03      	cmp	r3, #3
 8001982:	d017      	beq.n	80019b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80be 	beq.w	8001bc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b66      	ldr	r3, [pc, #408]	@ (8001be4 <HAL_GPIO_Init+0x324>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a65      	ldr	r2, [pc, #404]	@ (8001be4 <HAL_GPIO_Init+0x324>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <HAL_GPIO_Init+0x324>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a62:	4a61      	ldr	r2, [pc, #388]	@ (8001be8 <HAL_GPIO_Init+0x328>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a58      	ldr	r2, [pc, #352]	@ (8001bec <HAL_GPIO_Init+0x32c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d037      	beq.n	8001afe <HAL_GPIO_Init+0x23e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a57      	ldr	r2, [pc, #348]	@ (8001bf0 <HAL_GPIO_Init+0x330>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d031      	beq.n	8001afa <HAL_GPIO_Init+0x23a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <HAL_GPIO_Init+0x334>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02b      	beq.n	8001af6 <HAL_GPIO_Init+0x236>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a55      	ldr	r2, [pc, #340]	@ (8001bf8 <HAL_GPIO_Init+0x338>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d025      	beq.n	8001af2 <HAL_GPIO_Init+0x232>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a54      	ldr	r2, [pc, #336]	@ (8001bfc <HAL_GPIO_Init+0x33c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x22e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a53      	ldr	r2, [pc, #332]	@ (8001c00 <HAL_GPIO_Init+0x340>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x22a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	@ (8001c04 <HAL_GPIO_Init+0x344>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a51      	ldr	r2, [pc, #324]	@ (8001c08 <HAL_GPIO_Init+0x348>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x222>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a50      	ldr	r2, [pc, #320]	@ (8001c0c <HAL_GPIO_Init+0x34c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x21e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <HAL_GPIO_Init+0x350>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x21a>
 8001ad6:	2309      	movs	r3, #9
 8001ad8:	e012      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001ada:	230a      	movs	r3, #10
 8001adc:	e010      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001ade:	2308      	movs	r3, #8
 8001ae0:	e00e      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00c      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e00a      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001aea:	2305      	movs	r3, #5
 8001aec:	e008      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x240>
 8001afe:	2300      	movs	r3, #0
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b10:	4935      	ldr	r1, [pc, #212]	@ (8001be8 <HAL_GPIO_Init+0x328>)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b42:	4a34      	ldr	r2, [pc, #208]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b6c:	4a29      	ldr	r2, [pc, #164]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b72:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b96:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <HAL_GPIO_Init+0x354>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	f67f ae86 	bls.w	80018e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3724      	adds	r7, #36	@ 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40013800 	.word	0x40013800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40021400 	.word	0x40021400
 8001c04:	40021800 	.word	0x40021800
 8001c08:	40021c00 	.word	0x40021c00
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40022400 	.word	0x40022400
 8001c14:	40013c00 	.word	0x40013c00

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7a:	f7ff f991 	bl	8000fa0 <HAL_GetTick>
 8001c7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c80:	e009      	b.n	8001c96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c82:	f7ff f98d 	bl	8000fa0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c90:	d901      	bls.n	8001c96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e022      	b.n	8001cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb0:	f7ff f976 	bl	8000fa0 <HAL_GetTick>
 8001cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cb6:	e009      	b.n	8001ccc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cb8:	f7ff f972 	bl	8000fa0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cc6:	d901      	bls.n	8001ccc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e007      	b.n	8001cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cd8:	d1ee      	bne.n	8001cb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e29b      	b.n	800223a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d10:	4b96      	ldr	r3, [pc, #600]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d00c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1c:	4b93      	ldr	r3, [pc, #588]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d112      	bne.n	8001d4e <HAL_RCC_OscConfig+0x62>
 8001d28:	4b90      	ldr	r3, [pc, #576]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d34:	d10b      	bne.n	8001d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d36:	4b8d      	ldr	r3, [pc, #564]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d06c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x130>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d168      	bne.n	8001e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e275      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x7a>
 8001d58:	4b84      	ldr	r3, [pc, #528]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a83      	ldr	r2, [pc, #524]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e02e      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x9c>
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7e      	ldr	r2, [pc, #504]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0xc0>
 8001d92:	4b76      	ldr	r3, [pc, #472]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a75      	ldr	r2, [pc, #468]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b73      	ldr	r3, [pc, #460]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a72      	ldr	r2, [pc, #456]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd8>
 8001dac:	4b6f      	ldr	r3, [pc, #444]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b6c      	ldr	r3, [pc, #432]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8e8 	bl	8000fa0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f8e4 	bl	8000fa0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	@ 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e229      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b61      	ldr	r3, [pc, #388]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xe8>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8d4 	bl	8000fa0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f8d0 	bl	8000fa0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	@ 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e215      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b57      	ldr	r3, [pc, #348]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x110>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d069      	beq.n	8001efe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2a:	4b50      	ldr	r3, [pc, #320]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x190>
 8001e42:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x17a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1e9      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	493d      	ldr	r1, [pc, #244]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e040      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a38      	ldr	r2, [pc, #224]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f886 	bl	8000fa0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f882 	bl	8000fa0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4929      	ldr	r1, [pc, #164]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f862 	bl	8000fa0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f85e 	bl	8000fa0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1a3      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d038      	beq.n	8001f7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f83f 	bl	8000fa0 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff f83b 	bl	8000fa0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e180      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x23a>
 8001f44:	e01a      	b.n	8001f7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f4a:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff f825 	bl	8000fa0 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7ff f821 	bl	8000fa0 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d903      	bls.n	8001f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e166      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
 8001f6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b92      	ldr	r3, [pc, #584]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a4 	beq.w	80020d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b8c      	ldr	r3, [pc, #560]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a88      	ldr	r2, [pc, #544]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b86      	ldr	r3, [pc, #536]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb2:	4b83      	ldr	r3, [pc, #524]	@ (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fbe:	4b80      	ldr	r3, [pc, #512]	@ (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a7f      	ldr	r2, [pc, #508]	@ (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7fe ffe9 	bl	8000fa0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7fe ffe5 	bl	8000fa0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	@ 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e12a      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <HAL_RCC_OscConfig+0x4d4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x31a>
 8001ff8:	4b70      	ldr	r3, [pc, #448]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4a6f      	ldr	r2, [pc, #444]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	@ 0x70
 8002004:	e02d      	b.n	8002062 <HAL_RCC_OscConfig+0x376>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x33c>
 800200e:	4b6b      	ldr	r3, [pc, #428]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002012:	4a6a      	ldr	r2, [pc, #424]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	@ 0x70
 800201a:	4b68      	ldr	r3, [pc, #416]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201e:	4a67      	ldr	r2, [pc, #412]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	@ 0x70
 8002026:	e01c      	b.n	8002062 <HAL_RCC_OscConfig+0x376>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x35e>
 8002030:	4b62      	ldr	r3, [pc, #392]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002034:	4a61      	ldr	r2, [pc, #388]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6713      	str	r3, [r2, #112]	@ 0x70
 800203c:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	@ 0x70
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x376>
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a5b      	ldr	r2, [pc, #364]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
 8002056:	4b59      	ldr	r3, [pc, #356]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205a:	4a58      	ldr	r2, [pc, #352]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7fe ff99 	bl	8000fa0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe ff95 	bl	8000fa0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0d8      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCC_OscConfig+0x386>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7fe ff83 	bl	8000fa0 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe ff7f 	bl	8000fa0 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0c2      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a3c      	ldr	r2, [pc, #240]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80ae 	beq.w	8002238 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d06d      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d14b      	bne.n	8002188 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b32      	ldr	r3, [pc, #200]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a31      	ldr	r2, [pc, #196]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe ff50 	bl	8000fa0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ff4c 	bl	8000fa0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e091      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	491b      	ldr	r1, [pc, #108]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a18      	ldr	r2, [pc, #96]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ff1e 	bl	8000fa0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe ff1a 	bl	8000fa0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e05f      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x47c>
 8002186:	e057      	b.n	8002238 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 800218e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ff04 	bl	8000fa0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe ff00 	bl	8000fa0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x4b0>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x54c>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <HAL_RCC_OscConfig+0x558>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d030      	beq.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d129      	bne.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d122      	bne.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d119      	bne.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d10f      	bne.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4965      	ldr	r1, [pc, #404]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a52      	ldr	r2, [pc, #328]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7fe fe30 	bl	8000fa0 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe fe2c 	bl	8000fa0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	4922      	ldr	r1, [pc, #136]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <HAL_RCC_ClockConfig+0x1cc>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_RCC_ClockConfig+0x1d0>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <HAL_RCC_ClockConfig+0x1d4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fd8c 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00
 8002410:	40023800 	.word	0x40023800
 8002414:	080223a4 	.word	0x080223a4
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002424:	b090      	sub	sp, #64	@ 0x40
 8002426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	@ 0x34
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002430:	2300      	movs	r3, #0
 8002432:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002438:	4b59      	ldr	r3, [pc, #356]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d00d      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x40>
 8002444:	2b08      	cmp	r3, #8
 8002446:	f200 80a1 	bhi.w	800258c <HAL_RCC_GetSysClockFreq+0x16c>
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x34>
 800244e:	2b04      	cmp	r3, #4
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x3a>
 8002452:	e09b      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002456:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002458:	e09b      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245a:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800245c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800245e:	e098      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4b4f      	ldr	r3, [pc, #316]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800246a:	4b4d      	ldr	r3, [pc, #308]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002476:	4b4a      	ldr	r3, [pc, #296]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	099b      	lsrs	r3, r3, #6
 800247c:	2200      	movs	r2, #0
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	627a      	str	r2, [r7, #36]	@ 0x24
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002488:	2100      	movs	r1, #0
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800248c:	fb03 f201 	mul.w	r2, r3, r1
 8002490:	2300      	movs	r3, #0
 8002492:	fb00 f303 	mul.w	r3, r0, r3
 8002496:	4413      	add	r3, r2
 8002498:	4a43      	ldr	r2, [pc, #268]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800249a:	fba0 1202 	umull	r1, r2, r0, r2
 800249e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a0:	460a      	mov	r2, r1
 80024a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024a6:	4413      	add	r3, r2
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ac:	2200      	movs	r2, #0
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024ba:	f7fd ff29 	bl	8000310 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4613      	mov	r3, r2
 80024c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024c6:	e053      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c8:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	2200      	movs	r2, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	617a      	str	r2, [r7, #20]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024da:	f04f 0b00 	mov.w	fp, #0
 80024de:	4652      	mov	r2, sl
 80024e0:	465b      	mov	r3, fp
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	0159      	lsls	r1, r3, #5
 80024ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f0:	0150      	lsls	r0, r2, #5
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	ebb2 080a 	subs.w	r8, r2, sl
 80024fa:	eb63 090b 	sbc.w	r9, r3, fp
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800250a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800250e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002512:	ebb2 0408 	subs.w	r4, r2, r8
 8002516:	eb63 0509 	sbc.w	r5, r3, r9
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	00eb      	lsls	r3, r5, #3
 8002524:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002528:	00e2      	lsls	r2, r4, #3
 800252a:	4614      	mov	r4, r2
 800252c:	461d      	mov	r5, r3
 800252e:	eb14 030a 	adds.w	r3, r4, sl
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	eb45 030b 	adc.w	r3, r5, fp
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002546:	4629      	mov	r1, r5
 8002548:	028b      	lsls	r3, r1, #10
 800254a:	4621      	mov	r1, r4
 800254c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002550:	4621      	mov	r1, r4
 8002552:	028a      	lsls	r2, r1, #10
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255a:	2200      	movs	r2, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002564:	f7fd fed4 	bl	8000310 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800258e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002594:	4618      	mov	r0, r3
 8002596:	3740      	adds	r7, #64	@ 0x40
 8002598:	46bd      	mov	sp, r7
 800259a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	017d7840 	.word	0x017d7840

080025ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff0 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	@ (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	080223b4 	.word	0x080223b4

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffdc 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0b5b      	lsrs	r3, r3, #13
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	@ (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	080223b4 	.word	0x080223b4

08002614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800263c:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a68      	ldr	r2, [pc, #416]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002646:	6093      	str	r3, [r2, #8]
 8002648:	4b66      	ldr	r3, [pc, #408]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002650:	4964      	ldr	r1, [pc, #400]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d017      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800266e:	4b5d      	ldr	r3, [pc, #372]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002674:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	4959      	ldr	r1, [pc, #356]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d017      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026aa:	4b4e      	ldr	r3, [pc, #312]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	494a      	ldr	r1, [pc, #296]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 808b 	beq.w	800280e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b3a      	ldr	r3, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	@ 0x40
 8002704:	4b37      	ldr	r3, [pc, #220]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002710:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a34      	ldr	r2, [pc, #208]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe fc40 	bl	8000fa0 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002724:	f7fe fc3c 	bl	8000fa0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e38f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002736:	4b2c      	ldr	r3, [pc, #176]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002742:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800274a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d035      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d02e      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002760:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002768:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800276a:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002774:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002776:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277a:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002780:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002782:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d114      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fc04 	bl	8000fa0 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe fc00 	bl	8000fa0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e351      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027ca:	d111      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027da:	400b      	ands	r3, r1
 80027dc:	4901      	ldr	r1, [pc, #4]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
 80027e2:	e00b      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
 80027ec:	0ffffcff 	.word	0x0ffffcff
 80027f0:	4bac      	ldr	r3, [pc, #688]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4aab      	ldr	r2, [pc, #684]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80027fa:	6093      	str	r3, [r2, #8]
 80027fc:	4ba9      	ldr	r3, [pc, #676]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002808:	49a6      	ldr	r1, [pc, #664]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280a:	4313      	orrs	r3, r2
 800280c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800281a:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002820:	4aa0      	ldr	r2, [pc, #640]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002826:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800282a:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	499b      	ldr	r1, [pc, #620]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002848:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002856:	4993      	ldr	r1, [pc, #588]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286a:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002870:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002878:	498a      	ldr	r1, [pc, #552]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288c:	4b85      	ldr	r3, [pc, #532]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289a:	4982      	ldr	r1, [pc, #520]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ae:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4979      	ldr	r1, [pc, #484]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d0:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028de:	4971      	ldr	r1, [pc, #452]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f2:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f023 020c 	bic.w	r2, r3, #12
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002900:	4968      	ldr	r1, [pc, #416]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002914:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	4960      	ldr	r1, [pc, #384]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002936:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002944:	4957      	ldr	r1, [pc, #348]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002958:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002966:	494f      	ldr	r1, [pc, #316]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800297a:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002988:	4946      	ldr	r1, [pc, #280]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800299c:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029aa:	493e      	ldr	r1, [pc, #248]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029be:	4b39      	ldr	r3, [pc, #228]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	4935      	ldr	r1, [pc, #212]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029e0:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ee:	492d      	ldr	r1, [pc, #180]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a02:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a10:	4924      	ldr	r1, [pc, #144]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a42:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a48:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a50:	4914      	ldr	r1, [pc, #80]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a74:	490b      	ldr	r1, [pc, #44]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	4902      	ldr	r1, [pc, #8]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac4:	4986      	ldr	r1, [pc, #536]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ad8:	4b81      	ldr	r3, [pc, #516]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ade:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae8:	497d      	ldr	r1, [pc, #500]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d006      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d6 	beq.w	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b04:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a75      	ldr	r2, [pc, #468]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe fa46 	bl	8000fa0 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b18:	f7fe fa42 	bl	8000fa0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	@ 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e195      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d021      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11d      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b4a:	4b65      	ldr	r3, [pc, #404]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b58:	4b61      	ldr	r3, [pc, #388]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	0e1b      	lsrs	r3, r3, #24
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	019a      	lsls	r2, r3, #6
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	071b      	lsls	r3, r3, #28
 8002b7e:	4958      	ldr	r1, [pc, #352]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02e      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bb0:	d129      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bc0:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc6:	0f1b      	lsrs	r3, r3, #28
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	019a      	lsls	r2, r3, #6
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	493e      	ldr	r1, [pc, #248]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bee:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bf4:	f023 021f 	bic.w	r2, r3, #31
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4938      	ldr	r1, [pc, #224]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01d      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c18:	0e1b      	lsrs	r3, r3, #24
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c26:	0f1b      	lsrs	r3, r3, #28
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	019a      	lsls	r2, r3, #6
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	061b      	lsls	r3, r3, #24
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	071b      	lsls	r3, r3, #28
 8002c46:	4926      	ldr	r1, [pc, #152]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	019a      	lsls	r2, r3, #6
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	061b      	lsls	r3, r3, #24
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	071b      	lsls	r3, r3, #28
 8002c76:	491a      	ldr	r1, [pc, #104]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a17      	ldr	r2, [pc, #92]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8a:	f7fe f989 	bl	8000fa0 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c92:	f7fe f985 	bl	8000fa0 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b64      	cmp	r3, #100	@ 0x64
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0d8      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	f040 80ce 	bne.w	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc4:	f7fe f96c 	bl	8000fa0 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ccc:	f7fe f968 	bl	8000fa0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d904      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0bb      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cf0:	d0ec      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02e      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d12a      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d1a:	4b51      	ldr	r3, [pc, #324]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2e:	0f1b      	lsrs	r3, r3, #28
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	019a      	lsls	r2, r3, #6
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	071b      	lsls	r3, r3, #28
 8002d4e:	4944      	ldr	r1, [pc, #272]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d56:	4b42      	ldr	r3, [pc, #264]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	493d      	ldr	r1, [pc, #244]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d022      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d84:	d11d      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d86:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8c:	0e1b      	lsrs	r3, r3, #24
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d94:	4b32      	ldr	r3, [pc, #200]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	0f1b      	lsrs	r3, r3, #28
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	019a      	lsls	r2, r3, #6
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	431a      	orrs	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	061b      	lsls	r3, r3, #24
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	071b      	lsls	r3, r3, #28
 8002dba:	4929      	ldr	r1, [pc, #164]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d028      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dce:	4b24      	ldr	r3, [pc, #144]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ddc:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	019a      	lsls	r2, r3, #6
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	041b      	lsls	r3, r3, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	071b      	lsls	r3, r3, #28
 8002e02:	4917      	ldr	r1, [pc, #92]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e0a:	4b15      	ldr	r3, [pc, #84]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4911      	ldr	r1, [pc, #68]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0e      	ldr	r2, [pc, #56]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2c:	f7fe f8b8 	bl	8000fa0 <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e34:	f7fe f8b4 	bl	8000fa0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e007      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e52:	d1ef      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800

08002e64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e01c      	b.n	8002eb0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	795b      	ldrb	r3, [r3, #5]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fe90 	bl	8000bac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0204 	orr.w	r2, r2, #4
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e044      	b.n	8002f5c <HAL_RNG_GenerateRandomNumber+0xa4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	795b      	ldrb	r3, [r3, #5]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d133      	bne.n	8002f4a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe f85a 	bl	8000fa0 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002eee:	e018      	b.n	8002f22 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002ef0:	f7fe f856 	bl	8000fa0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d911      	bls.n	8002f22 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01c      	b.n	8002f5c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d1df      	bne.n	8002ef0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	715a      	strb	r2, [r3, #5]
 8002f48:	e004      	b.n	8002f54 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	711a      	strb	r2, [r3, #4]

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e040      	b.n	8002ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fe44 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fb16 	bl	80035dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8af 	bl	8003114 <UART_SetConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e01b      	b.n	8002ff8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb95 	bl	8003720 <UART_CheckIdleState>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003014:	2b20      	cmp	r3, #32
 8003016:	d177      	bne.n	8003108 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Transmit+0x24>
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e070      	b.n	800310a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2221      	movs	r2, #33	@ 0x21
 8003034:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003036:	f7fd ffb3 	bl	8000fa0 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003054:	d108      	bne.n	8003068 <HAL_UART_Transmit+0x68>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e003      	b.n	8003070 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003070:	e02f      	b.n	80030d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	@ 0x80
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fbf7 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e03b      	b.n	800310a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	3302      	adds	r3, #2
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e007      	b.n	80030c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1c9      	bne.n	8003072 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2140      	movs	r1, #64	@ 0x40
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbc1 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d004      	beq.n	80030fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e005      	b.n	800310a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4ba6      	ldr	r3, [pc, #664]	@ (80033d8 <UART_SetConfig+0x2c4>)
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	430b      	orrs	r3, r1
 800314a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a94      	ldr	r2, [pc, #592]	@ (80033dc <UART_SetConfig+0x2c8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d120      	bne.n	80031d2 <UART_SetConfig+0xbe>
 8003190:	4b93      	ldr	r3, [pc, #588]	@ (80033e0 <UART_SetConfig+0x2cc>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b03      	cmp	r3, #3
 800319c:	d816      	bhi.n	80031cc <UART_SetConfig+0xb8>
 800319e:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x90>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c1 	.word	0x080031c1
 80031ac:	080031bb 	.word	0x080031bb
 80031b0:	080031c7 	.word	0x080031c7
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e150      	b.n	800345c <UART_SetConfig+0x348>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e14d      	b.n	800345c <UART_SetConfig+0x348>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e14a      	b.n	800345c <UART_SetConfig+0x348>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e147      	b.n	800345c <UART_SetConfig+0x348>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e144      	b.n	800345c <UART_SetConfig+0x348>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a83      	ldr	r2, [pc, #524]	@ (80033e4 <UART_SetConfig+0x2d0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d132      	bne.n	8003242 <UART_SetConfig+0x12e>
 80031dc:	4b80      	ldr	r3, [pc, #512]	@ (80033e0 <UART_SetConfig+0x2cc>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d828      	bhi.n	800323c <UART_SetConfig+0x128>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <UART_SetConfig+0xdc>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003225 	.word	0x08003225
 80031f4:	0800323d 	.word	0x0800323d
 80031f8:	0800323d 	.word	0x0800323d
 80031fc:	0800323d 	.word	0x0800323d
 8003200:	08003231 	.word	0x08003231
 8003204:	0800323d 	.word	0x0800323d
 8003208:	0800323d 	.word	0x0800323d
 800320c:	0800323d 	.word	0x0800323d
 8003210:	0800322b 	.word	0x0800322b
 8003214:	0800323d 	.word	0x0800323d
 8003218:	0800323d 	.word	0x0800323d
 800321c:	0800323d 	.word	0x0800323d
 8003220:	08003237 	.word	0x08003237
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e118      	b.n	800345c <UART_SetConfig+0x348>
 800322a:	2302      	movs	r3, #2
 800322c:	77fb      	strb	r3, [r7, #31]
 800322e:	e115      	b.n	800345c <UART_SetConfig+0x348>
 8003230:	2304      	movs	r3, #4
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e112      	b.n	800345c <UART_SetConfig+0x348>
 8003236:	2308      	movs	r3, #8
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e10f      	b.n	800345c <UART_SetConfig+0x348>
 800323c:	2310      	movs	r3, #16
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e10c      	b.n	800345c <UART_SetConfig+0x348>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a68      	ldr	r2, [pc, #416]	@ (80033e8 <UART_SetConfig+0x2d4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d120      	bne.n	800328e <UART_SetConfig+0x17a>
 800324c:	4b64      	ldr	r3, [pc, #400]	@ (80033e0 <UART_SetConfig+0x2cc>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003252:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003256:	2b30      	cmp	r3, #48	@ 0x30
 8003258:	d013      	beq.n	8003282 <UART_SetConfig+0x16e>
 800325a:	2b30      	cmp	r3, #48	@ 0x30
 800325c:	d814      	bhi.n	8003288 <UART_SetConfig+0x174>
 800325e:	2b20      	cmp	r3, #32
 8003260:	d009      	beq.n	8003276 <UART_SetConfig+0x162>
 8003262:	2b20      	cmp	r3, #32
 8003264:	d810      	bhi.n	8003288 <UART_SetConfig+0x174>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <UART_SetConfig+0x15c>
 800326a:	2b10      	cmp	r3, #16
 800326c:	d006      	beq.n	800327c <UART_SetConfig+0x168>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x174>
 8003270:	2300      	movs	r3, #0
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e0f2      	b.n	800345c <UART_SetConfig+0x348>
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e0ef      	b.n	800345c <UART_SetConfig+0x348>
 800327c:	2304      	movs	r3, #4
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e0ec      	b.n	800345c <UART_SetConfig+0x348>
 8003282:	2308      	movs	r3, #8
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e0e9      	b.n	800345c <UART_SetConfig+0x348>
 8003288:	2310      	movs	r3, #16
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0e6      	b.n	800345c <UART_SetConfig+0x348>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	@ (80033ec <UART_SetConfig+0x2d8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d120      	bne.n	80032da <UART_SetConfig+0x1c6>
 8003298:	4b51      	ldr	r3, [pc, #324]	@ (80033e0 <UART_SetConfig+0x2cc>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032a4:	d013      	beq.n	80032ce <UART_SetConfig+0x1ba>
 80032a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032a8:	d814      	bhi.n	80032d4 <UART_SetConfig+0x1c0>
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	d009      	beq.n	80032c2 <UART_SetConfig+0x1ae>
 80032ae:	2b80      	cmp	r3, #128	@ 0x80
 80032b0:	d810      	bhi.n	80032d4 <UART_SetConfig+0x1c0>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <UART_SetConfig+0x1a8>
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d006      	beq.n	80032c8 <UART_SetConfig+0x1b4>
 80032ba:	e00b      	b.n	80032d4 <UART_SetConfig+0x1c0>
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e0cc      	b.n	800345c <UART_SetConfig+0x348>
 80032c2:	2302      	movs	r3, #2
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e0c9      	b.n	800345c <UART_SetConfig+0x348>
 80032c8:	2304      	movs	r3, #4
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0c6      	b.n	800345c <UART_SetConfig+0x348>
 80032ce:	2308      	movs	r3, #8
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e0c3      	b.n	800345c <UART_SetConfig+0x348>
 80032d4:	2310      	movs	r3, #16
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0c0      	b.n	800345c <UART_SetConfig+0x348>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a44      	ldr	r2, [pc, #272]	@ (80033f0 <UART_SetConfig+0x2dc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d125      	bne.n	8003330 <UART_SetConfig+0x21c>
 80032e4:	4b3e      	ldr	r3, [pc, #248]	@ (80033e0 <UART_SetConfig+0x2cc>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032f2:	d017      	beq.n	8003324 <UART_SetConfig+0x210>
 80032f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032f8:	d817      	bhi.n	800332a <UART_SetConfig+0x216>
 80032fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032fe:	d00b      	beq.n	8003318 <UART_SetConfig+0x204>
 8003300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003304:	d811      	bhi.n	800332a <UART_SetConfig+0x216>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <UART_SetConfig+0x1fe>
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	d006      	beq.n	800331e <UART_SetConfig+0x20a>
 8003310:	e00b      	b.n	800332a <UART_SetConfig+0x216>
 8003312:	2300      	movs	r3, #0
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e0a1      	b.n	800345c <UART_SetConfig+0x348>
 8003318:	2302      	movs	r3, #2
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e09e      	b.n	800345c <UART_SetConfig+0x348>
 800331e:	2304      	movs	r3, #4
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e09b      	b.n	800345c <UART_SetConfig+0x348>
 8003324:	2308      	movs	r3, #8
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	e098      	b.n	800345c <UART_SetConfig+0x348>
 800332a:	2310      	movs	r3, #16
 800332c:	77fb      	strb	r3, [r7, #31]
 800332e:	e095      	b.n	800345c <UART_SetConfig+0x348>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2f      	ldr	r2, [pc, #188]	@ (80033f4 <UART_SetConfig+0x2e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d125      	bne.n	8003386 <UART_SetConfig+0x272>
 800333a:	4b29      	ldr	r3, [pc, #164]	@ (80033e0 <UART_SetConfig+0x2cc>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003348:	d017      	beq.n	800337a <UART_SetConfig+0x266>
 800334a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800334e:	d817      	bhi.n	8003380 <UART_SetConfig+0x26c>
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003354:	d00b      	beq.n	800336e <UART_SetConfig+0x25a>
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335a:	d811      	bhi.n	8003380 <UART_SetConfig+0x26c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <UART_SetConfig+0x254>
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d006      	beq.n	8003374 <UART_SetConfig+0x260>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x26c>
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e076      	b.n	800345c <UART_SetConfig+0x348>
 800336e:	2302      	movs	r3, #2
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e073      	b.n	800345c <UART_SetConfig+0x348>
 8003374:	2304      	movs	r3, #4
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e070      	b.n	800345c <UART_SetConfig+0x348>
 800337a:	2308      	movs	r3, #8
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e06d      	b.n	800345c <UART_SetConfig+0x348>
 8003380:	2310      	movs	r3, #16
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e06a      	b.n	800345c <UART_SetConfig+0x348>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <UART_SetConfig+0x2e4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d138      	bne.n	8003402 <UART_SetConfig+0x2ee>
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <UART_SetConfig+0x2cc>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800339a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800339e:	d017      	beq.n	80033d0 <UART_SetConfig+0x2bc>
 80033a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033a4:	d82a      	bhi.n	80033fc <UART_SetConfig+0x2e8>
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033aa:	d00b      	beq.n	80033c4 <UART_SetConfig+0x2b0>
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b0:	d824      	bhi.n	80033fc <UART_SetConfig+0x2e8>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <UART_SetConfig+0x2aa>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ba:	d006      	beq.n	80033ca <UART_SetConfig+0x2b6>
 80033bc:	e01e      	b.n	80033fc <UART_SetConfig+0x2e8>
 80033be:	2300      	movs	r3, #0
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e04b      	b.n	800345c <UART_SetConfig+0x348>
 80033c4:	2302      	movs	r3, #2
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e048      	b.n	800345c <UART_SetConfig+0x348>
 80033ca:	2304      	movs	r3, #4
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e045      	b.n	800345c <UART_SetConfig+0x348>
 80033d0:	2308      	movs	r3, #8
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e042      	b.n	800345c <UART_SetConfig+0x348>
 80033d6:	bf00      	nop
 80033d8:	efff69f3 	.word	0xefff69f3
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40004400 	.word	0x40004400
 80033e8:	40004800 	.word	0x40004800
 80033ec:	40004c00 	.word	0x40004c00
 80033f0:	40005000 	.word	0x40005000
 80033f4:	40011400 	.word	0x40011400
 80033f8:	40007800 	.word	0x40007800
 80033fc:	2310      	movs	r3, #16
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	e02c      	b.n	800345c <UART_SetConfig+0x348>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a72      	ldr	r2, [pc, #456]	@ (80035d0 <UART_SetConfig+0x4bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d125      	bne.n	8003458 <UART_SetConfig+0x344>
 800340c:	4b71      	ldr	r3, [pc, #452]	@ (80035d4 <UART_SetConfig+0x4c0>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003416:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800341a:	d017      	beq.n	800344c <UART_SetConfig+0x338>
 800341c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003420:	d817      	bhi.n	8003452 <UART_SetConfig+0x33e>
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003426:	d00b      	beq.n	8003440 <UART_SetConfig+0x32c>
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342c:	d811      	bhi.n	8003452 <UART_SetConfig+0x33e>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <UART_SetConfig+0x326>
 8003432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003436:	d006      	beq.n	8003446 <UART_SetConfig+0x332>
 8003438:	e00b      	b.n	8003452 <UART_SetConfig+0x33e>
 800343a:	2300      	movs	r3, #0
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e00d      	b.n	800345c <UART_SetConfig+0x348>
 8003440:	2302      	movs	r3, #2
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e00a      	b.n	800345c <UART_SetConfig+0x348>
 8003446:	2304      	movs	r3, #4
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e007      	b.n	800345c <UART_SetConfig+0x348>
 800344c:	2308      	movs	r3, #8
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e004      	b.n	800345c <UART_SetConfig+0x348>
 8003452:	2310      	movs	r3, #16
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e001      	b.n	800345c <UART_SetConfig+0x348>
 8003458:	2310      	movs	r3, #16
 800345a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003464:	d15b      	bne.n	800351e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003466:	7ffb      	ldrb	r3, [r7, #31]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d828      	bhi.n	80034be <UART_SetConfig+0x3aa>
 800346c:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <UART_SetConfig+0x360>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003499 	.word	0x08003499
 8003478:	080034a1 	.word	0x080034a1
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034bf 	.word	0x080034bf
 8003484:	080034af 	.word	0x080034af
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034bf 	.word	0x080034bf
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034b7 	.word	0x080034b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7ff f894 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 800349c:	61b8      	str	r0, [r7, #24]
        break;
 800349e:	e013      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a0:	f7ff f8a4 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 80034a4:	61b8      	str	r0, [r7, #24]
        break;
 80034a6:	e00f      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a8:	4b4b      	ldr	r3, [pc, #300]	@ (80035d8 <UART_SetConfig+0x4c4>)
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e00c      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ae:	f7fe ffb7 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80034b2:	61b8      	str	r0, [r7, #24]
        break;
 80034b4:	e008      	b.n	80034c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ba:	61bb      	str	r3, [r7, #24]
        break;
 80034bc:	e004      	b.n	80034c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	77bb      	strb	r3, [r7, #30]
        break;
 80034c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d074      	beq.n	80035b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	085b      	lsrs	r3, r3, #1
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d916      	bls.n	8003518 <UART_SetConfig+0x404>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d212      	bcs.n	8003518 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f023 030f 	bic.w	r3, r3, #15
 80034fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	b29b      	uxth	r3, r3
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	b29a      	uxth	r2, r3
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	4313      	orrs	r3, r2
 800350c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	89fa      	ldrh	r2, [r7, #14]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	e04f      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	77bb      	strb	r3, [r7, #30]
 800351c:	e04c      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d828      	bhi.n	8003576 <UART_SetConfig+0x462>
 8003524:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <UART_SetConfig+0x418>)
 8003526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352a:	bf00      	nop
 800352c:	08003551 	.word	0x08003551
 8003530:	08003559 	.word	0x08003559
 8003534:	08003561 	.word	0x08003561
 8003538:	08003577 	.word	0x08003577
 800353c:	08003567 	.word	0x08003567
 8003540:	08003577 	.word	0x08003577
 8003544:	08003577 	.word	0x08003577
 8003548:	08003577 	.word	0x08003577
 800354c:	0800356f 	.word	0x0800356f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7ff f838 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8003554:	61b8      	str	r0, [r7, #24]
        break;
 8003556:	e013      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7ff f848 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 800355c:	61b8      	str	r0, [r7, #24]
        break;
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003560:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <UART_SetConfig+0x4c4>)
 8003562:	61bb      	str	r3, [r7, #24]
        break;
 8003564:	e00c      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003566:	f7fe ff5b 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 800356a:	61b8      	str	r0, [r7, #24]
        break;
 800356c:	e008      	b.n	8003580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003572:	61bb      	str	r3, [r7, #24]
        break;
 8003574:	e004      	b.n	8003580 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	77bb      	strb	r3, [r7, #30]
        break;
 800357e:	bf00      	nop
    }

    if (pclk != 0U)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d018      	beq.n	80035b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	085a      	lsrs	r2, r3, #1
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	441a      	add	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d909      	bls.n	80035b4 <UART_SetConfig+0x4a0>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a6:	d205      	bcs.n	80035b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e001      	b.n	80035b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40007c00 	.word	0x40007c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	00f42400 	.word	0x00f42400

080035dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036da:	d10a      	bne.n	80036f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b098      	sub	sp, #96	@ 0x60
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003730:	f7fd fc36 	bl	8000fa0 <HAL_GetTick>
 8003734:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d12e      	bne.n	80037a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f88c 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d021      	beq.n	80037a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003772:	653b      	str	r3, [r7, #80]	@ 0x50
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800377c:	647b      	str	r3, [r7, #68]	@ 0x44
 800377e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800378a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e6      	bne.n	800375e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e062      	b.n	8003868 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d149      	bne.n	8003844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f856 	bl	8003870 <UART_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d03c      	beq.n	8003844 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	623b      	str	r3, [r7, #32]
   return(result);
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e6      	bne.n	80037ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	60fb      	str	r3, [r7, #12]
   return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3308      	adds	r3, #8
 800381a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800381c:	61fa      	str	r2, [r7, #28]
 800381e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	617b      	str	r3, [r7, #20]
   return(result);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e011      	b.n	8003868 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3758      	adds	r7, #88	@ 0x58
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003880:	e04f      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003888:	d04b      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fd fb89 	bl	8000fa0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e04e      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d037      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d034      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d031      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d110      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f838 	bl	800394a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2208      	movs	r2, #8
 80038de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e029      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fc:	d111      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f81e 	bl	800394a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00f      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d0a0      	beq.n	8003882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800394a:	b480      	push	{r7}
 800394c:	b095      	sub	sp, #84	@ 0x54
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003970:	643b      	str	r3, [r7, #64]	@ 0x40
 8003972:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e6      	bne.n	8003952 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	61fb      	str	r3, [r7, #28]
   return(result);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d118      	bne.n	80039f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f023 0310 	bic.w	r3, r3, #16
 80039d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	613b      	str	r3, [r7, #16]
   return(result);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a06:	bf00      	nop
 8003a08:	3754      	adds	r7, #84	@ 0x54
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b19      	cmp	r3, #25
 8003a1e:	dc02      	bgt.n	8003a26 <mg_base64_encode_single+0x14>
    return c + 'A';
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3341      	adds	r3, #65	@ 0x41
 8003a24:	e011      	b.n	8003a4a <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b33      	cmp	r3, #51	@ 0x33
 8003a2a:	dc02      	bgt.n	8003a32 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3347      	adds	r3, #71	@ 0x47
 8003a30:	e00b      	b.n	8003a4a <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b3d      	cmp	r3, #61	@ 0x3d
 8003a36:	dc02      	bgt.n	8003a3e <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	e005      	b.n	8003a4a <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a42:	d101      	bne.n	8003a48 <mg_base64_encode_single+0x36>
 8003a44:	232b      	movs	r3, #43	@ 0x2b
 8003a46:	e000      	b.n	8003a4a <mg_base64_encode_single+0x38>
 8003a48:	232f      	movs	r3, #47	@ 0x2f
  }
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	dd05      	ble.n	8003a70 <mg_base64_decode_single+0x1a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b5a      	cmp	r3, #90	@ 0x5a
 8003a68:	dc02      	bgt.n	8003a70 <mg_base64_decode_single+0x1a>
    return c - 'A';
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3b41      	subs	r3, #65	@ 0x41
 8003a6e:	e022      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b60      	cmp	r3, #96	@ 0x60
 8003a74:	dd05      	ble.n	8003a82 <mg_base64_decode_single+0x2c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b7a      	cmp	r3, #122	@ 0x7a
 8003a7a:	dc02      	bgt.n	8003a82 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b47      	subs	r3, #71	@ 0x47
 8003a80:	e019      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a86:	dd05      	ble.n	8003a94 <mg_base64_decode_single+0x3e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b39      	cmp	r3, #57	@ 0x39
 8003a8c:	dc02      	bgt.n	8003a94 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	e010      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a98:	d101      	bne.n	8003a9e <mg_base64_decode_single+0x48>
    return 62;
 8003a9a:	233e      	movs	r3, #62	@ 0x3e
 8003a9c:	e00b      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8003aa2:	d101      	bne.n	8003aa8 <mg_base64_decode_single+0x52>
    return 63;
 8003aa4:	233f      	movs	r3, #63	@ 0x3f
 8003aa6:	e006      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b3d      	cmp	r3, #61	@ 0x3d
 8003aac:	d101      	bne.n	8003ab2 <mg_base64_decode_single+0x5c>
    return 64;
 8003aae:	2340      	movs	r3, #64	@ 0x40
 8003ab0:	e001      	b.n	8003ab6 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	4b38      	ldr	r3, [pc, #224]	@ (8003bbc <mg_base64_update+0xf8>)
 8003ada:	fba3 1302 	umull	r1, r3, r3, r2
 8003ade:	0859      	lsrs	r1, r3, #1
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	440b      	add	r3, r1
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d119      	bne.n	8003b24 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	089b      	lsrs	r3, r3, #2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff8b 	bl	8003a12 <mg_base64_encode_single>
 8003afc:	4601      	mov	r1, r0
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	b2ca      	uxtb	r2, r1
 8003b06:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3301      	adds	r3, #1
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	440b      	add	r3, r1
 8003b1a:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e046      	b.n	8003bb2 <mg_base64_update+0xee>
  } else if (rem == 1) {
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d11f      	bne.n	8003b6a <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff68 	bl	8003a12 <mg_base64_encode_single>
 8003b42:	4601      	mov	r1, r0
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	b2ca      	uxtb	r2, r1
 8003b4c:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	440b      	add	r3, r1
 8003b60:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e023      	b.n	8003bb2 <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff48 	bl	8003a12 <mg_base64_encode_single>
 8003b82:	4601      	mov	r1, r0
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2ca      	uxtb	r2, r1
 8003b8c:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff3c 	bl	8003a12 <mg_base64_encode_single>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b2ca      	uxtb	r2, r1
 8003baa:	701a      	strb	r2, [r3, #0]
    n++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
  }
  return n;
 8003bb2:	687b      	ldr	r3, [r7, #4]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	aaaaaaab 	.word	0xaaaaaaab

08003bc0 <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <mg_base64_final+0x24>
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff ff71 	bl	8003ac4 <mg_base64_update>
 8003be2:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d10a      	bne.n	8003c04 <mg_base64_final+0x44>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8003bf4:	e006      	b.n	8003c04 <mg_base64_final+0x44>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	603a      	str	r2, [r7, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4413      	add	r3, r2
 8003c00:	223d      	movs	r2, #61	@ 0x3d
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f3      	bne.n	8003bf6 <mg_base64_final+0x36>
  to[n] = '\0';
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
  return n;
 8003c18:	683b      	ldr	r3, [r7, #0]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <mg_base64_encode+0x1e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <mg_base64_encode+0x90>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0858      	lsrs	r0, r3, #1
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <mg_base64_encode+0x90>)
 8003c50:	fba3 2301 	umull	r2, r3, r3, r1
 8003c54:	085a      	lsrs	r2, r3, #1
 8003c56:	4613      	mov	r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4413      	add	r3, r2
 8003c5c:	1aca      	subs	r2, r1, r3
 8003c5e:	2a00      	cmp	r2, #0
 8003c60:	d001      	beq.n	8003c66 <mg_base64_encode+0x42>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <mg_base64_encode+0x44>
 8003c66:	2300      	movs	r3, #0
 8003c68:	4403      	add	r3, r0
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d201      	bcs.n	8003c78 <mg_base64_encode+0x54>
 8003c74:	2300      	movs	r3, #0
 8003c76:	e019      	b.n	8003cac <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00c      	b.n	8003c98 <mg_base64_encode+0x74>
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4413      	add	r3, r2
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff1a 	bl	8003ac4 <mg_base64_update>
 8003c90:	6138      	str	r0, [r7, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3ee      	bcc.n	8003c7e <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8003ca0:	6939      	ldr	r1, [r7, #16]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff8c 	bl	8003bc0 <mg_base64_final>
 8003ca8:	6138      	str	r0, [r7, #16]
  return len;
 8003caa:	693b      	ldr	r3, [r7, #16]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	aaaaaaab 	.word	0xaaaaaaab

08003cb8 <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <mg_base64_decode+0x1c>
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	e000      	b.n	8003cd6 <mg_base64_decode+0x1e>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	089a      	lsrs	r2, r3, #2
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d378      	bcc.n	8003de0 <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 8003cee:	e068      	b.n	8003dc2 <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff feae 	bl	8003a56 <mg_base64_decode_single>
 8003cfa:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fea7 	bl	8003a56 <mg_base64_decode_single>
 8003d08:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fea0 	bl	8003a56 <mg_base64_decode_single>
 8003d16:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3303      	adds	r3, #3
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fe99 	bl	8003a56 <mg_base64_decode_single>
 8003d24:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d05b      	beq.n	8003de4 <mg_base64_decode+0x12c>
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db58      	blt.n	8003de4 <mg_base64_decode+0x12c>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	d055      	beq.n	8003de4 <mg_base64_decode+0x12c>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db52      	blt.n	8003de4 <mg_base64_decode+0x12c>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db4f      	blt.n	8003de4 <mg_base64_decode+0x12c>
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db4c      	blt.n	8003de4 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	b25a      	sxtb	r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	111b      	asrs	r3, r3, #4
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b259      	sxtb	r1, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	b2ca      	uxtb	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b3d      	cmp	r3, #61	@ 0x3d
 8003d72:	d023      	beq.n	8003dbc <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	b25a      	sxtb	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	109b      	asrs	r3, r3, #2
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b259      	sxtb	r1, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b2ca      	uxtb	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3303      	adds	r3, #3
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b3d      	cmp	r3, #61	@ 0x3d
 8003d9c:	d00e      	beq.n	8003dbc <mg_base64_decode+0x104>
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	019b      	lsls	r3, r3, #6
 8003da4:	b25a      	sxtb	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	4313      	orrs	r3, r2
 8003dac:	b259      	sxtb	r1, r3
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	b2ca      	uxtb	r2, r1
 8003dba:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <mg_base64_decode+0x11a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d88e      	bhi.n	8003cf0 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	4413      	add	r3, r2
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
  return len;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	e009      	b.n	8003df4 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <mg_base64_decode+0x12e>
      goto fail;
 8003de4:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d002      	beq.n	8003df2 <mg_base64_decode+0x13a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
  return 0;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e002      	b.n	8003e12 <mg_dns_free+0x16>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1f7      	bne.n	8003e0c <mg_dns_free+0x10>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]
  free(d);
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f01a f973 	bl	801e110 <free>
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	332c      	adds	r3, #44	@ 0x2c
 8003e40:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e00d      	b.n	8003e66 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d103      	bne.n	8003e62 <mg_resolve_cancel+0x30>
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	6938      	ldr	r0, [r7, #16]
 8003e5e:	f7ff ffcd 	bl	8003dfc <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <mg_resolve_cancel+0x18>
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <mg_call+0x24>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <mg_call+0x38>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	4798      	blx	r3
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8003eb8:	b40e      	push	{r1, r2, r3}
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b095      	sub	sp, #84	@ 0x54
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8003ec2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ec6:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	f107 0010 	add.w	r0, r7, #16
 8003ed0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ed2:	2140      	movs	r1, #64	@ 0x40
 8003ed4:	f008 ff5c 	bl	800cd90 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8003ed8:	4b14      	ldr	r3, [pc, #80]	@ (8003f2c <mg_error+0x74>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dd0f      	ble.n	8003f00 <mg_error+0x48>
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <mg_error+0x78>)
 8003ee2:	f44f 72d3 	mov.w	r2, #422	@ 0x1a6
 8003ee6:	4913      	ldr	r1, [pc, #76]	@ (8003f34 <mg_error+0x7c>)
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f005 f95f 	bl	80091ac <mg_log_prefix>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	480f      	ldr	r0, [pc, #60]	@ (8003f38 <mg_error+0x80>)
 8003efc:	f005 f9a6 	bl	800924c <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8003f06:	f043 0320 	orr.w	r3, r3, #32
 8003f0a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8003f0e:	f107 0310 	add.w	r3, r7, #16
 8003f12:	461a      	mov	r2, r3
 8003f14:	2100      	movs	r1, #0
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffad 	bl	8003e76 <mg_call>
}
 8003f1c:	bf00      	nop
 8003f1e:	3754      	adds	r7, #84	@ 0x54
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f26:	b003      	add	sp, #12
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000254 	.word	0x20000254
 8003f30:	08022820 	.word	0x08022820
 8003f34:	0801f338 	.word	0x0801f338
 8003f38:	0801f47c 	.word	0x0801f47c

08003f3c <is_digit>:
#endif




static bool is_digit(int c) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f48:	dd04      	ble.n	8003f54 <is_digit+0x18>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b39      	cmp	r3, #57	@ 0x39
 8003f4e:	dc01      	bgt.n	8003f54 <is_digit+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <is_digit+0x1a>
 8003f54:	2300      	movs	r3, #0
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  int n = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	617a      	str	r2, [r7, #20]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	2265      	movs	r2, #101	@ 0x65
 8003f86:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	617a      	str	r2, [r7, #20]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003fa0:	dd01      	ble.n	8003fa6 <addexp+0x3e>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e057      	b.n	8004056 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	dc07      	bgt.n	8003fbc <addexp+0x54>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	617a      	str	r2, [r7, #20]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	2230      	movs	r2, #48	@ 0x30
 8003fba:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b63      	cmp	r3, #99	@ 0x63
 8003fc0:	dd1c      	ble.n	8003ffc <addexp+0x94>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <addexp+0xfc>)
 8003fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8003fca:	1152      	asrs	r2, r2, #5
 8003fcc:	17db      	asrs	r3, r3, #31
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	6179      	str	r1, [r7, #20]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	440b      	add	r3, r1
 8003fde:	3230      	adds	r2, #48	@ 0x30
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8004064 <addexp+0xfc>)
 8003fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8003fec:	1151      	asrs	r1, r2, #5
 8003fee:	17da      	asrs	r2, r3, #31
 8003ff0:	1a8a      	subs	r2, r1, r2
 8003ff2:	2164      	movs	r1, #100	@ 0x64
 8003ff4:	fb01 f202 	mul.w	r2, r1, r2
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b09      	cmp	r3, #9
 8004000:	dd1d      	ble.n	800403e <addexp+0xd6>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <addexp+0x100>)
 8004006:	fb82 1203 	smull	r1, r2, r2, r3
 800400a:	1092      	asrs	r2, r2, #2
 800400c:	17db      	asrs	r3, r3, #31
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	b2da      	uxtb	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	6179      	str	r1, [r7, #20]
 8004018:	4619      	mov	r1, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	440b      	add	r3, r1
 800401e:	3230      	adds	r2, #48	@ 0x30
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <addexp+0x100>)
 8004028:	fb83 1302 	smull	r1, r3, r3, r2
 800402c:	1099      	asrs	r1, r3, #2
 800402e:	17d3      	asrs	r3, r2, #31
 8004030:	1ac9      	subs	r1, r1, r3
 8004032:	460b      	mov	r3, r1
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1c59      	adds	r1, r3, #1
 8004046:	6179      	str	r1, [r7, #20]
 8004048:	4619      	mov	r1, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	440b      	add	r3, r1
 800404e:	3230      	adds	r2, #48	@ 0x30
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
  return n;
 8004054:	697b      	ldr	r3, [r7, #20]
}
 8004056:	4618      	mov	r0, r3
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	51eb851f 	.word	0x51eb851f
 8004068:	66666667 	.word	0x66666667

0800406c <xisinf>:

static int xisinf(double x) {
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8004076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800407a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800407e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	000a      	movs	r2, r1
 800408c:	2300      	movs	r3, #0
 800408e:	4613      	mov	r3, r2
 8004090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004094:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <xisinf+0x4c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d106      	bne.n	80040a8 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 800409a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800409e:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <xisinf+0x3c>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <xisinf+0x3e>
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	7ff00000 	.word	0x7ff00000

080040bc <xisnan>:

static int xisnan(double x) {
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 80040c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80040ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	000a      	movs	r2, r1
 80040dc:	2300      	movs	r3, #0
 80040de:	4613      	mov	r3, r2
 80040e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80040e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e8:	4613      	mov	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80040f4:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80040f6:	4a06      	ldr	r2, [pc, #24]	@ (8004110 <xisnan+0x54>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bf8c      	ite	hi
 80040fc:	2301      	movhi	r3, #1
 80040fe:	2300      	movls	r3, #0
 8004100:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	7ff00000 	.word	0x7ff00000
 8004114:	00000000 	.word	0x00000000

08004118 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b0a0      	sub	sp, #128	@ 0x80
 800411c:	af02      	add	r7, sp, #8
 800411e:	6178      	str	r0, [r7, #20]
 8004120:	6139      	str	r1, [r7, #16]
 8004122:	ed87 0b02 	vstr	d0, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	673b      	str	r3, [r7, #112]	@ 0x70
 800412e:	2300      	movs	r3, #0
 8004130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004132:	2300      	movs	r3, #0
 8004134:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8004136:	ed97 7b02 	vldr	d7, [r7, #8]
 800413a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	d107      	bne.n	8004154 <mg_dtoa+0x3c>
 8004144:	4bb8      	ldr	r3, [pc, #736]	@ (8004428 <mg_dtoa+0x310>)
 8004146:	4ab9      	ldr	r2, [pc, #740]	@ (800442c <mg_dtoa+0x314>)
 8004148:	6939      	ldr	r1, [r7, #16]
 800414a:	6978      	ldr	r0, [r7, #20]
 800414c:	f008 fe48 	bl	800cde0 <mg_snprintf>
 8004150:	4603      	mov	r3, r0
 8004152:	e28d      	b.n	8004670 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8004154:	ed97 0b02 	vldr	d0, [r7, #8]
 8004158:	f7ff ff88 	bl	800406c <xisinf>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <mg_dtoa+0x6c>
 8004162:	ed97 7b02 	vldr	d7, [r7, #8]
 8004166:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	dd01      	ble.n	8004174 <mg_dtoa+0x5c>
 8004170:	4baf      	ldr	r3, [pc, #700]	@ (8004430 <mg_dtoa+0x318>)
 8004172:	e000      	b.n	8004176 <mg_dtoa+0x5e>
 8004174:	4baf      	ldr	r3, [pc, #700]	@ (8004434 <mg_dtoa+0x31c>)
 8004176:	4aad      	ldr	r2, [pc, #692]	@ (800442c <mg_dtoa+0x314>)
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	6978      	ldr	r0, [r7, #20]
 800417c:	f008 fe30 	bl	800cde0 <mg_snprintf>
 8004180:	4603      	mov	r3, r0
 8004182:	e275      	b.n	8004670 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8004184:	ed97 0b02 	vldr	d0, [r7, #8]
 8004188:	f7ff ff98 	bl	80040bc <xisnan>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <mg_dtoa+0x8a>
 8004192:	4ba9      	ldr	r3, [pc, #676]	@ (8004438 <mg_dtoa+0x320>)
 8004194:	4aa5      	ldr	r2, [pc, #660]	@ (800442c <mg_dtoa+0x314>)
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	6978      	ldr	r0, [r7, #20]
 800419a:	f008 fe21 	bl	800cde0 <mg_snprintf>
 800419e:	4603      	mov	r3, r0
 80041a0:	e266      	b.n	8004670 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 80041a2:	ed97 7b02 	vldr	d7, [r7, #8]
 80041a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80041aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ae:	d50d      	bpl.n	80041cc <mg_dtoa+0xb4>
 80041b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80041b4:	eeb1 7b47 	vneg.f64	d7, d7
 80041b8:	ed87 7b02 	vstr	d7, [r7, #8]
 80041bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	673a      	str	r2, [r7, #112]	@ 0x70
 80041c2:	3378      	adds	r3, #120	@ 0x78
 80041c4:	443b      	add	r3, r7
 80041c6:	222d      	movs	r2, #45	@ 0x2d
 80041c8:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 80041cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <mg_dtoa+0x10c>
    mul = 1.0;
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	4b97      	ldr	r3, [pc, #604]	@ (800443c <mg_dtoa+0x324>)
 80041e0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80041e4:	e007      	b.n	80041f6 <mg_dtoa+0xde>
 80041e6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80041ea:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80041ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041f2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80041f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80041fa:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80041fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	db12      	blt.n	800422e <mg_dtoa+0x116>
 8004208:	ed97 5b02 	vldr	d5, [r7, #8]
 800420c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8004210:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004214:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004218:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004220:	dae1      	bge.n	80041e6 <mg_dtoa+0xce>
 8004222:	e00d      	b.n	8004240 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 8004224:	a37e      	add	r3, pc, #504	@ (adr r3, 8004420 <mg_dtoa+0x308>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800422e:	e007      	b.n	8004240 <mg_dtoa+0x128>
 8004230:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8004234:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8004238:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800423c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8004240:	ed97 7b02 	vldr	d7, [r7, #8]
 8004244:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004248:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d80c      	bhi.n	800426c <mg_dtoa+0x154>
 8004252:	ed97 5b02 	vldr	d5, [r7, #8]
 8004256:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800425a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800425e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004262:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426a:	d9e1      	bls.n	8004230 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 800426c:	2300      	movs	r3, #0
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004270:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8004274:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8004278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800427c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8004280:	e00a      	b.n	8004298 <mg_dtoa+0x180>
 8004282:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8004286:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800428a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800428e:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8004292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004294:	3301      	adds	r3, #1
 8004296:	677b      	str	r3, [r7, #116]	@ 0x74
 8004298:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	dbf0      	blt.n	8004282 <mg_dtoa+0x16a>

  d += t;
 80042a0:	ed97 6b02 	vldr	d6, [r7, #8]
 80042a4:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80042a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042ac:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	4b61      	ldr	r3, [pc, #388]	@ (800443c <mg_dtoa+0x324>)
 80042b6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 80042ba:	e00a      	b.n	80042d2 <mg_dtoa+0x1ba>
 80042bc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80042c0:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80042c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80042c8:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80042cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ce:	3301      	adds	r3, #1
 80042d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80042d6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80042da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	db0c      	blt.n	80042fe <mg_dtoa+0x1e6>
 80042e4:	ed97 5b02 	vldr	d5, [r7, #8]
 80042e8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80042ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80042f0:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80042f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	dade      	bge.n	80042bc <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80042fe:	e00a      	b.n	8004316 <mg_dtoa+0x1fe>
 8004300:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8004304:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8004308:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800430c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8004310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004312:	3b01      	subs	r3, #1
 8004314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004316:	ed97 7b02 	vldr	d7, [r7, #8]
 800431a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800431e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	d50c      	bpl.n	8004342 <mg_dtoa+0x22a>
 8004328:	ed97 5b02 	vldr	d5, [r7, #8]
 800432c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8004330:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004334:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004338:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d4de      	bmi.n	8004300 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d031      	beq.n	80043ac <mg_dtoa+0x294>
 8004348:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	db2d      	blt.n	80043ac <mg_dtoa+0x294>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	dd2a      	ble.n	80043ac <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8004356:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800435a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800435e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f107 0018 	add.w	r0, r7, #24
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	eeb0 0b45 	vmov.f64	d0, d5
 800436e:	2128      	movs	r1, #40	@ 0x28
 8004370:	f7ff fed2 	bl	8004118 <mg_dtoa>
 8004374:	4603      	mov	r3, r0
 8004376:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8004378:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800437a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800437c:	4413      	add	r3, r2
 800437e:	f107 0218 	add.w	r2, r7, #24
 8004382:	4413      	add	r3, r2
 8004384:	222b      	movs	r2, #43	@ 0x2b
 8004386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fded 	bl	8003f68 <addexp>
 800438e:	4602      	mov	r2, r0
 8004390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004392:	4413      	add	r3, r2
 8004394:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8004396:	f107 0318 	add.w	r3, r7, #24
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800439e:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <mg_dtoa+0x328>)
 80043a0:	6939      	ldr	r1, [r7, #16]
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f008 fd1c 	bl	800cde0 <mg_snprintf>
 80043a8:	4603      	mov	r3, r0
 80043aa:	e161      	b.n	8004670 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d048      	beq.n	8004444 <mg_dtoa+0x32c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	425b      	negs	r3, r3
 80043b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dc43      	bgt.n	8004444 <mg_dtoa+0x32c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	dd40      	ble.n	8004444 <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80043c2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80043c6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80043ca:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	f107 0018 	add.w	r0, r7, #24
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	eeb0 0b45 	vmov.f64	d0, d5
 80043da:	2128      	movs	r1, #40	@ 0x28
 80043dc:	f7ff fe9c 	bl	8004118 <mg_dtoa>
 80043e0:	4603      	mov	r3, r0
 80043e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80043e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e8:	4413      	add	r3, r2
 80043ea:	f107 0218 	add.w	r2, r7, #24
 80043ee:	18d0      	adds	r0, r2, r3
 80043f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f2:	425b      	negs	r3, r3
 80043f4:	222d      	movs	r2, #45	@ 0x2d
 80043f6:	4619      	mov	r1, r3
 80043f8:	f7ff fdb6 	bl	8003f68 <addexp>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004400:	4413      	add	r3, r2
 8004402:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8004404:	f107 0318 	add.w	r3, r7, #24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440c:	4a0c      	ldr	r2, [pc, #48]	@ (8004440 <mg_dtoa+0x328>)
 800440e:	6939      	ldr	r1, [r7, #16]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f008 fce5 	bl	800cde0 <mg_snprintf>
 8004416:	4603      	mov	r3, r0
 8004418:	e12a      	b.n	8004670 <mg_dtoa+0x558>
 800441a:	bf00      	nop
 800441c:	f3af 8000 	nop.w
 8004420:	9999999a 	.word	0x9999999a
 8004424:	3fb99999 	.word	0x3fb99999
 8004428:	0801f594 	.word	0x0801f594
 800442c:	0801f598 	.word	0x0801f598
 8004430:	0801f59c 	.word	0x0801f59c
 8004434:	0801f5a0 	.word	0x0801f5a0
 8004438:	0801f5a8 	.word	0x0801f5a8
 800443c:	3ff00000 	.word	0x3ff00000
 8004440:	0801f5ac 	.word	0x0801f5ac
  } else {
    int targ_width = width;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8004448:	2300      	movs	r3, #0
 800444a:	677b      	str	r3, [r7, #116]	@ 0x74
 800444c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004450:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8004454:	e037      	b.n	80044c6 <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 8004456:	ed97 5b02 	vldr	d5, [r7, #8]
 800445a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800445e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004462:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004466:	ee17 3a90 	vmov	r3, s15
 800446a:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800446c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446e:	2b00      	cmp	r3, #0
 8004470:	dc02      	bgt.n	8004478 <mg_dtoa+0x360>
 8004472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004474:	2b00      	cmp	r3, #0
 8004476:	dd0c      	ble.n	8004492 <mg_dtoa+0x37a>
 8004478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8004482:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004484:	440b      	add	r3, r1
 8004486:	3230      	adds	r2, #48	@ 0x30
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	3378      	adds	r3, #120	@ 0x78
 800448c:	443b      	add	r3, r7
 800448e:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8004492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800449c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80044a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80044a4:	ed97 6b02 	vldr	d6, [r7, #8]
 80044a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80044ac:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80044b0:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80044b4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80044b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80044bc:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80044c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044c2:	3301      	adds	r3, #1
 80044c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80044c6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80044ca:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80044ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	db04      	blt.n	80044e2 <mg_dtoa+0x3ca>
 80044d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044dc:	4413      	add	r3, r2
 80044de:	2b27      	cmp	r3, #39	@ 0x27
 80044e0:	ddb9      	ble.n	8004456 <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80044e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d118      	bne.n	800451a <mg_dtoa+0x402>
 80044e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80044ee:	3378      	adds	r3, #120	@ 0x78
 80044f0:	443b      	add	r3, r7
 80044f2:	2230      	movs	r2, #48	@ 0x30
 80044f4:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80044f8:	e00f      	b.n	800451a <mg_dtoa+0x402>
 80044fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004500:	3378      	adds	r3, #120	@ 0x78
 8004502:	443b      	add	r3, r7
 8004504:	2230      	movs	r2, #48	@ 0x30
 8004506:	f803 2c60 	strb.w	r2, [r3, #-96]
 800450a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800450e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8004512:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004516:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800451a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800451e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004522:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	db04      	blt.n	8004536 <mg_dtoa+0x41e>
 800452c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800452e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004530:	4413      	add	r3, r2
 8004532:	2b27      	cmp	r3, #39	@ 0x27
 8004534:	dde1      	ble.n	80044fa <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8004536:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453a:	4413      	add	r3, r2
 800453c:	2b27      	cmp	r3, #39	@ 0x27
 800453e:	dc09      	bgt.n	8004554 <mg_dtoa+0x43c>
 8004540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	673a      	str	r2, [r7, #112]	@ 0x70
 8004546:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004548:	4413      	add	r3, r2
 800454a:	3378      	adds	r3, #120	@ 0x78
 800454c:	443b      	add	r3, r7
 800454e:	222e      	movs	r2, #46	@ 0x2e
 8004550:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f083 0301 	eor.w	r3, r3, #1
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <mg_dtoa+0x456>
 8004560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004562:	2b00      	cmp	r3, #0
 8004564:	dd03      	ble.n	800456e <mg_dtoa+0x456>
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800456a:	4413      	add	r3, r2
 800456c:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800456e:	2300      	movs	r3, #0
 8004570:	677b      	str	r3, [r7, #116]	@ 0x74
 8004572:	a342      	add	r3, pc, #264	@ (adr r3, 800467c <mg_dtoa+0x564>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800457c:	e031      	b.n	80045e2 <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 800457e:	ed97 5b02 	vldr	d5, [r7, #8]
 8004582:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8004586:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800458a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800458e:	ee17 3a90 	vmov	r3, s15
 8004592:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8004594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004596:	b2da      	uxtb	r2, r3
 8004598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459a:	1c59      	adds	r1, r3, #1
 800459c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800459e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80045a0:	440b      	add	r3, r1
 80045a2:	3230      	adds	r2, #48	@ 0x30
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	3378      	adds	r3, #120	@ 0x78
 80045a8:	443b      	add	r3, r7
 80045aa:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 80045ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80045b8:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80045bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045c0:	ed97 6b02 	vldr	d6, [r7, #8]
 80045c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80045c8:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80045cc:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80045d0:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80045d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80045d8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80045dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045de:	3301      	adds	r3, #1
 80045e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80045e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80045e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e6:	4413      	add	r3, r2
 80045e8:	2b27      	cmp	r3, #39	@ 0x27
 80045ea:	dc07      	bgt.n	80045fc <mg_dtoa+0x4e4>
 80045ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f0:	429a      	cmp	r2, r3
 80045f2:	dbc4      	blt.n	800457e <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80045f4:	e002      	b.n	80045fc <mg_dtoa+0x4e4>
 80045f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f8:	3b01      	subs	r3, #1
 80045fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <mg_dtoa+0x504>
 8004602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004604:	2b00      	cmp	r3, #0
 8004606:	dd09      	ble.n	800461c <mg_dtoa+0x504>
 8004608:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800460a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800460c:	4413      	add	r3, r2
 800460e:	3b01      	subs	r3, #1
 8004610:	3378      	adds	r3, #120	@ 0x78
 8004612:	443b      	add	r3, r7
 8004614:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8004618:	2b30      	cmp	r3, #48	@ 0x30
 800461a:	d0ec      	beq.n	80045f6 <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <mg_dtoa+0x52a>
 8004622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004624:	2b00      	cmp	r3, #0
 8004626:	dd0c      	ble.n	8004642 <mg_dtoa+0x52a>
 8004628:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800462a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800462c:	4413      	add	r3, r2
 800462e:	3b01      	subs	r3, #1
 8004630:	3378      	adds	r3, #120	@ 0x78
 8004632:	443b      	add	r3, r7
 8004634:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8004638:	2b2e      	cmp	r3, #46	@ 0x2e
 800463a:	d102      	bne.n	8004642 <mg_dtoa+0x52a>
 800463c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463e:	3b01      	subs	r3, #1
 8004640:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 8004642:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004644:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004646:	4413      	add	r3, r2
 8004648:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800464a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464c:	2b27      	cmp	r3, #39	@ 0x27
 800464e:	dd01      	ble.n	8004654 <mg_dtoa+0x53c>
 8004650:	2327      	movs	r3, #39	@ 0x27
 8004652:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 8004654:	f107 0218 	add.w	r2, r7, #24
 8004658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465a:	4413      	add	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8004660:	f107 0318 	add.w	r3, r7, #24
 8004664:	4a04      	ldr	r2, [pc, #16]	@ (8004678 <mg_dtoa+0x560>)
 8004666:	6939      	ldr	r1, [r7, #16]
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f008 fbb9 	bl	800cde0 <mg_snprintf>
 800466e:	4603      	mov	r3, r0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3778      	adds	r7, #120	@ 0x78
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	0801f598 	.word	0x0801f598
 800467c:	9999999a 	.word	0x9999999a
 8004680:	3fb99999 	.word	0x3fb99999

08004684 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8004684:	b5b0      	push	{r4, r5, r7, lr}
 8004686:	b08c      	sub	sp, #48	@ 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8004690:	4b53      	ldr	r3, [pc, #332]	@ (80047e0 <mg_lld+0x15c>)
 8004692:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8004694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004698:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80046a0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d012      	beq.n	80046ce <mg_lld+0x4a>
 80046a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	da0e      	bge.n	80046ce <mg_lld+0x4a>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	222d      	movs	r2, #45	@ 0x2d
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c2:	2100      	movs	r1, #0
 80046c4:	4254      	negs	r4, r2
 80046c6:	eb61 0503 	sbc.w	r5, r1, r3
 80046ca:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80046ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	e019      	b.n	8004710 <mg_lld+0x8c>
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	441a      	add	r2, r3
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	1c59      	adds	r1, r3, #1
 80046ea:	6239      	str	r1, [r7, #32]
 80046ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ee:	440b      	add	r3, r1
 80046f0:	68f9      	ldr	r1, [r7, #12]
 80046f2:	440b      	add	r3, r1
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	0902      	lsrs	r2, r0, #4
 8004706:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800470a:	090b      	lsrs	r3, r1, #4
 800470c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8004710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004714:	4313      	orrs	r3, r2
 8004716:	d1e1      	bne.n	80046dc <mg_lld+0x58>
 8004718:	e025      	b.n	8004766 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]
 800471e:	e01e      	b.n	800475e <mg_lld+0xda>
 8004720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004724:	f04f 020a 	mov.w	r2, #10
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f7fb fdf0 	bl	8000310 <__aeabi_uldivmod>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	441a      	add	r2, r3
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800473c:	440b      	add	r3, r1
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	440b      	add	r3, r1
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800474a:	f04f 020a 	mov.w	r2, #10
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	f7fb fddd 	bl	8000310 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800475e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004762:	4313      	orrs	r3, r2
 8004764:	d1dc      	bne.n	8004720 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	e022      	b.n	80047b2 <mg_lld+0x12e>
    char t = buf[s + i];
 800476c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	441a      	add	r2, r3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	441a      	add	r2, r3
 800478a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	440b      	add	r3, r1
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	440b      	add	r3, r1
 8004794:	7812      	ldrb	r2, [r2, #0]
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	441a      	add	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	7dfa      	ldrb	r2, [r7, #23]
 80047aa:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d3d7      	bcc.n	800476c <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 80047bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d106      	bne.n	80047d2 <mg_lld+0x14e>
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	623a      	str	r2, [r7, #32]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	2230      	movs	r2, #48	@ 0x30
 80047d0:	701a      	strb	r2, [r3, #0]
  return n + s;
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	4413      	add	r3, r2
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3730      	adds	r7, #48	@ 0x30
 80047dc:	46bd      	mov	sp, r7
 80047de:	bdb0      	pop	{r4, r5, r7, pc}
 80047e0:	0801f5b4 	.word	0x0801f5b4

080047e4 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80047f6:	e009      	b.n	800480c <scpy+0x28>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	617a      	str	r2, [r7, #20]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <scpy+0x3c>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4413      	add	r3, r2
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1eb      	bne.n	80047f8 <scpy+0x14>
  return i;
 8004820:	697b      	ldr	r3, [r7, #20]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800482a:	b40c      	push	{r2, r3}
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f809 	bl	8004860 <mg_vxprintf>
 800484e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800485c:	b002      	add	sp, #8
 800485e:	4770      	bx	lr

08004860 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8004860:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004864:	b0a6      	sub	sp, #152	@ 0x98
 8004866:	af02      	add	r7, sp, #8
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 800487c:	e383      	b.n	8004f86 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004884:	4413      	add	r3, r2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b25      	cmp	r3, #37	@ 0x25
 800488a:	f040 8369 	bne.w	8004f60 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 800488e:	2300      	movs	r3, #0
 8004890:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004892:	2300      	movs	r3, #0
 8004894:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004896:	2300      	movs	r3, #0
 8004898:	677b      	str	r3, [r7, #116]	@ 0x74
 800489a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800489e:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 80048a0:	2320      	movs	r3, #32
 80048a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80048ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b0:	3301      	adds	r3, #1
 80048b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 80048c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80048c8:	2b23      	cmp	r3, #35	@ 0x23
 80048ca:	d10e      	bne.n	80048ea <mg_vxprintf+0x8a>
 80048cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048ce:	3301      	adds	r3, #1
 80048d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d6:	3301      	adds	r3, #1
 80048d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e2:	4413      	add	r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80048ea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80048ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80048f0:	d110      	bne.n	8004914 <mg_vxprintf+0xb4>
 80048f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80048f6:	3301      	adds	r3, #1
 80048f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80048fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004900:	3301      	adds	r3, #1
 8004902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8004914:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004918:	2b30      	cmp	r3, #48	@ 0x30
 800491a:	d127      	bne.n	800496c <mg_vxprintf+0x10c>
 800491c:	2330      	movs	r3, #48	@ 0x30
 800491e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004926:	3301      	adds	r3, #1
 8004928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800493a:	e017      	b.n	800496c <mg_vxprintf+0x10c>
 800493c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	677b      	str	r3, [r7, #116]	@ 0x74
 8004948:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800494c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494e:	4413      	add	r3, r2
 8004950:	3b30      	subs	r3, #48	@ 0x30
 8004952:	677b      	str	r3, [r7, #116]	@ 0x74
 8004954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004958:	3301      	adds	r3, #1
 800495a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004964:	4413      	add	r3, r2
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800496c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fae3 	bl	8003f3c <is_digit>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1df      	bne.n	800493c <mg_vxprintf+0xdc>
      if (c == '.') {
 800497c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004980:	2b2e      	cmp	r3, #46	@ 0x2e
 8004982:	d153      	bne.n	8004a2c <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8004984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004988:	3301      	adds	r3, #1
 800498a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	4413      	add	r3, r2
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 800499c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80049a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a2:	d113      	bne.n	80049cc <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	1d19      	adds	r1, r3, #4
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b6:	3301      	adds	r3, #1
 80049b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80049ca:	e02f      	b.n	8004a2c <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80049d0:	e017      	b.n	8004a02 <mg_vxprintf+0x1a2>
 80049d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80049de:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80049e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e4:	4413      	add	r3, r2
 80049e6:	3b30      	subs	r3, #48	@ 0x30
 80049e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ee:	3301      	adds	r3, #1
 80049f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049fa:	4413      	add	r3, r2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8004a02:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fa98 	bl	8003f3c <is_digit>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1df      	bne.n	80049d2 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8004a12:	e00b      	b.n	8004a2c <mg_vxprintf+0x1cc>
 8004a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a24:	4413      	add	r3, r2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8004a2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a30:	2b68      	cmp	r3, #104	@ 0x68
 8004a32:	d0ef      	beq.n	8004a14 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8004a34:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a38:	2b6c      	cmp	r3, #108	@ 0x6c
 8004a3a:	d121      	bne.n	8004a80 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8004a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3e:	3301      	adds	r3, #1
 8004a40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a46:	3301      	adds	r3, #1
 8004a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8004a5a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a5e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004a60:	d10e      	bne.n	8004a80 <mg_vxprintf+0x220>
 8004a62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a64:	3301      	adds	r3, #1
 8004a66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a78:	4413      	add	r3, r2
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8004a80:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a84:	2b70      	cmp	r3, #112	@ 0x70
 8004a86:	d103      	bne.n	8004a90 <mg_vxprintf+0x230>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8004a90:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a94:	2b64      	cmp	r3, #100	@ 0x64
 8004a96:	d018      	beq.n	8004aca <mg_vxprintf+0x26a>
 8004a98:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004a9c:	2b75      	cmp	r3, #117	@ 0x75
 8004a9e:	d014      	beq.n	8004aca <mg_vxprintf+0x26a>
 8004aa0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004aa4:	2b78      	cmp	r3, #120	@ 0x78
 8004aa6:	d010      	beq.n	8004aca <mg_vxprintf+0x26a>
 8004aa8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004aac:	2b58      	cmp	r3, #88	@ 0x58
 8004aae:	d00c      	beq.n	8004aca <mg_vxprintf+0x26a>
 8004ab0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004ab4:	2b70      	cmp	r3, #112	@ 0x70
 8004ab6:	d008      	beq.n	8004aca <mg_vxprintf+0x26a>
 8004ab8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004abc:	2b67      	cmp	r3, #103	@ 0x67
 8004abe:	d004      	beq.n	8004aca <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8004ac0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004ac4:	2b66      	cmp	r3, #102	@ 0x66
 8004ac6:	f040 816c 	bne.w	8004da2 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8004aca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004ada:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004ade:	2b78      	cmp	r3, #120	@ 0x78
 8004ae0:	d007      	beq.n	8004af2 <mg_vxprintf+0x292>
 8004ae2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004ae6:	2b58      	cmp	r3, #88	@ 0x58
 8004ae8:	d003      	beq.n	8004af2 <mg_vxprintf+0x292>
 8004aea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004aee:	2b70      	cmp	r3, #112	@ 0x70
 8004af0:	d101      	bne.n	8004af6 <mg_vxprintf+0x296>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <mg_vxprintf+0x298>
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8004afc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8004b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <mg_vxprintf+0x2b2>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e000      	b.n	8004b14 <mg_vxprintf+0x2b4>
 8004b12:	2300      	movs	r3, #0
 8004b14:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 8004b16:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004b1a:	2b67      	cmp	r3, #103	@ 0x67
 8004b1c:	d003      	beq.n	8004b26 <mg_vxprintf+0x2c6>
 8004b1e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004b22:	2b66      	cmp	r3, #102	@ 0x66
 8004b24:	d124      	bne.n	8004b70 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3307      	adds	r3, #7
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	f103 0108 	add.w	r1, r3, #8
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	6011      	str	r1, [r2, #0]
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8004b40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b46:	d101      	bne.n	8004b4c <mg_vxprintf+0x2ec>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8004b4c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004b4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004b52:	2b67      	cmp	r3, #103	@ 0x67
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f107 0014 	add.w	r0, r7, #20
 8004b60:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8004b64:	2128      	movs	r1, #40	@ 0x28
 8004b66:	f7ff fad7 	bl	8004118 <mg_dtoa>
 8004b6a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8004b6e:	e069      	b.n	8004c44 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8004b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d11c      	bne.n	8004bb0 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3307      	adds	r3, #7
 8004b7c:	f023 0307 	bic.w	r3, r3, #7
 8004b80:	f103 0108 	add.w	r1, r3, #8
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	6011      	str	r1, [r2, #0]
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8004b90:	f107 0114 	add.w	r1, r7, #20
 8004b94:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	f7ff fd6d 	bl	8004684 <mg_lld>
 8004baa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8004bae:	e049      	b.n	8004c44 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d123      	bne.n	8004bfe <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d19      	adds	r1, r3, #4
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	6011      	str	r1, [r2, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8004bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <mg_vxprintf+0x376>
 8004bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bce:	17da      	asrs	r2, r3, #31
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	e003      	b.n	8004bde <mg_vxprintf+0x37e>
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd8:	2200      	movs	r2, #0
 8004bda:	461c      	mov	r4, r3
 8004bdc:	4615      	mov	r5, r2
 8004bde:	f107 0114 	add.w	r1, r7, #20
 8004be2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	f7ff fd46 	bl	8004684 <mg_lld>
 8004bf8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8004bfc:	e022      	b.n	8004c44 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1d19      	adds	r1, r3, #4
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	6011      	str	r1, [r2, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8004c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <mg_vxprintf+0x3be>
 8004c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c16:	17da      	asrs	r2, r3, #31
 8004c18:	4698      	mov	r8, r3
 8004c1a:	4691      	mov	r9, r2
 8004c1c:	e003      	b.n	8004c26 <mg_vxprintf+0x3c6>
 8004c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c20:	2200      	movs	r2, #0
 8004c22:	4698      	mov	r8, r3
 8004c24:	4691      	mov	r9, r2
 8004c26:	f107 0114 	add.w	r1, r7, #20
 8004c2a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4642      	mov	r2, r8
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4608      	mov	r0, r1
 8004c3c:	f7ff fd22 	bl	8004684 <mg_lld>
 8004c40:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c4a:	e007      	b.n	8004c5c <mg_vxprintf+0x3fc>
 8004c4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c56:	3301      	adds	r3, #1
 8004c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d202      	bcs.n	8004c6c <mg_vxprintf+0x40c>
 8004c66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ef      	bne.n	8004c4c <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c72:	e011      	b.n	8004c98 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8004c74:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8004c78:	2301      	movs	r3, #1
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fdb1 	bl	80047e4 <scpy>
 8004c82:	4602      	mov	r2, r0
 8004c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c88:	4413      	add	r3, r2
 8004c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8004c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d110      	bne.n	8004cc2 <mg_vxprintf+0x462>
 8004ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10c      	bne.n	8004cc2 <mg_vxprintf+0x462>
 8004ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d207      	bcs.n	8004cc2 <mg_vxprintf+0x462>
 8004cb2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004cb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cba:	4413      	add	r3, r2
 8004cbc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d8d8      	bhi.n	8004c74 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc4:	4ab7      	ldr	r2, [pc, #732]	@ (8004fa4 <mg_vxprintf+0x744>)
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fd8b 	bl	80047e4 <scpy>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ce0:	e011      	b.n	8004d06 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8004ce2:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fd7a 	bl	80047e4 <scpy>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8004cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d00:	3301      	adds	r3, #1
 8004d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d0a:	2b30      	cmp	r3, #48	@ 0x30
 8004d0c:	d10c      	bne.n	8004d28 <mg_vxprintf+0x4c8>
 8004d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d207      	bcs.n	8004d28 <mg_vxprintf+0x4c8>
 8004d18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d20:	4413      	add	r3, r2
 8004d22:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d8dc      	bhi.n	8004ce2 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8004d28:	f107 0214 	add.w	r2, r7, #20
 8004d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fd56 	bl	80047e4 <scpy>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d3e:	4413      	add	r3, r2
 8004d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d4a:	e011      	b.n	8004d70 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8004d4c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8004d50:	2301      	movs	r3, #1
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fd45 	bl	80047e4 <scpy>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d60:	4413      	add	r3, r2
 8004d62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8004d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f040 80ea 	bne.w	8004f4e <mg_vxprintf+0x6ee>
 8004d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80e5 	beq.w	8004f4e <mg_vxprintf+0x6ee>
 8004d84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f080 80df 	bcs.w	8004f4e <mg_vxprintf+0x6ee>
 8004d90:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d98:	4413      	add	r3, r2
 8004d9a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d8d5      	bhi.n	8004d4c <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8004da0:	e0d5      	b.n	8004f4e <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8004da2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004da6:	2b6d      	cmp	r3, #109	@ 0x6d
 8004da8:	d003      	beq.n	8004db2 <mg_vxprintf+0x552>
 8004daa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004dae:	2b4d      	cmp	r3, #77	@ 0x4d
 8004db0:	d128      	bne.n	8004e04 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8004dc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004dc4:	2b6d      	cmp	r3, #109	@ 0x6d
 8004dc6:	d103      	bne.n	8004dd0 <mg_vxprintf+0x570>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	2022      	movs	r0, #34	@ 0x22
 8004dce:	4798      	blx	r3
        n += f(out, param, ap);
 8004dd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	4798      	blx	r3
 8004dda:	4602      	mov	r2, r0
 8004ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004de0:	4413      	add	r3, r2
 8004de2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8004de6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004dea:	2b6d      	cmp	r3, #109	@ 0x6d
 8004dec:	f040 80b1 	bne.w	8004f52 <mg_vxprintf+0x6f2>
 8004df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004df4:	3302      	adds	r3, #2
 8004df6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	2022      	movs	r0, #34	@ 0x22
 8004e00:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8004e02:	e0a6      	b.n	8004f52 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8004e04:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004e08:	2b63      	cmp	r3, #99	@ 0x63
 8004e0a:	d112      	bne.n	8004e32 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8004e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	4610      	mov	r0, r2
 8004e24:	4798      	blx	r3
        n++;
 8004e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e30:	e090      	b.n	8004f54 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8004e32:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004e36:	2b73      	cmp	r3, #115	@ 0x73
 8004e38:	d16b      	bne.n	8004f12 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	1d19      	adds	r1, r3, #4
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	6011      	str	r1, [r2, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8004e48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e4e:	d109      	bne.n	8004e64 <mg_vxprintf+0x604>
 8004e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <mg_vxprintf+0x600>
 8004e56:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004e58:	f7fb fa52 	bl	8000300 <strlen>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	e000      	b.n	8004e62 <mg_vxprintf+0x602>
 8004e60:	2300      	movs	r3, #0
 8004e62:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e6a:	e011      	b.n	8004e90 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8004e6c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8004e70:	2301      	movs	r3, #1
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fcb5 	bl	80047e4 <scpy>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e80:	4413      	add	r3, r2
 8004e82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8004e86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e90:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <mg_vxprintf+0x64e>
 8004e98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d206      	bcs.n	8004eae <mg_vxprintf+0x64e>
 8004ea0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea6:	4413      	add	r3, r2
 8004ea8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d8de      	bhi.n	8004e6c <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8004eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fc95 	bl	80047e4 <scpy>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ecc:	e011      	b.n	8004ef2 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8004ece:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fc84 	bl	80047e4 <scpy>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8004ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eec:	3301      	adds	r3, #1
 8004eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d02c      	beq.n	8004f54 <mg_vxprintf+0x6f4>
 8004efa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d228      	bcs.n	8004f54 <mg_vxprintf+0x6f4>
 8004f02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f08:	4413      	add	r3, r2
 8004f0a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d8de      	bhi.n	8004ece <mg_vxprintf+0x66e>
 8004f10:	e020      	b.n	8004f54 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8004f12:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8004f16:	2b25      	cmp	r3, #37	@ 0x25
 8004f18:	d109      	bne.n	8004f2e <mg_vxprintf+0x6ce>
        out('%', param);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	2025      	movs	r0, #37	@ 0x25
 8004f20:	4798      	blx	r3
        n++;
 8004f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f2c:	e012      	b.n	8004f54 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	2025      	movs	r0, #37	@ 0x25
 8004f34:	4798      	blx	r3
        out(c, param);
 8004f36:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4798      	blx	r3
        n += 2;
 8004f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f46:	3302      	adds	r3, #2
 8004f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f4c:	e002      	b.n	8004f54 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8004f4e:	bf00      	nop
 8004f50:	e000      	b.n	8004f54 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8004f52:	bf00      	nop
      }
      i++;
 8004f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f5e:	e012      	b.n	8004f86 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f66:	4413      	add	r3, r2
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4798      	blx	r3
 8004f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f76:	3301      	adds	r3, #1
 8004f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f47f ac74 	bne.w	800487e <mg_vxprintf+0x1e>
    }
  }
  return n;
 8004f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3790      	adds	r7, #144	@ 0x90
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fa4:	0801f5c8 	.word	0x0801f5c8

08004fa8 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8004fb4:	2108      	movs	r1, #8
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f019 f886 	bl	801e0c8 <calloc>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d013      	beq.n	8004fee <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	4798      	blx	r3
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <mg_fs_open+0x46>
      free(fd);
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	f019 f893 	bl	801e110 <free>
      fd = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8004fee:	697b      	ldr	r3, [r7, #20]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
    free(fd);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f019 f87b 	bl	801e110 <free>
  }
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fb f966 	bl	8000300 <strlen>
 8005034:	4602      	mov	r2, r0
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4293      	cmp	r3, r2
 800503a:	d219      	bcs.n	8005070 <is_dir_prefix+0x4e>
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f019 fb2b 	bl	801e69c <strncmp>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d111      	bne.n	8005070 <is_dir_prefix+0x4e>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4413      	add	r3, r2
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b2f      	cmp	r3, #47	@ 0x2f
 800505c:	d006      	beq.n	800506c <is_dir_prefix+0x4a>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	3b01      	subs	r3, #1
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b2f      	cmp	r3, #47	@ 0x2f
 800506a:	d101      	bne.n	8005070 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <is_dir_prefix+0x50>
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 800507a:	b580      	push	{r7, lr}
 800507c:	b088      	sub	sp, #32
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7fb f93a 	bl	8000300 <strlen>
 800508c:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f017 ff28 	bl	801cee8 <mg_unpack>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <packed_stat+0x28>
 800509e:	2301      	movs	r3, #1
 80050a0:	e017      	b.n	80050d2 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e00c      	b.n	80050c2 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ffb8 	bl	8005022 <is_dir_prefix>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <packed_stat+0x42>
 80050b8:	2304      	movs	r3, #4
 80050ba:	e00a      	b.n	80050d2 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	69f8      	ldr	r0, [r7, #28]
 80050c4:	f017 fefc 	bl	801cec0 <mg_unlist>
 80050c8:	6178      	str	r0, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1eb      	bne.n	80050a8 <packed_stat+0x2e>
  }
  return 0;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b0be      	sub	sp, #248	@ 0xf8
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7fb f909 	bl	8000300 <strlen>
 80050ee:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 80050f2:	2300      	movs	r3, #0
 80050f4:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050fc:	e05a      	b.n	80051b4 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 80050fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005102:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff ff8b 	bl	8005022 <is_dir_prefix>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d048      	beq.n	80051a4 <packed_list+0xc8>
    begin = &path[n + 1];
 8005112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005116:	3301      	adds	r3, #1
 8005118:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800511c:	4413      	add	r3, r2
 800511e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 8005122:	212f      	movs	r1, #47	@ 0x2f
 8005124:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8005128:	f019 faab 	bl	801e682 <strchr>
 800512c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8005130:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <packed_list+0x70>
 8005138:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800513c:	f7fb f8e0 	bl	8000300 <strlen>
 8005140:	4602      	mov	r2, r0
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005146:	4413      	add	r3, r2
 8005148:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 800514c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8005150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005154:	1ad2      	subs	r2, r2, r3
 8005156:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800515a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	4a1c      	ldr	r2, [pc, #112]	@ (80051d4 <packed_list+0xf8>)
 8005164:	2164      	movs	r1, #100	@ 0x64
 8005166:	f007 fe3b 	bl	800cde0 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 800516a:	2300      	movs	r3, #0
 800516c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8005170:	f107 0214 	add.w	r2, r7, #20
 8005174:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb f860 	bl	8000240 <strcmp>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8005186:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4610      	mov	r0, r2
 8005190:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8005192:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8005196:	f107 0314 	add.w	r3, r7, #20
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f019 fb96 	bl	801e8ce <strcpy>
 80051a2:	e002      	b.n	80051aa <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 80051a8:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80051aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80051ae:	3301      	adds	r3, #1
 80051b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051b4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80051b8:	f017 fe82 	bl	801cec0 <mg_unlist>
 80051bc:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d19a      	bne.n	80050fe <packed_list+0x22>
  }
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	37f0      	adds	r7, #240	@ 0xf0
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	0801f5ac 	.word	0x0801f5ac

080051d8 <packed_open>:

static void *packed_open(const char *path, int flags) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	2200      	movs	r2, #0
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f017 fe7a 	bl	801cee8 <mg_unpack>
 80051f4:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <packed_open+0x2c>
 8005200:	2300      	movs	r3, #0
 8005202:	e016      	b.n	8005232 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <packed_open+0x3a>
 800520e:	2300      	movs	r3, #0
 8005210:	e00f      	b.n	8005232 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8005212:	210c      	movs	r1, #12
 8005214:	2001      	movs	r0, #1
 8005216:	f018 ff57 	bl	801e0c8 <calloc>
 800521a:	4603      	mov	r3, r0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <packed_open+0x58>
    fp->size = size;
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8005230:	693b      	ldr	r3, [r7, #16]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <packed_close>:

static void packed_close(void *fp) {
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <packed_close+0x14>
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f018 ff61 	bl	801e110 <free>
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8005256:	b580      	push	{r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	441a      	add	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d905      	bls.n	8005282 <packed_read+0x2c>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	4413      	add	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4619      	mov	r1, r3
 8005290:	68b8      	ldr	r0, [r7, #8]
 8005292:	f019 fb24 	bl	801e8de <memcpy>
  fp->pos += len;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	441a      	add	r2, r3
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	609a      	str	r2, [r3, #8]
  return len;
 80052a2:	687b      	ldr	r3, [r7, #4]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d903      	bls.n	80052ee <packed_seek+0x28>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <packed_remove>:

static bool packed_remove(const char *path) {
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <p_open>:
static void *p_open(const char *path, int flags) {
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <p_close>:
static void p_close(void *fp) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <p_remove>:
static bool p_remove(const char *path) {
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <p_mkdir>:
static bool p_mkdir(const char *path) {
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8005432:	b480      	push	{r7}
 8005434:	b089      	sub	sp, #36	@ 0x24
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02d      	beq.n	80054a4 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	60fa      	str	r2, [r7, #12]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	60ba      	str	r2, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	dd05      	ble.n	800546e <mg_ncasecmp+0x3c>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b5a      	cmp	r3, #90	@ 0x5a
 8005466:	dc02      	bgt.n	800546e <mg_ncasecmp+0x3c>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	3320      	adds	r3, #32
 800546c:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	dd05      	ble.n	8005480 <mg_ncasecmp+0x4e>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b5a      	cmp	r3, #90	@ 0x5a
 8005478:	dc02      	bgt.n	8005480 <mg_ncasecmp+0x4e>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	3320      	adds	r3, #32
 800547e:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10a      	bne.n	80054a4 <mg_ncasecmp+0x72>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3b01      	subs	r3, #1
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <mg_ncasecmp+0x72>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3b01      	subs	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1d1      	bne.n	8005448 <mg_ncasecmp+0x16>
  return diff;
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3724      	adds	r7, #36	@ 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80054b4:	b480      	push	{r7}
 80054b6:	b08b      	sub	sp, #44	@ 0x2c
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	e883 0003 	stmia.w	r3, {r0, r1}
 80054c2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4a42      	ldr	r2, [pc, #264]	@ (80055dc <mg_to_size_t+0x128>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	2300      	movs	r3, #0
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80054e2:	e002      	b.n	80054ea <mg_to_size_t+0x36>
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	3301      	adds	r3, #1
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d20b      	bcs.n	800550a <mg_to_size_t+0x56>
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	4413      	add	r3, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d0f2      	beq.n	80054e4 <mg_to_size_t+0x30>
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b09      	cmp	r3, #9
 8005508:	d0ec      	beq.n	80054e4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550e:	429a      	cmp	r2, r3
 8005510:	d22b      	bcs.n	800556a <mg_to_size_t+0xb6>
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	4413      	add	r3, r2
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b2d      	cmp	r3, #45	@ 0x2d
 800551c:	d125      	bne.n	800556a <mg_to_size_t+0xb6>
 800551e:	2300      	movs	r3, #0
 8005520:	e056      	b.n	80055d0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	3b30      	subs	r3, #48	@ 0x30
 800552c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	429a      	cmp	r2, r3
 8005534:	d901      	bls.n	800553a <mg_to_size_t+0x86>
 8005536:	2300      	movs	r3, #0
 8005538:	e04a      	b.n	80055d0 <mg_to_size_t+0x11c>
    result *= 10;
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	429a      	cmp	r2, r3
 8005550:	d901      	bls.n	8005556 <mg_to_size_t+0xa2>
 8005552:	2300      	movs	r3, #0
 8005554:	e03c      	b.n	80055d0 <mg_to_size_t+0x11c>
    result += digit;
 8005556:	6a3a      	ldr	r2, [r7, #32]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	3301      	adds	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556e:	429a      	cmp	r2, r3
 8005570:	d20f      	bcs.n	8005592 <mg_to_size_t+0xde>
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	4413      	add	r3, r2
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b2f      	cmp	r3, #47	@ 0x2f
 800557c:	d909      	bls.n	8005592 <mg_to_size_t+0xde>
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b39      	cmp	r3, #57	@ 0x39
 8005588:	d9cb      	bls.n	8005522 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800558a:	e002      	b.n	8005592 <mg_to_size_t+0xde>
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005596:	429a      	cmp	r2, r3
 8005598:	d20b      	bcs.n	80055b2 <mg_to_size_t+0xfe>
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d0f2      	beq.n	800558c <mg_to_size_t+0xd8>
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	4413      	add	r3, r2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b09      	cmp	r3, #9
 80055b0:	d0ec      	beq.n	800558c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <mg_to_size_t+0x108>
 80055b8:	2300      	movs	r3, #0
 80055ba:	e009      	b.n	80055d0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <mg_to_size_t+0x114>
 80055c4:	2300      	movs	r3, #0
 80055c6:	e003      	b.n	80055d0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	601a      	str	r2, [r3, #0]
  return true;
 80055ce:	2301      	movs	r3, #1
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	372c      	adds	r7, #44	@ 0x2c
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	cccccccd 	.word	0xcccccccd

080055e0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80055e0:	b082      	sub	sp, #8
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08e      	sub	sp, #56	@ 0x38
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	1d38      	adds	r0, r7, #4
 80055ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	2200      	movs	r2, #0
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f00a ffc1 	bl	8010582 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8005600:	e023      	b.n	800564a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8005602:	f107 0318 	add.w	r3, r7, #24
 8005606:	f107 0220 	add.w	r2, r7, #32
 800560a:	213d      	movs	r1, #61	@ 0x3d
 800560c:	9100      	str	r1, [sp, #0]
 800560e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005612:	c903      	ldmia	r1, {r0, r1}
 8005614:	f00b f996 	bl	8010944 <mg_span>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d015      	beq.n	800564a <mg_http_var+0x6a>
 800561e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	429a      	cmp	r2, r3
 8005624:	d111      	bne.n	800564a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8005626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ff00 	bl	8005432 <mg_ncasecmp>
 8005632:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <mg_http_var+0x6a>
      result = v;
 8005638:	f107 0310 	add.w	r3, r7, #16
 800563c:	f107 0218 	add.w	r2, r7, #24
 8005640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005644:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8005648:	e00b      	b.n	8005662 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800564a:	1d3b      	adds	r3, r7, #4
 800564c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005650:	2126      	movs	r1, #38	@ 0x26
 8005652:	9100      	str	r1, [sp, #0]
 8005654:	1d39      	adds	r1, r7, #4
 8005656:	c903      	ldmia	r1, {r0, r1}
 8005658:	f00b f974 	bl	8010944 <mg_span>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1cf      	bne.n	8005602 <mg_http_var+0x22>
    }
  }
  return result;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	461a      	mov	r2, r3
 8005666:	f107 0310 	add.w	r3, r7, #16
 800566a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800566e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	3730      	adds	r7, #48	@ 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567c:	b002      	add	sp, #8
 800567e:	4770      	bx	lr

08005680 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	@ 0x30
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <mg_http_get_var+0x20>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <mg_http_get_var+0x2c>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 80056ac:	f06f 0301 	mvn.w	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b2:	e033      	b.n	800571c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <mg_http_get_var+0x4a>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <mg_http_get_var+0x4a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d0:	e024      	b.n	800571c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	4618      	mov	r0, r3
 80056da:	f00a ff35 	bl	8010548 <mg_str_s>
 80056de:	f107 0014 	add.w	r0, r7, #20
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	ca06      	ldmia	r2, {r1, r2}
 80056ec:	f7ff ff78 	bl	80055e0 <mg_http_var>
    if (v.buf == NULL) {
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 80056f6:	f06f 0303 	mvn.w	r3, #3
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fc:	e00e      	b.n	800571c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	2301      	movs	r3, #1
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	f000 f82e 	bl	800576a <mg_url_decode>
 800570e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8005710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	da02      	bge.n	800571c <mg_http_get_var+0x9c>
 8005716:	f06f 0302 	mvn.w	r3, #2
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800571e:	4618      	mov	r0, r3
 8005720:	3728      	adds	r7, #40	@ 0x28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <isx>:

static bool isx(int c) {
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b2f      	cmp	r3, #47	@ 0x2f
 8005732:	dd02      	ble.n	800573a <isx+0x14>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b39      	cmp	r3, #57	@ 0x39
 8005738:	dd0b      	ble.n	8005752 <isx+0x2c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b60      	cmp	r3, #96	@ 0x60
 800573e:	dd02      	ble.n	8005746 <isx+0x20>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b66      	cmp	r3, #102	@ 0x66
 8005744:	dd05      	ble.n	8005752 <isx+0x2c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	dd04      	ble.n	8005756 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b46      	cmp	r3, #70	@ 0x46
 8005750:	dc01      	bgt.n	8005756 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <isx+0x32>
 8005756:	2300      	movs	r3, #0
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	b2db      	uxtb	r3, r3
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800576a:	b580      	push	{r7, lr}
 800576c:	b08a      	sub	sp, #40	@ 0x28
 800576e:	af02      	add	r7, sp, #8
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	e059      	b.n	8005836 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b25      	cmp	r3, #37	@ 0x25
 800578c:	d136      	bne.n	80057fc <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3302      	adds	r3, #2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d92e      	bls.n	80057f6 <mg_url_decode+0x8c>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff ffbf 	bl	8005726 <isx>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d023      	beq.n	80057f6 <mg_url_decode+0x8c>
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	3302      	adds	r3, #2
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ffb4 	bl	8005726 <isx>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d018      	beq.n	80057f6 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3301      	adds	r3, #1
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	18d1      	adds	r1, r2, r3
 80057cc:	f107 0310 	add.w	r3, r7, #16
 80057d0:	2202      	movs	r2, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f00a fed5 	bl	8010582 <mg_str_n>
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	4413      	add	r3, r2
 80057de:	2201      	movs	r2, #1
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	2210      	movs	r2, #16
 80057e4:	f107 0110 	add.w	r1, r7, #16
 80057e8:	c903      	ldmia	r1, {r0, r1}
 80057ea:	f00b f908 	bl	80109fe <mg_str_to_num>
        i += 2;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3302      	adds	r3, #2
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e019      	b.n	800582a <mg_url_decode+0xc0>
      } else {
        return -1;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057fa:	e03a      	b.n	8005872 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <mg_url_decode+0xb0>
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b2b      	cmp	r3, #43	@ 0x2b
 800580c:	d105      	bne.n	800581a <mg_url_decode+0xb0>
      dst[j] = ' ';
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	4413      	add	r3, r2
 8005814:	2220      	movs	r2, #32
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e007      	b.n	800582a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	441a      	add	r2, r3
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	440b      	add	r3, r1
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3301      	adds	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	3301      	adds	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	429a      	cmp	r2, r3
 800583c:	d204      	bcs.n	8005848 <mg_url_decode+0xde>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3301      	adds	r3, #1
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d89c      	bhi.n	8005782 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d204      	bcs.n	800585a <mg_url_decode+0xf0>
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	429a      	cmp	r2, r3
 8005860:	d305      	bcc.n	800586e <mg_url_decode+0x104>
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d201      	bcs.n	800586e <mg_url_decode+0x104>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	e001      	b.n	8005872 <mg_url_decode+0x108>
 800586e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <isok>:

static bool isok(uint8_t c) {
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	4603      	mov	r3, r0
 8005882:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b0a      	cmp	r3, #10
 8005888:	d008      	beq.n	800589c <isok+0x22>
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b0d      	cmp	r3, #13
 800588e:	d005      	beq.n	800589c <isok+0x22>
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	2b09      	cmp	r3, #9
 8005894:	d002      	beq.n	800589c <isok+0x22>
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b1f      	cmp	r3, #31
 800589a:	d901      	bls.n	80058a0 <isok+0x26>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <isok+0x28>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e03c      	b.n	800593e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ffd4 	bl	800587a <isok>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f083 0301 	eor.w	r3, r3, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <mg_http_get_request_len+0x30>
 80058de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058e2:	e031      	b.n	8005948 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <mg_http_get_request_len+0x50>
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b0a      	cmp	r3, #10
 80058f4:	d106      	bne.n	8005904 <mg_http_get_request_len+0x50>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b0a      	cmp	r3, #10
 8005902:	d016      	beq.n	8005932 <mg_http_get_request_len+0x7e>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d916      	bls.n	8005938 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b0a      	cmp	r3, #10
 8005914:	d110      	bne.n	8005938 <mg_http_get_request_len+0x84>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3b01      	subs	r3, #1
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b0d      	cmp	r3, #13
 8005922:	d109      	bne.n	8005938 <mg_http_get_request_len+0x84>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b02      	subs	r3, #2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b0a      	cmp	r3, #10
 8005930:	d102      	bne.n	8005938 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	e007      	b.n	8005948 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3be      	bcc.n	80058c4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800595a:	6838      	ldr	r0, [r7, #0]
 800595c:	f7fa fcd0 	bl	8000300 <strlen>
 8005960:	61b8      	str	r0, [r7, #24]
 8005962:	231e      	movs	r3, #30
 8005964:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	e01f      	b.n	80059ac <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3302      	adds	r3, #2
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	3328      	adds	r3, #40	@ 0x28
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	429a      	cmp	r2, r3
 800598c:	d10b      	bne.n	80059a6 <mg_http_get_header+0x56>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fd4b 	bl	8005432 <mg_ncasecmp>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <mg_http_get_header+0x56>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	e010      	b.n	80059c8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d208      	bcs.n	80059c6 <mg_http_get_header+0x76>
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	3302      	adds	r3, #2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	4413      	add	r3, r2
 80059be:	3304      	adds	r3, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d2      	bne.n	800596c <mg_http_get_header+0x1c>
  }
  return NULL;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059e0:	2b80      	cmp	r3, #128	@ 0x80
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d904      	bls.n	8005a22 <clen+0x2c>
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	2b7d      	cmp	r3, #125	@ 0x7d
 8005a1c:	d801      	bhi.n	8005a22 <clen+0x2c>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e054      	b.n	8005acc <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8005a22:	7cfb      	ldrb	r3, [r7, #19]
 8005a24:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005a28:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a2a:	d10d      	bne.n	8005a48 <clen+0x52>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	dd0a      	ble.n	8005a48 <clen+0x52>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	3301      	adds	r3, #1
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ffc9 	bl	80059d0 <vcb>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <clen+0x52>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e041      	b.n	8005acc <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a4e:	2be0      	cmp	r3, #224	@ 0xe0
 8005a50:	d116      	bne.n	8005a80 <clen+0x8a>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	dd13      	ble.n	8005a80 <clen+0x8a>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ffb6 	bl	80059d0 <vcb>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <clen+0x8a>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ffad 	bl	80059d0 <vcb>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <clen+0x8a>
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e025      	b.n	8005acc <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8005a86:	2bf0      	cmp	r3, #240	@ 0xf0
 8005a88:	d11f      	bne.n	8005aca <clen+0xd4>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	dd1c      	ble.n	8005aca <clen+0xd4>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3301      	adds	r3, #1
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff ff9a 	bl	80059d0 <vcb>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d013      	beq.n	8005aca <clen+0xd4>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	3302      	adds	r3, #2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff91 	bl	80059d0 <vcb>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <clen+0xd4>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	3303      	adds	r3, #3
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff ff88 	bl	80059d0 <vcb>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <clen+0xd4>
    return 4;
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	e000      	b.n	8005acc <clen+0xd6>
  return 0;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8005ae6:	e007      	b.n	8005af8 <skiptorn+0x24>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d207      	bcs.n	8005b10 <skiptorn+0x3c>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b0a      	cmp	r3, #10
 8005b06:	d003      	beq.n	8005b10 <skiptorn+0x3c>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b0d      	cmp	r3, #13
 8005b0e:	d1eb      	bne.n	8005ae8 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d208      	bcs.n	8005b2a <skiptorn+0x56>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b0d      	cmp	r3, #13
 8005b1e:	d106      	bne.n	8005b2e <skiptorn+0x5a>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b0a      	cmp	r3, #10
 8005b28:	d001      	beq.n	8005b2e <skiptorn+0x5a>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e017      	b.n	8005b5e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d206      	bcs.n	8005b44 <skiptorn+0x70>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b0d      	cmp	r3, #13
 8005b3c:	d102      	bne.n	8005b44 <skiptorn+0x70>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3301      	adds	r3, #1
 8005b42:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d205      	bcs.n	8005b58 <skiptorn+0x84>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	60fa      	str	r2, [r7, #12]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b0a      	cmp	r3, #10
 8005b56:	d001      	beq.n	8005b5c <skiptorn+0x88>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <skiptorn+0x8a>
  return s;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b08a      	sub	sp, #40	@ 0x28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7c:	e09a      	b.n	8005cb4 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d301      	bcc.n	8005b9a <mg_http_parse_headers+0x30>
 8005b96:	2300      	movs	r3, #0
 8005b98:	e092      	b.n	8005cc0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b0a      	cmp	r3, #10
 8005ba0:	f000 808d 	beq.w	8005cbe <mg_http_parse_headers+0x154>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b0d      	cmp	r3, #13
 8005baa:	d105      	bne.n	8005bb8 <mg_http_parse_headers+0x4e>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b0a      	cmp	r3, #10
 8005bb4:	f000 8083 	beq.w	8005cbe <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8005bbc:	e007      	b.n	8005bce <mg_http_parse_headers+0x64>
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	4413      	add	r3, r2
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d20b      	bcs.n	8005bee <mg_http_parse_headers+0x84>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b3a      	cmp	r3, #58	@ 0x3a
 8005bdc:	d007      	beq.n	8005bee <mg_http_parse_headers+0x84>
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff ff08 	bl	80059f6 <clen>
 8005be6:	6238      	str	r0, [r7, #32]
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e7      	bne.n	8005bbe <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <mg_http_parse_headers+0x8e>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e063      	b.n	8005cc0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d206      	bcs.n	8005c0e <mg_http_parse_headers+0xa4>
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fef7 	bl	80059f6 <clen>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <mg_http_parse_headers+0xa8>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e056      	b.n	8005cc0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	60fa      	str	r2, [r7, #12]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8005c1c:	d004      	beq.n	8005c28 <mg_http_parse_headers+0xbe>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e04e      	b.n	8005cc0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d207      	bcs.n	8005c40 <mg_http_parse_headers+0xd6>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d0f4      	beq.n	8005c22 <mg_http_parse_headers+0xb8>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b09      	cmp	r3, #9
 8005c3e:	d0f0      	beq.n	8005c22 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8005c40:	f107 0310 	add.w	r3, r7, #16
 8005c44:	461a      	mov	r2, r3
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff ff43 	bl	8005ad4 <skiptorn>
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <mg_http_parse_headers+0xf6>
 8005c56:	2300      	movs	r3, #0
 8005c58:	e032      	b.n	8005cc0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <mg_http_parse_headers+0x118>
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4413      	add	r3, r2
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d0f2      	beq.n	8005c5a <mg_http_parse_headers+0xf0>
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d0eb      	beq.n	8005c5a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f107 0318 	add.w	r3, r7, #24
 8005c90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c94:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	f107 0210 	add.w	r2, r7, #16
 8005ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005caa:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	f4ff af60 	bcc.w	8005b7e <mg_http_parse_headers+0x14>
  }
  return true;
 8005cbe:	2301      	movs	r3, #1
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3728      	adds	r7, #40	@ 0x28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b092      	sub	sp, #72	@ 0x48
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff fdec 	bl	80058b4 <mg_http_get_request_len>
 8005cdc:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <mg_http_parse+0x24>
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	e000      	b.n	8005cee <mg_http_parse+0x26>
 8005cec:	2300      	movs	r3, #0
 8005cee:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 8005cf0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f018 fcbb 	bl	801e672 <memset>
  if (req_len <= 0) return req_len;
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dc01      	bgt.n	8005d06 <mg_http_parse+0x3e>
 8005d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d04:	e18f      	b.n	8006026 <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d1e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8005d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8005d46:	e009      	b.n	8005d5c <mg_http_parse+0x94>
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4c:	4413      	add	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d56:	441a      	add	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d20b      	bcs.n	8005d7c <mg_http_parse+0xb4>
 8005d64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f7ff fe45 	bl	80059f6 <clen>
 8005d6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e9      	bne.n	8005d48 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8005d74:	e002      	b.n	8005d7c <mg_http_parse+0xb4>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d203      	bcs.n	8005d8c <mg_http_parse+0xc4>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d0f4      	beq.n	8005d76 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8005d92:	e009      	b.n	8005da8 <mg_http_parse+0xe0>
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d98:	4413      	add	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da2:	441a      	add	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d20b      	bcs.n	8005dc8 <mg_http_parse+0x100>
 8005db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fe1f 	bl	80059f6 <clen>
 8005db8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e9      	bne.n	8005d94 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8005dc0:	e002      	b.n	8005dc8 <mg_http_parse+0x100>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d203      	bcs.n	8005dd8 <mg_http_parse+0x110>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d0f4      	beq.n	8005dc2 <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b05      	cmp	r3, #5
 8005dde:	d90b      	bls.n	8005df8 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2205      	movs	r2, #5
 8005de6:	4992      	ldr	r1, [pc, #584]	@ (8006030 <mg_http_parse+0x368>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fb22 	bl	8005432 <mg_ncasecmp>
 8005dee:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <mg_http_parse+0x130>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <mg_http_parse+0x132>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3318      	adds	r3, #24
 8005e00:	461a      	mov	r2, r3
 8005e02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff fe65 	bl	8005ad4 <skiptorn>
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <mg_http_parse+0x14e>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e107      	b.n	8006026 <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d90b      	bls.n	8005e36 <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2205      	movs	r2, #5
 8005e24:	4982      	ldr	r1, [pc, #520]	@ (8006030 <mg_http_parse+0x368>)
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fb03 	bl	8005432 <mg_ncasecmp>
 8005e2c:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <mg_http_parse+0x16e>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <mg_http_parse+0x170>
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 8005e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d12f      	bne.n	8005eae <mg_http_parse+0x1e6>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d02b      	beq.n	8005eae <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8005e56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005e5a:	f083 0301 	eor.w	r3, r3, #1
 8005e5e:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d121      	bne.n	8005ea8 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d11d      	bne.n	8005ea8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	3305      	adds	r3, #5
 8005e72:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 8005e74:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e76:	d917      	bls.n	8005ea8 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	3305      	adds	r3, #5
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b39      	cmp	r3, #57	@ 0x39
 8005e82:	d811      	bhi.n	8005ea8 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	3306      	adds	r3, #6
 8005e8a:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8005e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e8e:	d10b      	bne.n	8005ea8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	3307      	adds	r3, #7
 8005e96:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 8005e98:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e9a:	d905      	bls.n	8005ea8 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b39      	cmp	r3, #57	@ 0x39
 8005ea6:	d902      	bls.n	8005eae <mg_http_parse+0x1e6>
    return -1;
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eac:	e0bb      	b.n	8006026 <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6898      	ldr	r0, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	213f      	movs	r1, #63	@ 0x3f
 8005eba:	f7fa f9d1 	bl	8000260 <memchr>
 8005ebe:	6338      	str	r0, [r7, #48]	@ 0x30
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d015      	beq.n	8005ef2 <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	3301      	adds	r3, #1
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <mg_http_parse+0x23a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d102      	bne.n	8005f08 <mg_http_parse+0x240>
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f06:	e08e      	b.n	8006026 <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0220 	add.w	r2, r3, #32
 8005f0e:	231e      	movs	r3, #30
 8005f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fe29 	bl	8005b6a <mg_http_parse_headers>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f083 0301 	eor.w	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f28:	e07d      	b.n	8006026 <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8005f2a:	4942      	ldr	r1, [pc, #264]	@ (8006034 <mg_http_parse+0x36c>)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fd0f 	bl	8005950 <mg_http_get_header>
 8005f32:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f46:	f7ff fab5 	bl	80054b4 <mg_to_size_t>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f083 0301 	eor.w	r3, r3, #1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <mg_http_parse+0x294>
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f5a:	e064      	b.n	8006026 <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f76:	d12a      	bne.n	8005fce <mg_http_parse+0x306>
 8005f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d127      	bne.n	8005fce <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8005f7e:	f107 0314 	add.w	r3, r7, #20
 8005f82:	492d      	ldr	r1, [pc, #180]	@ (8006038 <mg_http_parse+0x370>)
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00a fadf 	bl	8010548 <mg_str_s>
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	cb0c      	ldmia	r3, {r2, r3}
 8005f92:	c903      	ldmia	r1, {r0, r1}
 8005f94:	f00a fb9b 	bl	80106ce <mg_strcasecmp>
 8005f98:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d017      	beq.n	8005fce <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8005f9e:	f107 031c 	add.w	r3, r7, #28
 8005fa2:	4926      	ldr	r1, [pc, #152]	@ (800603c <mg_http_parse+0x374>)
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f00a facf 	bl	8010548 <mg_str_s>
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	f107 031c 	add.w	r3, r7, #28
 8005fb0:	cb0c      	ldmia	r3, {r2, r3}
 8005fb2:	c903      	ldmia	r1, {r0, r1}
 8005fb4:	f00a fb8b 	bl	80106ce <mg_strcasecmp>
 8005fb8:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <mg_http_parse+0x306>
    hm->body.len = 0;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fd8:	d11b      	bne.n	8006012 <mg_http_parse+0x34a>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d018      	beq.n	8006012 <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8005fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fe4:	4916      	ldr	r1, [pc, #88]	@ (8006040 <mg_http_parse+0x378>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f00a faae 	bl	8010548 <mg_str_s>
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ff2:	cb0c      	ldmia	r3, {r2, r3}
 8005ff4:	3108      	adds	r1, #8
 8005ff6:	c903      	ldmia	r1, {r0, r1}
 8005ff8:	f00a fb69 	bl	80106ce <mg_strcasecmp>
 8005ffc:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <mg_http_parse+0x34a>
    hm->body.len = 0;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800600a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800601a:	429a      	cmp	r2, r3
 800601c:	d202      	bcs.n	8006024 <mg_http_parse+0x35c>
 800601e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006022:	e000      	b.n	8006026 <mg_http_parse+0x35e>

  return req_len;
 8006024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006026:	4618      	mov	r0, r3
 8006028:	3748      	adds	r7, #72	@ 0x48
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	0801f628 	.word	0x0801f628
 8006034:	0801f630 	.word	0x0801f630
 8006038:	0801f640 	.word	0x0801f640
 800603c:	0801f644 	.word	0x0801f644
 8006040:	0801f64c 	.word	0x0801f64c

08006044 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b64      	subs	r3, #100	@ 0x64
 8006050:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8006054:	4293      	cmp	r3, r2
 8006056:	f200 8469 	bhi.w	800692c <mg_http_status_code_str+0x8e8>
 800605a:	a101      	add	r1, pc, #4	@ (adr r1, 8006060 <mg_http_status_code_str+0x1c>)
 800605c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006060:	08006831 	.word	0x08006831
 8006064:	08006835 	.word	0x08006835
 8006068:	08006839 	.word	0x08006839
 800606c:	0800692d 	.word	0x0800692d
 8006070:	0800692d 	.word	0x0800692d
 8006074:	0800692d 	.word	0x0800692d
 8006078:	0800692d 	.word	0x0800692d
 800607c:	0800692d 	.word	0x0800692d
 8006080:	0800692d 	.word	0x0800692d
 8006084:	0800692d 	.word	0x0800692d
 8006088:	0800692d 	.word	0x0800692d
 800608c:	0800692d 	.word	0x0800692d
 8006090:	0800692d 	.word	0x0800692d
 8006094:	0800692d 	.word	0x0800692d
 8006098:	0800692d 	.word	0x0800692d
 800609c:	0800692d 	.word	0x0800692d
 80060a0:	0800692d 	.word	0x0800692d
 80060a4:	0800692d 	.word	0x0800692d
 80060a8:	0800692d 	.word	0x0800692d
 80060ac:	0800692d 	.word	0x0800692d
 80060b0:	0800692d 	.word	0x0800692d
 80060b4:	0800692d 	.word	0x0800692d
 80060b8:	0800692d 	.word	0x0800692d
 80060bc:	0800692d 	.word	0x0800692d
 80060c0:	0800692d 	.word	0x0800692d
 80060c4:	0800692d 	.word	0x0800692d
 80060c8:	0800692d 	.word	0x0800692d
 80060cc:	0800692d 	.word	0x0800692d
 80060d0:	0800692d 	.word	0x0800692d
 80060d4:	0800692d 	.word	0x0800692d
 80060d8:	0800692d 	.word	0x0800692d
 80060dc:	0800692d 	.word	0x0800692d
 80060e0:	0800692d 	.word	0x0800692d
 80060e4:	0800692d 	.word	0x0800692d
 80060e8:	0800692d 	.word	0x0800692d
 80060ec:	0800692d 	.word	0x0800692d
 80060f0:	0800692d 	.word	0x0800692d
 80060f4:	0800692d 	.word	0x0800692d
 80060f8:	0800692d 	.word	0x0800692d
 80060fc:	0800692d 	.word	0x0800692d
 8006100:	0800692d 	.word	0x0800692d
 8006104:	0800692d 	.word	0x0800692d
 8006108:	0800692d 	.word	0x0800692d
 800610c:	0800692d 	.word	0x0800692d
 8006110:	0800692d 	.word	0x0800692d
 8006114:	0800692d 	.word	0x0800692d
 8006118:	0800692d 	.word	0x0800692d
 800611c:	0800692d 	.word	0x0800692d
 8006120:	0800692d 	.word	0x0800692d
 8006124:	0800692d 	.word	0x0800692d
 8006128:	0800692d 	.word	0x0800692d
 800612c:	0800692d 	.word	0x0800692d
 8006130:	0800692d 	.word	0x0800692d
 8006134:	0800692d 	.word	0x0800692d
 8006138:	0800692d 	.word	0x0800692d
 800613c:	0800692d 	.word	0x0800692d
 8006140:	0800692d 	.word	0x0800692d
 8006144:	0800692d 	.word	0x0800692d
 8006148:	0800692d 	.word	0x0800692d
 800614c:	0800692d 	.word	0x0800692d
 8006150:	0800692d 	.word	0x0800692d
 8006154:	0800692d 	.word	0x0800692d
 8006158:	0800692d 	.word	0x0800692d
 800615c:	0800692d 	.word	0x0800692d
 8006160:	0800692d 	.word	0x0800692d
 8006164:	0800692d 	.word	0x0800692d
 8006168:	0800692d 	.word	0x0800692d
 800616c:	0800692d 	.word	0x0800692d
 8006170:	0800692d 	.word	0x0800692d
 8006174:	0800692d 	.word	0x0800692d
 8006178:	0800692d 	.word	0x0800692d
 800617c:	0800692d 	.word	0x0800692d
 8006180:	0800692d 	.word	0x0800692d
 8006184:	0800692d 	.word	0x0800692d
 8006188:	0800692d 	.word	0x0800692d
 800618c:	0800692d 	.word	0x0800692d
 8006190:	0800692d 	.word	0x0800692d
 8006194:	0800692d 	.word	0x0800692d
 8006198:	0800692d 	.word	0x0800692d
 800619c:	0800692d 	.word	0x0800692d
 80061a0:	0800692d 	.word	0x0800692d
 80061a4:	0800692d 	.word	0x0800692d
 80061a8:	0800692d 	.word	0x0800692d
 80061ac:	0800692d 	.word	0x0800692d
 80061b0:	0800692d 	.word	0x0800692d
 80061b4:	0800692d 	.word	0x0800692d
 80061b8:	0800692d 	.word	0x0800692d
 80061bc:	0800692d 	.word	0x0800692d
 80061c0:	0800692d 	.word	0x0800692d
 80061c4:	0800692d 	.word	0x0800692d
 80061c8:	0800692d 	.word	0x0800692d
 80061cc:	0800692d 	.word	0x0800692d
 80061d0:	0800692d 	.word	0x0800692d
 80061d4:	0800692d 	.word	0x0800692d
 80061d8:	0800692d 	.word	0x0800692d
 80061dc:	0800692d 	.word	0x0800692d
 80061e0:	0800692d 	.word	0x0800692d
 80061e4:	0800692d 	.word	0x0800692d
 80061e8:	0800692d 	.word	0x0800692d
 80061ec:	0800692d 	.word	0x0800692d
 80061f0:	0800683d 	.word	0x0800683d
 80061f4:	08006841 	.word	0x08006841
 80061f8:	08006845 	.word	0x08006845
 80061fc:	08006849 	.word	0x08006849
 8006200:	0800684d 	.word	0x0800684d
 8006204:	08006851 	.word	0x08006851
 8006208:	08006855 	.word	0x08006855
 800620c:	08006859 	.word	0x08006859
 8006210:	0800685d 	.word	0x0800685d
 8006214:	0800692d 	.word	0x0800692d
 8006218:	0800692d 	.word	0x0800692d
 800621c:	0800692d 	.word	0x0800692d
 8006220:	0800692d 	.word	0x0800692d
 8006224:	0800692d 	.word	0x0800692d
 8006228:	0800692d 	.word	0x0800692d
 800622c:	0800692d 	.word	0x0800692d
 8006230:	0800692d 	.word	0x0800692d
 8006234:	0800692d 	.word	0x0800692d
 8006238:	0800692d 	.word	0x0800692d
 800623c:	0800692d 	.word	0x0800692d
 8006240:	0800692d 	.word	0x0800692d
 8006244:	0800692d 	.word	0x0800692d
 8006248:	0800692d 	.word	0x0800692d
 800624c:	0800692d 	.word	0x0800692d
 8006250:	0800692d 	.word	0x0800692d
 8006254:	0800692d 	.word	0x0800692d
 8006258:	08006861 	.word	0x08006861
 800625c:	0800692d 	.word	0x0800692d
 8006260:	0800692d 	.word	0x0800692d
 8006264:	0800692d 	.word	0x0800692d
 8006268:	0800692d 	.word	0x0800692d
 800626c:	0800692d 	.word	0x0800692d
 8006270:	0800692d 	.word	0x0800692d
 8006274:	0800692d 	.word	0x0800692d
 8006278:	0800692d 	.word	0x0800692d
 800627c:	0800692d 	.word	0x0800692d
 8006280:	0800692d 	.word	0x0800692d
 8006284:	0800692d 	.word	0x0800692d
 8006288:	0800692d 	.word	0x0800692d
 800628c:	0800692d 	.word	0x0800692d
 8006290:	0800692d 	.word	0x0800692d
 8006294:	0800692d 	.word	0x0800692d
 8006298:	0800692d 	.word	0x0800692d
 800629c:	0800692d 	.word	0x0800692d
 80062a0:	0800692d 	.word	0x0800692d
 80062a4:	0800692d 	.word	0x0800692d
 80062a8:	0800692d 	.word	0x0800692d
 80062ac:	0800692d 	.word	0x0800692d
 80062b0:	0800692d 	.word	0x0800692d
 80062b4:	0800692d 	.word	0x0800692d
 80062b8:	0800692d 	.word	0x0800692d
 80062bc:	0800692d 	.word	0x0800692d
 80062c0:	0800692d 	.word	0x0800692d
 80062c4:	0800692d 	.word	0x0800692d
 80062c8:	0800692d 	.word	0x0800692d
 80062cc:	0800692d 	.word	0x0800692d
 80062d0:	0800692d 	.word	0x0800692d
 80062d4:	0800692d 	.word	0x0800692d
 80062d8:	0800692d 	.word	0x0800692d
 80062dc:	0800692d 	.word	0x0800692d
 80062e0:	0800692d 	.word	0x0800692d
 80062e4:	0800692d 	.word	0x0800692d
 80062e8:	0800692d 	.word	0x0800692d
 80062ec:	0800692d 	.word	0x0800692d
 80062f0:	0800692d 	.word	0x0800692d
 80062f4:	0800692d 	.word	0x0800692d
 80062f8:	0800692d 	.word	0x0800692d
 80062fc:	0800692d 	.word	0x0800692d
 8006300:	0800692d 	.word	0x0800692d
 8006304:	0800692d 	.word	0x0800692d
 8006308:	0800692d 	.word	0x0800692d
 800630c:	0800692d 	.word	0x0800692d
 8006310:	0800692d 	.word	0x0800692d
 8006314:	0800692d 	.word	0x0800692d
 8006318:	0800692d 	.word	0x0800692d
 800631c:	0800692d 	.word	0x0800692d
 8006320:	0800692d 	.word	0x0800692d
 8006324:	0800692d 	.word	0x0800692d
 8006328:	0800692d 	.word	0x0800692d
 800632c:	0800692d 	.word	0x0800692d
 8006330:	0800692d 	.word	0x0800692d
 8006334:	0800692d 	.word	0x0800692d
 8006338:	0800692d 	.word	0x0800692d
 800633c:	0800692d 	.word	0x0800692d
 8006340:	0800692d 	.word	0x0800692d
 8006344:	0800692d 	.word	0x0800692d
 8006348:	0800692d 	.word	0x0800692d
 800634c:	0800692d 	.word	0x0800692d
 8006350:	0800692d 	.word	0x0800692d
 8006354:	0800692d 	.word	0x0800692d
 8006358:	0800692d 	.word	0x0800692d
 800635c:	0800692d 	.word	0x0800692d
 8006360:	0800692d 	.word	0x0800692d
 8006364:	0800692d 	.word	0x0800692d
 8006368:	0800692d 	.word	0x0800692d
 800636c:	0800692d 	.word	0x0800692d
 8006370:	0800692d 	.word	0x0800692d
 8006374:	0800692d 	.word	0x0800692d
 8006378:	0800692d 	.word	0x0800692d
 800637c:	0800692d 	.word	0x0800692d
 8006380:	08006865 	.word	0x08006865
 8006384:	08006869 	.word	0x08006869
 8006388:	0800686d 	.word	0x0800686d
 800638c:	08006871 	.word	0x08006871
 8006390:	08006875 	.word	0x08006875
 8006394:	08006879 	.word	0x08006879
 8006398:	0800692d 	.word	0x0800692d
 800639c:	0800687d 	.word	0x0800687d
 80063a0:	08006881 	.word	0x08006881
 80063a4:	0800692d 	.word	0x0800692d
 80063a8:	0800692d 	.word	0x0800692d
 80063ac:	0800692d 	.word	0x0800692d
 80063b0:	0800692d 	.word	0x0800692d
 80063b4:	0800692d 	.word	0x0800692d
 80063b8:	0800692d 	.word	0x0800692d
 80063bc:	0800692d 	.word	0x0800692d
 80063c0:	0800692d 	.word	0x0800692d
 80063c4:	0800692d 	.word	0x0800692d
 80063c8:	0800692d 	.word	0x0800692d
 80063cc:	0800692d 	.word	0x0800692d
 80063d0:	0800692d 	.word	0x0800692d
 80063d4:	0800692d 	.word	0x0800692d
 80063d8:	0800692d 	.word	0x0800692d
 80063dc:	0800692d 	.word	0x0800692d
 80063e0:	0800692d 	.word	0x0800692d
 80063e4:	0800692d 	.word	0x0800692d
 80063e8:	0800692d 	.word	0x0800692d
 80063ec:	0800692d 	.word	0x0800692d
 80063f0:	0800692d 	.word	0x0800692d
 80063f4:	0800692d 	.word	0x0800692d
 80063f8:	0800692d 	.word	0x0800692d
 80063fc:	0800692d 	.word	0x0800692d
 8006400:	0800692d 	.word	0x0800692d
 8006404:	0800692d 	.word	0x0800692d
 8006408:	0800692d 	.word	0x0800692d
 800640c:	0800692d 	.word	0x0800692d
 8006410:	0800692d 	.word	0x0800692d
 8006414:	0800692d 	.word	0x0800692d
 8006418:	0800692d 	.word	0x0800692d
 800641c:	0800692d 	.word	0x0800692d
 8006420:	0800692d 	.word	0x0800692d
 8006424:	0800692d 	.word	0x0800692d
 8006428:	0800692d 	.word	0x0800692d
 800642c:	0800692d 	.word	0x0800692d
 8006430:	0800692d 	.word	0x0800692d
 8006434:	0800692d 	.word	0x0800692d
 8006438:	0800692d 	.word	0x0800692d
 800643c:	0800692d 	.word	0x0800692d
 8006440:	0800692d 	.word	0x0800692d
 8006444:	0800692d 	.word	0x0800692d
 8006448:	0800692d 	.word	0x0800692d
 800644c:	0800692d 	.word	0x0800692d
 8006450:	0800692d 	.word	0x0800692d
 8006454:	0800692d 	.word	0x0800692d
 8006458:	0800692d 	.word	0x0800692d
 800645c:	0800692d 	.word	0x0800692d
 8006460:	0800692d 	.word	0x0800692d
 8006464:	0800692d 	.word	0x0800692d
 8006468:	0800692d 	.word	0x0800692d
 800646c:	0800692d 	.word	0x0800692d
 8006470:	0800692d 	.word	0x0800692d
 8006474:	0800692d 	.word	0x0800692d
 8006478:	0800692d 	.word	0x0800692d
 800647c:	0800692d 	.word	0x0800692d
 8006480:	0800692d 	.word	0x0800692d
 8006484:	0800692d 	.word	0x0800692d
 8006488:	0800692d 	.word	0x0800692d
 800648c:	0800692d 	.word	0x0800692d
 8006490:	0800692d 	.word	0x0800692d
 8006494:	0800692d 	.word	0x0800692d
 8006498:	0800692d 	.word	0x0800692d
 800649c:	0800692d 	.word	0x0800692d
 80064a0:	0800692d 	.word	0x0800692d
 80064a4:	0800692d 	.word	0x0800692d
 80064a8:	0800692d 	.word	0x0800692d
 80064ac:	0800692d 	.word	0x0800692d
 80064b0:	0800692d 	.word	0x0800692d
 80064b4:	0800692d 	.word	0x0800692d
 80064b8:	0800692d 	.word	0x0800692d
 80064bc:	0800692d 	.word	0x0800692d
 80064c0:	0800692d 	.word	0x0800692d
 80064c4:	0800692d 	.word	0x0800692d
 80064c8:	0800692d 	.word	0x0800692d
 80064cc:	0800692d 	.word	0x0800692d
 80064d0:	0800692d 	.word	0x0800692d
 80064d4:	0800692d 	.word	0x0800692d
 80064d8:	0800692d 	.word	0x0800692d
 80064dc:	0800692d 	.word	0x0800692d
 80064e0:	0800692d 	.word	0x0800692d
 80064e4:	0800692d 	.word	0x0800692d
 80064e8:	0800692d 	.word	0x0800692d
 80064ec:	0800692d 	.word	0x0800692d
 80064f0:	0800692d 	.word	0x0800692d
 80064f4:	0800692d 	.word	0x0800692d
 80064f8:	0800692d 	.word	0x0800692d
 80064fc:	0800692d 	.word	0x0800692d
 8006500:	0800692d 	.word	0x0800692d
 8006504:	0800692d 	.word	0x0800692d
 8006508:	0800692d 	.word	0x0800692d
 800650c:	0800692d 	.word	0x0800692d
 8006510:	08006885 	.word	0x08006885
 8006514:	08006889 	.word	0x08006889
 8006518:	0800688d 	.word	0x0800688d
 800651c:	08006891 	.word	0x08006891
 8006520:	08006895 	.word	0x08006895
 8006524:	08006899 	.word	0x08006899
 8006528:	0800689d 	.word	0x0800689d
 800652c:	080068a1 	.word	0x080068a1
 8006530:	080068a5 	.word	0x080068a5
 8006534:	080068a9 	.word	0x080068a9
 8006538:	080068ad 	.word	0x080068ad
 800653c:	080068b1 	.word	0x080068b1
 8006540:	080068b5 	.word	0x080068b5
 8006544:	080068b9 	.word	0x080068b9
 8006548:	080068bd 	.word	0x080068bd
 800654c:	080068c1 	.word	0x080068c1
 8006550:	080068c5 	.word	0x080068c5
 8006554:	080068c9 	.word	0x080068c9
 8006558:	080068cd 	.word	0x080068cd
 800655c:	0800692d 	.word	0x0800692d
 8006560:	0800692d 	.word	0x0800692d
 8006564:	080068d1 	.word	0x080068d1
 8006568:	080068d5 	.word	0x080068d5
 800656c:	080068d9 	.word	0x080068d9
 8006570:	080068dd 	.word	0x080068dd
 8006574:	0800692d 	.word	0x0800692d
 8006578:	080068e1 	.word	0x080068e1
 800657c:	0800692d 	.word	0x0800692d
 8006580:	080068e5 	.word	0x080068e5
 8006584:	080068e9 	.word	0x080068e9
 8006588:	0800692d 	.word	0x0800692d
 800658c:	080068ed 	.word	0x080068ed
 8006590:	0800692d 	.word	0x0800692d
 8006594:	0800692d 	.word	0x0800692d
 8006598:	0800692d 	.word	0x0800692d
 800659c:	0800692d 	.word	0x0800692d
 80065a0:	0800692d 	.word	0x0800692d
 80065a4:	0800692d 	.word	0x0800692d
 80065a8:	0800692d 	.word	0x0800692d
 80065ac:	0800692d 	.word	0x0800692d
 80065b0:	0800692d 	.word	0x0800692d
 80065b4:	0800692d 	.word	0x0800692d
 80065b8:	0800692d 	.word	0x0800692d
 80065bc:	0800692d 	.word	0x0800692d
 80065c0:	080068f1 	.word	0x080068f1
 80065c4:	0800692d 	.word	0x0800692d
 80065c8:	0800692d 	.word	0x0800692d
 80065cc:	0800692d 	.word	0x0800692d
 80065d0:	0800692d 	.word	0x0800692d
 80065d4:	0800692d 	.word	0x0800692d
 80065d8:	0800692d 	.word	0x0800692d
 80065dc:	080068f5 	.word	0x080068f5
 80065e0:	0800692d 	.word	0x0800692d
 80065e4:	0800692d 	.word	0x0800692d
 80065e8:	0800692d 	.word	0x0800692d
 80065ec:	0800692d 	.word	0x0800692d
 80065f0:	0800692d 	.word	0x0800692d
 80065f4:	0800692d 	.word	0x0800692d
 80065f8:	0800692d 	.word	0x0800692d
 80065fc:	0800692d 	.word	0x0800692d
 8006600:	0800692d 	.word	0x0800692d
 8006604:	0800692d 	.word	0x0800692d
 8006608:	0800692d 	.word	0x0800692d
 800660c:	0800692d 	.word	0x0800692d
 8006610:	0800692d 	.word	0x0800692d
 8006614:	0800692d 	.word	0x0800692d
 8006618:	0800692d 	.word	0x0800692d
 800661c:	0800692d 	.word	0x0800692d
 8006620:	0800692d 	.word	0x0800692d
 8006624:	0800692d 	.word	0x0800692d
 8006628:	0800692d 	.word	0x0800692d
 800662c:	0800692d 	.word	0x0800692d
 8006630:	0800692d 	.word	0x0800692d
 8006634:	0800692d 	.word	0x0800692d
 8006638:	0800692d 	.word	0x0800692d
 800663c:	0800692d 	.word	0x0800692d
 8006640:	0800692d 	.word	0x0800692d
 8006644:	0800692d 	.word	0x0800692d
 8006648:	0800692d 	.word	0x0800692d
 800664c:	0800692d 	.word	0x0800692d
 8006650:	0800692d 	.word	0x0800692d
 8006654:	0800692d 	.word	0x0800692d
 8006658:	0800692d 	.word	0x0800692d
 800665c:	0800692d 	.word	0x0800692d
 8006660:	0800692d 	.word	0x0800692d
 8006664:	0800692d 	.word	0x0800692d
 8006668:	0800692d 	.word	0x0800692d
 800666c:	0800692d 	.word	0x0800692d
 8006670:	0800692d 	.word	0x0800692d
 8006674:	0800692d 	.word	0x0800692d
 8006678:	0800692d 	.word	0x0800692d
 800667c:	0800692d 	.word	0x0800692d
 8006680:	0800692d 	.word	0x0800692d
 8006684:	0800692d 	.word	0x0800692d
 8006688:	0800692d 	.word	0x0800692d
 800668c:	0800692d 	.word	0x0800692d
 8006690:	0800692d 	.word	0x0800692d
 8006694:	0800692d 	.word	0x0800692d
 8006698:	0800692d 	.word	0x0800692d
 800669c:	080068f9 	.word	0x080068f9
 80066a0:	080068fd 	.word	0x080068fd
 80066a4:	08006901 	.word	0x08006901
 80066a8:	08006905 	.word	0x08006905
 80066ac:	08006909 	.word	0x08006909
 80066b0:	0800690d 	.word	0x0800690d
 80066b4:	08006911 	.word	0x08006911
 80066b8:	08006915 	.word	0x08006915
 80066bc:	08006919 	.word	0x08006919
 80066c0:	0800691d 	.word	0x0800691d
 80066c4:	0800692d 	.word	0x0800692d
 80066c8:	08006921 	.word	0x08006921
 80066cc:	08006925 	.word	0x08006925
 80066d0:	0800692d 	.word	0x0800692d
 80066d4:	0800692d 	.word	0x0800692d
 80066d8:	0800692d 	.word	0x0800692d
 80066dc:	0800692d 	.word	0x0800692d
 80066e0:	0800692d 	.word	0x0800692d
 80066e4:	0800692d 	.word	0x0800692d
 80066e8:	0800692d 	.word	0x0800692d
 80066ec:	0800692d 	.word	0x0800692d
 80066f0:	0800692d 	.word	0x0800692d
 80066f4:	0800692d 	.word	0x0800692d
 80066f8:	0800692d 	.word	0x0800692d
 80066fc:	0800692d 	.word	0x0800692d
 8006700:	0800692d 	.word	0x0800692d
 8006704:	0800692d 	.word	0x0800692d
 8006708:	0800692d 	.word	0x0800692d
 800670c:	0800692d 	.word	0x0800692d
 8006710:	0800692d 	.word	0x0800692d
 8006714:	0800692d 	.word	0x0800692d
 8006718:	0800692d 	.word	0x0800692d
 800671c:	0800692d 	.word	0x0800692d
 8006720:	0800692d 	.word	0x0800692d
 8006724:	0800692d 	.word	0x0800692d
 8006728:	0800692d 	.word	0x0800692d
 800672c:	0800692d 	.word	0x0800692d
 8006730:	0800692d 	.word	0x0800692d
 8006734:	0800692d 	.word	0x0800692d
 8006738:	0800692d 	.word	0x0800692d
 800673c:	0800692d 	.word	0x0800692d
 8006740:	0800692d 	.word	0x0800692d
 8006744:	0800692d 	.word	0x0800692d
 8006748:	0800692d 	.word	0x0800692d
 800674c:	0800692d 	.word	0x0800692d
 8006750:	0800692d 	.word	0x0800692d
 8006754:	0800692d 	.word	0x0800692d
 8006758:	0800692d 	.word	0x0800692d
 800675c:	0800692d 	.word	0x0800692d
 8006760:	0800692d 	.word	0x0800692d
 8006764:	0800692d 	.word	0x0800692d
 8006768:	0800692d 	.word	0x0800692d
 800676c:	0800692d 	.word	0x0800692d
 8006770:	0800692d 	.word	0x0800692d
 8006774:	0800692d 	.word	0x0800692d
 8006778:	0800692d 	.word	0x0800692d
 800677c:	0800692d 	.word	0x0800692d
 8006780:	0800692d 	.word	0x0800692d
 8006784:	0800692d 	.word	0x0800692d
 8006788:	0800692d 	.word	0x0800692d
 800678c:	0800692d 	.word	0x0800692d
 8006790:	0800692d 	.word	0x0800692d
 8006794:	0800692d 	.word	0x0800692d
 8006798:	0800692d 	.word	0x0800692d
 800679c:	0800692d 	.word	0x0800692d
 80067a0:	0800692d 	.word	0x0800692d
 80067a4:	0800692d 	.word	0x0800692d
 80067a8:	0800692d 	.word	0x0800692d
 80067ac:	0800692d 	.word	0x0800692d
 80067b0:	0800692d 	.word	0x0800692d
 80067b4:	0800692d 	.word	0x0800692d
 80067b8:	0800692d 	.word	0x0800692d
 80067bc:	0800692d 	.word	0x0800692d
 80067c0:	0800692d 	.word	0x0800692d
 80067c4:	0800692d 	.word	0x0800692d
 80067c8:	0800692d 	.word	0x0800692d
 80067cc:	0800692d 	.word	0x0800692d
 80067d0:	0800692d 	.word	0x0800692d
 80067d4:	0800692d 	.word	0x0800692d
 80067d8:	0800692d 	.word	0x0800692d
 80067dc:	0800692d 	.word	0x0800692d
 80067e0:	0800692d 	.word	0x0800692d
 80067e4:	0800692d 	.word	0x0800692d
 80067e8:	0800692d 	.word	0x0800692d
 80067ec:	0800692d 	.word	0x0800692d
 80067f0:	0800692d 	.word	0x0800692d
 80067f4:	0800692d 	.word	0x0800692d
 80067f8:	0800692d 	.word	0x0800692d
 80067fc:	0800692d 	.word	0x0800692d
 8006800:	0800692d 	.word	0x0800692d
 8006804:	0800692d 	.word	0x0800692d
 8006808:	0800692d 	.word	0x0800692d
 800680c:	0800692d 	.word	0x0800692d
 8006810:	0800692d 	.word	0x0800692d
 8006814:	0800692d 	.word	0x0800692d
 8006818:	0800692d 	.word	0x0800692d
 800681c:	0800692d 	.word	0x0800692d
 8006820:	0800692d 	.word	0x0800692d
 8006824:	0800692d 	.word	0x0800692d
 8006828:	0800692d 	.word	0x0800692d
 800682c:	08006929 	.word	0x08006929
    case 100: return "Continue";
 8006830:	4b42      	ldr	r3, [pc, #264]	@ (800693c <mg_http_status_code_str+0x8f8>)
 8006832:	e07c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8006834:	4b42      	ldr	r3, [pc, #264]	@ (8006940 <mg_http_status_code_str+0x8fc>)
 8006836:	e07a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8006838:	4b42      	ldr	r3, [pc, #264]	@ (8006944 <mg_http_status_code_str+0x900>)
 800683a:	e078      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800683c:	4b42      	ldr	r3, [pc, #264]	@ (8006948 <mg_http_status_code_str+0x904>)
 800683e:	e076      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8006840:	4b42      	ldr	r3, [pc, #264]	@ (800694c <mg_http_status_code_str+0x908>)
 8006842:	e074      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8006844:	4b42      	ldr	r3, [pc, #264]	@ (8006950 <mg_http_status_code_str+0x90c>)
 8006846:	e072      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8006848:	4b42      	ldr	r3, [pc, #264]	@ (8006954 <mg_http_status_code_str+0x910>)
 800684a:	e070      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800684c:	4b42      	ldr	r3, [pc, #264]	@ (8006958 <mg_http_status_code_str+0x914>)
 800684e:	e06e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8006850:	4b42      	ldr	r3, [pc, #264]	@ (800695c <mg_http_status_code_str+0x918>)
 8006852:	e06c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8006854:	4b42      	ldr	r3, [pc, #264]	@ (8006960 <mg_http_status_code_str+0x91c>)
 8006856:	e06a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8006858:	4b42      	ldr	r3, [pc, #264]	@ (8006964 <mg_http_status_code_str+0x920>)
 800685a:	e068      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800685c:	4b42      	ldr	r3, [pc, #264]	@ (8006968 <mg_http_status_code_str+0x924>)
 800685e:	e066      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8006860:	4b42      	ldr	r3, [pc, #264]	@ (800696c <mg_http_status_code_str+0x928>)
 8006862:	e064      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8006864:	4b42      	ldr	r3, [pc, #264]	@ (8006970 <mg_http_status_code_str+0x92c>)
 8006866:	e062      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8006868:	4b42      	ldr	r3, [pc, #264]	@ (8006974 <mg_http_status_code_str+0x930>)
 800686a:	e060      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800686c:	4b42      	ldr	r3, [pc, #264]	@ (8006978 <mg_http_status_code_str+0x934>)
 800686e:	e05e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8006870:	4b42      	ldr	r3, [pc, #264]	@ (800697c <mg_http_status_code_str+0x938>)
 8006872:	e05c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8006874:	4b42      	ldr	r3, [pc, #264]	@ (8006980 <mg_http_status_code_str+0x93c>)
 8006876:	e05a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8006878:	4b42      	ldr	r3, [pc, #264]	@ (8006984 <mg_http_status_code_str+0x940>)
 800687a:	e058      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800687c:	4b42      	ldr	r3, [pc, #264]	@ (8006988 <mg_http_status_code_str+0x944>)
 800687e:	e056      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8006880:	4b42      	ldr	r3, [pc, #264]	@ (800698c <mg_http_status_code_str+0x948>)
 8006882:	e054      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8006884:	4b42      	ldr	r3, [pc, #264]	@ (8006990 <mg_http_status_code_str+0x94c>)
 8006886:	e052      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8006888:	4b42      	ldr	r3, [pc, #264]	@ (8006994 <mg_http_status_code_str+0x950>)
 800688a:	e050      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800688c:	4b42      	ldr	r3, [pc, #264]	@ (8006998 <mg_http_status_code_str+0x954>)
 800688e:	e04e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8006890:	4b42      	ldr	r3, [pc, #264]	@ (800699c <mg_http_status_code_str+0x958>)
 8006892:	e04c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8006894:	4b42      	ldr	r3, [pc, #264]	@ (80069a0 <mg_http_status_code_str+0x95c>)
 8006896:	e04a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8006898:	4b42      	ldr	r3, [pc, #264]	@ (80069a4 <mg_http_status_code_str+0x960>)
 800689a:	e048      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800689c:	4b42      	ldr	r3, [pc, #264]	@ (80069a8 <mg_http_status_code_str+0x964>)
 800689e:	e046      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 80068a0:	4b42      	ldr	r3, [pc, #264]	@ (80069ac <mg_http_status_code_str+0x968>)
 80068a2:	e044      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 80068a4:	4b42      	ldr	r3, [pc, #264]	@ (80069b0 <mg_http_status_code_str+0x96c>)
 80068a6:	e042      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 80068a8:	4b42      	ldr	r3, [pc, #264]	@ (80069b4 <mg_http_status_code_str+0x970>)
 80068aa:	e040      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 80068ac:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <mg_http_status_code_str+0x974>)
 80068ae:	e03e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 80068b0:	4b42      	ldr	r3, [pc, #264]	@ (80069bc <mg_http_status_code_str+0x978>)
 80068b2:	e03c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 80068b4:	4b42      	ldr	r3, [pc, #264]	@ (80069c0 <mg_http_status_code_str+0x97c>)
 80068b6:	e03a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 80068b8:	4b42      	ldr	r3, [pc, #264]	@ (80069c4 <mg_http_status_code_str+0x980>)
 80068ba:	e038      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 80068bc:	4b42      	ldr	r3, [pc, #264]	@ (80069c8 <mg_http_status_code_str+0x984>)
 80068be:	e036      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80068c0:	4b42      	ldr	r3, [pc, #264]	@ (80069cc <mg_http_status_code_str+0x988>)
 80068c2:	e034      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80068c4:	4b42      	ldr	r3, [pc, #264]	@ (80069d0 <mg_http_status_code_str+0x98c>)
 80068c6:	e032      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80068c8:	4b42      	ldr	r3, [pc, #264]	@ (80069d4 <mg_http_status_code_str+0x990>)
 80068ca:	e030      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80068cc:	4b42      	ldr	r3, [pc, #264]	@ (80069d8 <mg_http_status_code_str+0x994>)
 80068ce:	e02e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80068d0:	4b42      	ldr	r3, [pc, #264]	@ (80069dc <mg_http_status_code_str+0x998>)
 80068d2:	e02c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80068d4:	4b42      	ldr	r3, [pc, #264]	@ (80069e0 <mg_http_status_code_str+0x99c>)
 80068d6:	e02a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80068d8:	4b42      	ldr	r3, [pc, #264]	@ (80069e4 <mg_http_status_code_str+0x9a0>)
 80068da:	e028      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80068dc:	4b42      	ldr	r3, [pc, #264]	@ (80069e8 <mg_http_status_code_str+0x9a4>)
 80068de:	e026      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80068e0:	4b42      	ldr	r3, [pc, #264]	@ (80069ec <mg_http_status_code_str+0x9a8>)
 80068e2:	e024      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80068e4:	4b42      	ldr	r3, [pc, #264]	@ (80069f0 <mg_http_status_code_str+0x9ac>)
 80068e6:	e022      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80068e8:	4b42      	ldr	r3, [pc, #264]	@ (80069f4 <mg_http_status_code_str+0x9b0>)
 80068ea:	e020      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80068ec:	4b42      	ldr	r3, [pc, #264]	@ (80069f8 <mg_http_status_code_str+0x9b4>)
 80068ee:	e01e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80068f0:	4b42      	ldr	r3, [pc, #264]	@ (80069fc <mg_http_status_code_str+0x9b8>)
 80068f2:	e01c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80068f4:	4b42      	ldr	r3, [pc, #264]	@ (8006a00 <mg_http_status_code_str+0x9bc>)
 80068f6:	e01a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80068f8:	4b42      	ldr	r3, [pc, #264]	@ (8006a04 <mg_http_status_code_str+0x9c0>)
 80068fa:	e018      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80068fc:	4b42      	ldr	r3, [pc, #264]	@ (8006a08 <mg_http_status_code_str+0x9c4>)
 80068fe:	e016      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8006900:	4b42      	ldr	r3, [pc, #264]	@ (8006a0c <mg_http_status_code_str+0x9c8>)
 8006902:	e014      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 8006904:	4b42      	ldr	r3, [pc, #264]	@ (8006a10 <mg_http_status_code_str+0x9cc>)
 8006906:	e012      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8006908:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <mg_http_status_code_str+0x9d0>)
 800690a:	e010      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800690c:	4b42      	ldr	r3, [pc, #264]	@ (8006a18 <mg_http_status_code_str+0x9d4>)
 800690e:	e00e      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8006910:	4b42      	ldr	r3, [pc, #264]	@ (8006a1c <mg_http_status_code_str+0x9d8>)
 8006912:	e00c      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 8006914:	4b42      	ldr	r3, [pc, #264]	@ (8006a20 <mg_http_status_code_str+0x9dc>)
 8006916:	e00a      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 8006918:	4b42      	ldr	r3, [pc, #264]	@ (8006a24 <mg_http_status_code_str+0x9e0>)
 800691a:	e008      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800691c:	4b42      	ldr	r3, [pc, #264]	@ (8006a28 <mg_http_status_code_str+0x9e4>)
 800691e:	e006      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8006920:	4b42      	ldr	r3, [pc, #264]	@ (8006a2c <mg_http_status_code_str+0x9e8>)
 8006922:	e004      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8006924:	4b42      	ldr	r3, [pc, #264]	@ (8006a30 <mg_http_status_code_str+0x9ec>)
 8006926:	e002      	b.n	800692e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8006928:	4b42      	ldr	r3, [pc, #264]	@ (8006a34 <mg_http_status_code_str+0x9f0>)
 800692a:	e000      	b.n	800692e <mg_http_status_code_str+0x8ea>
    default: return "";
 800692c:	4b42      	ldr	r3, [pc, #264]	@ (8006a38 <mg_http_status_code_str+0x9f4>)
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	0801f66c 	.word	0x0801f66c
 8006940:	0801f678 	.word	0x0801f678
 8006944:	0801f68c 	.word	0x0801f68c
 8006948:	0801f698 	.word	0x0801f698
 800694c:	0801f69c 	.word	0x0801f69c
 8006950:	0801f6a4 	.word	0x0801f6a4
 8006954:	0801f6b0 	.word	0x0801f6b0
 8006958:	0801f6d0 	.word	0x0801f6d0
 800695c:	0801f6dc 	.word	0x0801f6dc
 8006960:	0801f6ec 	.word	0x0801f6ec
 8006964:	0801f6fc 	.word	0x0801f6fc
 8006968:	0801f70c 	.word	0x0801f70c
 800696c:	0801f720 	.word	0x0801f720
 8006970:	0801f728 	.word	0x0801f728
 8006974:	0801f73c 	.word	0x0801f73c
 8006978:	0801f750 	.word	0x0801f750
 800697c:	0801f758 	.word	0x0801f758
 8006980:	0801f764 	.word	0x0801f764
 8006984:	0801f774 	.word	0x0801f774
 8006988:	0801f780 	.word	0x0801f780
 800698c:	0801f794 	.word	0x0801f794
 8006990:	0801f7a8 	.word	0x0801f7a8
 8006994:	0801f7b4 	.word	0x0801f7b4
 8006998:	0801f7c4 	.word	0x0801f7c4
 800699c:	0801f7d8 	.word	0x0801f7d8
 80069a0:	0801f7e4 	.word	0x0801f7e4
 80069a4:	0801f7f0 	.word	0x0801f7f0
 80069a8:	0801f804 	.word	0x0801f804
 80069ac:	0801f814 	.word	0x0801f814
 80069b0:	0801f834 	.word	0x0801f834
 80069b4:	0801f844 	.word	0x0801f844
 80069b8:	0801f850 	.word	0x0801f850
 80069bc:	0801f858 	.word	0x0801f858
 80069c0:	0801f868 	.word	0x0801f868
 80069c4:	0801f87c 	.word	0x0801f87c
 80069c8:	0801f890 	.word	0x0801f890
 80069cc:	0801f8a8 	.word	0x0801f8a8
 80069d0:	0801f8c0 	.word	0x0801f8c0
 80069d4:	0801f8e0 	.word	0x0801f8e0
 80069d8:	0801f8f4 	.word	0x0801f8f4
 80069dc:	0801f904 	.word	0x0801f904
 80069e0:	0801f918 	.word	0x0801f918
 80069e4:	0801f930 	.word	0x0801f930
 80069e8:	0801f938 	.word	0x0801f938
 80069ec:	0801f94c 	.word	0x0801f94c
 80069f0:	0801f960 	.word	0x0801f960
 80069f4:	0801f978 	.word	0x0801f978
 80069f8:	0801f98c 	.word	0x0801f98c
 80069fc:	0801f9ac 	.word	0x0801f9ac
 8006a00:	0801f9d0 	.word	0x0801f9d0
 8006a04:	0801f9f0 	.word	0x0801f9f0
 8006a08:	0801fa08 	.word	0x0801fa08
 8006a0c:	0801fa20 	.word	0x0801fa20
 8006a10:	0801fa30 	.word	0x0801fa30
 8006a14:	0801fa3c 	.word	0x0801fa3c
 8006a18:	0801fa50 	.word	0x0801fa50
 8006a1c:	0801fa60 	.word	0x0801fa60
 8006a20:	0801fa7c 	.word	0x0801fa7c
 8006a24:	0801fa94 	.word	0x0801fa94
 8006a28:	0801faac 	.word	0x0801faac
 8006a2c:	0801fabc 	.word	0x0801fabc
 8006a30:	0801facc 	.word	0x0801facc
 8006a34:	0801faec 	.word	0x0801faec
 8006a38:	0801fb0c 	.word	0x0801fb0c

08006a3c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8006a3c:	b408      	push	{r3}
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b08b      	sub	sp, #44	@ 0x2c
 8006a42:	af02      	add	r7, sp, #8
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8006a4a:	68b8      	ldr	r0, [r7, #8]
 8006a4c:	f7ff fafa 	bl	8006044 <mg_http_status_code_str>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <mg_http_reply+0x20>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	e000      	b.n	8006a5e <mg_http_reply+0x22>
 8006a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8006adc <mg_http_reply+0xa0>)
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	4613      	mov	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	491e      	ldr	r1, [pc, #120]	@ (8006ae0 <mg_http_reply+0xa4>)
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f002 fcf6 	bl	8009458 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a70:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8006a72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a76:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8006a7e:	f107 0314 	add.w	r3, r7, #20
 8006a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a84:	4817      	ldr	r0, [pc, #92]	@ (8006ae4 <mg_http_reply+0xa8>)
 8006a86:	f7fd feeb 	bl	8004860 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	d916      	bls.n	8006ac0 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	3b0f      	subs	r3, #15
 8006a9a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8006aa4:	4a10      	ldr	r2, [pc, #64]	@ (8006ae8 <mg_http_reply+0xac>)
 8006aa6:	210b      	movs	r1, #11
 8006aa8:	f006 f99a 	bl	800cde0 <mg_snprintf>
 8006aac:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ab2:	69f9      	ldr	r1, [r7, #28]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3b0f      	subs	r3, #15
 8006aba:	4413      	add	r3, r2
 8006abc:	2220      	movs	r2, #32
 8006abe:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 8006ace:	bf00      	nop
 8006ad0:	3724      	adds	r7, #36	@ 0x24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad8:	b001      	add	sp, #4
 8006ada:	4770      	bx	lr
 8006adc:	0801fb0c 	.word	0x0801fb0c
 8006ae0:	0801fb10 	.word	0x0801fb10
 8006ae4:	0800cd71 	.word	0x0800cd71
 8006ae8:	0801fb44 	.word	0x0801fb44

08006aec <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fa7c 	bl	8004ff8 <mg_fs_close>
  c->pfn_data = NULL;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a07      	ldr	r2, [pc, #28]	@ (8006b28 <restore_http_cb+0x3c>)
 8006b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	08007aa9 	.word	0x08007aa9

08006b2c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af04      	add	r7, sp, #16
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	461c      	mov	r4, r3
 8006b3e:	4615      	mov	r5, r2
 8006b40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b48:	e9cd 2300 	strd	r2, r3, [sp]
 8006b4c:	4a04      	ldr	r2, [pc, #16]	@ (8006b60 <mg_http_etag+0x34>)
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f006 f945 	bl	800cde0 <mg_snprintf>
  return buf;
 8006b56:	68fb      	ldr	r3, [r7, #12]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8006b60:	0801fb4c 	.word	0x0801fb4c

08006b64 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d002      	beq.n	8006b7c <static_cb+0x18>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d148      	bne.n	8006c0e <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b82:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8006b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b88:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	33a4      	adds	r3, #164	@ 0xa4
 8006b8e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d905      	bls.n	8006ba6 <static_cb+0x42>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3348      	adds	r3, #72	@ 0x48
 8006b9e:	69f9      	ldr	r1, [r7, #28]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fb57 	bl	8008254 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d234      	bcs.n	8006c1c <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d902      	bls.n	8006bce <static_cb+0x6a>
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	6a3a      	ldr	r2, [r7, #32]
 8006bd6:	6810      	ldr	r0, [r2, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006be0:	4411      	add	r1, r2
 8006be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be4:	4798      	blx	r3
 8006be6:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	441a      	add	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <static_cb+0xbc>
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff ff70 	bl	8006aec <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8006c0c:	e008      	b.n	8006c20 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b09      	cmp	r3, #9
 8006c12:	d106      	bne.n	8006c22 <static_cb+0xbe>
    restore_http_cb(c);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff ff69 	bl	8006aec <restore_http_cb>
 8006c1a:	e002      	b.n	8006c22 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8006c20:	bf00      	nop
  }
  (void) ev_data;
}
 8006c22:	3728      	adds	r7, #40	@ 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b093      	sub	sp, #76	@ 0x4c
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	1d38      	adds	r0, r7, #4
 8006c32:	e880 0006 	stmia.w	r0, {r1, r2}
 8006c36:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 8006c38:	f107 031c 	add.w	r3, r7, #28
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f009 fc82 	bl	8010548 <mg_str_s>
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	2201      	movs	r2, #1
 8006c4a:	4943      	ldr	r1, [pc, #268]	@ (8006d58 <guess_content_type+0x130>)
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f009 fc98 	bl	8010582 <mg_str_n>
  size_t i = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8006c56:	e002      	b.n	8006c5e <guess_content_type+0x36>
 8006c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d208      	bcs.n	8006c78 <guess_content_type+0x50>
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6c:	1acb      	subs	r3, r1, r3
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c76:	d1ef      	bne.n	8006c58 <guess_content_type+0x30>
  path.buf += path.len - i;
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7e:	1acb      	subs	r3, r1, r3
 8006c80:	4413      	add	r3, r2
 8006c82:	607b      	str	r3, [r7, #4]
  path.len = i;
 8006c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c86:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8006c88:	e02b      	b.n	8006ce2 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8006c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006c92:	213d      	movs	r1, #61	@ 0x3d
 8006c94:	9100      	str	r1, [sp, #0]
 8006c96:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8006c9a:	c903      	ldmia	r1, {r0, r1}
 8006c9c:	f009 fe52 	bl	8010944 <mg_span>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d01d      	beq.n	8006ce2 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8006ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006caa:	cb0c      	ldmia	r3, {r2, r3}
 8006cac:	f107 0114 	add.w	r1, r7, #20
 8006cb0:	c903      	ldmia	r1, {r0, r1}
 8006cb2:	f009 fcca 	bl	801064a <mg_strcmp>
 8006cb6:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8006cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006cc0:	cb0c      	ldmia	r3, {r2, r3}
 8006cc2:	1d39      	adds	r1, r7, #4
 8006cc4:	c903      	ldmia	r1, {r0, r1}
 8006cc6:	f009 fcc0 	bl	801064a <mg_strcmp>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d108      	bne.n	8006ce2 <guess_content_type+0xba>
      return v;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cdc:	e882 0003 	stmia.w	r2, {r0, r1}
 8006ce0:	e036      	b.n	8006d50 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 8006ce2:	f107 031c 	add.w	r3, r7, #28
 8006ce6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006cea:	212c      	movs	r1, #44	@ 0x2c
 8006cec:	9100      	str	r1, [sp, #0]
 8006cee:	f107 011c 	add.w	r1, r7, #28
 8006cf2:	c903      	ldmia	r1, {r0, r1}
 8006cf4:	f009 fe26 	bl	8010944 <mg_span>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1c5      	bne.n	8006c8a <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d02:	e01a      	b.n	8006d3a <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8006d04:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <guess_content_type+0x134>)
 8006d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	cb0c      	ldmia	r3, {r2, r3}
 8006d0e:	1d39      	adds	r1, r7, #4
 8006d10:	c903      	ldmia	r1, {r0, r1}
 8006d12:	f009 fc9a 	bl	801064a <mg_strcmp>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <guess_content_type+0x10c>
 8006d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1e:	3301      	adds	r3, #1
 8006d20:	68f9      	ldr	r1, [r7, #12]
 8006d22:	4a0e      	ldr	r2, [pc, #56]	@ (8006d5c <guess_content_type+0x134>)
 8006d24:	460c      	mov	r4, r1
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4413      	add	r3, r2
 8006d2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006d32:	e00d      	b.n	8006d50 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8006d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d36:	3302      	adds	r3, #2
 8006d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3a:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <guess_content_type+0x134>)
 8006d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1de      	bne.n	8006d04 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4905      	ldr	r1, [pc, #20]	@ (8006d60 <guess_content_type+0x138>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f009 fbfc 	bl	8010548 <mg_str_s>
}
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	3744      	adds	r7, #68	@ 0x44
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd90      	pop	{r4, r7, pc}
 8006d58:	0801fdbc 	.word	0x0801fdbc
 8006d5c:	2000005c 	.word	0x2000005c
 8006d60:	0801fc38 	.word	0x0801fc38

08006d64 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	@ 0x30
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8006d70:	2300      	movs	r3, #0
 8006d72:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8006d74:	2300      	movs	r3, #0
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d78:	e058      	b.n	8006e2c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	3306      	adds	r3, #6
 8006d82:	18d1      	adds	r1, r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	1f9a      	subs	r2, r3, #6
 8006d8e:	f107 0310 	add.w	r3, r7, #16
 8006d92:	4618      	mov	r0, r3
 8006d94:	f009 fbf5 	bl	8010582 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	4413      	add	r3, r2
 8006da0:	2206      	movs	r2, #6
 8006da2:	4929      	ldr	r1, [pc, #164]	@ (8006e48 <getrange+0xe4>)
 8006da4:	4618      	mov	r0, r3
 8006da6:	f017 fc3a 	bl	801e61e <memcmp>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d139      	bne.n	8006e24 <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	f107 0218 	add.w	r2, r7, #24
 8006db8:	212d      	movs	r1, #45	@ 0x2d
 8006dba:	9100      	str	r1, [sp, #0]
 8006dbc:	f107 0110 	add.w	r1, r7, #16
 8006dc0:	c903      	ldmia	r1, {r0, r1}
 8006dc2:	f009 fdbf 	bl	8010944 <mg_span>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01d      	beq.n	8006e08 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	f107 0318 	add.w	r3, r7, #24
 8006dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006dd6:	f7fe fb6d 	bl	80054b4 <mg_to_size_t>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <getrange+0x82>
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	3301      	adds	r3, #1
 8006de4:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d026      	beq.n	8006e3a <getrange+0xd6>
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	f107 0310 	add.w	r3, r7, #16
 8006df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006df6:	f7fe fb5d 	bl	80054b4 <mg_to_size_t>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01c      	beq.n	8006e3a <getrange+0xd6>
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	3301      	adds	r3, #1
 8006e04:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8006e06:	e018      	b.n	8006e3a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e12:	f7fe fb4f 	bl	80054b4 <mg_to_size_t>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00e      	beq.n	8006e3a <getrange+0xd6>
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	623b      	str	r3, [r7, #32]
 8006e22:	e00b      	b.n	8006e3c <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8006e24:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	3301      	adds	r3, #1
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	1d9a      	adds	r2, r3, #6
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d3a0      	bcc.n	8006d7a <getrange+0x16>
 8006e38:	e000      	b.n	8006e3c <getrange+0xd8>
    break;
 8006e3a:	bf00      	nop
  }
  return (int) numparsed;
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	@ 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	0801fdc0 	.word	0x0801fdc0

08006e4c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	b0f3      	sub	sp, #460	@ 0x1cc
 8006e52:	af0a      	add	r7, sp, #40	@ 0x28
 8006e54:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8006e58:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 8006e5c:	6020      	str	r0, [r4, #0]
 8006e5e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8006e62:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 8006e66:	6001      	str	r1, [r0, #0]
 8006e68:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8006e6c:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8006e70:	600a      	str	r2, [r1, #0]
 8006e72:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8006e76:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8006e7a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8006e7c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e80:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <mg_http_serve_file+0x4e>
 8006e8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006e90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	e000      	b.n	8006e9c <mg_http_serve_file+0x50>
 8006e9a:	4ba4      	ldr	r3, [pc, #656]	@ (800712c <mg_http_serve_file+0x2e0>)
 8006e9c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8006ebe:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8006ec2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ec6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006eca:	6819      	ldr	r1, [r3, #0]
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f009 fb3b 	bl	8010548 <mg_str_s>
 8006ed2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ed6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8006ee2:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 8006ee6:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8006eea:	ca06      	ldmia	r2, {r1, r2}
 8006eec:	f7ff fe9c 	bl	8006c28 <guess_content_type>
  bool gzip = false;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 8006ef6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006efa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05c      	beq.n	8006fbe <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8006f04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f08:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006f0c:	4988      	ldr	r1, [pc, #544]	@ (8007130 <mg_http_serve_file+0x2e4>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	f7fe fd1e 	bl	8005950 <mg_http_get_header>
 8006f14:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 8006f18:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d03e      	beq.n	8006f9e <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8006f20:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4881      	ldr	r0, [pc, #516]	@ (8007134 <mg_http_serve_file+0x2e8>)
 8006f30:	f005 ff8c 	bl	800ce4c <mg_mprintf>
 8006f34:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8006f38:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d02a      	beq.n	8006f96 <mg_http_serve_file+0x14a>
 8006f40:	497d      	ldr	r1, [pc, #500]	@ (8007138 <mg_http_serve_file+0x2ec>)
 8006f42:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8006f46:	f017 fbe4 	bl	801e712 <strstr>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d022      	beq.n	8006f96 <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8006f50:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f54:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006f58:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a77      	ldr	r2, [pc, #476]	@ (800713c <mg_http_serve_file+0x2f0>)
 8006f60:	2164      	movs	r1, #100	@ 0x64
 8006f62:	f005 ff3d 	bl	800cde0 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8006f66:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8006f72:	f7fe f819 	bl	8004fa8 <mg_fs_open>
 8006f76:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8006f7a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <mg_http_serve_file+0x14a>
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8006f88:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006f8c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006f90:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8006f94:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8006f96:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8006f9a:	f017 f8b9 	bl	801e110 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8006f9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <mg_http_serve_file+0x172>
 8006fa6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006faa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006fae:	2201      	movs	r2, #1
 8006fb0:	6819      	ldr	r1, [r3, #0]
 8006fb2:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8006fb6:	f7fd fff7 	bl	8004fa8 <mg_fs_open>
 8006fba:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8006fbe:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d144      	bne.n	8007050 <mg_http_serve_file+0x204>
 8006fc6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d03c      	beq.n	8007050 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8006fd6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006fda:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8006fea:	f7fd ffdd 	bl	8004fa8 <mg_fs_open>
 8006fee:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 8006ff2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8006ff6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006ffa:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8006ffe:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	6912      	ldr	r2, [r2, #16]
 8007006:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8007008:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800700c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007010:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8007014:	6819      	ldr	r1, [r3, #0]
 8007016:	4610      	mov	r0, r2
 8007018:	f009 fa96 	bl	8010548 <mg_str_s>
 800701c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007020:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800702c:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8007030:	f107 0010 	add.w	r0, r7, #16
 8007034:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8007038:	ca06      	ldmia	r2, {r1, r2}
 800703a:	f7ff fdf5 	bl	8006c28 <guess_content_type>
 800703e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007042:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8007046:	4623      	mov	r3, r4
 8007048:	e892 0003 	ldmia.w	r2, {r0, r1}
 800704c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8007050:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00f      	beq.n	8007078 <mg_http_serve_file+0x22c>
 8007058:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800705c:	681c      	ldr	r4, [r3, #0]
 800705e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8007062:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8007066:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800706a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	47a0      	blx	r4
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d114      	bne.n	80070a2 <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8007078:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800707c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007088:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800708c:	4b2c      	ldr	r3, [pc, #176]	@ (8007140 <mg_http_serve_file+0x2f4>)
 800708e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8007092:	6800      	ldr	r0, [r0, #0]
 8007094:	f7ff fcd2 	bl	8006a3c <mg_http_reply>
    mg_fs_close(fd);
 8007098:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800709c:	f7fd ffac 	bl	8004ff8 <mg_fs_close>
 80070a0:	e190      	b.n	80073c4 <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80070a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80070a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80070aa:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80070ae:	e9cd 2300 	strd	r2, r3, [sp]
 80070b2:	460a      	mov	r2, r1
 80070b4:	2140      	movs	r1, #64	@ 0x40
 80070b6:	f7ff fd39 	bl	8006b2c <mg_http_etag>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d045      	beq.n	800714c <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80070c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80070c4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80070c8:	491e      	ldr	r1, [pc, #120]	@ (8007144 <mg_http_serve_file+0x2f8>)
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	f7fe fc40 	bl	8005950 <mg_http_get_header>
 80070d0:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 80070d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d037      	beq.n	800714c <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 80070dc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80070e0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f009 fa2e 	bl	8010548 <mg_str_s>
 80070ec:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 80070f0:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80070f4:	cb0c      	ldmia	r3, {r2, r3}
 80070f6:	c903      	ldmia	r1, {r0, r1}
 80070f8:	f009 fae9 	bl	80106ce <mg_strcasecmp>
 80070fc:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d124      	bne.n	800714c <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 8007102:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8007106:	f7fd ff77 	bl	8004ff8 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800710a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800710e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800711a:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <mg_http_serve_file+0x2fc>)
 8007120:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8007124:	6800      	ldr	r0, [r0, #0]
 8007126:	f7ff fc89 	bl	8006a3c <mg_http_reply>
 800712a:	e14b      	b.n	80073c4 <mg_http_serve_file+0x578>
 800712c:	20000034 	.word	0x20000034
 8007130:	0801fdc8 	.word	0x0801fdc8
 8007134:	0801f5ac 	.word	0x0801f5ac
 8007138:	0801fdd8 	.word	0x0801fdd8
 800713c:	0801fde0 	.word	0x0801fde0
 8007140:	0801fde8 	.word	0x0801fde8
 8007144:	0801fdf4 	.word	0x0801fdf4
 8007148:	0801fb0c 	.word	0x0801fb0c
  } else {
    int n, status = 200;
 800714c:	23c8      	movs	r3, #200	@ 0xc8
 800714e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8007152:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007156:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007162:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800716e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8007172:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007176:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800717a:	4995      	ldr	r1, [pc, #596]	@ (80073d0 <mg_http_serve_file+0x584>)
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f7fe fbe7 	bl	8005950 <mg_http_get_header>
 8007182:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 8007186:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800718a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8007192:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 808e 	beq.w	80072b8 <mg_http_serve_file+0x46c>
 800719c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80071a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80071a4:	4619      	mov	r1, r3
 80071a6:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 80071aa:	f7ff fddb 	bl	8006d64 <getrange>
 80071ae:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 80071b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dd7e      	ble.n	80072b8 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80071ba:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <mg_http_serve_file+0x386>
 80071c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80071c6:	1e5a      	subs	r2, r3, #1
 80071c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80071d0:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 80071d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d808      	bhi.n	80071fc <mg_http_serve_file+0x3b0>
 80071ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80071ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d817      	bhi.n	800722c <mg_http_serve_file+0x3e0>
        status = 416;
 80071fc:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8007200:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800720a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800720e:	2200      	movs	r2, #0
 8007210:	60bb      	str	r3, [r7, #8]
 8007212:	60fa      	str	r2, [r7, #12]
 8007214:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007218:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800721c:	e9cd 1200 	strd	r1, r2, [sp]
 8007220:	4a6c      	ldr	r2, [pc, #432]	@ (80073d4 <mg_http_serve_file+0x588>)
 8007222:	2164      	movs	r1, #100	@ 0x64
 8007224:	4618      	mov	r0, r3
 8007226:	f005 fddb 	bl	800cde0 <mg_snprintf>
 800722a:	e045      	b.n	80072b8 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800722c:	23ce      	movs	r3, #206	@ 0xce
 800722e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 8007232:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007236:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007240:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800724e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007252:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	469a      	mov	sl, r3
 800725c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800725e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007262:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800726c:	4413      	add	r3, r2
 800726e:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8007270:	2200      	movs	r2, #0
 8007272:	461d      	mov	r5, r3
 8007274:	4616      	mov	r6, r2
 8007276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800727a:	2200      	movs	r2, #0
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007284:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007288:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800728c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8007290:	e9cd ab00 	strd	sl, fp, [sp]
 8007294:	4a50      	ldr	r2, [pc, #320]	@ (80073d8 <mg_http_serve_file+0x58c>)
 8007296:	2164      	movs	r1, #100	@ 0x64
 8007298:	4618      	mov	r0, r3
 800729a:	f005 fda1 	bl	800cde0 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800729e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80072a8:	6810      	ldr	r0, [r2, #0]
 80072aa:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80072ae:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4798      	blx	r3
      }
    }
    mg_printf(c,
 80072b8:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80072bc:	f7fe fec2 	bl	8006044 <mg_http_status_code_str>
 80072c0:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 80072c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ca:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 80072cc:	461d      	mov	r5, r3
 80072ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80072dc:	2100      	movs	r1, #0
 80072de:	4698      	mov	r8, r3
 80072e0:	4689      	mov	r9, r1
 80072e2:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <mg_http_serve_file+0x4a2>
 80072ea:	493c      	ldr	r1, [pc, #240]	@ (80073dc <mg_http_serve_file+0x590>)
 80072ec:	e000      	b.n	80072f0 <mg_http_serve_file+0x4a4>
 80072ee:	493c      	ldr	r1, [pc, #240]	@ (80073e0 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 80072f0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80072f4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d006      	beq.n	800730e <mg_http_serve_file+0x4c2>
 8007300:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8007304:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	e000      	b.n	8007310 <mg_http_serve_file+0x4c4>
 800730e:	4b34      	ldr	r3, [pc, #208]	@ (80073e0 <mg_http_serve_file+0x594>)
 8007310:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8007314:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 8007318:	9308      	str	r3, [sp, #32]
 800731a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800731e:	9307      	str	r3, [sp, #28]
 8007320:	9106      	str	r1, [sp, #24]
 8007322:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007326:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	9201      	str	r2, [sp, #4]
 800732e:	9500      	str	r5, [sp, #0]
 8007330:	4623      	mov	r3, r4
 8007332:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8007336:	492b      	ldr	r1, [pc, #172]	@ (80073e4 <mg_http_serve_file+0x598>)
 8007338:	6800      	ldr	r0, [r0, #0]
 800733a:	f002 f88d 	bl	8009458 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800733e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8007342:	4929      	ldr	r1, [pc, #164]	@ (80073e8 <mg_http_serve_file+0x59c>)
 8007344:	4618      	mov	r0, r3
 8007346:	f009 f8ff 	bl	8010548 <mg_str_s>
 800734a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800734e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8007352:	6819      	ldr	r1, [r3, #0]
 8007354:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8007358:	cb0c      	ldmia	r3, {r2, r3}
 800735a:	c903      	ldmia	r1, {r0, r1}
 800735c:	f009 f9b7 	bl	80106ce <mg_strcasecmp>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 8007366:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800736a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800737c:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8007380:	f7fd fe3a 	bl	8004ff8 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8007384:	e01e      	b.n	80073c4 <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8007386:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800738a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	33a4      	adds	r3, #164	@ 0xa4
 8007392:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 8007396:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800739a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a12      	ldr	r2, [pc, #72]	@ (80073ec <mg_http_serve_file+0x5a0>)
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 80073a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80073aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 80073b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80073bc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	e7ff      	b.n	80073c4 <mg_http_serve_file+0x578>
 80073c4:	bf00      	nop
 80073c6:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 80073ca:	46bd      	mov	sp, r7
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	0801fe04 	.word	0x0801fe04
 80073d4:	0801fe0c 	.word	0x0801fe0c
 80073d8:	0801fe2c 	.word	0x0801fe2c
 80073dc:	0801fe54 	.word	0x0801fe54
 80073e0:	0801fb0c 	.word	0x0801fb0c
 80073e4:	0801fe70 	.word	0x0801fe70
 80073e8:	0801fec0 	.word	0x0801fec0
 80073ec:	08006b65 	.word	0x08006b65

080073f0 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 80073f0:	b082      	sub	sp, #8
 80073f2:	b590      	push	{r4, r7, lr}
 80073f4:	b08f      	sub	sp, #60	@ 0x3c
 80073f6:	af02      	add	r7, sp, #8
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
 80073fe:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8007400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007402:	461a      	mov	r2, r3
 8007404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	4a9c      	ldr	r2, [pc, #624]	@ (800767c <uri_to_path2+0x28c>)
 800740c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800740e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007410:	f005 fce6 	bl	800cde0 <mg_snprintf>
 8007414:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	3302      	adds	r3, #2
 800741a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800741c:	429a      	cmp	r2, r3
 800741e:	d809      	bhi.n	8007434 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8007420:	4b97      	ldr	r3, [pc, #604]	@ (8007680 <uri_to_path2+0x290>)
 8007422:	4a98      	ldr	r2, [pc, #608]	@ (8007684 <uri_to_path2+0x294>)
 8007424:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff fb07 	bl	8006a3c <mg_http_reply>
    return -1;
 800742e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007432:	e143      	b.n	80076bc <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8007434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007436:	3b01      	subs	r3, #1
 8007438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800743a:	4413      	add	r3, r2
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d012      	beq.n	800746c <uri_to_path2+0x7c>
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	3b01      	subs	r3, #1
 800744a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800744c:	4413      	add	r3, r2
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b2f      	cmp	r3, #47	@ 0x2f
 8007452:	d00b      	beq.n	800746c <uri_to_path2+0x7c>
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	627a      	str	r2, [r7, #36]	@ 0x24
 800745a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800745c:	4413      	add	r3, r2
 800745e:	222f      	movs	r2, #47	@ 0x2f
 8007460:	701a      	strb	r2, [r3, #0]
 8007462:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	4413      	add	r3, r2
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800746c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	429a      	cmp	r2, r3
 8007474:	d212      	bcs.n	800749c <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800747c:	18d0      	adds	r0, r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007484:	1ad1      	subs	r1, r2, r3
 8007486:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	18d4      	adds	r4, r2, r3
 800748c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2200      	movs	r2, #0
 8007494:	9200      	str	r2, [sp, #0]
 8007496:	4622      	mov	r2, r4
 8007498:	f7fe f967 	bl	800576a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800749c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800749e:	3b01      	subs	r3, #1
 80074a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074a2:	4413      	add	r3, r2
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074b0:	4618      	mov	r0, r3
 80074b2:	f009 f866 	bl	8010582 <mg_str_n>
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80074be:	f014 f9df 	bl	801b880 <mg_path_is_sane>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f083 0301 	eor.w	r3, r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d009      	beq.n	80074e2 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 80074ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007688 <uri_to_path2+0x298>)
 80074d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007684 <uri_to_path2+0x294>)
 80074d2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fab0 	bl	8006a3c <mg_http_reply>
    return -1;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074e0:	e0ec      	b.n	80076bc <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 80074e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80074e4:	f7f8 ff0c 	bl	8000300 <strlen>
 80074e8:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80074ea:	e007      	b.n	80074fc <uri_to_path2+0x10c>
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	3b01      	subs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	4413      	add	r3, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d906      	bls.n	8007510 <uri_to_path2+0x120>
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	3b01      	subs	r3, #1
 8007506:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007508:	4413      	add	r3, r2
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b2f      	cmp	r3, #47	@ 0x2f
 800750e:	d0ed      	beq.n	80074ec <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8007510:	f107 031c 	add.w	r3, r7, #28
 8007514:	495d      	ldr	r1, [pc, #372]	@ (800768c <uri_to_path2+0x29c>)
 8007516:	4618      	mov	r0, r3
 8007518:	f009 f816 	bl	8010548 <mg_str_s>
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	f107 031c 	add.w	r3, r7, #28
 8007522:	cb0c      	ldmia	r3, {r2, r3}
 8007524:	3108      	adds	r1, #8
 8007526:	c903      	ldmia	r1, {r0, r1}
 8007528:	f009 f88f 	bl	801064a <mg_strcmp>
 800752c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <uri_to_path2+0x152>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	e000      	b.n	8007544 <uri_to_path2+0x154>
 8007542:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8007546:	4b52      	ldr	r3, [pc, #328]	@ (8007690 <uri_to_path2+0x2a0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b03      	cmp	r3, #3
 800754c:	dd16      	ble.n	800757c <uri_to_path2+0x18c>
 800754e:	4b51      	ldr	r3, [pc, #324]	@ (8007694 <uri_to_path2+0x2a4>)
 8007550:	f640 027a 	movw	r2, #2170	@ 0x87a
 8007554:	4950      	ldr	r1, [pc, #320]	@ (8007698 <uri_to_path2+0x2a8>)
 8007556:	2004      	movs	r0, #4
 8007558:	f001 fe28 	bl	80091ac <mg_log_prefix>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	4618      	mov	r0, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4613      	mov	r3, r2
 8007574:	4602      	mov	r2, r0
 8007576:	4849      	ldr	r0, [pc, #292]	@ (800769c <uri_to_path2+0x2ac>)
 8007578:	f001 fe68 	bl	800924c <mg_log>
              flags));
  if (flags == 0) {
 800757c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 809b 	beq.w	80076ba <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8007584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d020      	beq.n	80075d0 <uri_to_path2+0x1e0>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01c      	beq.n	80075d0 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	3b01      	subs	r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80075a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80075a6:	d013      	beq.n	80075d0 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 80075ac:	461a      	mov	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	493b      	ldr	r1, [pc, #236]	@ (80076a0 <uri_to_path2+0x2b0>)
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f001 ff4f 	bl	8009458 <mg_printf>
    c->is_resp = 0;
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ce:	e074      	b.n	80076ba <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06f      	beq.n	80076ba <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80075da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	18d0      	adds	r0, r2, r3
 80075e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	4a2f      	ldr	r2, [pc, #188]	@ (80076a4 <uri_to_path2+0x2b4>)
 80075e8:	4619      	mov	r1, r3
 80075ea:	f005 fbf9 	bl	800cde0 <mg_snprintf>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80075fe:	4798      	blx	r3
 8007600:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	2b00      	cmp	r3, #0
 8007606:	d116      	bne.n	8007636 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8007608:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	18d0      	adds	r0, r2, r3
 800760e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <uri_to_path2+0x2b8>)
 8007616:	4619      	mov	r1, r3
 8007618:	f005 fbe2 	bl	800cde0 <mg_snprintf>
 800761c:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800762c:	4798      	blx	r3
 800762e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <uri_to_path2+0x24c>
      flags = tmp;
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800763a:	e03e      	b.n	80076ba <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800763c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007640:	18d0      	adds	r0, r2, r3
 8007642:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <uri_to_path2+0x2bc>)
 800764a:	4619      	mov	r1, r3
 800764c:	f005 fbc8 	bl	800cde0 <mg_snprintf>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d02c      	beq.n	80076b0 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007660:	4798      	blx	r3
 8007662:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d022      	beq.n	80076b0 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	330b      	adds	r3, #11
 8007672:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e01e      	b.n	80076ba <uri_to_path2+0x2ca>
 800767c:	0801f5ac 	.word	0x0801f5ac
 8007680:	0801fec8 	.word	0x0801fec8
 8007684:	0801fb0c 	.word	0x0801fb0c
 8007688:	0801fedc 	.word	0x0801fedc
 800768c:	0801feec 	.word	0x0801feec
 8007690:	20000254 	.word	0x20000254
 8007694:	0802282c 	.word	0x0802282c
 8007698:	0801f338 	.word	0x0801f338
 800769c:	0801fef0 	.word	0x0801fef0
 80076a0:	0801ff04 	.word	0x0801ff04
 80076a4:	0801ff40 	.word	0x0801ff40
 80076a8:	0801ff4c 	.word	0x0801ff4c
 80076ac:	0801ff5c 	.word	0x0801ff5c
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 80076b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	4413      	add	r3, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3734      	adds	r7, #52	@ 0x34
 80076c0:	46bd      	mov	sp, r7
 80076c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80076c6:	b002      	add	sp, #8
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b09c      	sub	sp, #112	@ 0x70
 80076d0:	af06      	add	r7, sp, #24
 80076d2:	6178      	str	r0, [r7, #20]
 80076d4:	6139      	str	r1, [r7, #16]
 80076d6:	60fa      	str	r2, [r7, #12]
 80076d8:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <uri_to_path+0x1c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	e000      	b.n	80076ea <uri_to_path+0x1e>
 80076e8:	4b5b      	ldr	r3, [pc, #364]	@ (8007858 <uri_to_path+0x18c>)
 80076ea:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f008 ff26 	bl	8010548 <mg_str_s>
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007700:	2300      	movs	r3, #0
 8007702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007704:	f107 031c 	add.w	r3, r7, #28
 8007708:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800770c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007710:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8007714:	e078      	b.n	8007808 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8007716:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800771a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800771e:	213d      	movs	r1, #61	@ 0x3d
 8007720:	9100      	str	r1, [sp, #0]
 8007722:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8007726:	c903      	ldmia	r1, {r0, r1}
 8007728:	f009 f90c 	bl	8010944 <mg_span>
 800772c:	4603      	mov	r3, r0
 800772e:	f083 0301 	eor.w	r3, r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d014      	beq.n	8007762 <uri_to_path+0x96>
 8007738:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800773c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007744:	e883 0003 	stmia.w	r3, {r0, r1}
 8007748:	463b      	mov	r3, r7
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f008 ff17 	bl	8010582 <mg_str_n>
 8007754:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007758:	463a      	mov	r2, r7
 800775a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800775e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8007762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007764:	2b00      	cmp	r3, #0
 8007766:	d123      	bne.n	80077b0 <uri_to_path+0xe4>
 8007768:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800776c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8007770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007774:	e883 0003 	stmia.w	r3, {r0, r1}
 8007778:	463b      	mov	r3, r7
 800777a:	4938      	ldr	r1, [pc, #224]	@ (800785c <uri_to_path+0x190>)
 800777c:	4618      	mov	r0, r3
 800777e:	f008 fee3 	bl	8010548 <mg_str_s>
 8007782:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007786:	463a      	mov	r2, r7
 8007788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800778c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007794:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8007798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800779c:	e883 0003 	stmia.w	r3, {r0, r1}
 80077a0:	f107 031c 	add.w	r3, r7, #28
 80077a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80077a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077ac:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d323      	bcc.n	8007802 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6899      	ldr	r1, [r3, #8]
 80077be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80077c4:	4618      	mov	r0, r3
 80077c6:	f008 fedc 	bl	8010582 <mg_str_n>
 80077ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80077ce:	cb0c      	ldmia	r3, {r2, r3}
 80077d0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80077d4:	c903      	ldmia	r1, {r0, r1}
 80077d6:	f008 ff38 	bl	801064a <mg_strcmp>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d112      	bne.n	8007806 <uri_to_path+0x13a>
    u = k, p = v;
 80077e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077e4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80077e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80077f0:	f107 031c 	add.w	r3, r7, #28
 80077f4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80077f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8007800:	e002      	b.n	8007808 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8007806:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8007808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800780c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007810:	212c      	movs	r1, #44	@ 0x2c
 8007812:	9100      	str	r1, [sp, #0]
 8007814:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8007818:	c903      	ldmia	r1, {r0, r1}
 800781a:	f009 f893 	bl	8010944 <mg_span>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	f47f af78 	bne.w	8007716 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8007826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	aa01      	add	r2, sp, #4
 8007830:	f107 031c 	add.w	r3, r7, #28
 8007834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007838:	e882 0003 	stmia.w	r2, {r0, r1}
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007844:	6939      	ldr	r1, [r7, #16]
 8007846:	6978      	ldr	r0, [r7, #20]
 8007848:	f7ff fdd2 	bl	80073f0 <uri_to_path2>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3758      	adds	r7, #88	@ 0x58
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000034 	.word	0x20000034
 800785c:	0801feec 	.word	0x0801feec

08007860 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8007860:	b580      	push	{r7, lr}
 8007862:	b0a6      	sub	sp, #152	@ 0x98
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	2264      	movs	r2, #100	@ 0x64
 800787a:	9200      	str	r2, [sp, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff ff23 	bl	80076cc <uri_to_path>
 8007886:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800788a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800788e:	2b00      	cmp	r3, #0
 8007890:	db41      	blt.n	8007916 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8007892:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800789e:	4b20      	ldr	r3, [pc, #128]	@ (8007920 <mg_http_serve_dir+0xc0>)
 80078a0:	4a20      	ldr	r2, [pc, #128]	@ (8007924 <mg_http_serve_dir+0xc4>)
 80078a2:	f240 1193 	movw	r1, #403	@ 0x193
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff f8c8 	bl	8006a3c <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80078ac:	e033      	b.n	8007916 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80078ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d028      	beq.n	8007908 <mg_http_serve_dir+0xa8>
 80078b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d024      	beq.n	8007908 <mg_http_serve_dir+0xa8>
 80078be:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80078c2:	f107 0214 	add.w	r2, r7, #20
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f008 fe3d 	bl	8010548 <mg_str_s>
 80078ce:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80078d2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80078d6:	4618      	mov	r0, r3
 80078d8:	f008 fe36 	bl	8010548 <mg_str_s>
 80078dc:	2300      	movs	r3, #0
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80078e4:	cb0c      	ldmia	r3, {r2, r3}
 80078e6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80078ea:	c903      	ldmia	r1, {r0, r1}
 80078ec:	f008 ff36 	bl	801075c <mg_match>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f107 0214 	add.w	r2, r7, #20
 80078fe:	4619      	mov	r1, r3
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f008 fe0d 	bl	8010520 <mg_http_serve_ssi>
}
 8007906:	e006      	b.n	8007916 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8007908:	f107 0214 	add.w	r2, r7, #20
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff fa9b 	bl	8006e4c <mg_http_serve_file>
}
 8007916:	bf00      	nop
 8007918:	3790      	adds	r7, #144	@ 0x90
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	0801ff6c 	.word	0x0801ff6c
 8007924:	0801fb0c 	.word	0x0801fb0c

08007928 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4618      	mov	r0, r3
 8007936:	f016 fbc3 	bl	801e0c0 <atoi>
 800793a:	4603      	mov	r3, r0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <is_hex_digit>:

static bool is_hex_digit(int c) {
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007950:	dd02      	ble.n	8007958 <is_hex_digit+0x14>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b39      	cmp	r3, #57	@ 0x39
 8007956:	dd0b      	ble.n	8007970 <is_hex_digit+0x2c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b60      	cmp	r3, #96	@ 0x60
 800795c:	dd02      	ble.n	8007964 <is_hex_digit+0x20>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b66      	cmp	r3, #102	@ 0x66
 8007962:	dd05      	ble.n	8007970 <is_hex_digit+0x2c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	dd04      	ble.n	8007974 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b46      	cmp	r3, #70	@ 0x46
 800796e:	dc01      	bgt.n	8007974 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <is_hex_digit+0x32>
 8007974:	2300      	movs	r3, #0
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	b2db      	uxtb	r3, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	@ 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	dc04      	bgt.n	80079ae <skip_chunk+0x26>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e07a      	b.n	8007a9e <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	3301      	adds	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	da09      	bge.n	80079ca <skip_chunk+0x42>
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff ffc0 	bl	8007944 <is_hex_digit>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1ee      	bne.n	80079a8 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <skip_chunk+0x4e>
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079d4:	e063      	b.n	8007a9e <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b08      	cmp	r3, #8
 80079da:	dd02      	ble.n	80079e2 <skip_chunk+0x5a>
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079e0:	e05d      	b.n	8007a9e <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	da0c      	bge.n	8007a04 <skip_chunk+0x7c>
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b0d      	cmp	r3, #13
 80079f4:	d106      	bne.n	8007a04 <skip_chunk+0x7c>
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	3301      	adds	r3, #1
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	2b0a      	cmp	r3, #10
 8007a02:	d002      	beq.n	8007a0a <skip_chunk+0x82>
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a08:	e049      	b.n	8007a9e <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	f107 0314 	add.w	r3, r7, #20
 8007a10:	68f9      	ldr	r1, [r7, #12]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f008 fdb5 	bl	8010582 <mg_str_n>
 8007a18:	f107 0310 	add.w	r3, r7, #16
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	9200      	str	r2, [sp, #0]
 8007a20:	2210      	movs	r2, #16
 8007a22:	f107 0114 	add.w	r1, r7, #20
 8007a26:	c903      	ldmia	r1, {r0, r1}
 8007a28:	f008 ffe9 	bl	80109fe <mg_str_to_num>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f083 0301 	eor.w	r3, r3, #1
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a3c:	e02f      	b.n	8007a9e <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da02      	bge.n	8007a4a <skip_chunk+0xc2>
 8007a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a48:	e029      	b.n	8007a9e <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	1eda      	subs	r2, r3, #3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	dc01      	bgt.n	8007a5c <skip_chunk+0xd4>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e020      	b.n	8007a9e <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	3302      	adds	r3, #2
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b0d      	cmp	r3, #13
 8007a6c:	d108      	bne.n	8007a80 <skip_chunk+0xf8>
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	3303      	adds	r3, #3
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b0a      	cmp	r3, #10
 8007a7e:	d002      	beq.n	8007a86 <skip_chunk+0xfe>
 8007a80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a84:	e00b      	b.n	8007a9e <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	1c9a      	adds	r2, r3, #2
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3302      	adds	r3, #2
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3720      	adds	r7, #32
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ab4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007ab8:	6018      	str	r0, [r3, #0]
 8007aba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007abe:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007ac2:	6019      	str	r1, [r3, #0]
 8007ac4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ac8:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8007acc:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8007ace:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ad2:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b07      	cmp	r3, #7
 8007ada:	d031      	beq.n	8007b40 <http_cb+0x98>
 8007adc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ae0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d02a      	beq.n	8007b40 <http_cb+0x98>
 8007aea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007aee:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f040 8368 	bne.w	80081ca <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8007afa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007afe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 835b 	beq.w	80081ca <http_cb+0x722>
 8007b14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007b18:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 834e 	bne.w	80081ca <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 8007b2e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007b32:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8345 	beq.w	80081ca <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8007b46:	e313      	b.n	8008170 <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 8007b48:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007b4c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b54:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007b58:	4413      	add	r3, r2
 8007b5a:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8007b5e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007b62:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b6a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	f107 0210 	add.w	r2, r7, #16
 8007b74:	4619      	mov	r1, r3
 8007b76:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8007b7a:	f7fe f8a5 	bl	8005cc8 <mg_http_parse>
 8007b7e:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 8007b88:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007b8c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b94:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 8007b98:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da38      	bge.n	8007c12 <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8007ba0:	4bb7      	ldr	r3, [pc, #732]	@ (8007e80 <http_cb+0x3d8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	dd10      	ble.n	8007bca <http_cb+0x122>
 8007ba8:	4bb6      	ldr	r3, [pc, #728]	@ (8007e84 <http_cb+0x3dc>)
 8007baa:	f640 1256 	movw	r2, #2390	@ 0x956
 8007bae:	49b6      	ldr	r1, [pc, #728]	@ (8007e88 <http_cb+0x3e0>)
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f001 fafb 	bl	80091ac <mg_log_prefix>
 8007bb6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007bba:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	48b1      	ldr	r0, [pc, #708]	@ (8007e8c <http_cb+0x3e4>)
 8007bc6:	f001 fb41 	bl	800924c <mg_log>
        c->is_draining = 1;
 8007bca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007bce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8007bd8:	f043 0310 	orr.w	r3, r3, #16
 8007bdc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8007be0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007be4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bec:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b10      	cmp	r3, #16
 8007bf4:	bf28      	it	cs
 8007bf6:	2310      	movcs	r3, #16
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8007bfe:	f001 fb5b 	bl	80092b8 <mg_hexdump>
        c->recv.len = 0;
 8007c02:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c06:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8007c10:	e2db      	b.n	80081ca <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8007c12:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 82c2 	beq.w	80081a0 <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8007c1c:	f107 0210 	add.w	r2, r7, #16
 8007c20:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c24:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c28:	210a      	movs	r1, #10
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	f7fc f923 	bl	8003e76 <mg_call>
      if (c->recv.len != old_len) {
 8007c30:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c34:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3c:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d01d      	beq.n	8007c80 <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 8007c44:	4b8e      	ldr	r3, [pc, #568]	@ (8007e80 <http_cb+0x3d8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	dd10      	ble.n	8007c6e <http_cb+0x1c6>
 8007c4c:	4b8d      	ldr	r3, [pc, #564]	@ (8007e84 <http_cb+0x3dc>)
 8007c4e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8007c52:	498d      	ldr	r1, [pc, #564]	@ (8007e88 <http_cb+0x3e0>)
 8007c54:	2003      	movs	r0, #3
 8007c56:	f001 faa9 	bl	80091ac <mg_log_prefix>
 8007c5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c5e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c66:	4619      	mov	r1, r3
 8007c68:	4889      	ldr	r0, [pc, #548]	@ (8007e90 <http_cb+0x3e8>)
 8007c6a:	f001 faef 	bl	800924c <mg_log>
        c->pfn = NULL;
 8007c6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c72:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 8007c7e:	e2a4      	b.n	80081ca <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8007c80:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c84:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d128      	bne.n	8007ce0 <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8007c8e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007c92:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c9a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ca4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8007cac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007cb0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007cb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007cb8:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8007cbc:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8007cc0:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8007cc4:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8007cc8:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 8007ccc:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8007cd0:	1a8a      	subs	r2, r1, r2
 8007cd2:	1a9a      	subs	r2, r3, r2
 8007cd4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007cd8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007cdc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8007ce0:	f107 0310 	add.w	r3, r7, #16
 8007ce4:	496b      	ldr	r1, [pc, #428]	@ (8007e94 <http_cb+0x3ec>)
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fd fe32 	bl	8005950 <mg_http_get_header>
 8007cec:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 8007cf0:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01d      	beq.n	8007d34 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8007cf8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007cfc:	4966      	ldr	r1, [pc, #408]	@ (8007e98 <http_cb+0x3f0>)
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f008 fc22 	bl	8010548 <mg_str_s>
 8007d04:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8007d08:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8007d0c:	cb0c      	ldmia	r3, {r2, r3}
 8007d0e:	c903      	ldmia	r1, {r0, r1}
 8007d10:	f008 fcdd 	bl	80106ce <mg_strcasecmp>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <http_cb+0x27a>
          is_chunked = true;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8007d20:	e0cf      	b.n	8007ec2 <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8007d22:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007d26:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007d2a:	495c      	ldr	r1, [pc, #368]	@ (8007e9c <http_cb+0x3f4>)
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f7fc f8c3 	bl	8003eb8 <mg_error>
          return;
 8007d32:	e24a      	b.n	80081ca <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8007d34:	f107 0310 	add.w	r3, r7, #16
 8007d38:	4959      	ldr	r1, [pc, #356]	@ (8007ea0 <http_cb+0x3f8>)
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fd fe08 	bl	8005950 <mg_http_get_header>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f040 80bd 	bne.w	8007ec2 <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8007d48:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007d4c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2205      	movs	r2, #5
 8007d54:	4953      	ldr	r1, [pc, #332]	@ (8007ea4 <http_cb+0x3fc>)
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd fb6b 	bl	8005432 <mg_ncasecmp>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf0c      	ite	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	2300      	movne	r3, #0
 8007d66:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8007d70:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8007d74:	f083 0301 	eor.w	r3, r3, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d030      	beq.n	8007de0 <http_cb+0x338>
 8007d7e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8007d82:	4949      	ldr	r1, [pc, #292]	@ (8007ea8 <http_cb+0x400>)
 8007d84:	4618      	mov	r0, r3
 8007d86:	f008 fbdf 	bl	8010548 <mg_str_s>
 8007d8a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007d8e:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8007d92:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8007d96:	cb0c      	ldmia	r3, {r2, r3}
 8007d98:	c903      	ldmia	r1, {r0, r1}
 8007d9a:	f008 fc98 	bl	80106ce <mg_strcasecmp>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d012      	beq.n	8007dca <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8007da4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007da8:	4940      	ldr	r1, [pc, #256]	@ (8007eac <http_cb+0x404>)
 8007daa:	4618      	mov	r0, r3
 8007dac:	f008 fbcc 	bl	8010548 <mg_str_s>
 8007db0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007db4:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 8007db8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8007dbc:	cb0c      	ldmia	r3, {r2, r3}
 8007dbe:	c903      	ldmia	r1, {r0, r1}
 8007dc0:	f008 fc85 	bl	80106ce <mg_strcasecmp>
 8007dc4:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8007dd0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8007dd4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8007dd8:	4413      	add	r3, r2
 8007dda:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8007dde:	e022      	b.n	8007e26 <http_cb+0x37e>
        } else if (is_response) {
 8007de0:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01e      	beq.n	8007e26 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8007de8:	f107 0310 	add.w	r3, r7, #16
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fd9b 	bl	8007928 <mg_http_status>
 8007df2:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 8007df6:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8007dfa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dfc:	dd0a      	ble.n	8007e14 <http_cb+0x36c>
 8007dfe:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8007e02:	2bcc      	cmp	r3, #204	@ 0xcc
 8007e04:	d006      	beq.n	8007e14 <http_cb+0x36c>
 8007e06:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8007e0a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8007e0e:	d001      	beq.n	8007e14 <http_cb+0x36c>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <http_cb+0x36e>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8007e1a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8007e26:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d049      	beq.n	8007ec2 <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 8007e2e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007e32:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10a      	bne.n	8007e5c <http_cb+0x3b4>
 8007e46:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007e4a:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8007e4e:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <http_cb+0x408>)
 8007e50:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <http_cb+0x408>)
 8007e52:	f240 119b 	movw	r1, #411	@ 0x19b
 8007e56:	6800      	ldr	r0, [r0, #0]
 8007e58:	f7fe fdf0 	bl	8006a3c <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 8007e5c:	4b08      	ldr	r3, [pc, #32]	@ (8007e80 <http_cb+0x3d8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dd2e      	ble.n	8007ec2 <http_cb+0x41a>
 8007e64:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <http_cb+0x3dc>)
 8007e66:	f640 1283 	movw	r2, #2435	@ 0x983
 8007e6a:	4907      	ldr	r1, [pc, #28]	@ (8007e88 <http_cb+0x3e0>)
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	f001 f99d 	bl	80091ac <mg_log_prefix>
 8007e72:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01e      	beq.n	8007eb8 <http_cb+0x410>
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <http_cb+0x40c>)
 8007e7c:	e01d      	b.n	8007eba <http_cb+0x412>
 8007e7e:	bf00      	nop
 8007e80:	20000254 	.word	0x20000254
 8007e84:	0802283c 	.word	0x0802283c
 8007e88:	0801f338 	.word	0x0801f338
 8007e8c:	08020060 	.word	0x08020060
 8007e90:	08020078 	.word	0x08020078
 8007e94:	08020094 	.word	0x08020094
 8007e98:	080200a8 	.word	0x080200a8
 8007e9c:	080200b0 	.word	0x080200b0
 8007ea0:	080200cc 	.word	0x080200cc
 8007ea4:	0801f628 	.word	0x0801f628
 8007ea8:	0801f644 	.word	0x0801f644
 8007eac:	0801f640 	.word	0x0801f640
 8007eb0:	0801fb0c 	.word	0x0801fb0c
 8007eb4:	080200dc 	.word	0x080200dc
 8007eb8:	4bc6      	ldr	r3, [pc, #792]	@ (80081d4 <http_cb+0x72c>)
 8007eba:	4619      	mov	r1, r3
 8007ebc:	48c6      	ldr	r0, [pc, #792]	@ (80081d8 <http_cb+0x730>)
 8007ebe:	f001 f9c5 	bl	800924c <mg_log>
        }
      }

      if (is_chunked) {
 8007ec2:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80c9 	beq.w	800805e <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8007ecc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ed0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ed8:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8007edc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007ee0:	440b      	add	r3, r1
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8007eee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ef2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007efa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8007f0a:	e006      	b.n	8007f1a <http_cb+0x472>
 8007f0c:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8007f10:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8007f14:	4413      	add	r3, r2
 8007f16:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8007f1a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8007f1e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8007f22:	18d0      	adds	r0, r2, r3
 8007f24:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8007f28:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8007f2c:	1ad1      	subs	r1, r2, r3
 8007f2e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8007f32:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8007f36:	f7ff fd27 	bl	8007988 <skip_chunk>
 8007f3a:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 8007f3e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd03      	ble.n	8007f4e <http_cb+0x4a6>
 8007f46:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1de      	bne.n	8007f0c <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8007f4e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 8126 	beq.w	80081a4 <http_cb+0x6fc>
        if (cl < 0) {
 8007f58:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da08      	bge.n	8007f72 <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 8007f60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007f64:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8007f68:	499c      	ldr	r1, [pc, #624]	@ (80081dc <http_cb+0x734>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f7fb ffa4 	bl	8003eb8 <mg_error>
          break;
 8007f70:	e11b      	b.n	80081aa <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8007f78:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007f7c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007f86:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8007f8a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007f8e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007f92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8007f96:	e03e      	b.n	8008016 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8007f98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007f9c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007fa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007fa4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8007fa8:	18d0      	adds	r0, r2, r3
 8007faa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8007fae:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8007fb8:	4413      	add	r3, r2
 8007fba:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f016 fb3d 	bl	801e63e <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8007fc4:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8007fc8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8007fcc:	4413      	add	r3, r2
 8007fce:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8007fd2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007fd6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007fda:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007fde:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8007fe2:	441a      	add	r2, r3
 8007fe4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007fe8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007fec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007ff0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8007ff4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8007ff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007ffc:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8008000:	441a      	add	r2, r3
 8008002:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8008006:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800800a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800800e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8008012:	2b00      	cmp	r3, #0
 8008014:	d016      	beq.n	8008044 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8008016:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800801a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800801e:	18d0      	adds	r0, r2, r3
 8008020:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8008024:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8008028:	1ad1      	subs	r1, r2, r3
 800802a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800802e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8008032:	f7ff fca9 	bl	8007988 <skip_chunk>
 8008036:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800803a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800803e:	2b00      	cmp	r3, #0
 8008040:	dcaa      	bgt.n	8007f98 <http_cb+0x4f0>
 8008042:	e000      	b.n	8008046 <http_cb+0x59e>
          if (dl == 0) break;
 8008044:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8008046:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800804a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800804e:	4413      	add	r3, r2
 8008050:	461a      	mov	r2, r3
 8008052:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8008056:	4413      	add	r3, r2
 8008058:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800805c:	e026      	b.n	80080ac <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800805e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8008062:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800806a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800807a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800807e:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8008082:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008086:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800808a:	429a      	cmp	r2, r3
 800808c:	f0c0 808c 	bcc.w	80081a8 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 8008090:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8008094:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8008098:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800809c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80080a0:	4413      	add	r3, r2
 80080a2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80080a6:	4413      	add	r3, r2
 80080a8:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80080ac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80080b0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <http_cb+0x632>
 80080c4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80080c8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80080da:	f107 0210 	add.w	r2, r7, #16
 80080de:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80080e2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80080e6:	210b      	movs	r1, #11
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f7fb fec4 	bl	8003e76 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 80080ee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80080f2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d034      	beq.n	8008170 <http_cb+0x6c8>
 8008106:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800810a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d128      	bne.n	8008170 <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800811e:	f107 0310 	add.w	r3, r7, #16
 8008122:	492f      	ldr	r1, [pc, #188]	@ (80081e0 <http_cb+0x738>)
 8008124:	4618      	mov	r0, r3
 8008126:	f7fd fc13 	bl	8005950 <mg_http_get_header>
 800812a:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800812e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01c      	beq.n	8008170 <http_cb+0x6c8>
 8008136:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800813a:	492a      	ldr	r1, [pc, #168]	@ (80081e4 <http_cb+0x73c>)
 800813c:	4618      	mov	r0, r3
 800813e:	f008 fa03 	bl	8010548 <mg_str_s>
 8008142:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8008146:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800814a:	cb0c      	ldmia	r3, {r2, r3}
 800814c:	c903      	ldmia	r1, {r0, r1}
 800814e:	f008 fabe 	bl	80106ce <mg_strcasecmp>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 8008158:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800815c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008166:	f043 0310 	orr.w	r3, r3, #16
 800816a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800816e:	e01c      	b.n	80081aa <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8008170:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8008174:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d110      	bne.n	80081aa <http_cb+0x702>
 8008188:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800818c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008194:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8008198:	429a      	cmp	r2, r3
 800819a:	f4ff acd5 	bcc.w	8007b48 <http_cb+0xa0>
 800819e:	e004      	b.n	80081aa <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 80081a8:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 80081aa:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <http_cb+0x722>
 80081b2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80081b6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3338      	adds	r3, #56	@ 0x38
 80081be:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 f923 	bl	8008410 <mg_iobuf_del>
  }
  (void) ev_data;
}
 80081ca:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	080200e8 	.word	0x080200e8
 80081d8:	080200f0 	.word	0x080200f0
 80081dc:	08020110 	.word	0x08020110
 80081e0:	08020120 	.word	0x08020120
 80081e4:	0802012c 	.word	0x0802012c

080081e8 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	68b9      	ldr	r1, [r7, #8]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 f9db 	bl	80095b8 <mg_listen>
 8008202:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <mg_http_listen+0x2a>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	4a03      	ldr	r2, [pc, #12]	@ (800821c <mg_http_listen+0x34>)
 800820e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 8008212:	697b      	ldr	r3, [r7, #20]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	08007aa9 	.word	0x08007aa9

08008220 <roundup>:





static size_t roundup(size_t size, size_t align) {
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <roundup+0x26>
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	4413      	add	r3, r2
 8008236:	1e5a      	subs	r2, r3, #1
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	fb02 f303 	mul.w	r3, r2, r3
 8008244:	e000      	b.n	8008248 <roundup+0x28>
 8008246:	687b      	ldr	r3, [r7, #4]
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8008254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008258:	b088      	sub	sp, #32
 800825a:	af02      	add	r7, sp, #8
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	4619      	mov	r1, r3
 800826a:	6838      	ldr	r0, [r7, #0]
 800826c:	f7ff ffd8 	bl	8008220 <roundup>
 8008270:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d117      	bne.n	80082a8 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f013 faa8 	bl	801b7d8 <mg_bzero>
    free(io->buf);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4618      	mov	r0, r3
 800828e:	f015 ff3f 	bl	801e110 <free>
    io->buf = NULL;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	609a      	str	r2, [r3, #8]
 80082a6:	e053      	b.n	8008350 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d04e      	beq.n	8008350 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	2001      	movs	r0, #1
 80082b6:	f015 ff07 	bl	801e0c8 <calloc>
 80082ba:	4603      	mov	r3, r0
 80082bc:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d028      	beq.n	8008316 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	bf28      	it	cs
 80082ce:	4613      	movcs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <mg_iobuf_resize+0x9a>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d006      	beq.n	80082ee <mg_iobuf_resize+0x9a>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6938      	ldr	r0, [r7, #16]
 80082ea:	f016 f9a8 	bl	801e63e <memmove>
      mg_bzero(io->buf, io->size);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f013 fa6d 	bl	801b7d8 <mg_bzero>
      free(io->buf);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f015 ff04 	bl	801e110 <free>
      io->buf = (unsigned char *) p;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
 8008314:	e01c      	b.n	8008350 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800831a:	4b10      	ldr	r3, [pc, #64]	@ (800835c <mg_iobuf_resize+0x108>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd16      	ble.n	8008350 <mg_iobuf_resize+0xfc>
 8008322:	4b0f      	ldr	r3, [pc, #60]	@ (8008360 <mg_iobuf_resize+0x10c>)
 8008324:	f640 12fd 	movw	r2, #2557	@ 0x9fd
 8008328:	490e      	ldr	r1, [pc, #56]	@ (8008364 <mg_iobuf_resize+0x110>)
 800832a:	2001      	movs	r0, #1
 800832c:	f000 ff3e 	bl	80091ac <mg_log_prefix>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	4698      	mov	r8, r3
 8008338:	4691      	mov	r9, r2
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2200      	movs	r2, #0
 800833e:	461c      	mov	r4, r3
 8008340:	4615      	mov	r5, r2
 8008342:	e9cd 4500 	strd	r4, r5, [sp]
 8008346:	4642      	mov	r2, r8
 8008348:	464b      	mov	r3, r9
 800834a:	4807      	ldr	r0, [pc, #28]	@ (8008368 <mg_iobuf_resize+0x114>)
 800834c:	f000 ff7e 	bl	800924c <mg_log>
    }
  }
  return ok;
 8008350:	697b      	ldr	r3, [r7, #20]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800835c:	20000254 	.word	0x20000254
 8008360:	08022844 	.word	0x08022844
 8008364:	0801f338 	.word	0x0801f338
 8008368:	0802016c 	.word	0x0802016c

0800836c <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	441a      	add	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7ff ff49 	bl	8008220 <roundup>
 800838e:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8008390:	6979      	ldr	r1, [r7, #20]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff ff5e 	bl	8008254 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d001      	beq.n	80083a6 <mg_iobuf_add+0x3a>
 80083a2:	2300      	movs	r3, #0
 80083a4:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d210      	bcs.n	80083d2 <mg_iobuf_add+0x66>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	440b      	add	r3, r1
 80083ba:	18d0      	adds	r0, r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	18d1      	adds	r1, r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	461a      	mov	r2, r3
 80083ce:	f016 f936 	bl	801e63e <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <mg_iobuf_add+0x7e>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f016 f92a 	bl	801e63e <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d902      	bls.n	80083fa <mg_iobuf_add+0x8e>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	609a      	str	r2, [r3, #8]
  io->len += len;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	441a      	add	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	609a      	str	r2, [r3, #8]
  return len;
 8008406:	683b      	ldr	r3, [r7, #0]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	d902      	bls.n	800842c <mg_iobuf_del+0x1c>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	441a      	add	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	d904      	bls.n	8008444 <mg_iobuf_del+0x34>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d012      	beq.n	8008472 <mg_iobuf_del+0x62>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	18d0      	adds	r0, r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	440b      	add	r3, r1
 800845e:	18d1      	adds	r1, r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	461a      	mov	r2, r3
 800846e:	f016 f8e6 	bl	801e63e <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <mg_iobuf_del+0x80>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6899      	ldr	r1, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	1acb      	subs	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4618      	mov	r0, r3
 800848c:	f013 f9a4 	bl	801b7d8 <mg_bzero>
  io->len -= len;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	609a      	str	r2, [r3, #8]
  return len;
 800849c:	687b      	ldr	r3, [r7, #4]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fecf 	bl	8008254 <mg_iobuf_resize>
}
 80084b6:	bf00      	nop
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <escapeseq+0x12>
 80084ce:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <escapeseq+0x20>)
 80084d0:	e000      	b.n	80084d4 <escapeseq+0x14>
 80084d2:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <escapeseq+0x24>)
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	08020178 	.word	0x08020178
 80084e4:	08020180 	.word	0x08020180

080084e8 <json_esc>:

static char json_esc(int c, int esc) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80084f2:	6838      	ldr	r0, [r7, #0]
 80084f4:	f7ff ffe4 	bl	80084c0 <escapeseq>
 80084f8:	6138      	str	r0, [r7, #16]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff ffda 	bl	80084c0 <escapeseq>
 800850c:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	e010      	b.n	8008536 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4293      	cmp	r3, r2
 800851e:	d107      	bne.n	8008530 <json_esc+0x48>
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	461a      	mov	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	e007      	b.n	8008540 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	3301      	adds	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1ea      	bne.n	8008514 <json_esc+0x2c>
  }
  return 0;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	e02e      	b.n	80085b6 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4413      	add	r3, r2
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b5c      	cmp	r3, #92	@ 0x5c
 8008562:	d114      	bne.n	800858e <mg_pass_string+0x46>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	dd0f      	ble.n	800858e <mg_pass_string+0x46>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2101      	movs	r1, #1
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff ffb4 	bl	80084e8 <json_esc>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <mg_pass_string+0x46>
      i++;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e010      	b.n	80085b0 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800859a:	f06f 0301 	mvn.w	r3, #1
 800859e:	e010      	b.n	80085c2 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b22      	cmp	r3, #34	@ 0x22
 80085aa:	d101      	bne.n	80085b0 <mg_pass_string+0x68>
      return i;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	e008      	b.n	80085c2 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	dbcc      	blt.n	8008558 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 80085be:	f06f 0301 	mvn.w	r3, #1
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	0000      	movs	r0, r0
 80085cc:	0000      	movs	r0, r0
	...

080085d0 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80085d0:	b480      	push	{r7}
 80085d2:	b091      	sub	sp, #68	@ 0x44
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 80085e8:	2300      	movs	r3, #0
 80085ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ec:	2301      	movs	r3, #1
 80085ee:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 80085f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	da0a      	bge.n	800860e <mg_atod+0x3e>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80085fe:	d106      	bne.n	800860e <mg_atod+0x3e>
    sign = -1, i++;
 8008600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008604:	633b      	str	r3, [r7, #48]	@ 0x30
 8008606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008608:	3301      	adds	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
 800860c:	e00a      	b.n	8008624 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800860e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	429a      	cmp	r2, r3
 8008614:	da21      	bge.n	800865a <mg_atod+0x8a>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b2b      	cmp	r3, #43	@ 0x2b
 800861c:	d11d      	bne.n	800865a <mg_atod+0x8a>
    i++;
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	3301      	adds	r3, #1
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8008624:	e019      	b.n	800865a <mg_atod+0x8a>
    d *= 10.0;
 8008626:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800862a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800862e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008632:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	3b30      	subs	r3, #48	@ 0x30
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008648:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800864c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008650:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8008654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008656:	3301      	adds	r3, #1
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
 800865a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	429a      	cmp	r2, r3
 8008660:	da0b      	bge.n	800867a <mg_atod+0xaa>
 8008662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b2f      	cmp	r3, #47	@ 0x2f
 800866c:	d905      	bls.n	800867a <mg_atod+0xaa>
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b39      	cmp	r3, #57	@ 0x39
 8008678:	d9d5      	bls.n	8008626 <mg_atod+0x56>
  }
  d *= sign;
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008684:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8008688:	ee26 7b07 	vmul.f64	d7, d6, d7
 800868c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8008690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	429a      	cmp	r2, r3
 8008696:	da51      	bge.n	800873c <mg_atod+0x16c>
 8008698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a2:	d14b      	bne.n	800873c <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80086b0:	a36d      	add	r3, pc, #436	@ (adr r3, 8008868 <mg_atod+0x298>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	3301      	adds	r3, #1
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80086c0:	e01d      	b.n	80086fe <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 80086c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	3b30      	subs	r3, #48	@ 0x30
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80086d4:	ed97 7b08 	vldr	d7, [r7, #32]
 80086d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086dc:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80086e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80086e4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 80086e8:	ed97 6b08 	vldr	d6, [r7, #32]
 80086ec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80086f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086f4:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80086f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fa:	3301      	adds	r3, #1
 80086fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	da0b      	bge.n	800871e <mg_atod+0x14e>
 8008706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008710:	d905      	bls.n	800871e <mg_atod+0x14e>
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b39      	cmp	r3, #57	@ 0x39
 800871c:	d9d1      	bls.n	80086c2 <mg_atod+0xf2>
    }
    d += frac * sign;
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008728:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800872c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008730:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8008734:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008738:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800873c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	429a      	cmp	r2, r3
 8008742:	da7e      	bge.n	8008842 <mg_atod+0x272>
 8008744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b65      	cmp	r3, #101	@ 0x65
 800874e:	d005      	beq.n	800875c <mg_atod+0x18c>
 8008750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b45      	cmp	r3, #69	@ 0x45
 800875a:	d172      	bne.n	8008842 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
    i++;
 8008764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008766:	3301      	adds	r3, #1
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800876a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	da0a      	bge.n	8008788 <mg_atod+0x1b8>
 8008772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b2d      	cmp	r3, #45	@ 0x2d
 800877c:	d104      	bne.n	8008788 <mg_atod+0x1b8>
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008784:	3301      	adds	r3, #1
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 8008788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	da19      	bge.n	80087c4 <mg_atod+0x1f4>
 8008790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b2b      	cmp	r3, #43	@ 0x2b
 800879a:	d113      	bne.n	80087c4 <mg_atod+0x1f4>
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	3301      	adds	r3, #1
 80087a0:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80087a2:	e00f      	b.n	80087c4 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4619      	mov	r1, r3
 80087b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80087b6:	461a      	mov	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	3b30      	subs	r3, #48	@ 0x30
 80087c0:	440b      	add	r3, r1
 80087c2:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 80087c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	da0f      	bge.n	80087ec <mg_atod+0x21c>
 80087cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80087d6:	d909      	bls.n	80087ec <mg_atod+0x21c>
 80087d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b39      	cmp	r3, #57	@ 0x39
 80087e2:	d803      	bhi.n	80087ec <mg_atod+0x21c>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80087ea:	dbdb      	blt.n	80087a4 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <mg_atod+0x228>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	425b      	negs	r3, r3
 80087f6:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	e00a      	b.n	8008814 <mg_atod+0x244>
 80087fe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8008802:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008806:	ee27 7b06 	vmul.f64	d7, d7, d6
 800880a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	3301      	adds	r3, #1
 8008812:	61fb      	str	r3, [r7, #28]
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	429a      	cmp	r2, r3
 800881a:	dbf0      	blt.n	80087fe <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	e00a      	b.n	8008838 <mg_atod+0x268>
 8008822:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8008826:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800882a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800882e:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	3301      	adds	r3, #1
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	425b      	negs	r3, r3
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	429a      	cmp	r2, r3
 8008840:	dbef      	blt.n	8008822 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <mg_atod+0x27e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800884c:	601a      	str	r2, [r3, #0]
  return d;
 800884e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008852:	ec43 2b17 	vmov	d7, r2, r3
}
 8008856:	eeb0 0b47 	vmov.f64	d0, d7
 800885a:	3744      	adds	r7, #68	@ 0x44
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	f3af 8000 	nop.w
 8008868:	9999999a 	.word	0x9999999a
 800886c:	3fb99999 	.word	0x3fb99999

08008870 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b09b      	sub	sp, #108	@ 0x6c
 8008874:	af00      	add	r7, sp, #0
 8008876:	f107 0408 	add.w	r4, r7, #8
 800887a:	e884 0003 	stmia.w	r4, {r0, r1}
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800888a:	2300      	movs	r3, #0
 800888c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8008890:	2300      	movs	r3, #0
 8008892:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8008894:	2300      	movs	r3, #0
 8008896:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 8008898:	2300      	movs	r3, #0
 800889a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800889c:	2300      	movs	r3, #0
 800889e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 80088a0:	2301      	movs	r3, #1
 80088a2:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 80088a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <mg_json_get+0x4c>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b24      	cmp	r3, #36	@ 0x24
 80088c2:	d002      	beq.n	80088ca <mg_json_get+0x5a>
 80088c4:	f06f 0301 	mvn.w	r3, #1
 80088c8:	e308      	b.n	8008edc <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 80088ca:	2300      	movs	r3, #0
 80088cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80088ce:	e2fe      	b.n	8008ece <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 80088d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088d4:	4413      	add	r3, r2
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80088dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	f000 82ee 	beq.w	8008ec2 <mg_json_get+0x652>
 80088e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	f000 82e9 	beq.w	8008ec2 <mg_json_get+0x652>
 80088f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088f4:	2b0a      	cmp	r3, #10
 80088f6:	f000 82e4 	beq.w	8008ec2 <mg_json_get+0x652>
 80088fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80088fe:	2b0d      	cmp	r3, #13
 8008900:	f000 82df 	beq.w	8008ec2 <mg_json_get+0x652>
    switch (expecting) {
 8008904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008908:	2b03      	cmp	r3, #3
 800890a:	f200 82dd 	bhi.w	8008ec8 <mg_json_get+0x658>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <mg_json_get+0xa4>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008925 	.word	0x08008925
 8008918:	08008c0d 	.word	0x08008c0d
 800891c:	08008d9b 	.word	0x08008d9b
 8008920:	08008db1 	.word	0x08008db1
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 8008924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008928:	429a      	cmp	r2, r3
 800892a:	d101      	bne.n	8008930 <mg_json_get+0xc0>
 800892c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800892e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 8008930:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008934:	2b7b      	cmp	r3, #123	@ 0x7b
 8008936:	d12b      	bne.n	8008990 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8008938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800893a:	2b1d      	cmp	r3, #29
 800893c:	dd02      	ble.n	8008944 <mg_json_get+0xd4>
 800893e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008942:	e2cb      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 8008944:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008948:	429a      	cmp	r2, r3
 800894a:	d114      	bne.n	8008976 <mg_json_get+0x106>
 800894c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b2e      	cmp	r3, #46	@ 0x2e
 8008956:	d10e      	bne.n	8008976 <mg_json_get+0x106>
 8008958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800895a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800895c:	429a      	cmp	r2, r3
 800895e:	d10a      	bne.n	8008976 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8008960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008962:	3301      	adds	r3, #1
 8008964:	657b      	str	r3, [r7, #84]	@ 0x54
 8008966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008968:	3301      	adds	r3, #1
 800896a:	653b      	str	r3, [r7, #80]	@ 0x50
 800896c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008974:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 8008976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800897c:	3368      	adds	r3, #104	@ 0x68
 800897e:	443b      	add	r3, r7
 8008980:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008984:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800898e:	e29b      	b.n	8008ec8 <mg_json_get+0x658>
        } else if (c == '[') {
 8008990:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008994:	2b5b      	cmp	r3, #91	@ 0x5b
 8008996:	d14e      	bne.n	8008a36 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8008998:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800899a:	2b1d      	cmp	r3, #29
 800899c:	dd02      	ble.n	80089a4 <mg_json_get+0x134>
 800899e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089a2:	e29b      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 80089a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d13a      	bne.n	8008a22 <mg_json_get+0x1b2>
 80089ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b5b      	cmp	r3, #91	@ 0x5b
 80089b6:	d134      	bne.n	8008a22 <mg_json_get+0x1b2>
 80089b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089bc:	429a      	cmp	r2, r3
 80089be:	d130      	bne.n	8008a22 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 80089c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089c2:	3301      	adds	r3, #1
 80089c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80089c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089c8:	3301      	adds	r3, #1
 80089ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80089cc:	2300      	movs	r3, #0
 80089ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80089d0:	2300      	movs	r3, #0
 80089d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d4:	e010      	b.n	80089f8 <mg_json_get+0x188>
              ei *= 10;
 80089d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 80089e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	3b30      	subs	r3, #48	@ 0x30
 80089ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ee:	4413      	add	r3, r2
 80089f0:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80089f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089f4:	3301      	adds	r3, #1
 80089f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80089f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b5d      	cmp	r3, #93	@ 0x5d
 8008a02:	d005      	beq.n	8008a10 <mg_json_get+0x1a0>
 8008a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e2      	bne.n	80089d6 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 8008a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <mg_json_get+0x1b2>
 8008a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1e:	3301      	adds	r3, #1
 8008a20:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 8008a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a28:	3368      	adds	r3, #104	@ 0x68
 8008a2a:	443b      	add	r3, r7
 8008a2c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008a30:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 8008a34:	e248      	b.n	8008ec8 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 8008a36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008a3a:	2b5d      	cmp	r3, #93	@ 0x5d
 8008a3c:	d13a      	bne.n	8008ab4 <mg_json_get+0x244>
 8008a3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dd37      	ble.n	8008ab4 <mg_json_get+0x244>
          MG_EOO(']');
 8008a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d106      	bne.n	8008a5a <mg_json_get+0x1ea>
 8008a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d002      	beq.n	8008a5a <mg_json_get+0x1ea>
 8008a54:	f06f 0302 	mvn.w	r3, #2
 8008a58:	e240      	b.n	8008edc <mg_json_get+0x66c>
 8008a5a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a60:	3b01      	subs	r3, #1
 8008a62:	3368      	adds	r3, #104	@ 0x68
 8008a64:	443b      	add	r3, r7
 8008a66:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008a6a:	3302      	adds	r3, #2
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d002      	beq.n	8008a76 <mg_json_get+0x206>
 8008a70:	f06f 0301 	mvn.w	r3, #1
 8008a74:	e232      	b.n	8008edc <mg_json_get+0x66c>
 8008a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a80:	429a      	cmp	r2, r3
 8008a82:	f040 809c 	bne.w	8008bbe <mg_json_get+0x34e>
 8008a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f040 8095 	bne.w	8008bbe <mg_json_get+0x34e>
 8008a94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	f040 8090 	bne.w	8008bbe <mg_json_get+0x34e>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <mg_json_get+0x240>
 8008aa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ab2:	e213      	b.n	8008edc <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8008ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ab8:	2b74      	cmp	r3, #116	@ 0x74
 8008aba:	d113      	bne.n	8008ae4 <mg_json_get+0x274>
 8008abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008abe:	3303      	adds	r3, #3
 8008ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	dd0e      	ble.n	8008ae4 <mg_json_get+0x274>
 8008ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aca:	4413      	add	r3, r2
 8008acc:	2204      	movs	r2, #4
 8008ace:	4998      	ldr	r1, [pc, #608]	@ (8008d30 <mg_json_get+0x4c0>)
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f015 fda4 	bl	801e61e <memcmp>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d103      	bne.n	8008ae4 <mg_json_get+0x274>
          i += 3;
 8008adc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ade:	3303      	adds	r3, #3
 8008ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ae2:	e06c      	b.n	8008bbe <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8008ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008ae8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008aea:	d113      	bne.n	8008b14 <mg_json_get+0x2a4>
 8008aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008aee:	3303      	adds	r3, #3
 8008af0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008af2:	429a      	cmp	r2, r3
 8008af4:	dd0e      	ble.n	8008b14 <mg_json_get+0x2a4>
 8008af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008afa:	4413      	add	r3, r2
 8008afc:	2204      	movs	r2, #4
 8008afe:	498d      	ldr	r1, [pc, #564]	@ (8008d34 <mg_json_get+0x4c4>)
 8008b00:	4618      	mov	r0, r3
 8008b02:	f015 fd8c 	bl	801e61e <memcmp>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <mg_json_get+0x2a4>
          i += 3;
 8008b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b0e:	3303      	adds	r3, #3
 8008b10:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b12:	e054      	b.n	8008bbe <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8008b14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b18:	2b66      	cmp	r3, #102	@ 0x66
 8008b1a:	d113      	bne.n	8008b44 <mg_json_get+0x2d4>
 8008b1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b1e:	3304      	adds	r3, #4
 8008b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b22:	429a      	cmp	r2, r3
 8008b24:	dd0e      	ble.n	8008b44 <mg_json_get+0x2d4>
 8008b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b2a:	4413      	add	r3, r2
 8008b2c:	2205      	movs	r2, #5
 8008b2e:	4982      	ldr	r1, [pc, #520]	@ (8008d38 <mg_json_get+0x4c8>)
 8008b30:	4618      	mov	r0, r3
 8008b32:	f015 fd74 	bl	801e61e <memcmp>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d103      	bne.n	8008b44 <mg_json_get+0x2d4>
          i += 4;
 8008b3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b3e:	3304      	adds	r3, #4
 8008b40:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b42:	e03c      	b.n	8008bbe <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8008b44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b48:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b4a:	d007      	beq.n	8008b5c <mg_json_get+0x2ec>
 8008b4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b50:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b52:	d916      	bls.n	8008b82 <mg_json_get+0x312>
 8008b54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b58:	2b39      	cmp	r3, #57	@ 0x39
 8008b5a:	d812      	bhi.n	8008b82 <mg_json_get+0x312>
          int numlen = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8008b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b64:	18d0      	adds	r0, r2, r3
 8008b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f107 0210 	add.w	r2, r7, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	f7ff fd2d 	bl	80085d0 <mg_atod>
          i += numlen - 1;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b7c:	4413      	add	r3, r2
 8008b7e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8008b80:	e01d      	b.n	8008bbe <mg_json_get+0x34e>
        } else if (c == '"') {
 8008b82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008b86:	2b22      	cmp	r3, #34	@ 0x22
 8008b88:	d116      	bne.n	8008bb8 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8008b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b90:	18d0      	adds	r0, r2, r3
 8008b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f7ff fcd4 	bl	8008548 <mg_pass_string>
 8008ba0:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da01      	bge.n	8008bac <mg_json_get+0x33c>
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008baa:	e197      	b.n	8008edc <mg_json_get+0x66c>
          i += n + 1;
 8008bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bae:	3301      	adds	r3, #1
 8008bb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008bb2:	4413      	add	r3, r2
 8008bb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bb6:	e002      	b.n	8008bbe <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8008bb8:	f06f 0301 	mvn.w	r3, #1
 8008bbc:	e18e      	b.n	8008edc <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 8008bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d114      	bne.n	8008bf0 <mg_json_get+0x380>
 8008bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10e      	bne.n	8008bf0 <mg_json_get+0x380>
 8008bd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d10a      	bne.n	8008bf0 <mg_json_get+0x380>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <mg_json_get+0x37c>
 8008be0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bee:	e175      	b.n	8008edc <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 8008bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d105      	bne.n	8008c04 <mg_json_get+0x394>
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	db02      	blt.n	8008c04 <mg_json_get+0x394>
 8008bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c00:	3301      	adds	r3, #1
 8008c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 8008c04:	2303      	movs	r3, #3
 8008c06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8008c0a:	e15d      	b.n	8008ec8 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 8008c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c10:	2b22      	cmp	r3, #34	@ 0x22
 8008c12:	d170      	bne.n	8008cf6 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8008c14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c16:	3301      	adds	r3, #1
 8008c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c1a:	18d0      	adds	r0, r2, r3
 8008c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	4619      	mov	r1, r3
 8008c26:	f7ff fc8f 	bl	8008548 <mg_pass_string>
 8008c2a:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da01      	bge.n	8008c36 <mg_json_get+0x3c6>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c34:	e152      	b.n	8008edc <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8008c36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	4413      	add	r3, r2
 8008c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c40:	429a      	cmp	r2, r3
 8008c42:	dc02      	bgt.n	8008c4a <mg_json_get+0x3da>
 8008c44:	f06f 0302 	mvn.w	r3, #2
 8008c48:	e148      	b.n	8008edc <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8008c4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	da02      	bge.n	8008c58 <mg_json_get+0x3e8>
 8008c52:	f06f 0302 	mvn.w	r3, #2
 8008c56:	e141      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8008c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d109      	bne.n	8008c74 <mg_json_get+0x404>
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	3b01      	subs	r3, #1
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4413      	add	r3, r2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c6c:	d002      	beq.n	8008c74 <mg_json_get+0x404>
 8008c6e:	f06f 0302 	mvn.w	r3, #2
 8008c72:	e133      	b.n	8008edc <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8008c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d133      	bne.n	8008ce4 <mg_json_get+0x474>
 8008c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	4413      	add	r3, r2
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c88:	d12c      	bne.n	8008ce4 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8008c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c90:	18d0      	adds	r0, r2, r3
 8008c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	4413      	add	r3, r2
 8008c98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	f015 fcfe 	bl	801e69c <strncmp>
 8008ca0:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d11e      	bne.n	8008ce4 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8008ca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	4413      	add	r3, r2
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d011      	beq.n	8008cdc <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8008cb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbc:	4413      	add	r3, r2
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cc8:	d008      	beq.n	8008cdc <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8008cca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	4413      	add	r3, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8008cd8:	2b5b      	cmp	r3, #91	@ 0x5b
 8008cda:	d103      	bne.n	8008ce4 <mg_json_get+0x474>
            pos += n;
 8008cdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	4413      	add	r3, r2
 8008ce2:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cea:	4413      	add	r3, r2
 8008cec:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8008cf4:	e0e7      	b.n	8008ec6 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 8008cf6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008cfa:	2b7d      	cmp	r3, #125	@ 0x7d
 8008cfc:	d14a      	bne.n	8008d94 <mg_json_get+0x524>
          MG_EOO('}');
 8008cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d106      	bne.n	8008d14 <mg_json_get+0x4a4>
 8008d06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d002      	beq.n	8008d14 <mg_json_get+0x4a4>
 8008d0e:	f06f 0302 	mvn.w	r3, #2
 8008d12:	e0e3      	b.n	8008edc <mg_json_get+0x66c>
 8008d14:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	3368      	adds	r3, #104	@ 0x68
 8008d1e:	443b      	add	r3, r7
 8008d20:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008d24:	3302      	adds	r3, #2
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d008      	beq.n	8008d3c <mg_json_get+0x4cc>
 8008d2a:	f06f 0301 	mvn.w	r3, #1
 8008d2e:	e0d5      	b.n	8008edc <mg_json_get+0x66c>
 8008d30:	0802018c 	.word	0x0802018c
 8008d34:	08020194 	.word	0x08020194
 8008d38:	0802019c 	.word	0x0802019c
 8008d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d114      	bne.n	8008d74 <mg_json_get+0x504>
 8008d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10e      	bne.n	8008d74 <mg_json_get+0x504>
 8008d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d10a      	bne.n	8008d74 <mg_json_get+0x504>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <mg_json_get+0x500>
 8008d64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d72:	e0b3      	b.n	8008edc <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 8008d74:	2303      	movs	r3, #3
 8008d76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 8008d7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	f040 80a1 	bne.w	8008ec6 <mg_json_get+0x656>
 8008d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f2c0 809d 	blt.w	8008ec6 <mg_json_get+0x656>
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d8e:	3301      	adds	r3, #1
 8008d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 8008d92:	e098      	b.n	8008ec6 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 8008d94:	f06f 0301 	mvn.w	r3, #1
 8008d98:	e0a0      	b.n	8008edc <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 8008d9a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008da0:	d103      	bne.n	8008daa <mg_json_get+0x53a>
          expecting = S_VALUE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8008da8:	e08e      	b.n	8008ec8 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 8008daa:	f06f 0301 	mvn.w	r3, #1
 8008dae:	e095      	b.n	8008edc <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8008db0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc02      	bgt.n	8008dbc <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 8008db6:	f06f 0301 	mvn.w	r3, #1
 8008dba:	e08f      	b.n	8008edc <mg_json_get+0x66c>
        } else if (c == ',') {
 8008dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008dc0:	2b2c      	cmp	r3, #44	@ 0x2c
 8008dc2:	d10d      	bne.n	8008de0 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8008dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	3368      	adds	r3, #104	@ 0x68
 8008dca:	443b      	add	r3, r7
 8008dcc:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008dd0:	2b7b      	cmp	r3, #123	@ 0x7b
 8008dd2:	bf0c      	ite	eq
 8008dd4:	2301      	moveq	r3, #1
 8008dd6:	2300      	movne	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8008dde:	e073      	b.n	8008ec8 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 8008de0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008de4:	2b5d      	cmp	r3, #93	@ 0x5d
 8008de6:	d003      	beq.n	8008df0 <mg_json_get+0x580>
 8008de8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008dec:	2b7d      	cmp	r3, #125	@ 0x7d
 8008dee:	d163      	bne.n	8008eb8 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 8008df0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d10d      	bne.n	8008e14 <mg_json_get+0x5a4>
 8008df8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008dfc:	2b7d      	cmp	r3, #125	@ 0x7d
 8008dfe:	d109      	bne.n	8008e14 <mg_json_get+0x5a4>
 8008e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e02:	3b01      	subs	r3, #1
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4413      	add	r3, r2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e0c:	d102      	bne.n	8008e14 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 8008e0e:	f06f 0302 	mvn.w	r3, #2
 8008e12:	e063      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8008e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d10d      	bne.n	8008e38 <mg_json_get+0x5c8>
 8008e1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e20:	2b5d      	cmp	r3, #93	@ 0x5d
 8008e22:	d109      	bne.n	8008e38 <mg_json_get+0x5c8>
 8008e24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e26:	3b01      	subs	r3, #1
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b2c      	cmp	r3, #44	@ 0x2c
 8008e30:	d102      	bne.n	8008e38 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 8008e32:	f06f 0302 	mvn.w	r3, #2
 8008e36:	e051      	b.n	8008edc <mg_json_get+0x66c>
          MG_EOO('O');
 8008e38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d106      	bne.n	8008e4e <mg_json_get+0x5de>
 8008e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d002      	beq.n	8008e4e <mg_json_get+0x5de>
 8008e48:	f06f 0302 	mvn.w	r3, #2
 8008e4c:	e046      	b.n	8008edc <mg_json_get+0x66c>
 8008e4e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e54:	3b01      	subs	r3, #1
 8008e56:	3368      	adds	r3, #104	@ 0x68
 8008e58:	443b      	add	r3, r7
 8008e5a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8008e5e:	3302      	adds	r3, #2
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d002      	beq.n	8008e6a <mg_json_get+0x5fa>
 8008e64:	f06f 0301 	mvn.w	r3, #1
 8008e68:	e038      	b.n	8008edc <mg_json_get+0x66c>
 8008e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d114      	bne.n	8008ea2 <mg_json_get+0x632>
 8008e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10e      	bne.n	8008ea2 <mg_json_get+0x632>
 8008e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d10a      	bne.n	8008ea2 <mg_json_get+0x632>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <mg_json_get+0x62e>
 8008e92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	1c5a      	adds	r2, r3, #1
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ea0:	e01c      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8008ea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d109      	bne.n	8008ebe <mg_json_get+0x64e>
 8008eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db06      	blt.n	8008ebe <mg_json_get+0x64e>
 8008eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb6:	e002      	b.n	8008ebe <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 8008eb8:	f06f 0301 	mvn.w	r3, #1
 8008ebc:	e00e      	b.n	8008edc <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 8008ebe:	bf00      	nop
        break;
 8008ec0:	e002      	b.n	8008ec8 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8008ec2:	bf00      	nop
 8008ec4:	e000      	b.n	8008ec8 <mg_json_get+0x658>
        break;
 8008ec6:	bf00      	nop
  for (i = 0; i < len; i++) {
 8008ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eca:	3301      	adds	r3, #1
 8008ecc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	f6ff acfc 	blt.w	80088d0 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8008ed8:	f06f 0302 	mvn.w	r3, #2
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	376c      	adds	r7, #108	@ 0x6c
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd90      	pop	{r4, r7, pc}

08008ee4 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	1d38      	adds	r0, r7, #4
 8008eee:	e880 0006 	stmia.w	r0, {r1, r2}
 8008ef2:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	1d39      	adds	r1, r7, #4
 8008f00:	c903      	ldmia	r1, {r0, r1}
 8008f02:	f7ff fcb5 	bl	8008870 <mg_json_get>
 8008f06:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	db03      	blt.n	8008f16 <mg_json_get_tok+0x32>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	e000      	b.n	8008f18 <mg_json_get_tok+0x34>
 8008f16:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f007 fb2e 	bl	8010582 <mg_str_n>
}
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8008f2e:	b590      	push	{r4, r7, lr}
 8008f30:	b089      	sub	sp, #36	@ 0x24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	f107 0408 	add.w	r4, r7, #8
 8008f38:	e884 0003 	stmia.w	r4, {r0, r1}
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	f107 0108 	add.w	r1, r7, #8
 8008f4e:	c903      	ldmia	r1, {r0, r1}
 8008f50:	f7ff fc8e 	bl	8008870 <mg_json_get>
 8008f54:	61b8      	str	r0, [r7, #24]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db23      	blt.n	8008fa4 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	4413      	add	r3, r2
 8008f62:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8008f64:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f66:	d00b      	beq.n	8008f80 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f72:	d917      	bls.n	8008fa4 <mg_json_get_num+0x76>
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	4413      	add	r3, r2
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b39      	cmp	r3, #57	@ 0x39
 8008f7e:	d811      	bhi.n	8008fa4 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00c      	beq.n	8008fa0 <mg_json_get_num+0x72>
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff fb1d 	bl	80085d0 <mg_atod>
 8008f96:	eeb0 7b40 	vmov.f64	d7, d0
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bf14      	ite	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	2300      	moveq	r3, #0
 8008fae:	b2db      	uxtb	r3, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3724      	adds	r7, #36	@ 0x24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd90      	pop	{r4, r7, pc}

08008fb8 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8008fb8:	b590      	push	{r4, r7, lr}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	f107 0408 	add.w	r4, r7, #8
 8008fc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f107 0108 	add.w	r1, r7, #8
 8008fd6:	c903      	ldmia	r1, {r0, r1}
 8008fd8:	f7ff fc4a 	bl	8008870 <mg_json_get>
 8008fdc:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db1b      	blt.n	800901c <mg_json_get_bool+0x64>
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4413      	add	r3, r2
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b74      	cmp	r3, #116	@ 0x74
 8008fee:	d005      	beq.n	8008ffc <mg_json_get_bool+0x44>
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b66      	cmp	r3, #102	@ 0x66
 8008ffa:	d10f      	bne.n	800901c <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <mg_json_get_bool+0x60>
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4413      	add	r3, r2
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b74      	cmp	r3, #116	@ 0x74
 800900c:	bf0c      	ite	eq
 800900e:	2301      	moveq	r3, #1
 8009010:	2300      	movne	r3, #0
 8009012:	b2da      	uxtb	r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	701a      	strb	r2, [r3, #0]
    found = 1;
 8009018:	2301      	movs	r3, #1
 800901a:	617b      	str	r3, [r7, #20]
  }
  return found;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bf14      	ite	ne
 8009022:	2301      	movne	r3, #1
 8009024:	2300      	moveq	r3, #0
 8009026:	b2db      	uxtb	r3, r3
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	bd90      	pop	{r4, r7, pc}

08009030 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b08d      	sub	sp, #52	@ 0x34
 8009034:	af02      	add	r7, sp, #8
 8009036:	f107 0408 	add.w	r4, r7, #8
 800903a:	e884 0003 	stmia.w	r4, {r0, r1}
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8009042:	2300      	movs	r3, #0
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
 8009046:	2300      	movs	r3, #0
 8009048:	623b      	str	r3, [r7, #32]
 800904a:	e064      	b.n	8009116 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	4413      	add	r3, r2
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b5c      	cmp	r3, #92	@ 0x5c
 8009056:	d12c      	bne.n	80090b2 <mg_json_unescape+0x82>
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	1d5a      	adds	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	429a      	cmp	r2, r3
 8009060:	d227      	bcs.n	80090b2 <mg_json_unescape+0x82>
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009066:	3301      	adds	r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b75      	cmp	r3, #117	@ 0x75
 800906e:	d120      	bne.n	80090b2 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	3302      	adds	r3, #2
 8009076:	18d1      	adds	r1, r2, r3
 8009078:	f107 0314 	add.w	r3, r7, #20
 800907c:	2204      	movs	r2, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f007 fa7f 	bl	8010582 <mg_str_n>
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	4413      	add	r3, r2
 800908a:	2201      	movs	r2, #1
 800908c:	9200      	str	r2, [sp, #0]
 800908e:	2210      	movs	r2, #16
 8009090:	f107 0114 	add.w	r1, r7, #20
 8009094:	c903      	ldmia	r1, {r0, r1}
 8009096:	f007 fcb2 	bl	80109fe <mg_str_to_num>
 800909a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800909c:	f083 0301 	eor.w	r3, r3, #1
 80090a0:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <mg_json_unescape+0x7a>
        return false;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e04c      	b.n	8009144 <mg_json_unescape+0x114>
      i += 5;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	3305      	adds	r3, #5
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b0:	e02b      	b.n	800910a <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	4413      	add	r3, r2
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80090bc:	d11d      	bne.n	80090fa <mg_json_unescape+0xca>
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d218      	bcs.n	80090fa <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	3301      	adds	r3, #1
 80090ce:	4413      	add	r3, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fa07 	bl	80084e8 <json_esc>
 80090da:	4603      	mov	r3, r0
 80090dc:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <mg_json_unescape+0xb8>
 80090e4:	2300      	movs	r3, #0
 80090e6:	e02d      	b.n	8009144 <mg_json_unescape+0x114>
      to[j] = c;
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	4413      	add	r3, r2
 80090ee:	7ffa      	ldrb	r2, [r7, #31]
 80090f0:	701a      	strb	r2, [r3, #0]
      i++;
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	3301      	adds	r3, #1
 80090f6:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 80090f8:	e007      	b.n	800910a <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	441a      	add	r2, r3
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	440b      	add	r3, r1
 8009106:	7812      	ldrb	r2, [r2, #0]
 8009108:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	3301      	adds	r3, #1
 800910e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	3301      	adds	r3, #1
 8009114:	623b      	str	r3, [r7, #32]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800911a:	429a      	cmp	r2, r3
 800911c:	d203      	bcs.n	8009126 <mg_json_unescape+0xf6>
 800911e:	6a3a      	ldr	r2, [r7, #32]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d392      	bcc.n	800904c <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8009126:	6a3a      	ldr	r2, [r7, #32]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d301      	bcc.n	8009132 <mg_json_unescape+0x102>
 800912e:	2300      	movs	r3, #0
 8009130:	e008      	b.n	8009144 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <mg_json_unescape+0x112>
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	4413      	add	r3, r2
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]
  return true;
 8009142:	2301      	movs	r3, #1
}
 8009144:	4618      	mov	r0, r3
 8009146:	372c      	adds	r7, #44	@ 0x2c
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}

0800914c <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8009156:	4b05      	ldr	r3, [pc, #20]	@ (800916c <logc+0x20>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a05      	ldr	r2, [pc, #20]	@ (8009170 <logc+0x24>)
 800915c:	6811      	ldr	r1, [r2, #0]
 800915e:	79fa      	ldrb	r2, [r7, #7]
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000258 	.word	0x20000258
 8009170:	20000634 	.word	0x20000634

08009174 <logs>:

static void logs(const char *buf, size_t len) {
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e009      	b.n	8009198 <logs+0x24>
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff ffdd 	bl	800914c <logc>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	429a      	cmp	r2, r3
 800919e:	d3f1      	bcc.n	8009184 <logs+0x10>
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b099      	sub	sp, #100	@ 0x64
 80091b0:	af06      	add	r7, sp, #24
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 80091ba:	212f      	movs	r1, #47	@ 0x2f
 80091bc:	68b8      	ldr	r0, [r7, #8]
 80091be:	f015 fa92 	bl	801e6e6 <strrchr>
 80091c2:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 80091c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <mg_log_prefix+0x28>
 80091ca:	215c      	movs	r1, #92	@ 0x5c
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f015 fa8a 	bl	801e6e6 <strrchr>
 80091d2:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 80091d4:	f7f7 fa7c 	bl	80006d0 <mg_millis>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091de:	2900      	cmp	r1, #0
 80091e0:	d002      	beq.n	80091e8 <mg_log_prefix+0x3c>
 80091e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80091e4:	3101      	adds	r1, #1
 80091e6:	e000      	b.n	80091ea <mg_log_prefix+0x3e>
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	f107 0414 	add.w	r4, r7, #20
 80091ee:	6838      	ldr	r0, [r7, #0]
 80091f0:	9005      	str	r0, [sp, #20]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	9004      	str	r0, [sp, #16]
 80091f6:	9103      	str	r1, [sp, #12]
 80091f8:	68f9      	ldr	r1, [r7, #12]
 80091fa:	9102      	str	r1, [sp, #8]
 80091fc:	e9cd 2300 	strd	r2, r3, [sp]
 8009200:	4a11      	ldr	r2, [pc, #68]	@ (8009248 <mg_log_prefix+0x9c>)
 8009202:	2129      	movs	r1, #41	@ 0x29
 8009204:	4620      	mov	r0, r4
 8009206:	f003 fdeb 	bl	800cde0 <mg_snprintf>
 800920a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800920c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800920e:	2b27      	cmp	r3, #39	@ 0x27
 8009210:	d90a      	bls.n	8009228 <mg_log_prefix+0x7c>
 8009212:	2327      	movs	r3, #39	@ 0x27
 8009214:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 8009216:	e007      	b.n	8009228 <mg_log_prefix+0x7c>
 8009218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	643a      	str	r2, [r7, #64]	@ 0x40
 800921e:	3348      	adds	r3, #72	@ 0x48
 8009220:	443b      	add	r3, r7
 8009222:	2220      	movs	r2, #32
 8009224:	f803 2c34 	strb.w	r2, [r3, #-52]
 8009228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800922a:	2b28      	cmp	r3, #40	@ 0x28
 800922c:	d9f4      	bls.n	8009218 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800922e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	f107 0314 	add.w	r3, r7, #20
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff ff9b 	bl	8009174 <logs>
}
 800923e:	bf00      	nop
 8009240:	374c      	adds	r7, #76	@ 0x4c
 8009242:	46bd      	mov	sp, r7
 8009244:	bd90      	pop	{r4, r7, pc}
 8009246:	bf00      	nop
 8009248:	080201a4 	.word	0x080201a4

0800924c <mg_log>:

void mg_log(const char *fmt, ...) {
 800924c:	b40f      	push	{r0, r1, r2, r3}
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800925a:	4b09      	ldr	r3, [pc, #36]	@ (8009280 <mg_log+0x34>)
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	4b09      	ldr	r3, [pc, #36]	@ (8009284 <mg_log+0x38>)
 8009260:	6819      	ldr	r1, [r3, #0]
 8009262:	1d3b      	adds	r3, r7, #4
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	f7fb fafb 	bl	8004860 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800926a:	2102      	movs	r1, #2
 800926c:	4806      	ldr	r0, [pc, #24]	@ (8009288 <mg_log+0x3c>)
 800926e:	f7ff ff81 	bl	8009174 <logs>
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800927c:	b004      	add	sp, #16
 800927e:	4770      	bx	lr
 8009280:	20000258 	.word	0x20000258
 8009284:	20000634 	.word	0x20000634
 8009288:	0801f614 	.word	0x0801f614

0800928c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b09      	cmp	r3, #9
 8009298:	d804      	bhi.n	80092a4 <nibble+0x18>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	3330      	adds	r3, #48	@ 0x30
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	e003      	b.n	80092ac <nibble+0x20>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	3357      	adds	r3, #87	@ 0x57
 80092aa:	b2db      	uxtb	r3, r3
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	@ 0x28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 80092c6:	2300      	movs	r3, #0
 80092c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 80092cc:	2300      	movs	r3, #0
 80092ce:	623b      	str	r3, [r7, #32]
 80092d0:	e07a      	b.n	80093c8 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d13a      	bne.n	8009352 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00f      	beq.n	8009302 <mg_hexdump+0x4a>
 80092e2:	2102      	movs	r1, #2
 80092e4:	484c      	ldr	r0, [pc, #304]	@ (8009418 <mg_hexdump+0x160>)
 80092e6:	f7ff ff45 	bl	8009174 <logs>
 80092ea:	f107 030c 	add.w	r3, r7, #12
 80092ee:	2110      	movs	r1, #16
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ff3f 	bl	8009174 <logs>
 80092f6:	200a      	movs	r0, #10
 80092f8:	f7ff ff28 	bl	800914c <logc>
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	0b1b      	lsrs	r3, r3, #12
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff ffbe 	bl	800928c <nibble>
 8009310:	4603      	mov	r3, r0
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff ff1a 	bl	800914c <logc>
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff ffb3 	bl	800928c <nibble>
 8009326:	4603      	mov	r3, r0
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff ff0f 	bl	800914c <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	091b      	lsrs	r3, r3, #4
 8009332:	f003 030f 	and.w	r3, r3, #15
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ffa8 	bl	800928c <nibble>
 800933c:	4603      	mov	r3, r0
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ff04 	bl	800914c <logc>
 8009344:	2030      	movs	r0, #48	@ 0x30
 8009346:	f7ff ff01 	bl	800914c <logc>
 800934a:	2103      	movs	r1, #3
 800934c:	4833      	ldr	r0, [pc, #204]	@ (800941c <mg_hexdump+0x164>)
 800934e:	f7ff ff11 	bl	8009174 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	4413      	add	r3, r2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	091b      	lsrs	r3, r3, #4
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff94 	bl	800928c <nibble>
 8009364:	4603      	mov	r3, r0
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fef0 	bl	800914c <logc>
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	4413      	add	r3, r2
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff ff87 	bl	800928c <nibble>
 800937e:	4603      	mov	r3, r0
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fee3 	bl	800914c <logc>
    logc(' ');                                         // Space after hex number
 8009386:	2020      	movs	r0, #32
 8009388:	f7ff fee0 	bl	800914c <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	4413      	add	r3, r2
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b1f      	cmp	r3, #31
 8009396:	d90a      	bls.n	80093ae <mg_hexdump+0xf6>
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	4413      	add	r3, r2
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80093a2:	d804      	bhi.n	80093ae <mg_hexdump+0xf6>
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	4413      	add	r3, r2
 80093aa:	781a      	ldrb	r2, [r3, #0]
 80093ac:	e000      	b.n	80093b0 <mg_hexdump+0xf8>
 80093ae:	222e      	movs	r2, #46	@ 0x2e
 80093b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093b4:	1c59      	adds	r1, r3, #1
 80093b6:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 80093ba:	3328      	adds	r3, #40	@ 0x28
 80093bc:	443b      	add	r3, r7
 80093be:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	3301      	adds	r3, #1
 80093c6:	623b      	str	r3, [r7, #32]
 80093c8:	6a3a      	ldr	r2, [r7, #32]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d380      	bcc.n	80092d2 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 80093d0:	e00d      	b.n	80093ee <mg_hexdump+0x136>
 80093d2:	2103      	movs	r1, #3
 80093d4:	4811      	ldr	r0, [pc, #68]	@ (800941c <mg_hexdump+0x164>)
 80093d6:	f7ff fecd 	bl	8009174 <logs>
 80093da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80093e4:	3328      	adds	r3, #40	@ 0x28
 80093e6:	443b      	add	r3, r7
 80093e8:	2220      	movs	r2, #32
 80093ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80093ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	d9ed      	bls.n	80093d2 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 80093f6:	2102      	movs	r1, #2
 80093f8:	4807      	ldr	r0, [pc, #28]	@ (8009418 <mg_hexdump+0x160>)
 80093fa:	f7ff febb 	bl	8009174 <logs>
 80093fe:	f107 030c 	add.w	r3, r7, #12
 8009402:	2110      	movs	r1, #16
 8009404:	4618      	mov	r0, r3
 8009406:	f7ff feb5 	bl	8009174 <logs>
 800940a:	200a      	movs	r0, #10
 800940c:	f7ff fe9e 	bl	800914c <logc>
}
 8009410:	bf00      	nop
 8009412:	3728      	adds	r7, #40	@ 0x28
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	080201b8 	.word	0x080201b8
 800941c:	080201bc 	.word	0x080201bc

08009420 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009430:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4805      	ldr	r0, [pc, #20]	@ (8009454 <mg_vprintf+0x34>)
 800943e:	f7fb fa0f 	bl	8004860 <mg_vxprintf>
  return c->send.len - old;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	1ad3      	subs	r3, r2, r3
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	0800cd71 	.word	0x0800cd71

08009458 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8009458:	b40e      	push	{r1, r2, r3}
 800945a:	b580      	push	{r7, lr}
 800945c:	b085      	sub	sp, #20
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8009466:	f107 0320 	add.w	r3, r7, #32
 800946a:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800946c:	f107 0308 	add.w	r3, r7, #8
 8009470:	461a      	mov	r2, r3
 8009472:	69f9      	ldr	r1, [r7, #28]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ffd3 	bl	8009420 <mg_vprintf>
 800947a:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800947c:	68fb      	ldr	r3, [r7, #12]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009488:	b003      	add	sp, #12
 800948a:	4770      	bx	lr

0800948c <mg_alloc_conn>:
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
         mg_aton6(str, addr);
}

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009498:	33b0      	adds	r3, #176	@ 0xb0
 800949a:	4619      	mov	r1, r3
 800949c:	2001      	movs	r0, #1
 800949e:	f014 fe13 	bl	801e0c8 <calloc>
 80094a2:	4603      	mov	r3, r0
 80094a4:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d017      	beq.n	80094dc <mg_alloc_conn+0x50>
    c->mgr = mgr;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	61da      	str	r2, [r3, #28]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	69da      	ldr	r2, [r3, #28]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 80094dc:	68fb      	ldr	r3, [r7, #12]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7fa fc9e 	bl	8003e32 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	e002      	b.n	8009504 <mg_close_conn+0x1c>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	429a      	cmp	r2, r3
 800950c:	d1f7      	bne.n	80094fe <mg_close_conn+0x16>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d103      	bne.n	800952a <mg_close_conn+0x42>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d103      	bne.n	800953e <mg_close_conn+0x56>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800953e:	2200      	movs	r2, #0
 8009540:	2109      	movs	r1, #9
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fa fc97 	bl	8003e76 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 8009548:	4b17      	ldr	r3, [pc, #92]	@ (80095a8 <mg_close_conn+0xc0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b02      	cmp	r3, #2
 800954e:	dd0e      	ble.n	800956e <mg_close_conn+0x86>
 8009550:	4b16      	ldr	r3, [pc, #88]	@ (80095ac <mg_close_conn+0xc4>)
 8009552:	f640 726a 	movw	r2, #3946	@ 0xf6a
 8009556:	4916      	ldr	r1, [pc, #88]	@ (80095b0 <mg_close_conn+0xc8>)
 8009558:	2003      	movs	r0, #3
 800955a:	f7ff fe27 	bl	80091ac <mg_log_prefix>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009566:	461a      	mov	r2, r3
 8009568:	4812      	ldr	r0, [pc, #72]	@ (80095b4 <mg_close_conn+0xcc>)
 800956a:	f7ff fe6f 	bl	800924c <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f00b fcea 	bl	8014f48 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3338      	adds	r3, #56	@ 0x38
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe ff94 	bl	80084a6 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3348      	adds	r3, #72	@ 0x48
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe ff8f 	bl	80084a6 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3368      	adds	r3, #104	@ 0x68
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe ff8a 	bl	80084a6 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 8009592:	21b0      	movs	r1, #176	@ 0xb0
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f012 f91f 	bl	801b7d8 <mg_bzero>
  free(c);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f014 fdb8 	bl	801e110 <free>
}
 80095a0:	bf00      	nop
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20000254 	.word	0x20000254
 80095ac:	08022854 	.word	0x08022854
 80095b0:	0801f338 	.word	0x0801f338
 80095b4:	0802026c 	.word	0x0802026c

080095b8 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff ff5e 	bl	800948c <mg_alloc_conn>
 80095d0:	6178      	str	r0, [r7, #20]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 80095d8:	4b41      	ldr	r3, [pc, #260]	@ (80096e0 <mg_listen+0x128>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd7a      	ble.n	80096d6 <mg_listen+0x11e>
 80095e0:	4b40      	ldr	r3, [pc, #256]	@ (80096e4 <mg_listen+0x12c>)
 80095e2:	f640 728f 	movw	r2, #3983	@ 0xf8f
 80095e6:	4940      	ldr	r1, [pc, #256]	@ (80096e8 <mg_listen+0x130>)
 80095e8:	2001      	movs	r0, #1
 80095ea:	f7ff fddf 	bl	80091ac <mg_log_prefix>
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	483e      	ldr	r0, [pc, #248]	@ (80096ec <mg_listen+0x134>)
 80095f2:	f7ff fe2b 	bl	800924c <mg_log>
 80095f6:	e06e      	b.n	80096d6 <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 80095f8:	68b9      	ldr	r1, [r7, #8]
 80095fa:	6978      	ldr	r0, [r7, #20]
 80095fc:	f003 f8e3 	bl	800c7c6 <mg_open_listener>
 8009600:	4603      	mov	r3, r0
 8009602:	f083 0301 	eor.w	r3, r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d019      	beq.n	8009640 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800960c:	4b34      	ldr	r3, [pc, #208]	@ (80096e0 <mg_listen+0x128>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	dd0f      	ble.n	8009634 <mg_listen+0x7c>
 8009614:	4b33      	ldr	r3, [pc, #204]	@ (80096e4 <mg_listen+0x12c>)
 8009616:	f640 7291 	movw	r2, #3985	@ 0xf91
 800961a:	4933      	ldr	r1, [pc, #204]	@ (80096e8 <mg_listen+0x130>)
 800961c:	2001      	movs	r0, #1
 800961e:	f7ff fdc5 	bl	80091ac <mg_log_prefix>
 8009622:	f015 f927 	bl	801e874 <__errno>
 8009626:	4603      	mov	r3, r0
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	4830      	ldr	r0, [pc, #192]	@ (80096f0 <mg_listen+0x138>)
 8009630:	f7ff fe0c 	bl	800924c <mg_log>
    MG_PROF_FREE(c);
    free(c);
 8009634:	6978      	ldr	r0, [r7, #20]
 8009636:	f014 fd6b 	bl	801e110 <free>
    c = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e04a      	b.n	80096d6 <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 8009640:	697a      	ldr	r2, [r7, #20]
 8009642:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800964e:	2204      	movs	r2, #4
 8009650:	4928      	ldr	r1, [pc, #160]	@ (80096f4 <mg_listen+0x13c>)
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f015 f822 	bl	801e69c <strncmp>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf0c      	ite	eq
 800965e:	2301      	moveq	r3, #1
 8009660:	2300      	movne	r3, #0
 8009662:	b2d9      	uxtb	r1, r3
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800966a:	f361 0300 	bfi	r3, r1, #0, #1
 800966e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 800968c:	2200      	movs	r2, #0
 800968e:	2101      	movs	r1, #1
 8009690:	6978      	ldr	r0, [r7, #20]
 8009692:	f7fa fbf0 	bl	8003e76 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 8009696:	68b8      	ldr	r0, [r7, #8]
 8009698:	f011 ff70 	bl	801b57c <mg_url_is_ssl>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d006      	beq.n	80096b0 <mg_listen+0xf8>
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80096a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ac:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80096b0:	4b0b      	ldr	r3, [pc, #44]	@ (80096e0 <mg_listen+0x128>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	dd0e      	ble.n	80096d6 <mg_listen+0x11e>
 80096b8:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <mg_listen+0x12c>)
 80096ba:	f640 729d 	movw	r2, #3997	@ 0xf9d
 80096be:	490a      	ldr	r1, [pc, #40]	@ (80096e8 <mg_listen+0x130>)
 80096c0:	2003      	movs	r0, #3
 80096c2:	f7ff fd73 	bl	80091ac <mg_log_prefix>
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4809      	ldr	r0, [pc, #36]	@ (80096f8 <mg_listen+0x140>)
 80096d2:	f7ff fdbb 	bl	800924c <mg_log>
  }
  return c;
 80096d6:	697b      	ldr	r3, [r7, #20]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20000254 	.word	0x20000254
 80096e4:	08022864 	.word	0x08022864
 80096e8:	0801f338 	.word	0x0801f338
 80096ec:	08020294 	.word	0x08020294
 80096f0:	0802029c 	.word	0x0802029c
 80096f4:	0802028c 	.word	0x0802028c
 80096f8:	0801f47c 	.word	0x0801f47c

080096fc <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8009704:	2244      	movs	r2, #68	@ 0x44
 8009706:	2100      	movs	r1, #0
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f014 ffb2 	bl	801e672 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009714:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 8009716:	4b32      	ldr	r3, [pc, #200]	@ (80097e0 <mg_mgr_init+0xe4>)
 8009718:	2204      	movs	r2, #4
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	4b30      	ldr	r3, [pc, #192]	@ (80097e0 <mg_mgr_init+0xe4>)
 800971e:	2200      	movs	r2, #0
 8009720:	711a      	strb	r2, [r3, #4]
 8009722:	2000      	movs	r0, #0
 8009724:	f012 f903 	bl	801b92e <mg_ntohl>
 8009728:	4603      	mov	r3, r0
 800972a:	4a2e      	ldr	r2, [pc, #184]	@ (80097e4 <mg_mgr_init+0xe8>)
 800972c:	6093      	str	r3, [r2, #8]
 800972e:	2000      	movs	r0, #0
 8009730:	f012 f8fd 	bl	801b92e <mg_ntohl>
 8009734:	4603      	mov	r3, r0
 8009736:	4a2b      	ldr	r2, [pc, #172]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009738:	60d3      	str	r3, [r2, #12]
 800973a:	2000      	movs	r0, #0
 800973c:	f012 f8f7 	bl	801b92e <mg_ntohl>
 8009740:	4603      	mov	r3, r0
 8009742:	4a28      	ldr	r2, [pc, #160]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009744:	6113      	str	r3, [r2, #16]
 8009746:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009748:	4a27      	ldr	r2, [pc, #156]	@ (80097e8 <mg_mgr_init+0xec>)
 800974a:	625a      	str	r2, [r3, #36]	@ 0x24
 800974c:	4b25      	ldr	r3, [pc, #148]	@ (80097e4 <mg_mgr_init+0xe8>)
 800974e:	4a24      	ldr	r2, [pc, #144]	@ (80097e0 <mg_mgr_init+0xe4>)
 8009750:	629a      	str	r2, [r3, #40]	@ 0x28
 8009752:	4b24      	ldr	r3, [pc, #144]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009754:	2202      	movs	r2, #2
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	4b24      	ldr	r3, [pc, #144]	@ (80097ec <mg_mgr_init+0xf0>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	b2da      	uxtb	r2, r3
 800975e:	4b21      	ldr	r3, [pc, #132]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009760:	705a      	strb	r2, [r3, #1]
 8009762:	4b22      	ldr	r3, [pc, #136]	@ (80097ec <mg_mgr_init+0xf0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	0a9b      	lsrs	r3, r3, #10
 8009768:	b2da      	uxtb	r2, r3
 800976a:	4b1e      	ldr	r3, [pc, #120]	@ (80097e4 <mg_mgr_init+0xe8>)
 800976c:	709a      	strb	r2, [r3, #2]
 800976e:	4b1f      	ldr	r3, [pc, #124]	@ (80097ec <mg_mgr_init+0xf0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	0cdb      	lsrs	r3, r3, #19
 8009774:	b2da      	uxtb	r2, r3
 8009776:	4b1b      	ldr	r3, [pc, #108]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009778:	70da      	strb	r2, [r3, #3]
 800977a:	4b1d      	ldr	r3, [pc, #116]	@ (80097f0 <mg_mgr_init+0xf4>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	b2da      	uxtb	r2, r3
 8009780:	4b18      	ldr	r3, [pc, #96]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009782:	711a      	strb	r2, [r3, #4]
 8009784:	4b1b      	ldr	r3, [pc, #108]	@ (80097f4 <mg_mgr_init+0xf8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4b16      	ldr	r3, [pc, #88]	@ (80097e4 <mg_mgr_init+0xe8>)
 800978c:	715a      	strb	r2, [r3, #5]
 800978e:	4915      	ldr	r1, [pc, #84]	@ (80097e4 <mg_mgr_init+0xe8>)
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f002 fed5 	bl	800c540 <mg_tcpip_init>
 8009796:	4b18      	ldr	r3, [pc, #96]	@ (80097f8 <mg_mgr_init+0xfc>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b01      	cmp	r3, #1
 800979c:	dd0b      	ble.n	80097b6 <mg_mgr_init+0xba>
 800979e:	4b17      	ldr	r3, [pc, #92]	@ (80097fc <mg_mgr_init+0x100>)
 80097a0:	f640 72e6 	movw	r2, #4070	@ 0xfe6
 80097a4:	4916      	ldr	r1, [pc, #88]	@ (8009800 <mg_mgr_init+0x104>)
 80097a6:	2002      	movs	r0, #2
 80097a8:	f7ff fd00 	bl	80091ac <mg_log_prefix>
 80097ac:	4a0d      	ldr	r2, [pc, #52]	@ (80097e4 <mg_mgr_init+0xe8>)
 80097ae:	4915      	ldr	r1, [pc, #84]	@ (8009804 <mg_mgr_init+0x108>)
 80097b0:	4815      	ldr	r0, [pc, #84]	@ (8009808 <mg_mgr_init+0x10c>)
 80097b2:	f7ff fd4b 	bl	800924c <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097bc:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80097c4:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a10      	ldr	r2, [pc, #64]	@ (800980c <mg_mgr_init+0x110>)
 80097ca:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a10      	ldr	r2, [pc, #64]	@ (8009810 <mg_mgr_init+0x114>)
 80097d0:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f00b fcef 	bl	80151b6 <mg_tls_ctx_init>
}
 80097d8:	bf00      	nop
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20003714 	.word	0x20003714
 80097e4:	20003720 	.word	0x20003720
 80097e8:	2000027c 	.word	0x2000027c
 80097ec:	1ff0f420 	.word	0x1ff0f420
 80097f0:	1ff0f424 	.word	0x1ff0f424
 80097f4:	1ff0f428 	.word	0x1ff0f428
 80097f8:	20000254 	.word	0x20000254
 80097fc:	08022870 	.word	0x08022870
 8009800:	0801f338 	.word	0x0801f338
 8009804:	0800d05d 	.word	0x0800d05d
 8009808:	080202cc 	.word	0x080202cc
 800980c:	080202e4 	.word	0x080202e4
 8009810:	080202f8 	.word	0x080202f8

08009814 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d005      	beq.n	8009834 <mg_tcpip_call+0x20>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	68b9      	ldr	r1, [r7, #8]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	4798      	blx	r3
}
 8009834:	bf00      	nop
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	441a      	add	r2, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	461a      	mov	r2, r3
 8009856:	68fc      	ldr	r4, [r7, #12]
 8009858:	463b      	mov	r3, r7
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4618      	mov	r0, r3
 800985e:	f006 fe90 	bl	8010582 <mg_str_n>
 8009862:	f104 0308 	add.w	r3, r4, #8
 8009866:	463a      	mov	r2, r7
 8009868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800986c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 8009878:	b480      	push	{r7}
 800987a:	b087      	sub	sp, #28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
 800988c:	e014      	b.n	80098b8 <csumup+0x40>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <csumup+0x2a>
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	4413      	add	r3, r2
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	e004      	b.n	80098ac <csumup+0x34>
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	4413      	add	r3, r2
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	3301      	adds	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d3e6      	bcc.n	800988e <csumup+0x16>
  return sum;
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 80098d6:	e005      	b.n	80098e4 <csumfin+0x16>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	0c1b      	lsrs	r3, r3, #16
 80098e0:	4413      	add	r3, r2
 80098e2:	607b      	str	r3, [r7, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f5      	bne.n	80098d8 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	43db      	mvns	r3, r3
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4618      	mov	r0, r3
 80098f6:	f012 f803 	bl	801b900 <mg_ntohs>
 80098fa:	4603      	mov	r3, r0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	2000      	movs	r0, #0
 8009914:	f7ff ffb0 	bl	8009878 <csumup>
 8009918:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff ffd7 	bl	80098ce <csumfin>
 8009920:	4603      	mov	r3, r0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800992c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009930:	b088      	sub	sp, #32
 8009932:	af02      	add	r7, sp, #8
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009940:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	33b0      	adds	r3, #176	@ 0xb0
 8009946:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d013      	beq.n	8009976 <settmout+0x4a>
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d00e      	beq.n	8009972 <settmout+0x46>
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	2b03      	cmp	r3, #3
 8009958:	d008      	beq.n	800996c <settmout+0x40>
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	2b04      	cmp	r3, #4
 800995e:	d102      	bne.n	8009966 <settmout+0x3a>
 8009960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009964:	e008      	b.n	8009978 <settmout+0x4c>
 8009966:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800996a:	e005      	b.n	8009978 <settmout+0x4c>
 800996c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8009970:	e002      	b.n	8009978 <settmout+0x4c>
 8009972:	2364      	movs	r3, #100	@ 0x64
 8009974:	e000      	b.n	8009978 <settmout+0x4c>
 8009976:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 8009978:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8009980:	68f9      	ldr	r1, [r7, #12]
 8009982:	2000      	movs	r0, #0
 8009984:	460c      	mov	r4, r1
 8009986:	4605      	mov	r5, r0
 8009988:	eb12 0804 	adds.w	r8, r2, r4
 800998c:	eb43 0905 	adc.w	r9, r3, r5
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800999c:	4b0d      	ldr	r3, [pc, #52]	@ (80099d4 <settmout+0xa8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	dd12      	ble.n	80099ca <settmout+0x9e>
 80099a4:	4b0c      	ldr	r3, [pc, #48]	@ (80099d8 <settmout+0xac>)
 80099a6:	f241 02a6 	movw	r2, #4262	@ 0x10a6
 80099aa:	490c      	ldr	r1, [pc, #48]	@ (80099dc <settmout+0xb0>)
 80099ac:	2004      	movs	r0, #4
 80099ae:	f7ff fbfd 	bl	80091ac <mg_log_prefix>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80099b6:	78f8      	ldrb	r0, [r7, #3]
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80099be:	e9cd 2300 	strd	r2, r3, [sp]
 80099c2:	4602      	mov	r2, r0
 80099c4:	4806      	ldr	r0, [pc, #24]	@ (80099e0 <settmout+0xb4>)
 80099c6:	f7ff fc41 	bl	800924c <mg_log>
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80099d4:	20000254 	.word	0x20000254
 80099d8:	0802287c 	.word	0x0802287c
 80099dc:	0801f338 	.word	0x0801f338
 80099e0:	08020318 	.word	0x08020318

080099e4 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6950      	ldr	r0, [r2, #20]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	4798      	blx	r3
 80099fe:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d104      	bne.n	8009a12 <ether_output+0x2e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	330e      	adds	r3, #14
 8009a32:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2206      	movs	r2, #6
 8009a38:	21ff      	movs	r1, #255	@ 0xff
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f014 fe19 	bl	801e672 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	3306      	adds	r3, #6
 8009a44:	68f9      	ldr	r1, [r7, #12]
 8009a46:	2206      	movs	r2, #6
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f014 ff48 	bl	801e8de <memcpy>
  eth->type = mg_htons(0x806);
 8009a4e:	f640 0006 	movw	r0, #2054	@ 0x806
 8009a52:	f011 ff55 	bl	801b900 <mg_ntohs>
 8009a56:	4603      	mov	r3, r0
 8009a58:	461a      	mov	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 8009a5e:	221c      	movs	r2, #28
 8009a60:	2100      	movs	r1, #0
 8009a62:	6938      	ldr	r0, [r7, #16]
 8009a64:	f014 fe05 	bl	801e672 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8009a68:	2001      	movs	r0, #1
 8009a6a:	f011 ff49 	bl	801b900 <mg_ntohs>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	801a      	strh	r2, [r3, #0]
 8009a76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009a7a:	f011 ff41 	bl	801b900 <mg_ntohs>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	805a      	strh	r2, [r3, #2]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2206      	movs	r2, #6
 8009a8a:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2204      	movs	r2, #4
 8009a90:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 8009a92:	2001      	movs	r0, #1
 8009a94:	f011 ff34 	bl	801b900 <mg_ntohs>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	80da      	strh	r2, [r3, #6]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	619a      	str	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689a      	ldr	r2, [r3, #8]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	68f9      	ldr	r1, [r7, #12]
 8009ab6:	2206      	movs	r2, #6
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f014 ff10 	bl	801e8de <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d006      	beq.n	8009ad2 <mg_tcpip_arp_request+0xb6>
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	3312      	adds	r3, #18
 8009ac8:	2206      	movs	r2, #6
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f014 ff06 	bl	801e8de <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f103 021c 	add.w	r2, r3, #28
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	4619      	mov	r1, r3
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff ff80 	bl	80099e4 <ether_output>
}
 8009ae4:	bf00      	nop
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d135      	bne.n	8009b6a <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8009afe:	4b45      	ldr	r3, [pc, #276]	@ (8009c14 <onstatechange+0x128>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	dd0d      	ble.n	8009b22 <onstatechange+0x36>
 8009b06:	4b44      	ldr	r3, [pc, #272]	@ (8009c18 <onstatechange+0x12c>)
 8009b08:	f44f 5286 	mov.w	r2, #4288	@ 0x10c0
 8009b0c:	4943      	ldr	r1, [pc, #268]	@ (8009c1c <onstatechange+0x130>)
 8009b0e:	2002      	movs	r0, #2
 8009b10:	f7ff fb4c 	bl	80091ac <mg_log_prefix>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3308      	adds	r3, #8
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4941      	ldr	r1, [pc, #260]	@ (8009c20 <onstatechange+0x134>)
 8009b1c:	4841      	ldr	r0, [pc, #260]	@ (8009c24 <onstatechange+0x138>)
 8009b1e:	f7ff fb95 	bl	800924c <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8009b22:	4b3c      	ldr	r3, [pc, #240]	@ (8009c14 <onstatechange+0x128>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	dd0d      	ble.n	8009b46 <onstatechange+0x5a>
 8009b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8009c18 <onstatechange+0x12c>)
 8009b2c:	f241 02c1 	movw	r2, #4289	@ 0x10c1
 8009b30:	493a      	ldr	r1, [pc, #232]	@ (8009c1c <onstatechange+0x130>)
 8009b32:	2002      	movs	r0, #2
 8009b34:	f7ff fb3a 	bl	80091ac <mg_log_prefix>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3310      	adds	r3, #16
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4938      	ldr	r1, [pc, #224]	@ (8009c20 <onstatechange+0x134>)
 8009b40:	4839      	ldr	r0, [pc, #228]	@ (8009c28 <onstatechange+0x13c>)
 8009b42:	f7ff fb83 	bl	800924c <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8009b46:	4b33      	ldr	r3, [pc, #204]	@ (8009c14 <onstatechange+0x128>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	dd57      	ble.n	8009bfe <onstatechange+0x112>
 8009b4e:	4b32      	ldr	r3, [pc, #200]	@ (8009c18 <onstatechange+0x12c>)
 8009b50:	f241 02c2 	movw	r2, #4290	@ 0x10c2
 8009b54:	4931      	ldr	r1, [pc, #196]	@ (8009c1c <onstatechange+0x130>)
 8009b56:	2002      	movs	r0, #2
 8009b58:	f7ff fb28 	bl	80091ac <mg_log_prefix>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4932      	ldr	r1, [pc, #200]	@ (8009c2c <onstatechange+0x140>)
 8009b62:	4833      	ldr	r0, [pc, #204]	@ (8009c30 <onstatechange+0x144>)
 8009b64:	f7ff fb72 	bl	800924c <mg_log>
 8009b68:	e049      	b.n	8009bfe <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d115      	bne.n	8009ba0 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 8009b74:	4b27      	ldr	r3, [pc, #156]	@ (8009c14 <onstatechange+0x128>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dd09      	ble.n	8009b90 <onstatechange+0xa4>
 8009b7c:	4b26      	ldr	r3, [pc, #152]	@ (8009c18 <onstatechange+0x12c>)
 8009b7e:	f241 02c4 	movw	r2, #4292	@ 0x10c4
 8009b82:	4926      	ldr	r1, [pc, #152]	@ (8009c1c <onstatechange+0x130>)
 8009b84:	2001      	movs	r0, #1
 8009b86:	f7ff fb11 	bl	80091ac <mg_log_prefix>
 8009b8a:	482a      	ldr	r0, [pc, #168]	@ (8009c34 <onstatechange+0x148>)
 8009b8c:	f7ff fb5e 	bl	800924c <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	2200      	movs	r2, #0
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff ff3f 	bl	8009a1c <mg_tcpip_arp_request>
 8009b9e:	e02e      	b.n	8009bfe <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d116      	bne.n	8009bd8 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 8009baa:	4b1a      	ldr	r3, [pc, #104]	@ (8009c14 <onstatechange+0x128>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dd09      	ble.n	8009bc6 <onstatechange+0xda>
 8009bb2:	4b19      	ldr	r3, [pc, #100]	@ (8009c18 <onstatechange+0x12c>)
 8009bb4:	f241 02c7 	movw	r2, #4295	@ 0x10c7
 8009bb8:	4918      	ldr	r1, [pc, #96]	@ (8009c1c <onstatechange+0x130>)
 8009bba:	2001      	movs	r0, #1
 8009bbc:	f7ff faf6 	bl	80091ac <mg_log_prefix>
 8009bc0:	481d      	ldr	r0, [pc, #116]	@ (8009c38 <onstatechange+0x14c>)
 8009bc2:	f7ff fb43 	bl	800924c <mg_log>
    srand((unsigned int) mg_millis());
 8009bc6:	f7f6 fd83 	bl	80006d0 <mg_millis>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4613      	mov	r3, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f014 fb53 	bl	801e27c <srand>
 8009bd6:	e012      	b.n	8009bfe <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10d      	bne.n	8009bfe <onstatechange+0x112>
    MG_ERROR(("Link down"));
 8009be2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c14 <onstatechange+0x128>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dd09      	ble.n	8009bfe <onstatechange+0x112>
 8009bea:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <onstatechange+0x12c>)
 8009bec:	f241 02ca 	movw	r2, #4298	@ 0x10ca
 8009bf0:	490a      	ldr	r1, [pc, #40]	@ (8009c1c <onstatechange+0x130>)
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	f7ff fada 	bl	80091ac <mg_log_prefix>
 8009bf8:	4810      	ldr	r0, [pc, #64]	@ (8009c3c <onstatechange+0x150>)
 8009bfa:	f7ff fb27 	bl	800924c <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3384      	adds	r3, #132	@ 0x84
 8009c02:	461a      	mov	r2, r3
 8009c04:	2100      	movs	r1, #0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fe04 	bl	8009814 <mg_tcpip_call>
}
 8009c0c:	bf00      	nop
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000254 	.word	0x20000254
 8009c18:	08022888 	.word	0x08022888
 8009c1c:	0801f338 	.word	0x0801f338
 8009c20:	0800cf99 	.word	0x0800cf99
 8009c24:	08020328 	.word	0x08020328
 8009c28:	08020338 	.word	0x08020338
 8009c2c:	0800d05d 	.word	0x0800d05d
 8009c30:	08020348 	.word	0x08020348
 8009c34:	08020358 	.word	0x08020358
 8009c38:	08020360 	.word	0x08020360
 8009c3c:	08020368 	.word	0x08020368

08009c40 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	330e      	adds	r3, #14
 8009c5a:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2206      	movs	r2, #6
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f014 fe3b 	bl	801e8de <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3306      	adds	r3, #6
 8009c6c:	68f9      	ldr	r1, [r7, #12]
 8009c6e:	2206      	movs	r2, #6
 8009c70:	4618      	mov	r0, r3
 8009c72:	f014 fe34 	bl	801e8de <memcpy>
  eth->type = mg_htons(0x800);
 8009c76:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009c7a:	f011 fe41 	bl	801b900 <mg_ntohs>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	461a      	mov	r2, r3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 8009c86:	2214      	movs	r2, #20
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f014 fcf1 	bl	801e672 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2245      	movs	r2, #69	@ 0x45
 8009c94:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 8009c96:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009c9a:	f011 fe31 	bl	801b900 <mg_ntohs>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	3314      	adds	r3, #20
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f011 fe26 	bl	801b900 <mg_ntohs>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2240      	movs	r2, #64	@ 0x40
 8009cc0:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	79fa      	ldrb	r2, [r7, #7]
 8009cc6:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8009cd4:	2114      	movs	r1, #20
 8009cd6:	6938      	ldr	r0, [r7, #16]
 8009cd8:	f7ff fe14 	bl	8009904 <ipcsum>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	461a      	mov	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	815a      	strh	r2, [r3, #10]
  return ip;
 8009ce4:	693b      	ldr	r3, [r7, #16]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b08a      	sub	sp, #40	@ 0x28
 8009cf2:	af02      	add	r7, sp, #8
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
 8009cfa:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cfe:	3308      	adds	r3, #8
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2211      	movs	r2, #17
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff ff97 	bl	8009c40 <tx_ip>
 8009d12:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	3314      	adds	r3, #20
 8009d18:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	887a      	ldrh	r2, [r7, #2]
 8009d1e:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009d24:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8009d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f011 fde6 	bl	801b900 <mg_ntohs>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	719a      	strb	r2, [r3, #6]
 8009d42:	2200      	movs	r2, #0
 8009d44:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8009d46:	2208      	movs	r2, #8
 8009d48:	69b9      	ldr	r1, [r7, #24]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7ff fd94 	bl	8009878 <csumup>
 8009d50:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 8009d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d56:	6978      	ldr	r0, [r7, #20]
 8009d58:	f7ff fd8e 	bl	8009878 <csumup>
 8009d5c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	330c      	adds	r3, #12
 8009d62:	2204      	movs	r2, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	6978      	ldr	r0, [r7, #20]
 8009d68:	f7ff fd86 	bl	8009878 <csumup>
 8009d6c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	3310      	adds	r3, #16
 8009d72:	2204      	movs	r2, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	6978      	ldr	r0, [r7, #20]
 8009d78:	f7ff fd7e 	bl	8009878 <csumup>
 8009d7c:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	7a5b      	ldrb	r3, [r3, #9]
 8009d82:	461a      	mov	r2, r3
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	441a      	add	r2, r3
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 8009d90:	6978      	ldr	r0, [r7, #20]
 8009d92:	f7ff fd9c 	bl	80098ce <csumfin>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	3308      	adds	r3, #8
 8009da2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009da4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009da6:	4618      	mov	r0, r3
 8009da8:	f014 fc49 	bl	801e63e <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	332a      	adds	r3, #42	@ 0x2a
 8009db0:	4619      	mov	r1, r3
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fe16 	bl	80099e4 <ether_output>
}
 8009db8:	bf00      	nop
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 8009dc0:	b5b0      	push	{r4, r5, r7, lr}
 8009dc2:	b0d0      	sub	sp, #320	@ 0x140
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 8009dca:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 8009dce:	6020      	str	r0, [r4, #0]
 8009dd0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8009dd4:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 8009dd8:	6001      	str	r1, [r0, #0]
 8009dda:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8009dde:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 8009de2:	600a      	str	r2, [r1, #0]
 8009de4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009de8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009dec:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8009dee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009df2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009df6:	4a38      	ldr	r2, [pc, #224]	@ (8009ed8 <tx_dhcp+0x118>)
 8009df8:	4618      	mov	r0, r3
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8009e00:	461a      	mov	r2, r3
 8009e02:	f014 fd6c 	bl	801e8de <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 8009e06:	4835      	ldr	r0, [pc, #212]	@ (8009edc <tx_dhcp+0x11c>)
 8009e08:	f011 fd91 	bl	801b92e <mg_ntohl>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e16:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8009e1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e1e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	f107 0314 	add.w	r3, r7, #20
 8009e28:	331c      	adds	r3, #28
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f014 fd56 	bl	801e8de <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 8009e32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e36:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e46:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e4a:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	33f0      	adds	r3, #240	@ 0xf0
 8009e52:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8009e56:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f014 fd3f 	bl	801e8de <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 8009e60:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <tx_dhcp+0xbc>
 8009e68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009e70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e74:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009e78:	6812      	ldr	r2, [r2, #0]
 8009e7a:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 8009e7c:	2044      	movs	r0, #68	@ 0x44
 8009e7e:	f011 fd3f 	bl	801b900 <mg_ntohs>
 8009e82:	4603      	mov	r3, r0
 8009e84:	461d      	mov	r5, r3
 8009e86:	2043      	movs	r0, #67	@ 0x43
 8009e88:	f011 fd3a 	bl	801b900 <mg_ntohs>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461c      	mov	r4, r3
 8009e90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e94:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8009e98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e9c:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 8009ea0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ea4:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8009ea8:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8009eac:	9303      	str	r3, [sp, #12]
 8009eae:	f107 0314 	add.w	r3, r7, #20
 8009eb2:	9302      	str	r3, [sp, #8]
 8009eb4:	9401      	str	r4, [sp, #4]
 8009eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009eba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	6809      	ldr	r1, [r1, #0]
 8009ec8:	6800      	ldr	r0, [r0, #0]
 8009eca:	f7ff ff10 	bl	8009cee <tx_udp>
         sizeof(dhcp));
}
 8009ece:	bf00      	nop
 8009ed0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8009ed8:	08020374 	.word	0x08020374
 8009edc:	63825363 	.word	0x63825363

08009ee0 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b096      	sub	sp, #88	@ 0x58
 8009ee4:	af04      	add	r7, sp, #16
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	7fdb      	ldrb	r3, [r3, #31]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <tx_dhcp_request_sel+0x18>
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	e000      	b.n	8009efa <tx_dhcp_request_sel+0x1a>
 8009ef8:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <tx_dhcp_request_sel+0x28>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <tx_dhcp_request_sel+0x2a>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3344      	adds	r3, #68	@ 0x44
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7f6 f9f3 	bl	8000300 <strlen>
 8009f1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;   // Total length of options
 8009f1c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8009f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f22:	4413      	add	r3, r2
 8009f24:	3318      	adds	r3, #24
 8009f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  #define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN]; // Allocate options (max size possible)
  uint8_t *p = opts;
 8009f28:	f107 0310 	add.w	r3, r7, #16
 8009f2c:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	2b26      	cmp	r3, #38	@ 0x26
 8009f32:	d906      	bls.n	8009f42 <tx_dhcp_request_sel+0x62>
 8009f34:	4b50      	ldr	r3, [pc, #320]	@ (800a078 <tx_dhcp_request_sel+0x198>)
 8009f36:	4a51      	ldr	r2, [pc, #324]	@ (800a07c <tx_dhcp_request_sel+0x19c>)
 8009f38:	f241 1113 	movw	r1, #4371	@ 0x1113
 8009f3c:	4850      	ldr	r0, [pc, #320]	@ (800a080 <tx_dhcp_request_sel+0x1a0>)
 8009f3e:	f014 f8a1 	bl	801e084 <__assert_func>
  memset(opts, 0, sizeof(opts));
 8009f42:	f107 0310 	add.w	r3, r7, #16
 8009f46:	2226      	movs	r2, #38	@ 0x26
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f014 fb91 	bl	801e672 <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;            // Type: DHCP request
 8009f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f56:	2235      	movs	r2, #53	@ 0x35
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f60:	2201      	movs	r2, #1
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 8009f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f74:	2236      	movs	r2, #54	@ 0x36
 8009f76:	701a      	strb	r2, [r3, #0]
 8009f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f7e:	2204      	movs	r2, #4
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 8009f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f94:	2232      	movs	r2, #50	@ 0x32
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009faa:	3304      	adds	r3, #4
 8009fac:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 8009fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fb4:	220c      	movs	r2, #12
 8009fb6:	701a      	strb	r2, [r3, #0]
 8009fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009fc0:	b2d2      	uxtb	r2, r2
 8009fc2:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3344      	adds	r3, #68	@ 0x44
 8009fc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009fce:	f014 fc86 	bl	801e8de <memcpy>
 8009fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd6:	4413      	add	r3, r2
 8009fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 8009fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fe0:	2237      	movs	r2, #55	@ 0x37
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fea:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8009fee:	3202      	adds	r2, #2
 8009ff0:	b2d2      	uxtb	r2, r2
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ff6:	1c5a      	adds	r2, r3, #1
 8009ff8:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	647a      	str	r2, [r7, #68]	@ 0x44
 800a004:	2203      	movs	r2, #3
 800a006:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7fdb      	ldrb	r3, [r3, #31]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d004      	beq.n	800a01a <tx_dhcp_request_sel+0x13a>
 800a010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	647a      	str	r2, [r7, #68]	@ 0x44
 800a016:	2206      	movs	r2, #6
 800a018:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <tx_dhcp_request_sel+0x14e>
 800a024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	647a      	str	r2, [r7, #68]	@ 0x44
 800a02a:	222a      	movs	r2, #42	@ 0x2a
 800a02c:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800a02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	647a      	str	r2, [r7, #68]	@ 0x44
 800a034:	22ff      	movs	r2, #255	@ 0xff
 800a036:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800a038:	2300      	movs	r3, #0
 800a03a:	9302      	str	r3, [sp, #8]
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	f107 0310 	add.w	r3, r7, #16
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a04a:	2200      	movs	r2, #0
 800a04c:	490d      	ldr	r1, [pc, #52]	@ (800a084 <tx_dhcp_request_sel+0x1a4>)
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff feb6 	bl	8009dc0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a054:	4b0c      	ldr	r3, [pc, #48]	@ (800a088 <tx_dhcp_request_sel+0x1a8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	dd09      	ble.n	800a070 <tx_dhcp_request_sel+0x190>
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <tx_dhcp_request_sel+0x19c>)
 800a05e:	f44f 5289 	mov.w	r2, #4384	@ 0x1120
 800a062:	4907      	ldr	r1, [pc, #28]	@ (800a080 <tx_dhcp_request_sel+0x1a0>)
 800a064:	2003      	movs	r0, #3
 800a066:	f7ff f8a1 	bl	80091ac <mg_log_prefix>
 800a06a:	4808      	ldr	r0, [pc, #32]	@ (800a08c <tx_dhcp_request_sel+0x1ac>)
 800a06c:	f7ff f8ee 	bl	800924c <mg_log>
}
 800a070:	bf00      	nop
 800a072:	3748      	adds	r7, #72	@ 0x48
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	08020490 	.word	0x08020490
 800a07c:	08022898 	.word	0x08022898
 800a080:	0801f338 	.word	0x0801f338
 800a084:	080223bc 	.word	0x080223bc
 800a088:	20000254 	.word	0x20000254
 800a08c:	080204a8 	.word	0x080204a8

0800a090 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b08a      	sub	sp, #40	@ 0x28
 800a094:	af04      	add	r7, sp, #16
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800a09e:	4b10      	ldr	r3, [pc, #64]	@ (800a0e0 <tx_dhcp_request_re+0x50>)
 800a0a0:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	2304      	movs	r3, #4
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	f107 0314 	add.w	r3, r7, #20
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	68b9      	ldr	r1, [r7, #8]
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff fe82 	bl	8009dc0 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800a0bc:	4b09      	ldr	r3, [pc, #36]	@ (800a0e4 <tx_dhcp_request_re+0x54>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	dd09      	ble.n	800a0d8 <tx_dhcp_request_re+0x48>
 800a0c4:	4b08      	ldr	r3, [pc, #32]	@ (800a0e8 <tx_dhcp_request_re+0x58>)
 800a0c6:	f241 122b 	movw	r2, #4395	@ 0x112b
 800a0ca:	4908      	ldr	r1, [pc, #32]	@ (800a0ec <tx_dhcp_request_re+0x5c>)
 800a0cc:	2003      	movs	r0, #3
 800a0ce:	f7ff f86d 	bl	80091ac <mg_log_prefix>
 800a0d2:	4807      	ldr	r0, [pc, #28]	@ (800a0f0 <tx_dhcp_request_re+0x60>)
 800a0d4:	f7ff f8ba 	bl	800924c <mg_log>
}
 800a0d8:	bf00      	nop
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	ff030135 	.word	0xff030135
 800a0e4:	20000254 	.word	0x20000254
 800a0e8:	080228ac 	.word	0x080228ac
 800a0ec:	0801f338 	.word	0x0801f338
 800a0f0:	080204a8 	.word	0x080204a8

0800a0f4 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af04      	add	r7, sp, #16
 800a0fa:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800a0fc:	4a14      	ldr	r2, [pc, #80]	@ (800a150 <tx_dhcp_discover+0x5c>)
 800a0fe:	f107 0308 	add.w	r3, r7, #8
 800a102:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a106:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800a10a:	2300      	movs	r3, #0
 800a10c:	9302      	str	r3, [sp, #8]
 800a10e:	2308      	movs	r3, #8
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a11c:	2200      	movs	r2, #0
 800a11e:	490d      	ldr	r1, [pc, #52]	@ (800a154 <tx_dhcp_discover+0x60>)
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fe4d 	bl	8009dc0 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800a126:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <tx_dhcp_discover+0x64>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	dd0c      	ble.n	800a148 <tx_dhcp_discover+0x54>
 800a12e:	4b0b      	ldr	r3, [pc, #44]	@ (800a15c <tx_dhcp_discover+0x68>)
 800a130:	f241 1235 	movw	r2, #4405	@ 0x1135
 800a134:	490a      	ldr	r1, [pc, #40]	@ (800a160 <tx_dhcp_discover+0x6c>)
 800a136:	2003      	movs	r0, #3
 800a138:	f7ff f838 	bl	80091ac <mg_log_prefix>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	461a      	mov	r2, r3
 800a140:	4908      	ldr	r1, [pc, #32]	@ (800a164 <tx_dhcp_discover+0x70>)
 800a142:	4809      	ldr	r0, [pc, #36]	@ (800a168 <tx_dhcp_discover+0x74>)
 800a144:	f7ff f882 	bl	800924c <mg_log>
}
 800a148:	bf00      	nop
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	080204d8 	.word	0x080204d8
 800a154:	080223bc 	.word	0x080223bc
 800a158:	20000254 	.word	0x20000254
 800a15c:	080228c0 	.word	0x080228c0
 800a160:	0801f338 	.word	0x0801f338
 800a164:	0800d05d 	.word	0x0800d05d
 800a168:	080204b8 	.word	0x080204b8

0800a16c <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e057      	b.n	800a236 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a18c:	f003 0310 	and.w	r3, r3, #16
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d010      	beq.n	800a1b8 <getpeer+0x4c>
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00c      	beq.n	800a1b8 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f103 000e 	add.w	r0, r3, #14
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	331c      	adds	r3, #28
 800a1aa:	2204      	movs	r2, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f014 fa36 	bl	801e61e <memcmp>
 800a1b2:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d042      	beq.n	800a23e <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <getpeer+0x74>
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d007      	beq.n	800a1e0 <getpeer+0x74>
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	8b1a      	ldrh	r2, [r3, #24]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d030      	beq.n	800a242 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a1e6:	f003 0301 	and.w	r3, r3, #1
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11f      	bne.n	800a230 <getpeer+0xc4>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01b      	beq.n	800a230 <getpeer+0xc4>
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	8b1a      	ldrh	r2, [r3, #24]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	b29b      	uxth	r3, r3
 800a204:	429a      	cmp	r2, r3
 800a206:	d113      	bne.n	800a230 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a20e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a212:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800a214:	79fa      	ldrb	r2, [r7, #7]
 800a216:	429a      	cmp	r2, r3
 800a218:	d10a      	bne.n	800a230 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800a21a:	79fb      	ldrb	r3, [r7, #7]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d111      	bne.n	800a244 <getpeer+0xd8>
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d009      	beq.n	800a244 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1a4      	bne.n	800a186 <getpeer+0x1a>
 800a23c:	e002      	b.n	800a244 <getpeer+0xd8>
      break;
 800a23e:	bf00      	nop
 800a240:	e000      	b.n	800a244 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800a242:	bf00      	nop
      break;
  }
  return c;
 800a244:	697b      	ldr	r3, [r7, #20]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af02      	add	r7, sp, #8
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	88db      	ldrh	r3, [r3, #6]
 800a260:	b29c      	uxth	r4, r3
 800a262:	2001      	movs	r0, #1
 800a264:	f011 fb4c 	bl	801b900 <mg_ntohs>
 800a268:	4603      	mov	r3, r0
 800a26a:	429c      	cmp	r4, r3
 800a26c:	d176      	bne.n	800a35c <rx_arp+0x10c>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d16f      	bne.n	800a35c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	330e      	adds	r3, #14
 800a286:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800a288:	6978      	ldr	r0, [r7, #20]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	3306      	adds	r3, #6
 800a290:	2206      	movs	r2, #6
 800a292:	4619      	mov	r1, r3
 800a294:	f014 fb23 	bl	801e8de <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	3306      	adds	r3, #6
 800a29c:	6879      	ldr	r1, [r7, #4]
 800a29e:	2206      	movs	r2, #6
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f014 fb1c 	bl	801e8de <memcpy>
    eth->type = mg_htons(0x806);
 800a2a6:	f640 0006 	movw	r0, #2054	@ 0x806
 800a2aa:	f011 fb29 	bl	801b900 <mg_ntohs>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6814      	ldr	r4, [r2, #0]
 800a2be:	6850      	ldr	r0, [r2, #4]
 800a2c0:	6891      	ldr	r1, [r2, #8]
 800a2c2:	68d5      	ldr	r5, [r2, #12]
 800a2c4:	601c      	str	r4, [r3, #0]
 800a2c6:	6058      	str	r0, [r3, #4]
 800a2c8:	6099      	str	r1, [r3, #8]
 800a2ca:	60dd      	str	r5, [r3, #12]
 800a2cc:	6914      	ldr	r4, [r2, #16]
 800a2ce:	6950      	ldr	r0, [r2, #20]
 800a2d0:	6991      	ldr	r1, [r2, #24]
 800a2d2:	611c      	str	r4, [r3, #16]
 800a2d4:	6158      	str	r0, [r3, #20]
 800a2d6:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800a2d8:	2002      	movs	r0, #2
 800a2da:	f011 fb11 	bl	801b900 <mg_ntohs>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f103 0012 	add.w	r0, r3, #18
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	2206      	movs	r2, #6
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	f014 faf2 	bl	801e8de <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	2206      	movs	r2, #6
 800a302:	4618      	mov	r0, r3
 800a304:	f014 faeb 	bl	801e8de <memcpy>
    arp->tpa = pkt->arp->spa;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800a31e:	4b4e      	ldr	r3, [pc, #312]	@ (800a458 <rx_arp+0x208>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b02      	cmp	r3, #2
 800a324:	dd10      	ble.n	800a348 <rx_arp+0xf8>
 800a326:	4b4d      	ldr	r3, [pc, #308]	@ (800a45c <rx_arp+0x20c>)
 800a328:	f241 1259 	movw	r2, #4441	@ 0x1159
 800a32c:	494c      	ldr	r1, [pc, #304]	@ (800a460 <rx_arp+0x210>)
 800a32e:	2003      	movs	r0, #3
 800a330:	f7fe ff3c 	bl	80091ac <mg_log_prefix>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	f103 0218 	add.w	r2, r3, #24
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	4b49      	ldr	r3, [pc, #292]	@ (800a464 <rx_arp+0x214>)
 800a340:	4949      	ldr	r1, [pc, #292]	@ (800a468 <rx_arp+0x218>)
 800a342:	484a      	ldr	r0, [pc, #296]	@ (800a46c <rx_arp+0x21c>)
 800a344:	f7fe ff82 	bl	800924c <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f103 021c 	add.w	r2, r3, #28
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fb45 	bl	80099e4 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800a35a:	e079      	b.n	800a450 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	b29c      	uxth	r4, r3
 800a364:	2002      	movs	r0, #2
 800a366:	f011 facb 	bl	801b900 <mg_ntohs>
 800a36a:	4603      	mov	r3, r0
 800a36c:	429c      	cmp	r4, r3
 800a36e:	d16f      	bne.n	800a450 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	3312      	adds	r3, #18
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	2206      	movs	r2, #6
 800a37a:	4618      	mov	r0, r3
 800a37c:	f014 f94f 	bl	801e61e <memcmp>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d163      	bne.n	800a44e <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	429a      	cmp	r2, r3
 800a394:	d116      	bne.n	800a3c4 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	2206      	movs	r2, #6
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	f014 fa9a 	bl	801e8de <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d14d      	bne.n	800a450 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2204      	movs	r2, #4
 800a3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fb95 	bl	8009aec <onstatechange>
 800a3c2:	e045      	b.n	800a450 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fecd 	bl	800a16c <getpeer>
 800a3d2:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d03a      	beq.n	800a450 <rx_arp+0x200>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800a3e0:	f003 0310 	and.w	r3, r3, #16
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d032      	beq.n	800a450 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	33b0      	adds	r3, #176	@ 0xb0
 800a3ee:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f103 0018 	add.w	r0, r3, #24
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	2206      	movs	r2, #6
 800a3fe:	4619      	mov	r1, r3
 800a400:	f014 fa6d 	bl	801e8de <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800a404:	4b14      	ldr	r3, [pc, #80]	@ (800a458 <rx_arp+0x208>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	dd15      	ble.n	800a438 <rx_arp+0x1e8>
 800a40c:	4b13      	ldr	r3, [pc, #76]	@ (800a45c <rx_arp+0x20c>)
 800a40e:	f241 126a 	movw	r2, #4458	@ 0x116a
 800a412:	4913      	ldr	r1, [pc, #76]	@ (800a460 <rx_arp+0x210>)
 800a414:	2003      	movs	r0, #3
 800a416:	f7fe fec9 	bl	80091ac <mg_log_prefix>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f103 021c 	add.w	r2, r3, #28
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3318      	adds	r3, #24
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	4b0e      	ldr	r3, [pc, #56]	@ (800a464 <rx_arp+0x214>)
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	4613      	mov	r3, r2
 800a430:	4a0d      	ldr	r2, [pc, #52]	@ (800a468 <rx_arp+0x218>)
 800a432:	480f      	ldr	r0, [pc, #60]	@ (800a470 <rx_arp+0x220>)
 800a434:	f7fe ff0a 	bl	800924c <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800a43e:	f023 0310 	bic.w	r3, r3, #16
 800a442:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f002 f999 	bl	800c77e <mac_resolved>
 800a44c:	e000      	b.n	800a450 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800a44e:	bf00      	nop
      }
    }
  }
}
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bdb0      	pop	{r4, r5, r7, pc}
 800a456:	bf00      	nop
 800a458:	20000254 	.word	0x20000254
 800a45c:	080228d4 	.word	0x080228d4
 800a460:	0801f338 	.word	0x0801f338
 800a464:	0800d05d 	.word	0x0800d05d
 800a468:	0800cf99 	.word	0x0800cf99
 800a46c:	080204e0 	.word	0x080204e0
 800a470:	080204f8 	.word	0x080204f8

0800a474 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	@ 0x28
 800a478:	af02      	add	r7, sp, #8
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b08      	cmp	r3, #8
 800a486:	d14d      	bne.n	800a524 <rx_icmp+0xb0>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d049      	beq.n	800a524 <rx_icmp+0xb0>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	69db      	ldr	r3, [r3, #28]
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d142      	bne.n	800a524 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800a49e:	2326      	movs	r3, #38	@ 0x26
 800a4a0:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	617b      	str	r3, [r7, #20]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800a4b2:	69fa      	ldr	r2, [r7, #28]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d901      	bls.n	800a4be <rx_icmp+0x4a>
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	1d99      	adds	r1, r3, #6
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6898      	ldr	r0, [r3, #8]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	3204      	adds	r2, #4
 800a4d2:	9201      	str	r2, [sp, #4]
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2201      	movs	r2, #1
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fbb0 	bl	8009c40 <tx_ip>
 800a4e0:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f014 f8c0 	bl	801e672 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	1d18      	adds	r0, r3, #4
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	f014 f9ee 	bl	801e8de <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff f9fb 	bl	8009904 <ipcsum>
 800a50e:	4603      	mov	r3, r0
 800a510:	461a      	mov	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff fa60 	bl	80099e4 <ether_output>
  }
}
 800a524:	bf00      	nop
 800a526:	3720      	adds	r7, #32
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a52c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a530:	b090      	sub	sp, #64	@ 0x40
 800a532:	af00      	add	r7, sp, #0
 800a534:	60f8      	str	r0, [r7, #12]
 800a536:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53c:	2300      	movs	r3, #0
 800a53e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a540:	2300      	movs	r3, #0
 800a542:	627b      	str	r3, [r7, #36]	@ 0x24
 800a544:	2300      	movs	r3, #0
 800a546:	623b      	str	r3, [r7, #32]
 800a548:	2300      	movs	r3, #0
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a55c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a564:	33f0      	adds	r3, #240	@ 0xf0
 800a566:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	4413      	add	r3, r2
 800a572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a578:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800a57c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a57e:	429a      	cmp	r2, r3
 800a580:	f0c0 81ac 	bcc.w	800a8dc <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a588:	1d18      	adds	r0, r3, #4
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3302      	adds	r3, #2
 800a58e:	2204      	movs	r2, #4
 800a590:	4619      	mov	r1, r3
 800a592:	f014 f844 	bl	801e61e <memcmp>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f040 81a1 	bne.w	800a8e0 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a59e:	e08a      	b.n	800a6b6 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d10e      	bne.n	800a5c6 <rx_dhcp_client+0x9a>
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d109      	bne.n	800a5c6 <rx_dhcp_client+0x9a>
 800a5b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b4:	3306      	adds	r3, #6
 800a5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d904      	bls.n	800a5c6 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5be:	3302      	adds	r3, #2
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c4:	e070      	b.n	800a6a8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d112      	bne.n	800a5f4 <rx_dhcp_client+0xc8>
 800a5ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d10d      	bne.n	800a5f4 <rx_dhcp_client+0xc8>
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5da:	3306      	adds	r3, #6
 800a5dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d908      	bls.n	800a5f4 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f2:	e059      	b.n	800a6a8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	7fdb      	ldrb	r3, [r3, #31]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d012      	beq.n	800a622 <rx_dhcp_client+0xf6>
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b06      	cmp	r3, #6
 800a602:	d10e      	bne.n	800a622 <rx_dhcp_client+0xf6>
 800a604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a606:	3301      	adds	r3, #1
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d109      	bne.n	800a622 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800a60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a610:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800a612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a614:	429a      	cmp	r2, r3
 800a616:	d904      	bls.n	800a622 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800a618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61a:	3302      	adds	r3, #2
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	e042      	b.n	800a6a8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d012      	beq.n	800a652 <rx_dhcp_client+0x126>
 800a62c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b2a      	cmp	r3, #42	@ 0x2a
 800a632:	d10e      	bne.n	800a652 <rx_dhcp_client+0x126>
 800a634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a636:	3301      	adds	r3, #1
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b04      	cmp	r3, #4
 800a63c:	d109      	bne.n	800a652 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800a63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a640:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800a642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a644:	429a      	cmp	r2, r3
 800a646:	d904      	bls.n	800a652 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800a648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64a:	3302      	adds	r3, #2
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	61bb      	str	r3, [r7, #24]
 800a650:	e02a      	b.n	800a6a8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800a652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b33      	cmp	r3, #51	@ 0x33
 800a658:	d114      	bne.n	800a684 <rx_dhcp_client+0x158>
 800a65a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65c:	3301      	adds	r3, #1
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b04      	cmp	r3, #4
 800a662:	d10f      	bne.n	800a684 <rx_dhcp_client+0x158>
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	3306      	adds	r3, #6
 800a668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d90a      	bls.n	800a684 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a670:	3302      	adds	r3, #2
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	4618      	mov	r0, r3
 800a67a:	f011 f958 	bl	801b92e <mg_ntohl>
 800a67e:	4603      	mov	r3, r0
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	e011      	b.n	800a6a8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b35      	cmp	r3, #53	@ 0x35
 800a68a:	d10d      	bne.n	800a6a8 <rx_dhcp_client+0x17c>
 800a68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68e:	3301      	adds	r3, #1
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d108      	bne.n	800a6a8 <rx_dhcp_client+0x17c>
 800a696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a698:	3306      	adds	r3, #6
 800a69a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d903      	bls.n	800a6a8 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a2:	789b      	ldrb	r3, [r3, #2]
 800a6a4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	3302      	adds	r3, #2
 800a6b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6b2:	4413      	add	r3, r2
 800a6b4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d904      	bls.n	800a6ca <rx_dhcp_client+0x19e>
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2bff      	cmp	r3, #255	@ 0xff
 800a6c6:	f47f af6b 	bne.w	800a5a0 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800a6ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a6ce:	2b06      	cmp	r3, #6
 800a6d0:	d10c      	bne.n	800a6ec <rx_dhcp_client+0x1c0>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d107      	bne.n	800a6ec <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	609a      	str	r2, [r3, #8]
 800a6ea:	e0ec      	b.n	800a8c6 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800a6ec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d123      	bne.n	800a73c <rx_dhcp_client+0x210>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d11e      	bne.n	800a73c <rx_dhcp_client+0x210>
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01b      	beq.n	800a73c <rx_dhcp_client+0x210>
 800a704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d018      	beq.n	800a73c <rx_dhcp_client+0x210>
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d015      	beq.n	800a73c <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a714:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800a71e:	695b      	ldr	r3, [r3, #20]
 800a720:	e002      	b.n	800a728 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	461a      	mov	r2, r3
 800a72a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fbd7 	bl	8009ee0 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2202      	movs	r2, #2
 800a736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800a73a:	e0c4      	b.n	800a8c6 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800a73c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a740:	2b05      	cmp	r3, #5
 800a742:	f040 80c0 	bne.w	800a8c6 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	f040 8081 	bne.w	800a854 <rx_dhcp_client+0x328>
 800a752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d07d      	beq.n	800a854 <rx_dhcp_client+0x328>
 800a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d07a      	beq.n	800a854 <rx_dhcp_client+0x328>
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d077      	beq.n	800a854 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800a76a:	6a39      	ldr	r1, [r7, #32]
 800a76c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a770:	fb00 f101 	mul.w	r1, r0, r1
 800a774:	2000      	movs	r0, #0
 800a776:	4688      	mov	r8, r1
 800a778:	4681      	mov	r9, r0
 800a77a:	eb12 0108 	adds.w	r1, r2, r8
 800a77e:	6039      	str	r1, [r7, #0]
 800a780:	eb43 0309 	adc.w	r3, r3, r9
 800a784:	607b      	str	r3, [r7, #4]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a78c:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800a790:	4b56      	ldr	r3, [pc, #344]	@ (800a8ec <rx_dhcp_client+0x3c0>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b01      	cmp	r3, #1
 800a796:	dd16      	ble.n	800a7c6 <rx_dhcp_client+0x29a>
 800a798:	4b55      	ldr	r3, [pc, #340]	@ (800a8f0 <rx_dhcp_client+0x3c4>)
 800a79a:	f241 12ab 	movw	r2, #4523	@ 0x11ab
 800a79e:	4955      	ldr	r1, [pc, #340]	@ (800a8f4 <rx_dhcp_client+0x3c8>)
 800a7a0:	2002      	movs	r0, #2
 800a7a2:	f7fe fd03 	bl	80091ac <mg_log_prefix>
 800a7a6:	6a3c      	ldr	r4, [r7, #32]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800a7ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a7b2:	f04f 0300 	mov.w	r3, #0
 800a7b6:	f7f5 fdab 	bl	8000310 <__aeabi_uldivmod>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4621      	mov	r1, r4
 800a7c0:	484d      	ldr	r0, [pc, #308]	@ (800a8f8 <rx_dhcp_client+0x3cc>)
 800a7c2:	f7fe fd43 	bl	800924c <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	3306      	adds	r3, #6
 800a7d2:	2206      	movs	r2, #6
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	f014 f882 	bl	801e8de <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a7de:	609a      	str	r2, [r3, #8]
 800a7e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	611a      	str	r2, [r3, #16]
 800a7e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800a7f4:	f107 0310 	add.w	r3, r7, #16
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7f5 ff1e 	bl	800063c <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800a800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a804:	4614      	mov	r4, r2
 800a806:	f7f5 ff63 	bl	80006d0 <mg_millis>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4613      	mov	r3, r2
 800a810:	4423      	add	r3, r4
 800a812:	4618      	mov	r0, r3
 800a814:	f013 fd32 	bl	801e27c <srand>
      if (ifp->enable_req_dns && dns != 0)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	7fdb      	ldrb	r3, [r3, #31]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <rx_dhcp_client+0x308>
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d006      	beq.n	800a834 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800a826:	f107 031c 	add.w	r3, r7, #28
 800a82a:	461a      	mov	r2, r3
 800a82c:	2101      	movs	r1, #1
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f7fe fff0 	bl	8009814 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d042      	beq.n	800a8c4 <rx_dhcp_client+0x398>
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d03f      	beq.n	800a8c4 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800a844:	f107 0318 	add.w	r3, r7, #24
 800a848:	461a      	mov	r2, r3
 800a84a:	2102      	movs	r1, #2
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7fe ffe1 	bl	8009814 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a852:	e037      	b.n	800a8c4 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a85a:	2b04      	cmp	r3, #4
 800a85c:	d133      	bne.n	800a8c6 <rx_dhcp_client+0x39a>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a864:	429a      	cmp	r2, r3
 800a866:	d12e      	bne.n	800a8c6 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800a86e:	6a39      	ldr	r1, [r7, #32]
 800a870:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a874:	fb00 f101 	mul.w	r1, r0, r1
 800a878:	2000      	movs	r0, #0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4605      	mov	r5, r0
 800a87e:	eb12 0a04 	adds.w	sl, r2, r4
 800a882:	eb43 0b05 	adc.w	fp, r3, r5
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800a88c:	4b17      	ldr	r3, [pc, #92]	@ (800a8ec <rx_dhcp_client+0x3c0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b01      	cmp	r3, #1
 800a892:	dd18      	ble.n	800a8c6 <rx_dhcp_client+0x39a>
 800a894:	4b16      	ldr	r3, [pc, #88]	@ (800a8f0 <rx_dhcp_client+0x3c4>)
 800a896:	f241 12b9 	movw	r2, #4537	@ 0x11b9
 800a89a:	4916      	ldr	r1, [pc, #88]	@ (800a8f4 <rx_dhcp_client+0x3c8>)
 800a89c:	2002      	movs	r0, #2
 800a89e:	f7fe fc85 	bl	80091ac <mg_log_prefix>
 800a8a2:	6a3c      	ldr	r4, [r7, #32]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800a8aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	f7f5 fd2d 	bl	8000310 <__aeabi_uldivmod>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	480e      	ldr	r0, [pc, #56]	@ (800a8f8 <rx_dhcp_client+0x3cc>)
 800a8be:	f7fe fcc5 	bl	800924c <mg_log>
 800a8c2:	e000      	b.n	800a8c6 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800a8c4:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8cc:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d006      	beq.n	800a8e2 <rx_dhcp_client+0x3b6>
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7ff f909 	bl	8009aec <onstatechange>
 800a8da:	e002      	b.n	800a8e2 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a8dc:	bf00      	nop
 800a8de:	e000      	b.n	800a8e2 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800a8e0:	bf00      	nop
}
 800a8e2:	3740      	adds	r7, #64	@ 0x40
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000254 	.word	0x20000254
 800a8f0:	080228dc 	.word	0x080228dc
 800a8f4:	0801f338 	.word	0x0801f338
 800a8f8:	08020514 	.word	0x08020514

0800a8fc <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800a8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a900:	b0d8      	sub	sp, #352	@ 0x160
 800a902:	af04      	add	r7, sp, #16
 800a904:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a908:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800a90c:	6018      	str	r0, [r3, #0]
 800a90e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a912:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800a916:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 800a91e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a922:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92a:	33f0      	adds	r3, #240	@ 0xf0
 800a92c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800a930:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a934:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a940:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4413      	add	r3, r2
 800a94a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800a94e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a952:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95a:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800a95e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800a962:	429a      	cmp	r2, r3
 800a964:	f0c0 81b0 	bcc.w	800acc8 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800a968:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a96c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a970:	4ad8      	ldr	r2, [pc, #864]	@ (800acd4 <rx_dhcp_server+0x3d8>)
 800a972:	4618      	mov	r0, r3
 800a974:	4611      	mov	r1, r2
 800a976:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800a97a:	461a      	mov	r2, r3
 800a97c:	f013 ffaf 	bl	801e8de <memcpy>
  res.yiaddr = ifp->ip;
 800a980:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a984:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689a      	ldr	r2, [r3, #8]
 800a98c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800a990:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a994:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800a996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a99a:	3310      	adds	r3, #16
 800a99c:	3303      	adds	r3, #3
 800a99e:	781a      	ldrb	r2, [r3, #0]
 800a9a0:	3201      	adds	r2, #1
 800a9a2:	b2d2      	uxtb	r2, r2
 800a9a4:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800a9a6:	e020      	b.n	800a9ea <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800a9a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b35      	cmp	r3, #53	@ 0x35
 800a9b0:	d111      	bne.n	800a9d6 <rx_dhcp_server+0xda>
 800a9b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d10b      	bne.n	800a9d6 <rx_dhcp_server+0xda>
 800a9be:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d904      	bls.n	800a9d6 <rx_dhcp_server+0xda>
      op = p[2];
 800a9cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9d0:	789b      	ldrb	r3, [r3, #2]
 800a9d2:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 800a9d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9da:	3301      	adds	r3, #1
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	3302      	adds	r3, #2
 800a9e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800a9ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d904      	bls.n	800aa02 <rx_dhcp_server+0x106>
 800a9f8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2bff      	cmp	r3, #255	@ 0xff
 800aa00:	d1d2      	bne.n	800a9a8 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800aa02:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d004      	beq.n	800aa14 <rx_dhcp_server+0x118>
 800aa0a:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	f040 815b 	bne.w	800acca <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800aa14:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d101      	bne.n	800aa20 <rx_dhcp_server+0x124>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e000      	b.n	800aa22 <rx_dhcp_server+0x126>
 800aa20:	2305      	movs	r3, #5
 800aa22:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 800aa26:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa2e:	2235      	movs	r2, #53	@ 0x35
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	705a      	strb	r2, [r3, #1]
 800aa3e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa46:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 800aa4a:	709a      	strb	r2, [r3, #2]
 800aa4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa54:	2201      	movs	r2, #1
 800aa56:	70da      	strb	r2, [r3, #3]
 800aa58:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa60:	2204      	movs	r2, #4
 800aa62:	711a      	strb	r2, [r3, #4]
 800aa64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	715a      	strb	r2, [r3, #5]
 800aa70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa78:	2200      	movs	r2, #0
 800aa7a:	719a      	strb	r2, [r3, #6]
 800aa7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa80:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa84:	2200      	movs	r2, #0
 800aa86:	71da      	strb	r2, [r3, #7]
 800aa88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa90:	2200      	movs	r2, #0
 800aa92:	721a      	strb	r2, [r3, #8]
 800aa94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aa98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aa9c:	2236      	movs	r2, #54	@ 0x36
 800aa9e:	725a      	strb	r2, [r3, #9]
 800aaa0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aaa4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aaa8:	2204      	movs	r2, #4
 800aaaa:	729a      	strb	r2, [r3, #10]
 800aaac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aab0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aab4:	2200      	movs	r2, #0
 800aab6:	72da      	strb	r2, [r3, #11]
 800aab8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aabc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aac0:	2200      	movs	r2, #0
 800aac2:	731a      	strb	r2, [r3, #12]
 800aac4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aac8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aacc:	2200      	movs	r2, #0
 800aace:	735a      	strb	r2, [r3, #13]
 800aad0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aad4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aad8:	2200      	movs	r2, #0
 800aada:	739a      	strb	r2, [r3, #14]
 800aadc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aae0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aae4:	220c      	movs	r2, #12
 800aae6:	73da      	strb	r2, [r3, #15]
 800aae8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aaec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aaf0:	2203      	movs	r2, #3
 800aaf2:	741a      	strb	r2, [r3, #16]
 800aaf4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aaf8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800aafc:	226d      	movs	r2, #109	@ 0x6d
 800aafe:	745a      	strb	r2, [r3, #17]
 800ab00:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab08:	2269      	movs	r2, #105	@ 0x69
 800ab0a:	749a      	strb	r2, [r3, #18]
 800ab0c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab10:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab14:	2270      	movs	r2, #112	@ 0x70
 800ab16:	74da      	strb	r2, [r3, #19]
 800ab18:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab1c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab20:	2233      	movs	r2, #51	@ 0x33
 800ab22:	751a      	strb	r2, [r3, #20]
 800ab24:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab28:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab2c:	2204      	movs	r2, #4
 800ab2e:	755a      	strb	r2, [r3, #21]
 800ab30:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab34:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab38:	22ff      	movs	r2, #255	@ 0xff
 800ab3a:	759a      	strb	r2, [r3, #22]
 800ab3c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab40:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab44:	22ff      	movs	r2, #255	@ 0xff
 800ab46:	75da      	strb	r2, [r3, #23]
 800ab48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab4c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab50:	22ff      	movs	r2, #255	@ 0xff
 800ab52:	761a      	strb	r2, [r3, #24]
 800ab54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab5c:	22ff      	movs	r2, #255	@ 0xff
 800ab5e:	765a      	strb	r2, [r3, #25]
 800ab60:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800ab68:	22ff      	movs	r2, #255	@ 0xff
 800ab6a:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800ab6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ab70:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab78:	f103 011c 	add.w	r1, r3, #28
 800ab7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ab80:	331c      	adds	r3, #28
 800ab82:	2206      	movs	r2, #6
 800ab84:	4618      	mov	r0, r3
 800ab86:	f013 feaa 	bl	801e8de <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	3305      	adds	r3, #5
 800ab90:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800ab94:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800ab98:	6812      	ldr	r2, [r2, #0]
 800ab9a:	320c      	adds	r2, #12
 800ab9c:	6812      	ldr	r2, [r2, #0]
 800ab9e:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800aba0:	f107 030c 	add.w	r3, r7, #12
 800aba4:	330b      	adds	r3, #11
 800aba6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800abaa:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	3208      	adds	r2, #8
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800abb6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800abba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800abbe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800abc2:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800abc6:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800abca:	4615      	mov	r5, r2
 800abcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800abd4:	c403      	stmia	r4!, {r0, r1}
 800abd6:	8022      	strh	r2, [r4, #0]
 800abd8:	3402      	adds	r4, #2
 800abda:	0c13      	lsrs	r3, r2, #16
 800abdc:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800abde:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800abe2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abea:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800abee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800abf2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800abf6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800abfa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800abfe:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ac10:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800ac12:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	7f9b      	ldrb	r3, [r3, #30]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01c      	beq.n	800ac5c <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800ac22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ac2a:	691a      	ldr	r2, [r3, #16]
 800ac2c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac30:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800ac38:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800ac46:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac4a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	3306      	adds	r3, #6
 800ac54:	2206      	movs	r2, #6
 800ac56:	4619      	mov	r1, r3
 800ac58:	f013 fe41 	bl	801e8de <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800ac5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac60:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	1d9d      	adds	r5, r3, #6
 800ac6a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac6e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	689e      	ldr	r6, [r3, #8]
 800ac76:	2043      	movs	r0, #67	@ 0x43
 800ac78:	f010 fe42 	bl	801b900 <mg_ntohs>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	4698      	mov	r8, r3
 800ac80:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d005      	beq.n	800ac94 <rx_dhcp_server+0x398>
 800ac88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800ac8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ac90:	691c      	ldr	r4, [r3, #16]
 800ac92:	e001      	b.n	800ac98 <rx_dhcp_server+0x39c>
 800ac94:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac98:	2044      	movs	r0, #68	@ 0x44
 800ac9a:	f010 fe31 	bl	801b900 <mg_ntohs>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	461a      	mov	r2, r3
 800aca2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800aca6:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 800acaa:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800acb4:	9302      	str	r3, [sp, #8]
 800acb6:	9201      	str	r2, [sp, #4]
 800acb8:	9400      	str	r4, [sp, #0]
 800acba:	4643      	mov	r3, r8
 800acbc:	4632      	mov	r2, r6
 800acbe:	4629      	mov	r1, r5
 800acc0:	6800      	ldr	r0, [r0, #0]
 800acc2:	f7ff f814 	bl	8009cee <tx_udp>
 800acc6:	e000      	b.n	800acca <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800acc8:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800acca:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800acce:	46bd      	mov	sp, r7
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	0802052c 	.word	0x0802052c

0800acd8 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace6:	2201      	movs	r2, #1
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff fa3e 	bl	800a16c <getpeer>
 800acf0:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d059      	beq.n	800adac <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	331c      	adds	r3, #28
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	69d2      	ldr	r2, [r2, #28]
 800ad0c:	320c      	adds	r2, #12
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	33b0      	adds	r3, #176	@ 0xb0
 800ad16:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	f103 0018 	add.w	r0, r3, #24
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	3306      	adds	r3, #6
 800ad24:	2206      	movs	r2, #6
 800ad26:	4619      	mov	r1, r3
 800ad28:	f013 fdd9 	bl	801e8de <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad34:	d304      	bcc.n	800ad40 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800ad36:	491f      	ldr	r1, [pc, #124]	@ (800adb4 <rx_udp+0xdc>)
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7f9 f8bd 	bl	8003eb8 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800ad3e:	e035      	b.n	800adac <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad48:	1ad2      	subs	r2, r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d212      	bcs.n	800ad78 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	4413      	add	r3, r2
 800ad62:	4619      	mov	r1, r3
 800ad64:	f7fd fa76 	bl	8008254 <mg_iobuf_resize>
 800ad68:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d104      	bne.n	800ad78 <rx_udp+0xa0>
      mg_error(c, "oom");
 800ad6e:	4912      	ldr	r1, [pc, #72]	@ (800adb8 <rx_udp+0xe0>)
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7f9 f8a1 	bl	8003eb8 <mg_error>
}
 800ad76:	e019      	b.n	800adac <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad80:	18d0      	adds	r0, r2, r3
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6899      	ldr	r1, [r3, #8]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f013 fda7 	bl	801e8de <memcpy>
      c->recv.len += pkt->pay.len;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	441a      	add	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	461a      	mov	r2, r3
 800ada4:	2107      	movs	r1, #7
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7f9 f865 	bl	8003e76 <mg_call>
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	08020648 	.word	0x08020648
 800adb8:	08020664 	.word	0x08020664

0800adbc <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adbe:	b091      	sub	sp, #68	@ 0x44
 800adc0:	af06      	add	r7, sp, #24
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	689a      	ldr	r2, [r3, #8]
 800adce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800add0:	3314      	adds	r3, #20
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	4613      	mov	r3, r2
 800adda:	2206      	movs	r2, #6
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7fe ff2e 	bl	8009c40 <tx_ip>
 800ade4:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	3314      	adds	r3, #20
 800adea:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800adec:	2214      	movs	r2, #20
 800adee:	2100      	movs	r1, #0
 800adf0:	6a38      	ldr	r0, [r7, #32]
 800adf2:	f013 fc3e 	bl	801e672 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800adf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <tx_tcp+0x54>
 800adfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d006      	beq.n	800ae10 <tx_tcp+0x54>
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	3314      	adds	r3, #20
 800ae06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f013 fc17 	bl	801e63e <memmove>
  tcp->sport = sport;
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ae16:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ae1e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae24:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae2a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800ae32:	f241 7070 	movw	r0, #6000	@ 0x1770
 800ae36:	f010 fd63 	bl	801b900 <mg_ntohs>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	2250      	movs	r2, #80	@ 0x50
 800ae46:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800ae4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3314      	adds	r3, #20
 800ae52:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800ae54:	2300      	movs	r3, #0
 800ae56:	753b      	strb	r3, [r7, #20]
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	7a5b      	ldrb	r3, [r3, #9]
 800ae5c:	757b      	strb	r3, [r7, #21]
 800ae5e:	8b7b      	ldrh	r3, [r7, #26]
 800ae60:	0a1b      	lsrs	r3, r3, #8
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	75bb      	strb	r3, [r7, #22]
 800ae68:	8b7b      	ldrh	r3, [r7, #26]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800ae6e:	8b7b      	ldrh	r3, [r7, #26]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6a39      	ldr	r1, [r7, #32]
 800ae74:	69f8      	ldr	r0, [r7, #28]
 800ae76:	f7fe fcff 	bl	8009878 <csumup>
 800ae7a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	330c      	adds	r3, #12
 800ae80:	2204      	movs	r2, #4
 800ae82:	4619      	mov	r1, r3
 800ae84:	69f8      	ldr	r0, [r7, #28]
 800ae86:	f7fe fcf7 	bl	8009878 <csumup>
 800ae8a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	3310      	adds	r3, #16
 800ae90:	2204      	movs	r2, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f7fe fcef 	bl	8009878 <csumup>
 800ae9a:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800ae9c:	f107 0314 	add.w	r3, r7, #20
 800aea0:	2204      	movs	r2, #4
 800aea2:	4619      	mov	r1, r3
 800aea4:	69f8      	ldr	r0, [r7, #28]
 800aea6:	f7fe fce7 	bl	8009878 <csumup>
 800aeaa:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800aeac:	69f8      	ldr	r0, [r7, #28]
 800aeae:	f7fe fd0e 	bl	80098ce <csumfin>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800aeba:	4b21      	ldr	r3, [pc, #132]	@ (800af40 <tx_tcp+0x184>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	dd2c      	ble.n	800af1c <tx_tcp+0x160>
 800aec2:	4b20      	ldr	r3, [pc, #128]	@ (800af44 <tx_tcp+0x188>)
 800aec4:	f241 221e 	movw	r2, #4638	@ 0x121e
 800aec8:	491f      	ldr	r1, [pc, #124]	@ (800af48 <tx_tcp+0x18c>)
 800aeca:	2004      	movs	r0, #4
 800aecc:	f7fe f96e 	bl	80091ac <mg_log_prefix>
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	f103 050c 	add.w	r5, r3, #12
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	4618      	mov	r0, r3
 800aede:	f010 fd0f 	bl	801b900 <mg_ntohs>
 800aee2:	4603      	mov	r3, r0
 800aee4:	461e      	mov	r6, r3
 800aee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee8:	f103 0410 	add.w	r4, r3, #16
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	885b      	ldrh	r3, [r3, #2]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	4618      	mov	r0, r3
 800aef4:	f010 fd04 	bl	801b900 <mg_ntohs>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	6a3b      	ldr	r3, [r7, #32]
 800aefe:	7b5b      	ldrb	r3, [r3, #13]
 800af00:	4619      	mov	r1, r3
 800af02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	9103      	str	r1, [sp, #12]
 800af08:	9202      	str	r2, [sp, #8]
 800af0a:	9401      	str	r4, [sp, #4]
 800af0c:	4b0f      	ldr	r3, [pc, #60]	@ (800af4c <tx_tcp+0x190>)
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	4633      	mov	r3, r6
 800af12:	462a      	mov	r2, r5
 800af14:	490d      	ldr	r1, [pc, #52]	@ (800af4c <tx_tcp+0x190>)
 800af16:	480e      	ldr	r0, [pc, #56]	@ (800af50 <tx_tcp+0x194>)
 800af18:	f7fe f998 	bl	800924c <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	f103 0214 	add.w	r2, r3, #20
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af2c:	4413      	add	r3, r2
 800af2e:	4619      	mov	r1, r3
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7fe fd57 	bl	80099e4 <ether_output>
 800af36:	4603      	mov	r3, r0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	372c      	adds	r7, #44	@ 0x2c
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af40:	20000254 	.word	0x20000254
 800af44:	080228ec 	.word	0x080228ec
 800af48:	0801f338 	.word	0x0801f338
 800af4c:	0800cf99 	.word	0x0800cf99
 800af50:	08020668 	.word	0x08020668

0800af54 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af58:	b08c      	sub	sp, #48	@ 0x30
 800af5a:	af06      	add	r7, sp, #24
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	603b      	str	r3, [r7, #0]
 800af62:	4613      	mov	r3, r2
 800af64:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6a:	7b5b      	ldrb	r3, [r3, #13]
 800af6c:	f003 0303 	and.w	r3, r3, #3
 800af70:	2b00      	cmp	r3, #0
 800af72:	bf14      	ite	ne
 800af74:	2301      	movne	r3, #1
 800af76:	2300      	moveq	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	1d9e      	adds	r6, r3, #6
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8e:	885b      	ldrh	r3, [r3, #2]
 800af90:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f010 fcc4 	bl	801b92e <mg_ntohl>
 800afa6:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	4413      	add	r3, r2
 800afac:	4618      	mov	r0, r3
 800afae:	f010 fcbe 	bl	801b92e <mg_ntohl>
 800afb2:	4601      	mov	r1, r0
 800afb4:	79fa      	ldrb	r2, [r7, #7]
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	9103      	str	r1, [sp, #12]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	9302      	str	r3, [sp, #8]
 800afc4:	9501      	str	r5, [sp, #4]
 800afc6:	9400      	str	r4, [sp, #0]
 800afc8:	4613      	mov	r3, r2
 800afca:	4642      	mov	r2, r8
 800afcc:	4631      	mov	r1, r6
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff fef4 	bl	800adbc <tx_tcp>
 800afd4:	4603      	mov	r3, r0
                buf, len);
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afe0 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe fa4c 	bl	800948c <mg_alloc_conn>
 800aff4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10f      	bne.n	800b01c <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800affc:	4b4e      	ldr	r3, [pc, #312]	@ (800b138 <accept_conn+0x158>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	dd09      	ble.n	800b018 <accept_conn+0x38>
 800b004:	4b4d      	ldr	r3, [pc, #308]	@ (800b13c <accept_conn+0x15c>)
 800b006:	f241 2232 	movw	r2, #4658	@ 0x1232
 800b00a:	494d      	ldr	r1, [pc, #308]	@ (800b140 <accept_conn+0x160>)
 800b00c:	2001      	movs	r0, #1
 800b00e:	f7fe f8cd 	bl	80091ac <mg_log_prefix>
 800b012:	484c      	ldr	r0, [pc, #304]	@ (800b144 <accept_conn+0x164>)
 800b014:	f7fe f91a 	bl	800924c <mg_log>
    return NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	e088      	b.n	800b12e <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	33b0      	adds	r3, #176	@ 0xb0
 800b020:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f010 fc80 	bl	801b92e <mg_ntohl>
 800b02e:	4602      	mov	r2, r0
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f010 fc77 	bl	801b92e <mg_ntohl>
 800b040:	4602      	mov	r2, r0
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f103 0018 	add.w	r0, r3, #24
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	3306      	adds	r3, #6
 800b052:	2206      	movs	r2, #6
 800b054:	4619      	mov	r1, r3
 800b056:	f013 fc42 	bl	801e8de <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800b05a:	2100      	movs	r1, #0
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7fe fc65 	bl	800992c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	331c      	adds	r3, #28
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	69d2      	ldr	r2, [r2, #28]
 800b06a:	320c      	adds	r2, #12
 800b06c:	6812      	ldr	r2, [r2, #0]
 800b06e:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	b29a      	uxth	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800b07c:	4b2e      	ldr	r3, [pc, #184]	@ (800b138 <accept_conn+0x158>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b02      	cmp	r3, #2
 800b082:	dd0e      	ble.n	800b0a2 <accept_conn+0xc2>
 800b084:	4b2d      	ldr	r3, [pc, #180]	@ (800b13c <accept_conn+0x15c>)
 800b086:	f241 223b 	movw	r2, #4667	@ 0x123b
 800b08a:	492d      	ldr	r1, [pc, #180]	@ (800b140 <accept_conn+0x160>)
 800b08c:	2003      	movs	r0, #3
 800b08e:	f7fe f88d 	bl	80091ac <mg_log_prefix>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	331c      	adds	r3, #28
 800b09a:	4a2b      	ldr	r2, [pc, #172]	@ (800b148 <accept_conn+0x168>)
 800b09c:	482b      	ldr	r0, [pc, #172]	@ (800b14c <accept_conn+0x16c>)
 800b09e:	f7fe f8d5 	bl	800924c <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b0ba:	f043 0304 	orr.w	r3, r3, #4
 800b0be:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b0c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b0cc:	b2d9      	uxtb	r1, r3
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b0d4:	f361 03c3 	bfi	r3, r1, #3, #1
 800b0d8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f102 0408 	add.w	r4, r2, #8
 800b0f0:	f103 0508 	add.w	r5, r3, #8
 800b0f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 800b118:	2200      	movs	r2, #0
 800b11a:	2101      	movs	r1, #1
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7f8 feaa 	bl	8003e76 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800b122:	2200      	movs	r2, #0
 800b124:	2105      	movs	r1, #5
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f7f8 fea5 	bl	8003e76 <mg_call>
  return c;
 800b12c:	68fb      	ldr	r3, [r7, #12]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bdb0      	pop	{r4, r5, r7, pc}
 800b136:	bf00      	nop
 800b138:	20000254 	.word	0x20000254
 800b13c:	080228f4 	.word	0x080228f4
 800b140:	0801f338 	.word	0x0801f338
 800b144:	08020288 	.word	0x08020288
 800b148:	0800d011 	.word	0x0800d011
 800b14c:	0802068c 	.word	0x0802068c

0800b150 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	@ 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800b162:	230e      	movs	r3, #14
 800b164:	623b      	str	r3, [r7, #32]
 800b166:	2318      	movs	r3, #24
 800b168:	61fb      	str	r3, [r7, #28]
 800b16a:	233c      	movs	r3, #60	@ 0x3c
 800b16c:	61bb      	str	r3, [r7, #24]
 800b16e:	2308      	movs	r3, #8
 800b170:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800b172:	6a3a      	ldr	r2, [r7, #32]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	441a      	add	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	b2db      	uxtb	r3, r3
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <trim_len+0x3c>
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	e000      	b.n	800b18e <trim_len+0x3e>
 800b18c:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800b18e:	4413      	add	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d103      	bne.n	800b1aa <trim_len+0x5a>
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	e000      	b.n	800b1ac <trim_len+0x5c>
 800b1aa:	2344      	movs	r3, #68	@ 0x44
 800b1ac:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	441a      	add	r2, r3
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d904      	bls.n	800b1c6 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	699a      	ldr	r2, [r3, #24]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d913      	bls.n	800b1fc <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800b1d4:	4b20      	ldr	r3, [pc, #128]	@ (800b258 <trim_len+0x108>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dd0a      	ble.n	800b1f2 <trim_len+0xa2>
 800b1dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b25c <trim_len+0x10c>)
 800b1de:	f241 2256 	movw	r2, #4694	@ 0x1256
 800b1e2:	491f      	ldr	r1, [pc, #124]	@ (800b260 <trim_len+0x110>)
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7fd ffe1 	bl	80091ac <mg_log_prefix>
 800b1ea:	68f9      	ldr	r1, [r7, #12]
 800b1ec:	481d      	ldr	r0, [pc, #116]	@ (800b264 <trim_len+0x114>)
 800b1ee:	f7fe f82d 	bl	800924c <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800b1fc:	683a      	ldr	r2, [r7, #0]
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	441a      	add	r2, r3
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b208:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d91e      	bls.n	800b24e <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b216:	461a      	mov	r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	6a3a      	ldr	r2, [r7, #32]
 800b21e:	4413      	add	r3, r2
 800b220:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00d      	beq.n	800b24e <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800b232:	4b09      	ldr	r3, [pc, #36]	@ (800b258 <trim_len+0x108>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd09      	ble.n	800b24e <trim_len+0xfe>
 800b23a:	4b08      	ldr	r3, [pc, #32]	@ (800b25c <trim_len+0x10c>)
 800b23c:	f241 225d 	movw	r2, #4701	@ 0x125d
 800b240:	4907      	ldr	r1, [pc, #28]	@ (800b260 <trim_len+0x110>)
 800b242:	2001      	movs	r0, #1
 800b244:	f7fd ffb2 	bl	80091ac <mg_log_prefix>
 800b248:	4807      	ldr	r0, [pc, #28]	@ (800b268 <trim_len+0x118>)
 800b24a:	f7fd ffff 	bl	800924c <mg_log>
    }
  }

  return len;
 800b24e:	683b      	ldr	r3, [r7, #0]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3728      	adds	r7, #40	@ 0x28
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20000254 	.word	0x20000254
 800b25c:	08022900 	.word	0x08022900
 800b260:	0801f338 	.word	0x0801f338
 800b264:	0802069c 	.word	0x0802069c
 800b268:	080206c8 	.word	0x080206c8

0800b26c <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b26e:	b08f      	sub	sp, #60	@ 0x3c
 800b270:	af06      	add	r7, sp, #24
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27e:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	33b0      	adds	r3, #176	@ 0xb0
 800b284:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	331c      	adds	r3, #28
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff ff5d 	bl	800b150 <trim_len>
 800b296:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d015      	beq.n	800b2d4 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	f103 0118 	add.w	r1, r3, #24
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	6898      	ldr	r0, [r3, #8]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	8b1c      	ldrh	r4, [r3, #24]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	9203      	str	r2, [sp, #12]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	9202      	str	r2, [sp, #8]
 800b2c2:	9301      	str	r3, [sp, #4]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	69f8      	ldr	r0, [r7, #28]
 800b2ce:	f7fe fd0e 	bl	8009cee <tx_udp>
 800b2d2:	e03d      	b.n	800b350 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	f103 0618 	add.w	r6, r3, #24
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8b1c      	ldrh	r4, [r3, #24]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f010 fb21 	bl	801b92e <mg_ntohl>
 800b2ec:	6038      	str	r0, [r7, #0]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f010 fb1b 	bl	801b92e <mg_ntohl>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	9305      	str	r3, [sp, #20]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	9203      	str	r2, [sp, #12]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	9501      	str	r5, [sp, #4]
 800b30a:	9400      	str	r4, [sp, #0]
 800b30c:	2318      	movs	r3, #24
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4631      	mov	r1, r6
 800b312:	69f8      	ldr	r0, [r7, #28]
 800b314:	f7ff fd52 	bl	800adbc <tx_tcp>
 800b318:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <mg_io_send+0xba>
      return MG_IO_WAIT;
 800b320:	f06f 0301 	mvn.w	r3, #1
 800b324:	e015      	b.n	800b352 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b32c:	d102      	bne.n	800b334 <mg_io_send+0xc8>
      return MG_IO_ERR;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b332:	e00e      	b.n	800b352 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	441a      	add	r2, r3
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	7f9b      	ldrb	r3, [r3, #30]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d103      	bne.n	800b350 <mg_io_send+0xe4>
 800b348:	2100      	movs	r1, #0
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7fe faee 	bl	800992c <settmout>
    }
  }
  return (long) len;
 800b350:	687b      	ldr	r3, [r7, #4]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3724      	adds	r7, #36	@ 0x24
 800b356:	46bd      	mov	sp, r7
 800b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b35c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f009 ff11 	bl	801518c <mg_tls_pending>
 800b36a:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b372:	bf28      	it	cs
 800b374:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 800b378:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3338      	adds	r3, #56	@ 0x38
 800b37e:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	693a      	ldr	r2, [r7, #16]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d90f      	bls.n	800b3b0 <handle_tls_recv+0x54>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	4413      	add	r3, r2
 800b398:	4619      	mov	r1, r3
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7fc ff5a 	bl	8008254 <mg_iobuf_resize>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 800b3a6:	491c      	ldr	r1, [pc, #112]	@ (800b418 <handle_tls_recv+0xbc>)
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7f8 fd85 	bl	8003eb8 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 800b3ae:	e02f      	b.n	800b410 <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <handle_tls_recv+0x68>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	e001      	b.n	800b3c8 <handle_tls_recv+0x6c>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	6851      	ldr	r1, [r2, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800b3d0:	1a8a      	subs	r2, r1, r2
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f009 fe85 	bl	80150e4 <mg_tls_recv>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e4:	d104      	bne.n	800b3f0 <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 800b3e6:	490d      	ldr	r1, [pc, #52]	@ (800b41c <handle_tls_recv+0xc0>)
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7f8 fd65 	bl	8003eb8 <mg_error>
}
 800b3ee:	e00f      	b.n	800b410 <handle_tls_recv+0xb4>
    } else if (n > 0) {
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd0c      	ble.n	800b410 <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	441a      	add	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 800b402:	f107 0308 	add.w	r3, r7, #8
 800b406:	461a      	mov	r2, r3
 800b408:	2107      	movs	r1, #7
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7f8 fd33 	bl	8003e76 <mg_call>
}
 800b410:	bf00      	nop
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	08020664 	.word	0x08020664
 800b41c:	080206f4 	.word	0x080206f4

0800b420 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	b090      	sub	sp, #64	@ 0x40
 800b426:	af06      	add	r7, sp, #24
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	33b0      	adds	r3, #176	@ 0xb0
 800b430:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <read_conn+0x28>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3368      	adds	r3, #104	@ 0x68
 800b446:	e001      	b.n	800b44c <read_conn+0x2c>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3338      	adds	r3, #56	@ 0x38
 800b44c:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	4618      	mov	r0, r3
 800b456:	f010 fa6a 	bl	801b92e <mg_ntohl>
 800b45a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	331c      	adds	r3, #28
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b468:	7b5b      	ldrb	r3, [r3, #13]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d07d      	beq.n	800b56e <read_conn+0x14e>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800b472:	2310      	movs	r3, #16
 800b474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4618      	mov	r0, r3
 800b480:	f010 fa55 	bl	801b92e <mg_ntohl>
 800b484:	4602      	mov	r2, r0
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b4a0:	f003 0310 	and.w	r3, r3, #16
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d022      	beq.n	800b4f0 <read_conn+0xd0>
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	7f9b      	ldrb	r3, [r3, #30]
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d11e      	bne.n	800b4f0 <read_conn+0xd0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	681c      	ldr	r4, [r3, #0]
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f010 fa36 	bl	801b92e <mg_ntohl>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	429c      	cmp	r4, r3
 800b4c6:	d105      	bne.n	800b4d4 <read_conn+0xb4>
        s->seq++;                               // Yes. Increment our SEQ
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e008      	b.n	800b4e6 <read_conn+0xc6>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f010 fa27 	bl	801b92e <mg_ntohl>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b4ee:	e010      	b.n	800b512 <read_conn+0xf2>
    } else {
      flags |= TH_FIN;
 800b4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4f4:	f043 0301 	orr.w	r3, r3, #1
 800b4f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b502:	f043 0310 	orr.w	r3, r3, #16
 800b506:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800b50a:	2104      	movs	r1, #4
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f7fe fa0d 	bl	800992c <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	f103 0818 	add.w	r8, r3, #24
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	8b1c      	ldrh	r4, [r3, #24]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b52a:	6a3b      	ldr	r3, [r7, #32]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f010 f9fd 	bl	801b92e <mg_ntohl>
 800b534:	6038      	str	r0, [r7, #0]
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f010 f9f7 	bl	801b92e <mg_ntohl>
 800b540:	4602      	mov	r2, r0
 800b542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b546:	2100      	movs	r1, #0
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	499a      	ldr	r1, [pc, #616]	@ (800b7b4 <read_conn+0x394>)
 800b54c:	9104      	str	r1, [sp, #16]
 800b54e:	9203      	str	r2, [sp, #12]
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	9102      	str	r1, [sp, #8]
 800b554:	9501      	str	r5, [sp, #4]
 800b556:	9400      	str	r4, [sp, #0]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	4641      	mov	r1, r8
 800b55c:	4630      	mov	r0, r6
 800b55e:	f7ff fc2d 	bl	800adbc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return; // if no data, we're done
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f040 808e 	bne.w	800b688 <read_conn+0x268>
 800b56c:	e167      	b.n	800b83e <read_conn+0x41e>
  } else if (pkt->pay.len == 0) {  // this is an ACK
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10f      	bne.n	800b596 <read_conn+0x176>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 815b 	beq.w	800b838 <read_conn+0x418>
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	7f9b      	ldrb	r3, [r3, #30]
 800b586:	2b04      	cmp	r3, #4
 800b588:	f040 8156 	bne.w	800b838 <read_conn+0x418>
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    return; // no data to process
 800b594:	e150      	b.n	800b838 <read_conn+0x418>
  } else if (seq != s->ack) {
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d059      	beq.n	800b654 <read_conn+0x234>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f010 f9c1 	bl	801b92e <mg_ntohl>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d10f      	bne.n	800b5e0 <read_conn+0x1c0>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800b5c0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7b8 <read_conn+0x398>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	f340 8139 	ble.w	800b83c <read_conn+0x41c>
 800b5ca:	4b7c      	ldr	r3, [pc, #496]	@ (800b7bc <read_conn+0x39c>)
 800b5cc:	f241 22b1 	movw	r2, #4785	@ 0x12b1
 800b5d0:	497b      	ldr	r1, [pc, #492]	@ (800b7c0 <read_conn+0x3a0>)
 800b5d2:	2004      	movs	r0, #4
 800b5d4:	f7fd fdea 	bl	80091ac <mg_log_prefix>
 800b5d8:	487a      	ldr	r0, [pc, #488]	@ (800b7c4 <read_conn+0x3a4>)
 800b5da:	f7fd fe37 	bl	800924c <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return; // drop it
 800b5de:	e12d      	b.n	800b83c <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800b5e0:	4b75      	ldr	r3, [pc, #468]	@ (800b7b8 <read_conn+0x398>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	dd0d      	ble.n	800b604 <read_conn+0x1e4>
 800b5e8:	4b74      	ldr	r3, [pc, #464]	@ (800b7bc <read_conn+0x39c>)
 800b5ea:	f241 22b3 	movw	r2, #4787	@ 0x12b3
 800b5ee:	4974      	ldr	r1, [pc, #464]	@ (800b7c0 <read_conn+0x3a0>)
 800b5f0:	2004      	movs	r0, #4
 800b5f2:	f7fd fddb 	bl	80091ac <mg_log_prefix>
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	69b9      	ldr	r1, [r7, #24]
 800b5fe:	4872      	ldr	r0, [pc, #456]	@ (800b7c8 <read_conn+0x3a8>)
 800b600:	f7fd fe24 	bl	800924c <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	f103 0818 	add.w	r8, r3, #24
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	607b      	str	r3, [r7, #4]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	8b1c      	ldrh	r4, [r3, #24]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f010 f984 	bl	801b92e <mg_ntohl>
 800b626:	6038      	str	r0, [r7, #0]
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f010 f97e 	bl	801b92e <mg_ntohl>
 800b632:	4603      	mov	r3, r0
 800b634:	2200      	movs	r2, #0
 800b636:	9205      	str	r2, [sp, #20]
 800b638:	4a5e      	ldr	r2, [pc, #376]	@ (800b7b4 <read_conn+0x394>)
 800b63a:	9204      	str	r2, [sp, #16]
 800b63c:	9303      	str	r3, [sp, #12]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	9102      	str	r1, [sp, #8]
 800b642:	9501      	str	r5, [sp, #4]
 800b644:	9400      	str	r4, [sp, #0]
 800b646:	2310      	movs	r3, #16
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4641      	mov	r1, r8
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7ff fbb5 	bl	800adbc <tx_tcp>
    return; // drop it
 800b652:	e0f3      	b.n	800b83c <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	1ad2      	subs	r2, r2, r3
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	429a      	cmp	r2, r3
 800b664:	d210      	bcs.n	800b688 <read_conn+0x268>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	4413      	add	r3, r2
 800b670:	4619      	mov	r1, r3
 800b672:	69f8      	ldr	r0, [r7, #28]
 800b674:	f7fc fdee 	bl	8008254 <mg_iobuf_resize>
 800b678:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d104      	bne.n	800b688 <read_conn+0x268>
    mg_error(c, "oom");
 800b67e:	4953      	ldr	r1, [pc, #332]	@ (800b7cc <read_conn+0x3ac>)
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7f8 fc19 	bl	8003eb8 <mg_error>
    return; // drop it
 800b686:	e0da      	b.n	800b83e <read_conn+0x41e>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	18d0      	adds	r0, r2, r3
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	6899      	ldr	r1, [r3, #8]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	461a      	mov	r2, r3
 800b69c:	f013 f91f 	bl	801e8de <memcpy>
  io->len += pkt->pay.len;
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	689a      	ldr	r2, [r3, #8]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	441a      	add	r2, r3
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800b6ae:	4b42      	ldr	r3, [pc, #264]	@ (800b7b8 <read_conn+0x398>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	dd15      	ble.n	800b6e2 <read_conn+0x2c2>
 800b6b6:	4b41      	ldr	r3, [pc, #260]	@ (800b7bc <read_conn+0x39c>)
 800b6b8:	f241 22c4 	movw	r2, #4804	@ 0x12c4
 800b6bc:	4940      	ldr	r1, [pc, #256]	@ (800b7c0 <read_conn+0x3a0>)
 800b6be:	2004      	movs	r0, #4
 800b6c0:	f7fd fd74 	bl	80091ac <mg_log_prefix>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f010 f92d 	bl	801b92e <mg_ntohl>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	4621      	mov	r1, r4
 800b6dc:	483c      	ldr	r0, [pc, #240]	@ (800b7d0 <read_conn+0x3b0>)
 800b6de:	f7fd fdb5 	bl	800924c <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f010 f920 	bl	801b92e <mg_ntohl>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	441a      	add	r2, r3
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	695a      	ldr	r2, [r3, #20]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	441a      	add	r2, r3
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800b710:	4293      	cmp	r3, r2
 800b712:	d961      	bls.n	800b7d8 <read_conn+0x3b8>
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	691a      	ldr	r2, [r3, #16]
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d05b      	beq.n	800b7d8 <read_conn+0x3b8>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800b720:	4b25      	ldr	r3, [pc, #148]	@ (800b7b8 <read_conn+0x398>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b03      	cmp	r3, #3
 800b726:	dd0e      	ble.n	800b746 <read_conn+0x326>
 800b728:	4b24      	ldr	r3, [pc, #144]	@ (800b7bc <read_conn+0x39c>)
 800b72a:	f241 22cb 	movw	r2, #4811	@ 0x12cb
 800b72e:	4924      	ldr	r1, [pc, #144]	@ (800b7c0 <read_conn+0x3a0>)
 800b730:	2004      	movs	r0, #4
 800b732:	f7fd fd3b 	bl	80091ac <mg_log_prefix>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	461a      	mov	r2, r3
 800b740:	4824      	ldr	r0, [pc, #144]	@ (800b7d4 <read_conn+0x3b4>)
 800b742:	f7fd fd83 	bl	800924c <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	f103 0818 	add.w	r8, r3, #24
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	607b      	str	r3, [r7, #4]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8b1c      	ldrh	r4, [r3, #24]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f010 f8e3 	bl	801b92e <mg_ntohl>
 800b768:	6038      	str	r0, [r7, #0]
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	4618      	mov	r0, r3
 800b770:	f010 f8dd 	bl	801b92e <mg_ntohl>
 800b774:	4603      	mov	r3, r0
 800b776:	2200      	movs	r2, #0
 800b778:	9205      	str	r2, [sp, #20]
 800b77a:	2200      	movs	r2, #0
 800b77c:	9204      	str	r2, [sp, #16]
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	9102      	str	r1, [sp, #8]
 800b784:	9501      	str	r5, [sp, #4]
 800b786:	9400      	str	r4, [sp, #0]
 800b788:	2310      	movs	r3, #16
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4641      	mov	r1, r8
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff fb14 	bl	800adbc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	2200      	movs	r2, #0
 800b798:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	7f9b      	ldrb	r3, [r3, #30]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d01e      	beq.n	800b7e8 <read_conn+0x3c8>
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7fe f8bd 	bl	800992c <settmout>
 800b7b2:	e019      	b.n	800b7e8 <read_conn+0x3c8>
 800b7b4:	0801fb0c 	.word	0x0801fb0c
 800b7b8:	20000254 	.word	0x20000254
 800b7bc:	0802290c 	.word	0x0802290c
 800b7c0:	0801f338 	.word	0x0801f338
 800b7c4:	08020704 	.word	0x08020704
 800b7c8:	0802071c 	.word	0x0802071c
 800b7cc:	08020664 	.word	0x08020664
 800b7d0:	08020734 	.word	0x08020734
 800b7d4:	08020748 	.word	0x08020748
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	7f9b      	ldrb	r3, [r3, #30]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d003      	beq.n	800b7e8 <read_conn+0x3c8>
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f7fe f8a2 	bl	800992c <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00b      	beq.n	800b810 <read_conn+0x3f0>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b7fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d003      	beq.n	800b810 <read_conn+0x3f0>
    mg_tls_handshake(c);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f009 f969 	bl	8014ae0 <mg_tls_handshake>
 800b80e:	e016      	b.n	800b83e <read_conn+0x41e>
  } else if (c->is_tls) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <read_conn+0x408>
    handle_tls_recv(c);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff fd9b 	bl	800b35c <handle_tls_recv>
 800b826:	e00a      	b.n	800b83e <read_conn+0x41e>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	330c      	adds	r3, #12
 800b82c:	461a      	mov	r2, r3
 800b82e:	2107      	movs	r1, #7
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7f8 fb20 	bl	8003e76 <mg_call>
 800b836:	e002      	b.n	800b83e <read_conn+0x41e>
    return; // no data to process
 800b838:	bf00      	nop
 800b83a:	e000      	b.n	800b83e <read_conn+0x41e>
    return; // drop it
 800b83c:	bf00      	nop
  }
}
 800b83e:	3728      	adds	r7, #40	@ 0x28
 800b840:	46bd      	mov	sp, r7
 800b842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b846:	bf00      	nop

0800b848 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b848:	b590      	push	{r4, r7, lr}
 800b84a:	b089      	sub	sp, #36	@ 0x24
 800b84c:	af02      	add	r7, sp, #8
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b856:	2200      	movs	r2, #0
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fc86 	bl	800a16c <getpeer>
 800b860:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <rx_tcp+0x26>
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	33b0      	adds	r3, #176	@ 0xb0
 800b86c:	e000      	b.n	800b870 <rx_tcp+0x28>
 800b86e:	2300      	movs	r3, #0
 800b870:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d048      	beq.n	800b90a <rx_tcp+0xc2>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b87e:	f003 0320 	and.w	r3, r3, #32
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d040      	beq.n	800b90a <rx_tcp+0xc2>
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88c:	7b5b      	ldrb	r3, [r3, #13]
 800b88e:	2b12      	cmp	r3, #18
 800b890:	d13b      	bne.n	800b90a <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	4618      	mov	r0, r3
 800b89a:	f010 f848 	bl	801b92e <mg_ntohl>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f010 f83f 	bl	801b92e <mg_ntohl>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	1c5a      	adds	r2, r3, #1
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	9201      	str	r2, [sp, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	9200      	str	r2, [sp, #0]
 800b8c6:	2210      	movs	r2, #16
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff fb42 	bl	800af54 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800b8d6:	f023 0320 	bic.w	r3, r3, #32
 800b8da:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800b8de:	2100      	movs	r1, #0
 800b8e0:	6978      	ldr	r0, [r7, #20]
 800b8e2:	f7fe f823 	bl	800992c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2104      	movs	r1, #4
 800b8ea:	6978      	ldr	r0, [r7, #20]
 800b8ec:	f7f8 fac3 	bl	8003e76 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b8f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 80cd 	beq.w	800ba9c <rx_tcp+0x254>
 800b902:	6978      	ldr	r0, [r7, #20]
 800b904:	f009 f8ec 	bl	8014ae0 <mg_tls_handshake>
 800b908:	e0c8      	b.n	800ba9c <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d019      	beq.n	800b944 <rx_tcp+0xfc>
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b916:	f003 0320 	and.w	r3, r3, #32
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d011      	beq.n	800b944 <rx_tcp+0xfc>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b924:	7b5b      	ldrb	r3, [r3, #13]
 800b926:	2b10      	cmp	r3, #16
 800b928:	d00c      	beq.n	800b944 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	2200      	movs	r2, #0
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	9200      	str	r2, [sp, #0]
 800b938:	2214      	movs	r2, #20
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff fb09 	bl	800af54 <tx_tcp_pkt>
 800b942:	e0ab      	b.n	800ba9c <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00b      	beq.n	800b962 <rx_tcp+0x11a>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	7b5b      	ldrb	r3, [r3, #13]
 800b950:	f003 0304 	and.w	r3, r3, #4
 800b954:	2b00      	cmp	r3, #0
 800b956:	d004      	beq.n	800b962 <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800b958:	4952      	ldr	r1, [pc, #328]	@ (800baa4 <rx_tcp+0x25c>)
 800b95a:	6978      	ldr	r0, [r7, #20]
 800b95c:	f7f8 faac 	bl	8003eb8 <mg_error>
 800b960:	e09c      	b.n	800ba9c <rx_tcp+0x254>
  } else if (c != NULL) {
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00f      	beq.n	800b988 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2200      	movs	r2, #0
 800b96c:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	7f9b      	ldrb	r3, [r3, #30]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <rx_tcp+0x136>
      settmout(c,
 800b976:	2100      	movs	r1, #0
 800b978:	6978      	ldr	r0, [r7, #20]
 800b97a:	f7fd ffd7 	bl	800992c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6978      	ldr	r0, [r7, #20]
 800b982:	f7ff fd4d 	bl	800b420 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800b986:	e089      	b.n	800ba9c <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98c:	2201      	movs	r2, #1
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f7fe fbeb 	bl	800a16c <getpeer>
 800b996:	6178      	str	r0, [r7, #20]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10c      	bne.n	800b9b8 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	9201      	str	r2, [sp, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	9200      	str	r2, [sp, #0]
 800b9ac:	2214      	movs	r2, #20
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff facf 	bl	800af54 <tx_tcp_pkt>
}
 800b9b6:	e071      	b.n	800ba9c <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9bc:	7b5b      	ldrb	r3, [r3, #13]
 800b9be:	f003 0304 	and.w	r3, r3, #4
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d062      	beq.n	800ba9c <rx_tcp+0x254>
 800b9d6:	4933      	ldr	r1, [pc, #204]	@ (800baa4 <rx_tcp+0x25c>)
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f7f8 fa6d 	bl	8003eb8 <mg_error>
}
 800b9de:	e05d      	b.n	800ba9c <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e4:	7b5b      	ldrb	r3, [r3, #13]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d016      	beq.n	800ba1c <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f00f ff82 	bl	801b900 <mg_ntohs>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f00f ff95 	bl	801b92e <mg_ntohl>
 800ba04:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800ba06:	2300      	movs	r3, #0
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2212      	movs	r2, #18
 800ba12:	6839      	ldr	r1, [r7, #0]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fa9d 	bl	800af54 <tx_tcp_pkt>
}
 800ba1a:	e03f      	b.n	800ba9c <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba20:	7b5b      	ldrb	r3, [r3, #13]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00c      	beq.n	800ba44 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2200      	movs	r2, #0
 800ba32:	9201      	str	r2, [sp, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	9200      	str	r2, [sp, #0]
 800ba38:	2211      	movs	r2, #17
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff fa89 	bl	800af54 <tx_tcp_pkt>
}
 800ba42:	e02b      	b.n	800ba9c <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f00f ff6f 	bl	801b92e <mg_ntohl>
 800ba50:	4604      	mov	r4, r0
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f00f ff50 	bl	801b900 <mg_ntohs>
 800ba60:	4603      	mov	r3, r0
 800ba62:	3301      	adds	r3, #1
 800ba64:	429c      	cmp	r4, r3
 800ba66:	d104      	bne.n	800ba72 <rx_tcp+0x22a>
    accept_conn(c, pkt);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6978      	ldr	r0, [r7, #20]
 800ba6c:	f7ff fab8 	bl	800afe0 <accept_conn>
}
 800ba70:	e014      	b.n	800ba9c <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ba78:	f003 0304 	and.w	r3, r3, #4
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10c      	bne.n	800ba9c <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	9201      	str	r2, [sp, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	9200      	str	r2, [sp, #0]
 800ba90:	2214      	movs	r2, #20
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fa5d 	bl	800af54 <tx_tcp_pkt>
}
 800ba9a:	e7ff      	b.n	800ba9c <rx_tcp+0x254>
 800ba9c:	bf00      	nop
 800ba9e:	371c      	adds	r7, #28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd90      	pop	{r4, r7, pc}
 800baa4:	08020758 	.word	0x08020758

0800baa8 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baaa:	b08b      	sub	sp, #44	@ 0x2c
 800baac:	af04      	add	r7, sp, #16
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	88db      	ldrh	r3, [r3, #6]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4618      	mov	r0, r3
 800babc:	f00f ff20 	bl	801b900 <mg_ntohs>
 800bac0:	4603      	mov	r3, r0
 800bac2:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bac4:	8afb      	ldrh	r3, [r7, #22]
 800bac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d104      	bne.n	800bad8 <rx_ip+0x30>
 800bace:	8afb      	ldrh	r3, [r7, #22]
 800bad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d026      	beq.n	800bb26 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	7a5b      	ldrb	r3, [r3, #9]
 800bade:	2b11      	cmp	r3, #17
 800bae0:	d105      	bne.n	800baee <rx_ip+0x46>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	69db      	ldr	r3, [r3, #28]
 800bae6:	f103 0214 	add.w	r2, r3, #20
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	7a5b      	ldrb	r3, [r3, #9]
 800baf4:	2b06      	cmp	r3, #6
 800baf6:	d105      	bne.n	800bb04 <rx_ip+0x5c>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	69db      	ldr	r3, [r3, #28]
 800bafc:	f103 0214 	add.w	r2, r3, #20
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb08:	2200      	movs	r2, #0
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fb2d 	bl	800a16c <getpeer>
 800bb12:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 811b 	beq.w	800bd52 <rx_ip+0x2aa>
 800bb1c:	4992      	ldr	r1, [pc, #584]	@ (800bd68 <rx_ip+0x2c0>)
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7f8 f9ca 	bl	8003eb8 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bb24:	e115      	b.n	800bd52 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	7a5b      	ldrb	r3, [r3, #9]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d116      	bne.n	800bb5e <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	69db      	ldr	r3, [r3, #28]
 800bb34:	f103 0214 	add.w	r2, r3, #20
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	f240 8108 	bls.w	800bd56 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6838      	ldr	r0, [r7, #0]
 800bb50:	f7fd fe74 	bl	800983c <mkpay>
    rx_icmp(ifp, pkt);
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7fe fc8c 	bl	800a474 <rx_icmp>
 800bb5c:	e100      	b.n	800bd60 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	7a5b      	ldrb	r3, [r3, #9]
 800bb64:	2b11      	cmp	r3, #17
 800bb66:	f040 808b 	bne.w	800bc80 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	f103 0214 	add.w	r2, r3, #20
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	f240 80ed 	bls.w	800bd5a <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb84:	3308      	adds	r3, #8
 800bb86:	4619      	mov	r1, r3
 800bb88:	6838      	ldr	r0, [r7, #0]
 800bb8a:	f7fd fe57 	bl	800983c <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bb8e:	4b77      	ldr	r3, [pc, #476]	@ (800bd6c <rx_ip+0x2c4>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	dd2d      	ble.n	800bbf2 <rx_ip+0x14a>
 800bb96:	4b76      	ldr	r3, [pc, #472]	@ (800bd70 <rx_ip+0x2c8>)
 800bb98:	f241 3221 	movw	r2, #4897	@ 0x1321
 800bb9c:	4975      	ldr	r1, [pc, #468]	@ (800bd74 <rx_ip+0x2cc>)
 800bb9e:	2004      	movs	r0, #4
 800bba0:	f7fd fb04 	bl	80091ac <mg_log_prefix>
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	f103 050c 	add.w	r5, r3, #12
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f00f fea3 	bl	801b900 <mg_ntohs>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461e      	mov	r6, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	f103 0410 	add.w	r4, r3, #16
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbca:	885b      	ldrh	r3, [r3, #2]
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f00f fe96 	bl	801b900 <mg_ntohs>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	9303      	str	r3, [sp, #12]
 800bbde:	9202      	str	r2, [sp, #8]
 800bbe0:	9401      	str	r4, [sp, #4]
 800bbe2:	4b65      	ldr	r3, [pc, #404]	@ (800bd78 <rx_ip+0x2d0>)
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	4633      	mov	r3, r6
 800bbe8:	462a      	mov	r2, r5
 800bbea:	4963      	ldr	r1, [pc, #396]	@ (800bd78 <rx_ip+0x2d0>)
 800bbec:	4863      	ldr	r0, [pc, #396]	@ (800bd7c <rx_ip+0x2d4>)
 800bbee:	f7fd fb2d 	bl	800924c <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	7f1b      	ldrb	r3, [r3, #28]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d01c      	beq.n	800bc34 <rx_ip+0x18c>
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	885b      	ldrh	r3, [r3, #2]
 800bc00:	b29c      	uxth	r4, r3
 800bc02:	2044      	movs	r0, #68	@ 0x44
 800bc04:	f00f fe7c 	bl	801b900 <mg_ntohs>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d112      	bne.n	800bc34 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc12:	f103 0208 	add.w	r2, r3, #8
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1e:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800bc22:	4619      	mov	r1, r3
 800bc24:	6838      	ldr	r0, [r7, #0]
 800bc26:	f7fd fe09 	bl	800983c <mkpay>
      rx_dhcp_client(ifp, pkt);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7fe fc7d 	bl	800a52c <rx_dhcp_client>
 800bc32:	e095      	b.n	800bd60 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	7f5b      	ldrb	r3, [r3, #29]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01c      	beq.n	800bc76 <rx_ip+0x1ce>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc40:	885b      	ldrh	r3, [r3, #2]
 800bc42:	b29c      	uxth	r4, r3
 800bc44:	2043      	movs	r0, #67	@ 0x43
 800bc46:	f00f fe5b 	bl	801b900 <mg_ntohs>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d112      	bne.n	800bc76 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc54:	f103 0208 	add.w	r2, r3, #8
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc60:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800bc64:	4619      	mov	r1, r3
 800bc66:	6838      	ldr	r0, [r7, #0]
 800bc68:	f7fd fde8 	bl	800983c <mkpay>
      rx_dhcp_server(ifp, pkt);
 800bc6c:	6839      	ldr	r1, [r7, #0]
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7fe fe44 	bl	800a8fc <rx_dhcp_server>
 800bc74:	e074      	b.n	800bd60 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff f82d 	bl	800acd8 <rx_udp>
 800bc7e:	e06f      	b.n	800bd60 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	7a5b      	ldrb	r3, [r3, #9]
 800bc86:	2b06      	cmp	r3, #6
 800bc88:	d16a      	bne.n	800bd60 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f103 0214 	add.w	r2, r3, #20
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	2b13      	cmp	r3, #19
 800bc9c:	d95f      	bls.n	800bd5e <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca2:	3314      	adds	r3, #20
 800bca4:	4619      	mov	r1, r3
 800bca6:	6838      	ldr	r0, [r7, #0]
 800bca8:	f7fd fdc8 	bl	800983c <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	885b      	ldrh	r3, [r3, #2]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f00f fe23 	bl	801b900 <mg_ntohs>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc2:	7b1b      	ldrb	r3, [r3, #12]
 800bcc4:	091b      	lsrs	r3, r3, #4
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	3305      	adds	r3, #5
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800bcd0:	8aba      	ldrh	r2, [r7, #20]
 800bcd2:	8a7b      	ldrh	r3, [r7, #18]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d305      	bcc.n	800bce4 <rx_ip+0x23c>
 800bcd8:	8aba      	ldrh	r2, [r7, #20]
 800bcda:	8a7b      	ldrh	r3, [r7, #18]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	461a      	mov	r2, r3
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800bce4:	4b21      	ldr	r3, [pc, #132]	@ (800bd6c <rx_ip+0x2c4>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b03      	cmp	r3, #3
 800bcea:	dd2d      	ble.n	800bd48 <rx_ip+0x2a0>
 800bcec:	4b20      	ldr	r3, [pc, #128]	@ (800bd70 <rx_ip+0x2c8>)
 800bcee:	f241 3236 	movw	r2, #4918	@ 0x1336
 800bcf2:	4920      	ldr	r1, [pc, #128]	@ (800bd74 <rx_ip+0x2cc>)
 800bcf4:	2004      	movs	r0, #4
 800bcf6:	f7fd fa59 	bl	80091ac <mg_log_prefix>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	f103 050c 	add.w	r5, r3, #12
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f00f fdf8 	bl	801b900 <mg_ntohs>
 800bd10:	4603      	mov	r3, r0
 800bd12:	461e      	mov	r6, r3
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	f103 0410 	add.w	r4, r3, #16
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd20:	885b      	ldrh	r3, [r3, #2]
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	4618      	mov	r0, r3
 800bd26:	f00f fdeb 	bl	801b900 <mg_ntohs>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	9303      	str	r3, [sp, #12]
 800bd34:	9202      	str	r2, [sp, #8]
 800bd36:	9401      	str	r4, [sp, #4]
 800bd38:	4b0f      	ldr	r3, [pc, #60]	@ (800bd78 <rx_ip+0x2d0>)
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	4633      	mov	r3, r6
 800bd3e:	462a      	mov	r2, r5
 800bd40:	490d      	ldr	r1, [pc, #52]	@ (800bd78 <rx_ip+0x2d0>)
 800bd42:	480f      	ldr	r0, [pc, #60]	@ (800bd80 <rx_ip+0x2d8>)
 800bd44:	f7fd fa82 	bl	800924c <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff fd7c 	bl	800b848 <rx_tcp>
 800bd50:	e006      	b.n	800bd60 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800bd52:	bf00      	nop
 800bd54:	e004      	b.n	800bd60 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bd56:	bf00      	nop
 800bd58:	e002      	b.n	800bd60 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bd5a:	bf00      	nop
 800bd5c:	e000      	b.n	800bd60 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800bd5e:	bf00      	nop
  }
}
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd66:	bf00      	nop
 800bd68:	08020764 	.word	0x08020764
 800bd6c:	20000254 	.word	0x20000254
 800bd70:	08022918 	.word	0x08022918
 800bd74:	0801f338 	.word	0x0801f338
 800bd78:	0800cf99 	.word	0x0800cf99
 800bd7c:	08020780 	.word	0x08020780
 800bd80:	0802079c 	.word	0x0802079c

0800bd84 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	799b      	ldrb	r3, [r3, #6]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d004      	beq.n	800bda2 <rx_ip6+0x1e>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	6a1b      	ldr	r3, [r3, #32]
 800bd9c:	799b      	ldrb	r3, [r3, #6]
 800bd9e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bda0:	d115      	bne.n	800bdce <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d922      	bls.n	800bdfc <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	3304      	adds	r3, #4
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6838      	ldr	r0, [r7, #0]
 800bdc0:	f7fd fd3c 	bl	800983c <mkpay>
    rx_icmp(ifp, pkt);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7fe fb54 	bl	800a474 <rx_icmp>
 800bdcc:	e019      	b.n	800be02 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	799b      	ldrb	r3, [r3, #6]
 800bdd4:	2b11      	cmp	r3, #17
 800bdd6:	d114      	bne.n	800be02 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6a1b      	ldr	r3, [r3, #32]
 800bddc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	2b07      	cmp	r3, #7
 800bdea:	d909      	bls.n	800be00 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6838      	ldr	r0, [r7, #0]
 800bdf6:	f7fd fd21 	bl	800983c <mkpay>
 800bdfa:	e002      	b.n	800be02 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800bdfc:	bf00      	nop
 800bdfe:	e000      	b.n	800be02 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800be00:	bf00      	nop
  }
}
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b093      	sub	sp, #76	@ 0x4c
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800be14:	f107 0314 	add.w	r3, r7, #20
 800be18:	2234      	movs	r2, #52	@ 0x34
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f012 fc28 	bl	801e672 <memset>
  pkt.raw.buf = (char *) buf;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b0d      	cmp	r3, #13
 800be32:	f240 80df 	bls.w	800bff4 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d013      	beq.n	800be68 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800be40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be42:	4618      	mov	r0, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2206      	movs	r2, #6
 800be48:	4619      	mov	r1, r3
 800be4a:	f012 fbe8 	bl	801e61e <memcmp>
 800be4e:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800be54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be56:	2206      	movs	r2, #6
 800be58:	4970      	ldr	r1, [pc, #448]	@ (800c01c <mg_tcpip_rx+0x214>)
 800be5a:	4618      	mov	r0, r3
 800be5c:	f012 fbdf 	bl	801e61e <memcmp>
 800be60:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800be62:	2b00      	cmp	r3, #0
 800be64:	f040 80c8 	bne.w	800bff8 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d01a      	beq.n	800bea8 <mg_tcpip_rx+0xa0>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b04      	cmp	r3, #4
 800be76:	d917      	bls.n	800bea8 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3b04      	subs	r3, #4
 800be7c:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	68b9      	ldr	r1, [r7, #8]
 800be82:	2000      	movs	r0, #0
 800be84:	f00f fcc2 	bl	801b80c <mg_crc32>
 800be88:	4603      	mov	r3, r0
 800be8a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4413      	add	r3, r2
 800be92:	4618      	mov	r0, r3
 800be94:	f107 0310 	add.w	r3, r7, #16
 800be98:	2204      	movs	r2, #4
 800be9a:	4619      	mov	r1, r3
 800be9c:	f012 fbbf 	bl	801e61e <memcmp>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f040 80aa 	bne.w	800bffc <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	899b      	ldrh	r3, [r3, #12]
 800beac:	b29c      	uxth	r4, r3
 800beae:	f640 0006 	movw	r0, #2054	@ 0x806
 800beb2:	f00f fd25 	bl	801b900 <mg_ntohs>
 800beb6:	4603      	mov	r3, r0
 800beb8:	429c      	cmp	r4, r3
 800beba:	d114      	bne.n	800bee6 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bebe:	330e      	adds	r3, #14
 800bec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b29      	cmp	r3, #41	@ 0x29
 800bec6:	f240 809b 	bls.w	800c000 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800beca:	f107 0314 	add.w	r3, r7, #20
 800bece:	461a      	mov	r2, r3
 800bed0:	2103      	movs	r1, #3
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7fd fc9e 	bl	8009814 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800bed8:	f107 0314 	add.w	r3, r7, #20
 800bedc:	4619      	mov	r1, r3
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f7fe f9b6 	bl	800a250 <rx_arp>
 800bee4:	e097      	b.n	800c016 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800bee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee8:	899b      	ldrh	r3, [r3, #12]
 800beea:	b29c      	uxth	r4, r3
 800beec:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800bef0:	f00f fd06 	bl	801b900 <mg_ntohs>
 800bef4:	4603      	mov	r3, r0
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d11b      	bne.n	800bf32 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befc:	330e      	adds	r3, #14
 800befe:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b35      	cmp	r3, #53	@ 0x35
 800bf04:	d97e      	bls.n	800c004 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800bf06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	091b      	lsrs	r3, r3, #4
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b06      	cmp	r3, #6
 800bf10:	d17a      	bne.n	800c008 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800bf12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf14:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd fc8c 	bl	800983c <mkpay>
    rx_ip6(ifp, &pkt);
 800bf24:	f107 0314 	add.w	r3, r7, #20
 800bf28:	4619      	mov	r1, r3
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff ff2a 	bl	800bd84 <rx_ip6>
 800bf30:	e071      	b.n	800c016 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	899b      	ldrh	r3, [r3, #12]
 800bf36:	b29c      	uxth	r4, r3
 800bf38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bf3c:	f00f fce0 	bl	801b900 <mg_ntohs>
 800bf40:	4603      	mov	r3, r0
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d133      	bne.n	800bfae <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf48:	330e      	adds	r3, #14
 800bf4a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2b21      	cmp	r3, #33	@ 0x21
 800bf50:	d95c      	bls.n	800c00c <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f00f fcd1 	bl	801b900 <mg_ntohs>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f103 020e 	add.w	r2, r3, #14
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d208      	bcs.n	800bf7c <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	4618      	mov	r0, r3
 800bf72:	f00f fcc5 	bl	801b900 <mg_ntohs>
 800bf76:	4603      	mov	r3, r0
 800bf78:	330e      	adds	r3, #14
 800bf7a:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	2b21      	cmp	r3, #33	@ 0x21
 800bf80:	d946      	bls.n	800c010 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800bf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	091b      	lsrs	r3, r3, #4
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d142      	bne.n	800c014 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf90:	f103 0214 	add.w	r2, r3, #20
 800bf94:	f107 0314 	add.w	r3, r7, #20
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fd fc4e 	bl	800983c <mkpay>
    rx_ip(ifp, &pkt);
 800bfa0:	f107 0314 	add.w	r3, r7, #20
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f7ff fd7e 	bl	800baa8 <rx_ip>
 800bfac:	e033      	b.n	800c016 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800bfae:	4b1c      	ldr	r3, [pc, #112]	@ (800c020 <mg_tcpip_rx+0x218>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	dd11      	ble.n	800bfda <mg_tcpip_rx+0x1d2>
 800bfb6:	4b1b      	ldr	r3, [pc, #108]	@ (800c024 <mg_tcpip_rx+0x21c>)
 800bfb8:	f241 3275 	movw	r2, #4981	@ 0x1375
 800bfbc:	491a      	ldr	r1, [pc, #104]	@ (800c028 <mg_tcpip_rx+0x220>)
 800bfbe:	2003      	movs	r0, #3
 800bfc0:	f7fd f8f4 	bl	80091ac <mg_log_prefix>
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc6:	899b      	ldrh	r3, [r3, #12]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f00f fc98 	bl	801b900 <mg_ntohs>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	4815      	ldr	r0, [pc, #84]	@ (800c02c <mg_tcpip_rx+0x224>)
 800bfd6:	f7fd f939 	bl	800924c <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800bfda:	4b11      	ldr	r3, [pc, #68]	@ (800c020 <mg_tcpip_rx+0x218>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	dd19      	ble.n	800c016 <mg_tcpip_rx+0x20e>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b20      	cmp	r3, #32
 800bfe6:	bf28      	it	cs
 800bfe8:	2320      	movcs	r3, #32
 800bfea:	4619      	mov	r1, r3
 800bfec:	68b8      	ldr	r0, [r7, #8]
 800bfee:	f7fd f963 	bl	80092b8 <mg_hexdump>
 800bff2:	e010      	b.n	800c016 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800bff4:	bf00      	nop
 800bff6:	e00e      	b.n	800c016 <mg_tcpip_rx+0x20e>
    return;
 800bff8:	bf00      	nop
 800bffa:	e00c      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800bffc:	bf00      	nop
 800bffe:	e00a      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800c000:	bf00      	nop
 800c002:	e008      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800c004:	bf00      	nop
 800c006:	e006      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800c008:	bf00      	nop
 800c00a:	e004      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c00c:	bf00      	nop
 800c00e:	e002      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800c010:	bf00      	nop
 800c012:	e000      	b.n	800c016 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800c014:	bf00      	nop
  }
}
 800c016:	374c      	adds	r7, #76	@ 0x4c
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd90      	pop	{r4, r7, pc}
 800c01c:	080223bc 	.word	0x080223bc
 800c020:	20000254 	.word	0x20000254
 800c024:	08022920 	.word	0x08022920
 800c028:	0801f338 	.word	0x0801f338
 800c02c:	080207b8 	.word	0x080207b8

0800c030 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	b095      	sub	sp, #84	@ 0x54
 800c034:	af06      	add	r7, sp, #24
 800c036:	6178      	str	r0, [r7, #20]
 800c038:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800c042:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c046:	e9cd 2300 	strd	r2, r3, [sp]
 800c04a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c04e:	f04f 0300 	mov.w	r3, #0
 800c052:	4608      	mov	r0, r1
 800c054:	f004 ff27 	bl	8010ea6 <mg_timer_expired>
 800c058:	4603      	mov	r3, r0
 800c05a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800c05e:	6979      	ldr	r1, [r7, #20]
 800c060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c064:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800c068:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <mg_tcpip_poll+0x58>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c076:	2b03      	cmp	r3, #3
 800c078:	d106      	bne.n	800c088 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2204      	movs	r2, #4
 800c07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 800c082:	6978      	ldr	r0, [r7, #20]
 800c084:	f7fd fd32 	bl	8009aec <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d075      	beq.n	800c17e <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800c09c:	4611      	mov	r1, r2
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	4798      	blx	r3
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 800c0a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d066      	beq.n	800c17e <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bf14      	ite	ne
 800c0ba:	2301      	movne	r3, #1
 800c0bc:	2300      	moveq	r3, #0
 800c0be:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800c0c2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c0c6:	f083 0301 	eor.w	r3, r3, #1
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d006      	beq.n	800c0de <mg_tcpip_poll+0xae>
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	7f1b      	ldrb	r3, [r3, #28]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <mg_tcpip_poll+0xae>
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 800c0de:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800c0e2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d01a      	beq.n	800c120 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c0ea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c0ee:	f083 0301 	eor.w	r3, r3, #1
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <mg_tcpip_poll+0xcc>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e00a      	b.n	800c112 <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c100:	2b00      	cmp	r3, #0
 800c102:	d103      	bne.n	800c10c <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800c10c:	2301      	movs	r3, #1
 800c10e:	e000      	b.n	800c112 <mg_tcpip_poll+0xe2>
 800c110:	2303      	movs	r3, #3
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 800c118:	6978      	ldr	r0, [r7, #20]
 800c11a:	f7fd fce7 	bl	8009aec <onstatechange>
 800c11e:	e016      	b.n	800c14e <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	7f1b      	ldrb	r3, [r3, #28]
 800c124:	f083 0301 	eor.w	r3, r3, #1
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00f      	beq.n	800c14e <mg_tcpip_poll+0x11e>
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c134:	2b01      	cmp	r3, #1
 800c136:	d10a      	bne.n	800c14e <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d006      	beq.n	800c14e <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2203      	movs	r2, #3
 800c144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800c148:	6978      	ldr	r0, [r7, #20]
 800c14a:	f7fd fccf 	bl	8009aec <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10d      	bne.n	800c174 <mg_tcpip_poll+0x144>
 800c158:	4ba2      	ldr	r3, [pc, #648]	@ (800c3e4 <mg_tcpip_poll+0x3b4>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	dd09      	ble.n	800c174 <mg_tcpip_poll+0x144>
 800c160:	4ba1      	ldr	r3, [pc, #644]	@ (800c3e8 <mg_tcpip_poll+0x3b8>)
 800c162:	f241 329e 	movw	r2, #5022	@ 0x139e
 800c166:	49a1      	ldr	r1, [pc, #644]	@ (800c3ec <mg_tcpip_poll+0x3bc>)
 800c168:	2001      	movs	r0, #1
 800c16a:	f7fd f81f 	bl	80091ac <mg_log_prefix>
 800c16e:	48a0      	ldr	r0, [pc, #640]	@ (800c3f0 <mg_tcpip_poll+0x3c0>)
 800c170:	f7fd f86c 	bl	800924c <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800c174:	2200      	movs	r2, #0
 800c176:	2104      	movs	r1, #4
 800c178:	6978      	ldr	r0, [r7, #20]
 800c17a:	f7fd fb4b 	bl	8009814 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 819e 	beq.w	800c4c6 <mg_tcpip_poll+0x496>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	7f1b      	ldrb	r3, [r3, #28]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d055      	beq.n	800c23e <mg_tcpip_poll+0x20e>
 800c192:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c196:	2b00      	cmp	r3, #0
 800c198:	d051      	beq.n	800c23e <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d103      	bne.n	800c1ac <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800c1a4:	6978      	ldr	r0, [r7, #20]
 800c1a6:	f7fd ffa5 	bl	800a0f4 <tx_dhcp_discover>
 800c1aa:	e048      	b.n	800c23e <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d143      	bne.n	800c23e <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	d03e      	beq.n	800c23e <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800c1cc:	4290      	cmp	r0, r2
 800c1ce:	eb71 0303 	sbcs.w	r3, r1, r3
 800c1d2:	d30a      	bcc.n	800c1ea <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800c1e2:	6978      	ldr	r0, [r7, #20]
 800c1e4:	f7fd fc82 	bl	8009aec <onstatechange>
 800c1e8:	e029      	b.n	800c23e <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c1f0:	4980      	ldr	r1, [pc, #512]	@ (800c3f4 <mg_tcpip_poll+0x3c4>)
 800c1f2:	1854      	adds	r4, r2, r1
 800c1f4:	f143 0500 	adc.w	r5, r3, #0
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800c1fe:	42a2      	cmp	r2, r4
 800c200:	41ab      	sbcs	r3, r5
 800c202:	d21c      	bcs.n	800c23e <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800c20a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c20e:	f04f 0300 	mov.w	r3, #0
 800c212:	f7f4 f87d 	bl	8000310 <__aeabi_uldivmod>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4610      	mov	r0, r2
 800c21c:	4619      	mov	r1, r3
 800c21e:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800c222:	f04f 0300 	mov.w	r3, #0
 800c226:	f7f4 f873 	bl	8000310 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800c22a:	4313      	orrs	r3, r2
 800c22c:	d107      	bne.n	800c23e <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	689a      	ldr	r2, [r3, #8]
 800c232:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c236:	4970      	ldr	r1, [pc, #448]	@ (800c3f8 <mg_tcpip_poll+0x3c8>)
 800c238:	6978      	ldr	r0, [r7, #20]
 800c23a:	f7fd ff29 	bl	800a090 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d019      	beq.n	800c27c <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	4798      	blx	r3
 800c25a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800c25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d024      	beq.n	800c2ac <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c272:	4619      	mov	r1, r3
 800c274:	6978      	ldr	r0, [r7, #20]
 800c276:	f7ff fdc7 	bl	800be08 <mg_tcpip_rx>
 800c27a:	e017      	b.n	800c2ac <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	3334      	adds	r3, #52	@ 0x34
 800c280:	f107 0220 	add.w	r2, r7, #32
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f001 f8b4 	bl	800d3f4 <mg_queue_next>
 800c28c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800c28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00b      	beq.n	800c2ac <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c298:	4619      	mov	r1, r3
 800c29a:	6978      	ldr	r0, [r7, #20]
 800c29c:	f7ff fdb4 	bl	800be08 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	3334      	adds	r3, #52	@ 0x34
 800c2a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f001 f922 	bl	800d4f0 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2b4:	e102      	b.n	800c4bc <mg_tcpip_poll+0x48c>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c2bc:	f003 0301 	and.w	r3, r3, #1
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d008      	beq.n	800c2d8 <mg_tcpip_poll+0x2a8>
 800c2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c2cc:	f003 0310 	and.w	r3, r3, #16
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f000 80ec 	beq.w	800c4b0 <mg_tcpip_poll+0x480>
 800c2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2da:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 80e3 	bne.w	800c4b0 <mg_tcpip_poll+0x480>
 800c2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f040 80da 	bne.w	800c4b0 <mg_tcpip_poll+0x480>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2fe:	33b0      	adds	r3, #176	@ 0xb0
 800c300:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c304:	331c      	adds	r3, #28
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800c310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c312:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800c316:	4290      	cmp	r0, r2
 800c318:	eb71 0303 	sbcs.w	r3, r1, r3
 800c31c:	f080 80cb 	bcs.w	800c4b6 <mg_tcpip_poll+0x486>
      if (s->ttype == MIP_TTYPE_ARP) {
 800c320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c322:	7f9b      	ldrb	r3, [r3, #30]
 800c324:	2b02      	cmp	r3, #2
 800c326:	d104      	bne.n	800c332 <mg_tcpip_poll+0x302>
        mg_error(c, "ARP timeout");
 800c328:	4934      	ldr	r1, [pc, #208]	@ (800c3fc <mg_tcpip_poll+0x3cc>)
 800c32a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c32c:	f7f7 fdc4 	bl	8003eb8 <mg_error>
 800c330:	e0b9      	b.n	800c4a6 <mg_tcpip_poll+0x476>
      } else if (c->is_udp) {
 800c332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c334:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f040 80b8 	bne.w	800c4b4 <mg_tcpip_poll+0x484>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c346:	7f9b      	ldrb	r3, [r3, #30]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d142      	bne.n	800c3d2 <mg_tcpip_poll+0x3a2>
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	691a      	ldr	r2, [r3, #16]
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d03c      	beq.n	800c3d2 <mg_tcpip_poll+0x3a2>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800c358:	4b22      	ldr	r3, [pc, #136]	@ (800c3e4 <mg_tcpip_poll+0x3b4>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	dd0f      	ble.n	800c380 <mg_tcpip_poll+0x350>
 800c360:	4b21      	ldr	r3, [pc, #132]	@ (800c3e8 <mg_tcpip_poll+0x3b8>)
 800c362:	f241 32d3 	movw	r2, #5075	@ 0x13d3
 800c366:	4921      	ldr	r1, [pc, #132]	@ (800c3ec <mg_tcpip_poll+0x3bc>)
 800c368:	2004      	movs	r0, #4
 800c36a:	f7fc ff1f 	bl	80091ac <mg_log_prefix>
 800c36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c370:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	4821      	ldr	r0, [pc, #132]	@ (800c400 <mg_tcpip_poll+0x3d0>)
 800c37c:	f7fc ff66 	bl	800924c <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c382:	f103 0618 	add.w	r6, r3, #24
 800c386:	69fb      	ldr	r3, [r7, #28]
 800c388:	613b      	str	r3, [r7, #16]
 800c38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c38c:	8b1c      	ldrh	r4, [r3, #24]
 800c38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c390:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f00f fac9 	bl	801b92e <mg_ntohl>
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f00f fac3 	bl	801b92e <mg_ntohl>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	9205      	str	r2, [sp, #20]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	9204      	str	r2, [sp, #16]
 800c3b2:	9303      	str	r3, [sp, #12]
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	9102      	str	r1, [sp, #8]
 800c3b8:	9501      	str	r5, [sp, #4]
 800c3ba:	9400      	str	r4, [sp, #0]
 800c3bc:	2310      	movs	r3, #16
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	6978      	ldr	r0, [r7, #20]
 800c3c4:	f7fe fcfa 	bl	800adbc <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ce:	611a      	str	r2, [r3, #16]
 800c3d0:	e069      	b.n	800c4a6 <mg_tcpip_poll+0x476>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	7f9b      	ldrb	r3, [r3, #30]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d116      	bne.n	800c408 <mg_tcpip_poll+0x3d8>
        mg_error(c, "Connection timeout");
 800c3da:	490a      	ldr	r1, [pc, #40]	@ (800c404 <mg_tcpip_poll+0x3d4>)
 800c3dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c3de:	f7f7 fd6b 	bl	8003eb8 <mg_error>
 800c3e2:	e060      	b.n	800c4a6 <mg_tcpip_poll+0x476>
 800c3e4:	20000254 	.word	0x20000254
 800c3e8:	0802292c 	.word	0x0802292c
 800c3ec:	0801f338 	.word	0x0801f338
 800c3f0:	080207cc 	.word	0x080207cc
 800c3f4:	001b7740 	.word	0x001b7740
 800c3f8:	080223bc 	.word	0x080223bc
 800c3fc:	080207dc 	.word	0x080207dc
 800c400:	080207e8 	.word	0x080207e8
 800c404:	080207f8 	.word	0x080207f8
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	7f9b      	ldrb	r3, [r3, #30]
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d107      	bne.n	800c420 <mg_tcpip_poll+0x3f0>
        c->is_closing = 1;
 800c410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c412:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c416:	f043 0320 	orr.w	r3, r3, #32
 800c41a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800c41e:	e04a      	b.n	800c4b6 <mg_tcpip_poll+0x486>
      } else {
        if (s->tmiss++ > 2) {
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	7fdb      	ldrb	r3, [r3, #31]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	b2d1      	uxtb	r1, r2
 800c428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c42a:	77d1      	strb	r1, [r2, #31]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d904      	bls.n	800c43a <mg_tcpip_poll+0x40a>
          mg_error(c, "keepalive");
 800c430:	4927      	ldr	r1, [pc, #156]	@ (800c4d0 <mg_tcpip_poll+0x4a0>)
 800c432:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c434:	f7f7 fd40 	bl	8003eb8 <mg_error>
 800c438:	e035      	b.n	800c4a6 <mg_tcpip_poll+0x476>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800c43a:	4b26      	ldr	r3, [pc, #152]	@ (800c4d4 <mg_tcpip_poll+0x4a4>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	dd0c      	ble.n	800c45c <mg_tcpip_poll+0x42c>
 800c442:	4b25      	ldr	r3, [pc, #148]	@ (800c4d8 <mg_tcpip_poll+0x4a8>)
 800c444:	f44f 529f 	mov.w	r2, #5088	@ 0x13e0
 800c448:	4924      	ldr	r1, [pc, #144]	@ (800c4dc <mg_tcpip_poll+0x4ac>)
 800c44a:	2004      	movs	r0, #4
 800c44c:	f7fc feae 	bl	80091ac <mg_log_prefix>
 800c450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c454:	4619      	mov	r1, r3
 800c456:	4822      	ldr	r0, [pc, #136]	@ (800c4e0 <mg_tcpip_poll+0x4b0>)
 800c458:	f7fc fef8 	bl	800924c <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45e:	f103 0618 	add.w	r6, r3, #24
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	613b      	str	r3, [r7, #16]
 800c466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c468:	8b1c      	ldrh	r4, [r3, #24]
 800c46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800c472:	3b01      	subs	r3, #1
 800c474:	4618      	mov	r0, r3
 800c476:	f00f fa5a 	bl	801b92e <mg_ntohl>
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	4618      	mov	r0, r3
 800c482:	f00f fa54 	bl	801b92e <mg_ntohl>
 800c486:	4603      	mov	r3, r0
 800c488:	2200      	movs	r2, #0
 800c48a:	9205      	str	r2, [sp, #20]
 800c48c:	2200      	movs	r2, #0
 800c48e:	9204      	str	r2, [sp, #16]
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	9102      	str	r1, [sp, #8]
 800c496:	9501      	str	r5, [sp, #4]
 800c498:	9400      	str	r4, [sp, #0]
 800c49a:	2310      	movs	r3, #16
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4631      	mov	r1, r6
 800c4a0:	6978      	ldr	r0, [r7, #20]
 800c4a2:	f7fe fc8b 	bl	800adbc <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c4aa:	f7fd fa3f 	bl	800992c <settmout>
 800c4ae:	e002      	b.n	800c4b6 <mg_tcpip_poll+0x486>
      continue;
 800c4b0:	bf00      	nop
 800c4b2:	e000      	b.n	800c4b6 <mg_tcpip_poll+0x486>
        continue;
 800c4b4:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f47f aef9 	bne.w	800c2b6 <mg_tcpip_poll+0x286>
 800c4c4:	e000      	b.n	800c4c8 <mg_tcpip_poll+0x498>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800c4c6:	bf00      	nop
    }
  }
}
 800c4c8:	373c      	adds	r7, #60	@ 0x3c
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0802080c 	.word	0x0802080c
 800c4d4:	20000254 	.word	0x20000254
 800c4d8:	0802292c 	.word	0x0802292c
 800c4dc:	0801f338 	.word	0x0801f338
 800c4e0:	08020818 	.word	0x08020818

0800c4e4 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3334      	adds	r3, #52	@ 0x34
 800c4f4:	f107 0114 	add.w	r1, r7, #20
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 ff22 	bl	800d344 <mg_queue_book>
 800c500:	4602      	mov	r2, r0
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	4293      	cmp	r3, r2
 800c506:	d811      	bhi.n	800c52c <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	68f9      	ldr	r1, [r7, #12]
 800c50e:	4618      	mov	r0, r3
 800c510:	f012 f9e5 	bl	801e8de <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	3334      	adds	r3, #52	@ 0x34
 800c518:	68b9      	ldr	r1, [r7, #8]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 ffb0 	bl	800d480 <mg_queue_add>
    ifp->nrecv++;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 800c52a:	e004      	b.n	800c536 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c536:	bf00      	nop
 800c538:	3718      	adds	r7, #24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d12d      	bne.n	800c5ae <mg_tcpip_init+0x6e>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	785b      	ldrb	r3, [r3, #1]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d129      	bne.n	800c5ae <mg_tcpip_init+0x6e>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	789b      	ldrb	r3, [r3, #2]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d125      	bne.n	800c5ae <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800c566:	2b00      	cmp	r3, #0
 800c568:	d121      	bne.n	800c5ae <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	791b      	ldrb	r3, [r3, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d11d      	bne.n	800c5ae <mg_tcpip_init+0x6e>
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	795b      	ldrb	r3, [r3, #5]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d119      	bne.n	800c5ae <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2202      	movs	r2, #2
 800c57e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	3301      	adds	r3, #1
 800c584:	2105      	movs	r1, #5
 800c586:	4618      	mov	r0, r3
 800c588:	f7f4 f858 	bl	800063c <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800c58c:	4b59      	ldr	r3, [pc, #356]	@ (800c6f4 <mg_tcpip_init+0x1b4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b01      	cmp	r3, #1
 800c592:	dd0c      	ble.n	800c5ae <mg_tcpip_init+0x6e>
 800c594:	4b58      	ldr	r3, [pc, #352]	@ (800c6f8 <mg_tcpip_init+0x1b8>)
 800c596:	f241 32ff 	movw	r2, #5119	@ 0x13ff
 800c59a:	4958      	ldr	r1, [pc, #352]	@ (800c6fc <mg_tcpip_init+0x1bc>)
 800c59c:	2002      	movs	r0, #2
 800c59e:	f7fc fe05 	bl	80091ac <mg_log_prefix>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4956      	ldr	r1, [pc, #344]	@ (800c700 <mg_tcpip_init+0x1c0>)
 800c5a8:	4856      	ldr	r0, [pc, #344]	@ (800c704 <mg_tcpip_init+0x1c4>)
 800c5aa:	f7fc fe4f 	bl	800924c <mg_log>
  }

  // Uf DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	3344      	adds	r3, #68	@ 0x44
 800c5bc:	2204      	movs	r2, #4
 800c5be:	4952      	ldr	r1, [pc, #328]	@ (800c708 <mg_tcpip_init+0x1c8>)
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f012 f98c 	bl	801e8de <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d019      	beq.n	800c60c <mg_tcpip_init+0xcc>
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6838      	ldr	r0, [r7, #0]
 800c5e0:	4798      	blx	r3
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f083 0301 	eor.w	r3, r3, #1
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00e      	beq.n	800c60c <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 800c5ee:	4b41      	ldr	r3, [pc, #260]	@ (800c6f4 <mg_tcpip_init+0x1b4>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	dd7a      	ble.n	800c6ec <mg_tcpip_init+0x1ac>
 800c5f6:	4b40      	ldr	r3, [pc, #256]	@ (800c6f8 <mg_tcpip_init+0x1b8>)
 800c5f8:	f241 4209 	movw	r2, #5129	@ 0x1409
 800c5fc:	493f      	ldr	r1, [pc, #252]	@ (800c6fc <mg_tcpip_init+0x1bc>)
 800c5fe:	2001      	movs	r0, #1
 800c600:	f7fc fdd4 	bl	80091ac <mg_log_prefix>
 800c604:	4841      	ldr	r0, [pc, #260]	@ (800c70c <mg_tcpip_init+0x1cc>)
 800c606:	f7fc fe21 	bl	800924c <mg_log>
 800c60a:	e06f      	b.n	800c6ec <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 800c60c:	f240 6304 	movw	r3, #1540	@ 0x604
 800c610:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	2001      	movs	r0, #1
 800c616:	f011 fd57 	bl	801e0c8 <calloc>
 800c61a:	4603      	mov	r3, r0
 800c61c:	461a      	mov	r2, r3
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	615a      	str	r2, [r3, #20]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c634:	689b      	ldr	r3, [r3, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <mg_tcpip_init+0xfe>
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	e001      	b.n	800c642 <mg_tcpip_init+0x102>
 800c63e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64a:	4619      	mov	r1, r3
 800c64c:	2001      	movs	r0, #1
 800c64e:	f011 fd3b 	bl	801e0c8 <calloc>
 800c652:	4603      	mov	r3, r0
 800c654:	461a      	mov	r2, r3
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800c65a:	f7f4 f839 	bl	80006d0 <mg_millis>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c67a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2238      	movs	r2, #56	@ 0x38
 800c682:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <mg_tcpip_init+0x152>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2201      	movs	r2, #1
 800c690:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	3352      	adds	r3, #82	@ 0x52
 800c696:	2206      	movs	r2, #6
 800c698:	21ff      	movs	r1, #255	@ 0xff
 800c69a:	4618      	mov	r0, r3
 800c69c:	f011 ffe9 	bl	801e672 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	3370      	adds	r3, #112	@ 0x70
 800c6a4:	2102      	movs	r1, #2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7f3 ffc8 	bl	800063c <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800c6b2:	4b17      	ldr	r3, [pc, #92]	@ (800c710 <mg_tcpip_init+0x1d0>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <mg_tcpip_init+0x18e>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10e      	bne.n	800c6ec <mg_tcpip_init+0x1ac>
 800c6ce:	4b09      	ldr	r3, [pc, #36]	@ (800c6f4 <mg_tcpip_init+0x1b4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	dd0a      	ble.n	800c6ec <mg_tcpip_init+0x1ac>
 800c6d6:	4b08      	ldr	r3, [pc, #32]	@ (800c6f8 <mg_tcpip_init+0x1b8>)
 800c6d8:	f241 421a 	movw	r2, #5146	@ 0x141a
 800c6dc:	4907      	ldr	r1, [pc, #28]	@ (800c6fc <mg_tcpip_init+0x1bc>)
 800c6de:	2001      	movs	r0, #1
 800c6e0:	f7fc fd64 	bl	80091ac <mg_log_prefix>
 800c6e4:	480b      	ldr	r0, [pc, #44]	@ (800c714 <mg_tcpip_init+0x1d4>)
 800c6e6:	f7fc fdb1 	bl	800924c <mg_log>
  }
}
 800c6ea:	e7ff      	b.n	800c6ec <mg_tcpip_init+0x1ac>
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20000254 	.word	0x20000254
 800c6f8:	0802293c 	.word	0x0802293c
 800c6fc:	0801f338 	.word	0x0801f338
 800c700:	0800d05d 	.word	0x0800d05d
 800c704:	08020828 	.word	0x08020828
 800c708:	0802084c 	.word	0x0802084c
 800c70c:	08020850 	.word	0x08020850
 800c710:	ffff8000 	.word	0xffff8000
 800c714:	08020288 	.word	0x08020288

0800c718 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800c718:	b5b0      	push	{r4, r5, r7, lr}
 800c71a:	b08c      	sub	sp, #48	@ 0x30
 800c71c:	af06      	add	r7, sp, #24
 800c71e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	33b0      	adds	r3, #176	@ 0xb0
 800c724:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	8b1b      	ldrh	r3, [r3, #24]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f00f f8e8 	bl	801b900 <mg_ntohs>
 800c730:	4603      	mov	r3, r0
 800c732:	4618      	mov	r0, r3
 800c734:	f00f f8fb 	bl	801b92e <mg_ntohl>
 800c738:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	331c      	adds	r3, #28
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f103 0418 	add.w	r4, r3, #24
 800c74e:	68fd      	ldr	r5, [r7, #12]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	8b1b      	ldrh	r3, [r3, #24]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800c758:	2100      	movs	r1, #0
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	2100      	movs	r1, #0
 800c75e:	9104      	str	r1, [sp, #16]
 800c760:	2100      	movs	r1, #0
 800c762:	9103      	str	r1, [sp, #12]
 800c764:	6939      	ldr	r1, [r7, #16]
 800c766:	9102      	str	r1, [sp, #8]
 800c768:	9201      	str	r2, [sp, #4]
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2302      	movs	r3, #2
 800c76e:	462a      	mov	r2, r5
 800c770:	4621      	mov	r1, r4
 800c772:	f7fe fb23 	bl	800adbc <tx_tcp>
         NULL, 0);
}
 800c776:	bf00      	nop
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bdb0      	pop	{r4, r5, r7, pc}

0800c77e <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 800c77e:	b580      	push	{r7, lr}
 800c780:	b082      	sub	sp, #8
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00c      	beq.n	800c7b0 <mac_resolved+0x32>
    c->is_connecting = 0;
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800c79c:	f023 0320 	bic.w	r3, r3, #32
 800c7a0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2104      	movs	r1, #4
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7f7 fb64 	bl	8003e76 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 800c7ae:	e006      	b.n	800c7be <mac_resolved+0x40>
    send_syn(c);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff ffb1 	bl	800c718 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 800c7b6:	2103      	movs	r1, #3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7fd f8b7 	bl	800992c <settmout>
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <mg_open_listener>:
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800c7d0:	6838      	ldr	r0, [r7, #0]
 800c7d2:	f00e ff9d 	bl	801b710 <mg_url_port>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f00f f891 	bl	801b900 <mg_ntohs>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	831a      	strh	r2, [r3, #24]
  return true;
 800c7e6:	2301      	movs	r3, #1
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <write_conn>:

static void write_conn(struct mg_connection *c) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c7fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c802:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800c804:	2b00      	cmp	r3, #0
 800c806:	d009      	beq.n	800c81c <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c810:	461a      	mov	r2, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f008 fbc2 	bl	8014f9c <mg_tls_send>
 800c818:	4603      	mov	r3, r0
 800c81a:	e008      	b.n	800c82e <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c824:	461a      	mov	r2, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7fe fd20 	bl	800b26c <mg_io_send>
 800c82c:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800c82e:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c836:	d104      	bne.n	800c842 <write_conn+0x52>
    mg_error(c, "tx err");
 800c838:	490c      	ldr	r1, [pc, #48]	@ (800c86c <write_conn+0x7c>)
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7f7 fb3c 	bl	8003eb8 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 800c840:	e010      	b.n	800c864 <write_conn+0x74>
  } else if (len > 0) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd0d      	ble.n	800c864 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3348      	adds	r3, #72	@ 0x48
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	2100      	movs	r1, #0
 800c850:	4618      	mov	r0, r3
 800c852:	f7fb fddd 	bl	8008410 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800c856:	f107 030c 	add.w	r3, r7, #12
 800c85a:	461a      	mov	r2, r3
 800c85c:	2108      	movs	r1, #8
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7f7 fb09 	bl	8003e76 <mg_call>
}
 800c864:	bf00      	nop
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	0802088c 	.word	0x0802088c

0800c870 <init_closure>:

static void init_closure(struct mg_connection *c) {
 800c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c874:	b08c      	sub	sp, #48	@ 0x30
 800c876:	af06      	add	r7, sp, #24
 800c878:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	33b0      	adds	r3, #176	@ 0xb0
 800c87e:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d13e      	bne.n	800c90e <init_closure+0x9e>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d136      	bne.n	800c90e <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c8a6:	f003 0320 	and.w	r3, r3, #32
 800c8aa:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d12e      	bne.n	800c90e <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	331c      	adds	r3, #28
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f103 0818 	add.w	r8, r3, #24
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	60bb      	str	r3, [r7, #8]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	8b1c      	ldrh	r4, [r3, #24]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f00f f82a 	bl	801b92e <mg_ntohl>
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f00f f824 	bl	801b92e <mg_ntohl>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	9205      	str	r2, [sp, #20]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	9204      	str	r2, [sp, #16]
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	6879      	ldr	r1, [r7, #4]
 800c8f4:	9102      	str	r1, [sp, #8]
 800c8f6:	9501      	str	r5, [sp, #4]
 800c8f8:	9400      	str	r4, [sp, #0]
 800c8fa:	2311      	movs	r3, #17
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	4641      	mov	r1, r8
 800c900:	4630      	mov	r0, r6
 800c902:	f7fe fa5b 	bl	800adbc <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 800c906:	2104      	movs	r1, #4
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7fd f80f 	bl	800992c <settmout>
  }
}
 800c90e:	bf00      	nop
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c918 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	33b0      	adds	r3, #176	@ 0xb0
 800c924:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3320      	adds	r3, #32
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fb fdbb 	bl	80084a6 <mg_iobuf_free>
  mg_close_conn(c);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7fc fdd9 	bl	80094e8 <mg_close_conn>
}
 800c936:	bf00      	nop
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <can_write>:

static bool can_write(struct mg_connection *c) {
 800c93e:	b480      	push	{r7}
 800c940:	b083      	sub	sp, #12
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c94c:	f003 0320 	and.w	r3, r3, #32
 800c950:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c952:	2b00      	cmp	r3, #0
 800c954:	d11d      	bne.n	800c992 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c95c:	f003 0308 	and.w	r3, r3, #8
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b00      	cmp	r3, #0
 800c964:	d115      	bne.n	800c992 <can_write+0x54>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d011      	beq.n	800c992 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c974:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c978:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d109      	bne.n	800c992 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c984:	f003 0310 	and.w	r3, r3, #16
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <can_write+0x54>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <can_write+0x56>
 800c992:	2300      	movs	r3, #0
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	b2db      	uxtb	r3, r3
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800c9a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	b091      	sub	sp, #68	@ 0x44
 800c9ae:	af06      	add	r7, sp, #24
 800c9b0:	60f8      	str	r0, [r7, #12]
 800c9b2:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800c9b4:	f7f3 fe8c 	bl	80006d0 <mg_millis>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c9c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c9ca:	4608      	mov	r0, r1
 800c9cc:	f004 facf 	bl	8010f6e <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 80d9 	beq.w	800cb8c <mg_mgr_poll+0x1e4>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80d3 	beq.w	800cb8c <mg_mgr_poll+0x1e4>
  mg_tcpip_poll(mgr->ifp, now);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800c9ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	f7ff fb1e 	bl	800c030 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9fa:	e0c2      	b.n	800cb82 <mg_mgr_poll+0x1da>
    tmp = c->next;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	33b0      	adds	r3, #176	@ 0xb0
 800ca06:	61fb      	str	r3, [r7, #28]
    mg_call(c, MG_EV_POLL, &now);
 800ca08:	f107 0310 	add.w	r3, r7, #16
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	2102      	movs	r1, #2
 800ca10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca12:	f7f7 fa30 	bl	8003e76 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 800ca16:	4b60      	ldr	r3, [pc, #384]	@ (800cb98 <mg_mgr_poll+0x1f0>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	dd55      	ble.n	800caca <mg_mgr_poll+0x122>
 800ca1e:	4b5f      	ldr	r3, [pc, #380]	@ (800cb9c <mg_mgr_poll+0x1f4>)
 800ca20:	f241 428c 	movw	r2, #5260	@ 0x148c
 800ca24:	495e      	ldr	r1, [pc, #376]	@ (800cba0 <mg_mgr_poll+0x1f8>)
 800ca26:	2004      	movs	r0, #4
 800ca28:	f7fc fbc0 	bl	80091ac <mg_log_prefix>
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ca38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <mg_mgr_poll+0xa0>
 800ca42:	f04f 0854 	mov.w	r8, #84	@ 0x54
 800ca46:	e001      	b.n	800ca4c <mg_mgr_poll+0xa4>
 800ca48:	f04f 0874 	mov.w	r8, #116	@ 0x74
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ca52:	f003 0320 	and.w	r3, r3, #32
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <mg_mgr_poll+0xba>
 800ca5c:	f04f 0943 	mov.w	r9, #67	@ 0x43
 800ca60:	e001      	b.n	800ca66 <mg_mgr_poll+0xbe>
 800ca62:	f04f 0963 	mov.w	r9, #99	@ 0x63
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ca6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <mg_mgr_poll+0xd2>
 800ca76:	2448      	movs	r4, #72	@ 0x48
 800ca78:	e000      	b.n	800ca7c <mg_mgr_poll+0xd4>
 800ca7a:	2468      	movs	r4, #104	@ 0x68
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ca82:	f003 0308 	and.w	r3, r3, #8
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <mg_mgr_poll+0xe8>
 800ca8c:	2552      	movs	r5, #82	@ 0x52
 800ca8e:	e000      	b.n	800ca92 <mg_mgr_poll+0xea>
 800ca90:	2572      	movs	r5, #114	@ 0x72
 800ca92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca94:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ca98:	f003 0320 	and.w	r3, r3, #32
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <mg_mgr_poll+0xfe>
 800caa2:	2643      	movs	r6, #67	@ 0x43
 800caa4:	e000      	b.n	800caa8 <mg_mgr_poll+0x100>
 800caa6:	2663      	movs	r6, #99	@ 0x63
 800caa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caaa:	f008 fb6f 	bl	801518c <mg_tls_pending>
 800caae:	4602      	mov	r2, r0
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	9203      	str	r2, [sp, #12]
 800cab8:	9602      	str	r6, [sp, #8]
 800caba:	9501      	str	r5, [sp, #4]
 800cabc:	9400      	str	r4, [sp, #0]
 800cabe:	464b      	mov	r3, r9
 800cac0:	4642      	mov	r2, r8
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4837      	ldr	r0, [pc, #220]	@ (800cba4 <mg_mgr_poll+0x1fc>)
 800cac6:	f7fc fbc1 	bl	800924c <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (c->is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00c      	beq.n	800caf4 <mg_mgr_poll+0x14c>
 800cada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cadc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d105      	bne.n	800caee <mg_mgr_poll+0x146>
 800cae2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cae4:	f008 fb52 	bl	801518c <mg_tls_pending>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <mg_mgr_poll+0x14c>
      handle_tls_recv(c);
 800caee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caf0:	f7fe fc34 	bl	800b35c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 800caf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800caf6:	f7ff ff22 	bl	800c93e <can_write>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <mg_mgr_poll+0x15e>
 800cb00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb02:	f7ff fe75 	bl	800c7f0 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cb0c:	f003 0310 	and.w	r3, r3, #16
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00a      	beq.n	800cb2c <mg_mgr_poll+0x184>
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d106      	bne.n	800cb2c <mg_mgr_poll+0x184>
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	7f9b      	ldrb	r3, [r3, #30]
 800cb22:	2b04      	cmp	r3, #4
 800cb24:	d002      	beq.n	800cb2c <mg_mgr_poll+0x184>
      init_closure(c);
 800cb26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb28:	f7ff fea2 	bl	800c870 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d018      	beq.n	800cb68 <mg_mgr_poll+0x1c0>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 800cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb40:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d009      	beq.n	800cb5a <mg_mgr_poll+0x1b2>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10c      	bne.n	800cb68 <mg_mgr_poll+0x1c0>
 800cb4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb50:	f008 fb1c 	bl	801518c <mg_tls_pending>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <mg_mgr_poll+0x1c0>
      c->is_closing = 1;
 800cb5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb5c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800cb60:	f043 0320 	orr.w	r3, r3, #32
 800cb64:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 800cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cb6e:	f003 0320 	and.w	r3, r3, #32
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <mg_mgr_poll+0x1d6>
 800cb78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb7a:	f7ff fecd 	bl	800c918 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f47f af39 	bne.w	800c9fc <mg_mgr_poll+0x54>
 800cb8a:	e000      	b.n	800cb8e <mg_mgr_poll+0x1e6>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 800cb8c:	bf00      	nop
  }
  (void) ms;
}
 800cb8e:	372c      	adds	r7, #44	@ 0x2c
 800cb90:	46bd      	mov	sp, r7
 800cb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb96:	bf00      	nop
 800cb98:	20000254 	.word	0x20000254
 800cb9c:	0802294c 	.word	0x0802294c
 800cba0:	0801f338 	.word	0x0801f338
 800cba4:	08020894 	.word	0x08020894

0800cba8 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800cba8:	b5b0      	push	{r4, r5, r7, lr}
 800cbaa:	b08c      	sub	sp, #48	@ 0x30
 800cbac:	af04      	add	r7, sp, #16
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbba:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	331c      	adds	r3, #28
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <mg_send+0x32>
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d004      	beq.n	800cbe4 <mg_send+0x3c>
    mg_error(c, "net down");
 800cbda:	4934      	ldr	r1, [pc, #208]	@ (800ccac <mg_send+0x104>)
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7f7 f96b 	bl	8003eb8 <mg_error>
 800cbe2:	e05e      	b.n	800cca2 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cbea:	f003 0301 	and.w	r3, r3, #1
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d01e      	beq.n	800cc32 <mg_send+0x8a>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cbfa:	f003 0310 	and.w	r3, r3, #16
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d107      	bne.n	800cc14 <mg_send+0x6c>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc0a:	f003 0308 	and.w	r3, r3, #8
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00e      	beq.n	800cc32 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 800cc14:	4b26      	ldr	r3, [pc, #152]	@ (800ccb0 <mg_send+0x108>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	dd42      	ble.n	800cca2 <mg_send+0xfa>
 800cc1c:	4b25      	ldr	r3, [pc, #148]	@ (800ccb4 <mg_send+0x10c>)
 800cc1e:	f241 42a9 	movw	r2, #5289	@ 0x14a9
 800cc22:	4925      	ldr	r1, [pc, #148]	@ (800ccb8 <mg_send+0x110>)
 800cc24:	2004      	movs	r0, #4
 800cc26:	f7fc fac1 	bl	80091ac <mg_log_prefix>
 800cc2a:	4824      	ldr	r0, [pc, #144]	@ (800ccbc <mg_send+0x114>)
 800cc2c:	f7fc fb0e 	bl	800924c <mg_log>
 800cc30:	e037      	b.n	800cca2 <mg_send+0xfa>
  } else if (c->is_udp) {
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d020      	beq.n	800cc84 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	33b0      	adds	r3, #176	@ 0xb0
 800cc46:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7fe fa80 	bl	800b150 <trim_len>
 800cc50:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f103 0018 	add.w	r0, r3, #24
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	689c      	ldr	r4, [r3, #8]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	8b1d      	ldrh	r5, [r3, #24]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	9103      	str	r1, [sp, #12]
 800cc6a:	68b9      	ldr	r1, [r7, #8]
 800cc6c:	9102      	str	r1, [sp, #8]
 800cc6e:	9201      	str	r2, [sp, #4]
 800cc70:	9300      	str	r3, [sp, #0]
 800cc72:	462b      	mov	r3, r5
 800cc74:	4622      	mov	r2, r4
 800cc76:	4601      	mov	r1, r0
 800cc78:	69b8      	ldr	r0, [r7, #24]
 800cc7a:	f7fd f838 	bl	8009cee <tx_udp>
    res = true;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	77fb      	strb	r3, [r7, #31]
 800cc82:	e00e      	b.n	800cca2 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	f7fb fb6b 	bl	800836c <mg_iobuf_add>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	bf14      	ite	ne
 800cc9c:	2301      	movne	r3, #1
 800cc9e:	2300      	moveq	r3, #0
 800cca0:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800cca2:	7ffb      	ldrb	r3, [r7, #31]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ccac:	080208b0 	.word	0x080208b0
 800ccb0:	20000254 	.word	0x20000254
 800ccb4:	08022958 	.word	0x08022958
 800ccb8:	0801f338 	.word	0x0801f338
 800ccbc:	080208bc 	.word	0x080208bc

0800ccc0 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
 800cccc:	4613      	mov	r3, r2
 800ccce:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 800ccd4:	79bb      	ldrb	r3, [r7, #6]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00d      	beq.n	800ccf6 <mg_pfn_iobuf_private+0x36>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	1c9a      	adds	r2, r3, #2
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d906      	bls.n	800ccf6 <mg_pfn_iobuf_private+0x36>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	3302      	adds	r3, #2
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7fb faaf 	bl	8008254 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	1c9a      	adds	r2, r3, #2
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d811      	bhi.n	800cd28 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	1c58      	adds	r0, r3, #1
 800cd0e:	68f9      	ldr	r1, [r7, #12]
 800cd10:	6088      	str	r0, [r1, #8]
 800cd12:	4413      	add	r3, r2
 800cd14:	79fa      	ldrb	r2, [r7, #7]
 800cd16:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	4413      	add	r3, r2
 800cd22:	2200      	movs	r2, #0
 800cd24:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 800cd26:	e00f      	b.n	800cd48 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d209      	bcs.n	800cd48 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	1c58      	adds	r0, r3, #1
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	6088      	str	r0, [r1, #8]
 800cd42:	4413      	add	r3, r2
 800cd44:	2200      	movs	r2, #0
 800cd46:	701a      	strb	r2, [r3, #0]
}
 800cd48:	bf00      	nop
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	6039      	str	r1, [r7, #0]
 800cd5a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff ffac 	bl	800ccc0 <mg_pfn_iobuf_private>
}
 800cd68:	bf00      	nop
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7ff ff9c 	bl	800ccc0 <mg_pfn_iobuf_private>
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08a      	sub	sp, #40	@ 0x28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	61bb      	str	r3, [r7, #24]
 800cda6:	2300      	movs	r3, #0
 800cda8:	61fb      	str	r3, [r7, #28]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 800cdae:	f107 0114 	add.w	r1, r7, #20
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	4809      	ldr	r0, [pc, #36]	@ (800cddc <mg_vsnprintf+0x4c>)
 800cdb8:	f7f7 fd52 	bl	8004860 <mg_vxprintf>
 800cdbc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 800cdbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d204      	bcs.n	800cdd0 <mg_vsnprintf+0x40>
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdca:	4413      	add	r3, r2
 800cdcc:	2200      	movs	r2, #0
 800cdce:	701a      	strb	r2, [r3, #0]
  return n;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3728      	adds	r7, #40	@ 0x28
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	0800cd51 	.word	0x0800cd51

0800cde0 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 800cde0:	b40c      	push	{r2, r3}
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 800cdec:	f107 031c 	add.w	r3, r7, #28
 800cdf0:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 800cdf2:	f107 0308 	add.w	r3, r7, #8
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff ffc8 	bl	800cd90 <mg_vsnprintf>
 800ce00:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 800ce02:	68fb      	ldr	r3, [r7, #12]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce0e:	b002      	add	sp, #8
 800ce10:	4770      	bx	lr
	...

0800ce14 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60bb      	str	r3, [r7, #8]
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	2300      	movs	r3, #0
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce2e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 800ce30:	f107 0108 	add.w	r1, r7, #8
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	4803      	ldr	r0, [pc, #12]	@ (800ce48 <mg_vmprintf+0x34>)
 800ce3a:	f7f7 fd11 	bl	8004860 <mg_vxprintf>
  return (char *) io.buf;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0800cd71 	.word	0x0800cd71

0800ce4c <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 800ce4c:	b40f      	push	{r0, r1, r2, r3}
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 800ce54:	f107 0314 	add.w	r3, r7, #20
 800ce58:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 800ce5a:	463b      	mov	r3, r7
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6938      	ldr	r0, [r7, #16]
 800ce60:	f7ff ffd8 	bl	800ce14 <mg_vmprintf>
 800ce64:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 800ce66:	687b      	ldr	r3, [r7, #4]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce72:	b004      	add	sp, #16
 800ce74:	4770      	bx	lr

0800ce76 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	6039      	str	r1, [r7, #0]
 800ce80:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 800ce82:	79fb      	ldrb	r3, [r7, #7]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f011 fb7f 	bl	801e588 <putchar>
  (void) param;
}
 800ce8a:	bf00      	nop
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b088      	sub	sp, #32
 800ce98:	af04      	add	r7, sp, #16
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	4618      	mov	r0, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3303      	adds	r3, #3
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	9302      	str	r3, [sp, #8]
 800cebe:	9101      	str	r1, [sp, #4]
 800cec0:	9200      	str	r2, [sp, #0]
 800cec2:	4603      	mov	r3, r0
 800cec4:	4a04      	ldr	r2, [pc, #16]	@ (800ced8 <print_ip4+0x44>)
 800cec6:	68b9      	ldr	r1, [r7, #8]
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7f7 fcae 	bl	800482a <mg_xprintf>
 800cece:	4603      	mov	r3, r0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	080209c8 	.word	0x080209c8

0800cedc <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 800cedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee0:	b08e      	sub	sp, #56	@ 0x38
 800cee2:	af08      	add	r7, sp, #32
 800cee4:	6178      	str	r0, [r7, #20]
 800cee6:	6139      	str	r1, [r7, #16]
 800cee8:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f00e fd06 	bl	801b900 <mg_ntohs>
 800cef4:	4603      	mov	r3, r0
 800cef6:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3302      	adds	r3, #2
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f00e fcfe 	bl	801b900 <mg_ntohs>
 800cf04:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf06:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3304      	adds	r3, #4
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f00e fcf6 	bl	801b900 <mg_ntohs>
 800cf14:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf16:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3306      	adds	r3, #6
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f00e fcee 	bl	801b900 <mg_ntohs>
 800cf24:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf26:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	881b      	ldrh	r3, [r3, #0]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f00e fce6 	bl	801b900 <mg_ntohs>
 800cf34:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf36:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	330a      	adds	r3, #10
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f00e fcde 	bl	801b900 <mg_ntohs>
 800cf44:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf46:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	330c      	adds	r3, #12
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f00e fcd6 	bl	801b900 <mg_ntohs>
 800cf54:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf56:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	330e      	adds	r3, #14
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f00e fcce 	bl	801b900 <mg_ntohs>
 800cf64:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 800cf66:	9306      	str	r3, [sp, #24]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	9205      	str	r2, [sp, #20]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	9204      	str	r2, [sp, #16]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	9303      	str	r3, [sp, #12]
 800cf74:	9602      	str	r6, [sp, #8]
 800cf76:	9501      	str	r5, [sp, #4]
 800cf78:	9400      	str	r4, [sp, #0]
 800cf7a:	4643      	mov	r3, r8
 800cf7c:	4a05      	ldr	r2, [pc, #20]	@ (800cf94 <print_ip6+0xb8>)
 800cf7e:	6939      	ldr	r1, [r7, #16]
 800cf80:	6978      	ldr	r0, [r7, #20]
 800cf82:	f7f7 fc52 	bl	800482a <mg_xprintf>
 800cf86:	4603      	mov	r3, r0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf92:	bf00      	nop
 800cf94:	080209d4 	.word	0x080209d4

0800cf98 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	1d19      	adds	r1, r3, #4
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	6011      	str	r1, [r2, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	68b9      	ldr	r1, [r7, #8]
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f7ff ff6c 	bl	800ce94 <print_ip4>
 800cfbc:	4603      	mov	r3, r0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b086      	sub	sp, #24
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	1d19      	adds	r1, r3, #4
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6011      	str	r1, [r2, #0]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	7cdb      	ldrb	r3, [r3, #19]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d007      	beq.n	800cff8 <mg_print_ip+0x32>
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	461a      	mov	r2, r3
 800cfec:	68b9      	ldr	r1, [r7, #8]
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f7ff ff74 	bl	800cedc <print_ip6>
 800cff4:	4603      	mov	r3, r0
 800cff6:	e006      	b.n	800d006 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	461a      	mov	r2, r3
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff ff48 	bl	800ce94 <print_ip4>
 800d004:	4603      	mov	r3, r0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af02      	add	r7, sp, #8
 800d016:	60f8      	str	r0, [r7, #12]
 800d018:	60b9      	str	r1, [r7, #8]
 800d01a:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	1d19      	adds	r1, r3, #4
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6011      	str	r1, [r2, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	8a1b      	ldrh	r3, [r3, #16]
 800d02e:	4618      	mov	r0, r3
 800d030:	f00e fc66 	bl	801b900 <mg_ntohs>
 800d034:	4603      	mov	r3, r0
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	4b05      	ldr	r3, [pc, #20]	@ (800d054 <mg_print_ip_port+0x44>)
 800d03e:	4a06      	ldr	r2, [pc, #24]	@ (800d058 <mg_print_ip_port+0x48>)
 800d040:	68b9      	ldr	r1, [r7, #8]
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f7f7 fbf1 	bl	800482a <mg_xprintf>
 800d048:	4603      	mov	r3, r0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	0800cfc7 	.word	0x0800cfc7
 800d058:	080209f0 	.word	0x080209f0

0800d05c <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 800d05c:	b5b0      	push	{r4, r5, r7, lr}
 800d05e:	b08c      	sub	sp, #48	@ 0x30
 800d060:	af06      	add	r7, sp, #24
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	1d19      	adds	r1, r3, #4
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	6011      	str	r1, [r2, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	461d      	mov	r5, r3
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	3301      	adds	r3, #1
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	461a      	mov	r2, r3
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	3302      	adds	r3, #2
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	3303      	adds	r3, #3
 800d090:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d092:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	3304      	adds	r3, #4
 800d098:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d09a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	3305      	adds	r3, #5
 800d0a0:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	9403      	str	r4, [sp, #12]
 800d0a6:	9002      	str	r0, [sp, #8]
 800d0a8:	9101      	str	r1, [sp, #4]
 800d0aa:	9200      	str	r2, [sp, #0]
 800d0ac:	462b      	mov	r3, r5
 800d0ae:	4a05      	ldr	r2, [pc, #20]	@ (800d0c4 <mg_print_mac+0x68>)
 800d0b0:	68b9      	ldr	r1, [r7, #8]
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7f7 fbb9 	bl	800482a <mg_xprintf>
 800d0b8:	4603      	mov	r3, r0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	080209f8 	.word	0x080209f8

0800d0c8 <mg_esc>:

static char mg_esc(int c, bool esc) {
 800d0c8:	b480      	push	{r7}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 800d0d4:	4b19      	ldr	r3, [pc, #100]	@ (800d13c <mg_esc+0x74>)
 800d0d6:	613b      	str	r3, [r7, #16]
 800d0d8:	4b19      	ldr	r3, [pc, #100]	@ (800d140 <mg_esc+0x78>)
 800d0da:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <mg_esc+0x1e>
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	e000      	b.n	800d0e8 <mg_esc+0x20>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	617b      	str	r3, [r7, #20]
 800d0ea:	e01b      	b.n	800d124 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d112      	bne.n	800d11e <mg_esc+0x56>
 800d0f8:	78fb      	ldrb	r3, [r7, #3]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d007      	beq.n	800d10e <mg_esc+0x46>
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	461a      	mov	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	e00f      	b.n	800d12e <mg_esc+0x66>
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	461a      	mov	r2, r3
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	4413      	add	r3, r2
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	e007      	b.n	800d12e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3301      	adds	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1df      	bne.n	800d0ec <mg_esc+0x24>
  }
  return 0;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	371c      	adds	r7, #28
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	08020178 	.word	0x08020178
 800d140:	08020180 	.word	0x08020180

0800d144 <mg_escape>:

static char mg_escape(int c) {
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800d14c:	2101      	movs	r1, #1
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff ffba 	bl	800d0c8 <mg_esc>
 800d154:	4603      	mov	r3, r0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800d15e:	b580      	push	{r7, lr}
 800d160:	b088      	sub	sp, #32
 800d162:	af00      	add	r7, sp, #0
 800d164:	60f8      	str	r0, [r7, #12]
 800d166:	60b9      	str	r1, [r7, #8]
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	61fb      	str	r3, [r7, #28]
 800d170:	2300      	movs	r3, #0
 800d172:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800d174:	2300      	movs	r3, #0
 800d176:	61fb      	str	r3, [r7, #28]
 800d178:	e023      	b.n	800d1c2 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	4413      	add	r3, r2
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff ffde 	bl	800d144 <mg_escape>
 800d188:	4603      	mov	r3, r0
 800d18a:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00c      	beq.n	800d1ac <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	205c      	movs	r0, #92	@ 0x5c
 800d198:	4798      	blx	r3
 800d19a:	7dfa      	ldrb	r2, [r7, #23]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	4798      	blx	r3
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	61bb      	str	r3, [r7, #24]
 800d1aa:	e007      	b.n	800d1bc <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	69fb      	ldr	r3, [r7, #28]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	781a      	ldrb	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	61fb      	str	r3, [r7, #28]
 800d1c2:	69fa      	ldr	r2, [r7, #28]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d205      	bcs.n	800d1d6 <qcpy+0x78>
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1d1      	bne.n	800d17a <qcpy+0x1c>
    }
  }
  return i + extra;
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	4413      	add	r3, r2
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3720      	adds	r7, #32
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	1d19      	adds	r1, r3, #4
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	6011      	str	r1, [r2, #0]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	1d19      	adds	r1, r3, #4
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	6011      	str	r1, [r2, #0]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 800d20c:	4b16      	ldr	r3, [pc, #88]	@ (800d268 <mg_print_hex+0x84>)
 800d20e:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 800d210:	2300      	movs	r3, #0
 800d212:	61fb      	str	r3, [r7, #28]
 800d214:	e01e      	b.n	800d254 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 800d216:	697a      	ldr	r2, [r7, #20]
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	4413      	add	r3, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	091b      	lsrs	r3, r3, #4
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 030f 	and.w	r3, r3, #15
 800d226:	693a      	ldr	r2, [r7, #16]
 800d228:	4413      	add	r3, r2
 800d22a:	781a      	ldrb	r2, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	4610      	mov	r0, r2
 800d232:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	4413      	add	r3, r2
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	f003 030f 	and.w	r3, r3, #15
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	781a      	ldrb	r2, [r3, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	4610      	mov	r0, r2
 800d24c:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	3301      	adds	r3, #1
 800d252:	61fb      	str	r3, [r7, #28]
 800d254:	69fa      	ldr	r2, [r7, #28]
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d3dc      	bcc.n	800d216 <mg_print_hex+0x32>
  }
  return 2 * bl;
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	005b      	lsls	r3, r3, #1
}
 800d260:	4618      	mov	r0, r3
 800d262:	3720      	adds	r7, #32
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	0801f5b4 	.word	0x0801f5b4

0800d26c <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	1d19      	adds	r1, r3, #4
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	1d19      	adds	r1, r3, #4
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6011      	str	r1, [r2, #0]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d109      	bne.n	800d2ae <mg_print_esc+0x42>
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d004      	beq.n	800d2aa <mg_print_esc+0x3e>
 800d2a0:	6938      	ldr	r0, [r7, #16]
 800d2a2:	f7f3 f82d 	bl	8000300 <strlen>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	e000      	b.n	800d2ac <mg_print_esc+0x40>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	68b9      	ldr	r1, [r7, #8]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff ff52 	bl	800d15e <qcpy>
 800d2ba:	4603      	mov	r3, r0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 800d2d0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	4413      	add	r3, r2
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689a      	ldr	r2, [r3, #8]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	1d1a      	adds	r2, r3, #4
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d906      	bls.n	800d302 <mg_queue_read_len+0x3e>
 800d2f4:	4b05      	ldr	r3, [pc, #20]	@ (800d30c <mg_queue_read_len+0x48>)
 800d2f6:	4a06      	ldr	r2, [pc, #24]	@ (800d310 <mg_queue_read_len+0x4c>)
 800d2f8:	f641 418c 	movw	r1, #7308	@ 0x1c8c
 800d2fc:	4805      	ldr	r0, [pc, #20]	@ (800d314 <mg_queue_read_len+0x50>)
 800d2fe:	f010 fec1 	bl	801e084 <__assert_func>
  return n;
 800d302:	68fb      	ldr	r3, [r7, #12]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	08020a5c 	.word	0x08020a5c
 800d310:	08022960 	.word	0x08022960
 800d314:	0801f338 	.word	0x0801f338

0800d318 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 800d334:	f3bf 8f5b 	dmb	ish
}
 800d338:	bf00      	nop
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
 800d354:	2308      	movs	r3, #8
 800d356:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	429a      	cmp	r2, r3
 800d362:	d312      	bcc.n	800d38a <mg_queue_book+0x46>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	441a      	add	r2, r3
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	441a      	add	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d808      	bhi.n	800d38a <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	1ad2      	subs	r2, r2, r3
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	e011      	b.n	800d3ae <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	68da      	ldr	r2, [r3, #12]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	429a      	cmp	r2, r3
 800d394:	d30b      	bcc.n	800d3ae <mg_queue_book+0x6a>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d206      	bcs.n	800d3ae <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f7ff ffb8 	bl	800d318 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	441a      	add	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d207      	bcs.n	800d3d2 <mg_queue_book+0x8e>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	689a      	ldr	r2, [r3, #8]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	1ad2      	subs	r2, r2, r3
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	1ad3      	subs	r3, r2, r3
 800d3d0:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <mg_queue_book+0xa4>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	441a      	add	r2, r3
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	601a      	str	r2, [r3, #0]
  return space;
 800d3e8:	697b      	ldr	r3, [r7, #20]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
	...

0800d3f4 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	689a      	ldr	r2, [r3, #8]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d013      	beq.n	800d436 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f7ff ff58 	bl	800d2c4 <mg_queue_read_len>
 800d414:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10c      	bne.n	800d436 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68da      	ldr	r2, [r3, #12]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d903      	bls.n	800d436 <mg_queue_next+0x42>
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff ff48 	bl	800d2c4 <mg_queue_read_len>
 800d434:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d007      	beq.n	800d44c <mg_queue_next+0x58>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	3304      	adds	r3, #4
 800d446:	441a      	add	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689a      	ldr	r2, [r3, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	441a      	add	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d906      	bls.n	800d46a <mg_queue_next+0x76>
 800d45c:	4b05      	ldr	r3, [pc, #20]	@ (800d474 <mg_queue_next+0x80>)
 800d45e:	4a06      	ldr	r2, [pc, #24]	@ (800d478 <mg_queue_next+0x84>)
 800d460:	f641 41ad 	movw	r1, #7341	@ 0x1cad
 800d464:	4805      	ldr	r0, [pc, #20]	@ (800d47c <mg_queue_next+0x88>)
 800d466:	f010 fe0d 	bl	801e084 <__assert_func>
  return len;
 800d46a:	68fb      	ldr	r3, [r7, #12]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	08020a80 	.word	0x08020a80
 800d478:	08022974 	.word	0x08022974
 800d47c:	0801f338 	.word	0x0801f338

0800d480 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d106      	bne.n	800d49e <mg_queue_add+0x1e>
 800d490:	4b13      	ldr	r3, [pc, #76]	@ (800d4e0 <mg_queue_add+0x60>)
 800d492:	4a14      	ldr	r2, [pc, #80]	@ (800d4e4 <mg_queue_add+0x64>)
 800d494:	f641 41b2 	movw	r1, #7346	@ 0x1cb2
 800d498:	4813      	ldr	r0, [pc, #76]	@ (800d4e8 <mg_queue_add+0x68>)
 800d49a:	f010 fdf3 	bl	801e084 <__assert_func>
  mg_queue_write_len(q, len);
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff ff39 	bl	800d318 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f103 0208 	add.w	r2, r3, #8
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d906      	bls.n	800d4c8 <mg_queue_add+0x48>
 800d4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ec <mg_queue_add+0x6c>)
 800d4bc:	4a09      	ldr	r2, [pc, #36]	@ (800d4e4 <mg_queue_add+0x64>)
 800d4be:	f641 41b4 	movw	r1, #7348	@ 0x1cb4
 800d4c2:	4809      	ldr	r0, [pc, #36]	@ (800d4e8 <mg_queue_add+0x68>)
 800d4c4:	f010 fdde 	bl	801e084 <__assert_func>
  q->head += len + sizeof(uint32_t);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	1d1a      	adds	r2, r3, #4
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60da      	str	r2, [r3, #12]
}
 800d4d6:	bf00      	nop
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	08020a9c 	.word	0x08020a9c
 800d4e4:	08022984 	.word	0x08022984
 800d4e8:	0801f338 	.word	0x0801f338
 800d4ec:	08020aa4 	.word	0x08020aa4

0800d4f0 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689a      	ldr	r2, [r3, #8]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	4413      	add	r3, r2
 800d502:	1d1a      	adds	r2, r3, #4
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	1d1a      	adds	r2, r3, #4
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	429a      	cmp	r2, r3
 800d514:	d906      	bls.n	800d524 <mg_queue_del+0x34>
 800d516:	4b05      	ldr	r3, [pc, #20]	@ (800d52c <mg_queue_del+0x3c>)
 800d518:	4a05      	ldr	r2, [pc, #20]	@ (800d530 <mg_queue_del+0x40>)
 800d51a:	f641 41ba 	movw	r1, #7354	@ 0x1cba
 800d51e:	4805      	ldr	r0, [pc, #20]	@ (800d534 <mg_queue_del+0x44>)
 800d520:	f010 fdb0 	bl	801e084 <__assert_func>
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	08020ad4 	.word	0x08020ad4
 800d530:	08022994 	.word	0x08022994
 800d534:	0801f338 	.word	0x0801f338

0800d538 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 800d542:	4b12      	ldr	r3, [pc, #72]	@ (800d58c <blk0+0x54>)
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	2bff      	cmp	r3, #255	@ 0xff
 800d548:	d915      	bls.n	800d576 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	683a      	ldr	r2, [r7, #0]
 800d54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d552:	ea4f 2333 	mov.w	r3, r3, ror #8
 800d556:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d562:	ea4f 6333 	mov.w	r3, r3, ror #24
 800d566:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 800d56a:	ea42 0103 	orr.w	r1, r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	080201c0 	.word	0x080201c0

0800d590 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 800d590:	b590      	push	{r4, r7, lr}
 800d592:	b099      	sub	sp, #100	@ 0x64
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	2240      	movs	r2, #64	@ 0x40
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f011 f99b 	bl	801e8de <memcpy>
  a = state[0];
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 800d5c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ca:	405a      	eors	r2, r3
 800d5cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5ce:	401a      	ands	r2, r3
 800d5d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5d2:	ea82 0403 	eor.w	r4, r2, r3
 800d5d6:	f107 030c 	add.w	r3, r7, #12
 800d5da:	2100      	movs	r1, #0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7ff ffab 	bl	800d538 <blk0>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	18e2      	adds	r2, r4, r3
 800d5e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5e8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d5ec:	441a      	add	r2, r3
 800d5ee:	4bbd      	ldr	r3, [pc, #756]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d5f0:	4413      	add	r3, r2
 800d5f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5f4:	4413      	add	r3, r2
 800d5f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5fa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d5fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 800d600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d604:	405a      	eors	r2, r3
 800d606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d608:	401a      	ands	r2, r3
 800d60a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d60c:	ea82 0403 	eor.w	r4, r2, r3
 800d610:	f107 030c 	add.w	r3, r7, #12
 800d614:	2101      	movs	r1, #1
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff ff8e 	bl	800d538 <blk0>
 800d61c:	4603      	mov	r3, r0
 800d61e:	18e2      	adds	r2, r4, r3
 800d620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d622:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d626:	441a      	add	r2, r3
 800d628:	4bae      	ldr	r3, [pc, #696]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d62a:	4413      	add	r3, r2
 800d62c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d62e:	4413      	add	r3, r2
 800d630:	653b      	str	r3, [r7, #80]	@ 0x50
 800d632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d634:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d638:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 800d63a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d63c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d63e:	405a      	eors	r2, r3
 800d640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d642:	401a      	ands	r2, r3
 800d644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d646:	ea82 0403 	eor.w	r4, r2, r3
 800d64a:	f107 030c 	add.w	r3, r7, #12
 800d64e:	2102      	movs	r1, #2
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff ff71 	bl	800d538 <blk0>
 800d656:	4603      	mov	r3, r0
 800d658:	18e2      	adds	r2, r4, r3
 800d65a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d65c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d660:	441a      	add	r2, r3
 800d662:	4ba0      	ldr	r3, [pc, #640]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d664:	4413      	add	r3, r2
 800d666:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d668:	4413      	add	r3, r2
 800d66a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d66c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d66e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 800d674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d678:	405a      	eors	r2, r3
 800d67a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d67c:	401a      	ands	r2, r3
 800d67e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d680:	ea82 0403 	eor.w	r4, r2, r3
 800d684:	f107 030c 	add.w	r3, r7, #12
 800d688:	2103      	movs	r1, #3
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7ff ff54 	bl	800d538 <blk0>
 800d690:	4603      	mov	r3, r0
 800d692:	18e2      	adds	r2, r4, r3
 800d694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d696:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d69a:	441a      	add	r2, r3
 800d69c:	4b91      	ldr	r3, [pc, #580]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d69e:	4413      	add	r3, r2
 800d6a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d6a2:	4413      	add	r3, r2
 800d6a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d6a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d6ac:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 800d6ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d6b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6b2:	405a      	eors	r2, r3
 800d6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b6:	401a      	ands	r2, r3
 800d6b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6ba:	ea82 0403 	eor.w	r4, r2, r3
 800d6be:	f107 030c 	add.w	r3, r7, #12
 800d6c2:	2104      	movs	r1, #4
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff ff37 	bl	800d538 <blk0>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	18e2      	adds	r2, r4, r3
 800d6ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6d0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d6d4:	441a      	add	r2, r3
 800d6d6:	4b83      	ldr	r3, [pc, #524]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d6d8:	4413      	add	r3, r2
 800d6da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d6dc:	4413      	add	r3, r2
 800d6de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6e2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d6e6:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 800d6e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d6ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ec:	405a      	eors	r2, r3
 800d6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d6f0:	401a      	ands	r2, r3
 800d6f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f4:	ea82 0403 	eor.w	r4, r2, r3
 800d6f8:	f107 030c 	add.w	r3, r7, #12
 800d6fc:	2105      	movs	r1, #5
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff ff1a 	bl	800d538 <blk0>
 800d704:	4603      	mov	r3, r0
 800d706:	18e2      	adds	r2, r4, r3
 800d708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d70a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d70e:	441a      	add	r2, r3
 800d710:	4b74      	ldr	r3, [pc, #464]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d712:	4413      	add	r3, r2
 800d714:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d716:	4413      	add	r3, r2
 800d718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d71a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d71c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d720:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 800d722:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d726:	405a      	eors	r2, r3
 800d728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d72a:	401a      	ands	r2, r3
 800d72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d72e:	ea82 0403 	eor.w	r4, r2, r3
 800d732:	f107 030c 	add.w	r3, r7, #12
 800d736:	2106      	movs	r1, #6
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fefd 	bl	800d538 <blk0>
 800d73e:	4603      	mov	r3, r0
 800d740:	18e2      	adds	r2, r4, r3
 800d742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d744:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d748:	441a      	add	r2, r3
 800d74a:	4b66      	ldr	r3, [pc, #408]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d74c:	4413      	add	r3, r2
 800d74e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d750:	4413      	add	r3, r2
 800d752:	653b      	str	r3, [r7, #80]	@ 0x50
 800d754:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d756:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d75a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 800d75c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d75e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d760:	405a      	eors	r2, r3
 800d762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d764:	401a      	ands	r2, r3
 800d766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d768:	ea82 0403 	eor.w	r4, r2, r3
 800d76c:	f107 030c 	add.w	r3, r7, #12
 800d770:	2107      	movs	r1, #7
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff fee0 	bl	800d538 <blk0>
 800d778:	4603      	mov	r3, r0
 800d77a:	18e2      	adds	r2, r4, r3
 800d77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d77e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d782:	441a      	add	r2, r3
 800d784:	4b57      	ldr	r3, [pc, #348]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d786:	4413      	add	r3, r2
 800d788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d78a:	4413      	add	r3, r2
 800d78c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d78e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d790:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d794:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 800d796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d79a:	405a      	eors	r2, r3
 800d79c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d79e:	401a      	ands	r2, r3
 800d7a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7a2:	ea82 0403 	eor.w	r4, r2, r3
 800d7a6:	f107 030c 	add.w	r3, r7, #12
 800d7aa:	2108      	movs	r1, #8
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff fec3 	bl	800d538 <blk0>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	18e2      	adds	r2, r4, r3
 800d7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d7bc:	441a      	add	r2, r3
 800d7be:	4b49      	ldr	r3, [pc, #292]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d7c0:	4413      	add	r3, r2
 800d7c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7c4:	4413      	add	r3, r2
 800d7c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d7ce:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 800d7d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d4:	405a      	eors	r2, r3
 800d7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d8:	401a      	ands	r2, r3
 800d7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7dc:	ea82 0403 	eor.w	r4, r2, r3
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	2109      	movs	r1, #9
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fea6 	bl	800d538 <blk0>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	18e2      	adds	r2, r4, r3
 800d7f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d7f6:	441a      	add	r2, r3
 800d7f8:	4b3a      	ldr	r3, [pc, #232]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d7fa:	4413      	add	r3, r2
 800d7fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d7fe:	4413      	add	r3, r2
 800d800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d804:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d808:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 800d80a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d80e:	405a      	eors	r2, r3
 800d810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d812:	401a      	ands	r2, r3
 800d814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d816:	ea82 0403 	eor.w	r4, r2, r3
 800d81a:	f107 030c 	add.w	r3, r7, #12
 800d81e:	210a      	movs	r1, #10
 800d820:	4618      	mov	r0, r3
 800d822:	f7ff fe89 	bl	800d538 <blk0>
 800d826:	4603      	mov	r3, r0
 800d828:	18e2      	adds	r2, r4, r3
 800d82a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d82c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d830:	441a      	add	r2, r3
 800d832:	4b2c      	ldr	r3, [pc, #176]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d834:	4413      	add	r3, r2
 800d836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d838:	4413      	add	r3, r2
 800d83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d83c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d83e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d842:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 800d844:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d848:	405a      	eors	r2, r3
 800d84a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d84c:	401a      	ands	r2, r3
 800d84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d850:	ea82 0403 	eor.w	r4, r2, r3
 800d854:	f107 030c 	add.w	r3, r7, #12
 800d858:	210b      	movs	r1, #11
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fe6c 	bl	800d538 <blk0>
 800d860:	4603      	mov	r3, r0
 800d862:	18e2      	adds	r2, r4, r3
 800d864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d866:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d86a:	441a      	add	r2, r3
 800d86c:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d86e:	4413      	add	r3, r2
 800d870:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d872:	4413      	add	r3, r2
 800d874:	653b      	str	r3, [r7, #80]	@ 0x50
 800d876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d878:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d87c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 800d87e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d882:	405a      	eors	r2, r3
 800d884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d886:	401a      	ands	r2, r3
 800d888:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d88a:	ea82 0403 	eor.w	r4, r2, r3
 800d88e:	f107 030c 	add.w	r3, r7, #12
 800d892:	210c      	movs	r1, #12
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fe4f 	bl	800d538 <blk0>
 800d89a:	4603      	mov	r3, r0
 800d89c:	18e2      	adds	r2, r4, r3
 800d89e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8a0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d8a4:	441a      	add	r2, r3
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e4 <mg_sha1_transform+0x354>)
 800d8a8:	4413      	add	r3, r2
 800d8aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8ac:	4413      	add	r3, r2
 800d8ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8b2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 800d8b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8bc:	405a      	eors	r2, r3
 800d8be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8c0:	401a      	ands	r2, r3
 800d8c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8c4:	ea82 0403 	eor.w	r4, r2, r3
 800d8c8:	f107 030c 	add.w	r3, r7, #12
 800d8cc:	210d      	movs	r1, #13
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7ff fe32 	bl	800d538 <blk0>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	18e2      	adds	r2, r4, r3
 800d8d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8da:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d8de:	441a      	add	r2, r3
 800d8e0:	e002      	b.n	800d8e8 <mg_sha1_transform+0x358>
 800d8e2:	bf00      	nop
 800d8e4:	5a827999 	.word	0x5a827999
 800d8e8:	4bac      	ldr	r3, [pc, #688]	@ (800db9c <mg_sha1_transform+0x60c>)
 800d8ea:	4413      	add	r3, r2
 800d8ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ee:	4413      	add	r3, r2
 800d8f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d8f8:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 800d8fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fe:	405a      	eors	r2, r3
 800d900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d902:	401a      	ands	r2, r3
 800d904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d906:	ea82 0403 	eor.w	r4, r2, r3
 800d90a:	f107 030c 	add.w	r3, r7, #12
 800d90e:	210e      	movs	r1, #14
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff fe11 	bl	800d538 <blk0>
 800d916:	4603      	mov	r3, r0
 800d918:	18e2      	adds	r2, r4, r3
 800d91a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d91c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d920:	441a      	add	r2, r3
 800d922:	4b9e      	ldr	r3, [pc, #632]	@ (800db9c <mg_sha1_transform+0x60c>)
 800d924:	4413      	add	r3, r2
 800d926:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d928:	4413      	add	r3, r2
 800d92a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d92e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d932:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 800d934:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d938:	405a      	eors	r2, r3
 800d93a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d93c:	401a      	ands	r2, r3
 800d93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d940:	ea82 0403 	eor.w	r4, r2, r3
 800d944:	f107 030c 	add.w	r3, r7, #12
 800d948:	210f      	movs	r1, #15
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff fdf4 	bl	800d538 <blk0>
 800d950:	4603      	mov	r3, r0
 800d952:	18e2      	adds	r2, r4, r3
 800d954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d956:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d95a:	441a      	add	r2, r3
 800d95c:	4b8f      	ldr	r3, [pc, #572]	@ (800db9c <mg_sha1_transform+0x60c>)
 800d95e:	4413      	add	r3, r2
 800d960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d962:	4413      	add	r3, r2
 800d964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d968:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d96c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 800d96e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d972:	405a      	eors	r2, r3
 800d974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d976:	401a      	ands	r2, r3
 800d978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d97a:	405a      	eors	r2, r3
 800d97c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d980:	4059      	eors	r1, r3
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	4059      	eors	r1, r3
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	404b      	eors	r3, r1
 800d98a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	441a      	add	r2, r3
 800d994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d996:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d99a:	441a      	add	r2, r3
 800d99c:	4b7f      	ldr	r3, [pc, #508]	@ (800db9c <mg_sha1_transform+0x60c>)
 800d99e:	4413      	add	r3, r2
 800d9a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9a2:	4413      	add	r3, r2
 800d9a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d9ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 800d9ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d9b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9b2:	405a      	eors	r2, r3
 800d9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9b6:	401a      	ands	r2, r3
 800d9b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9ba:	405a      	eors	r2, r3
 800d9bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	4059      	eors	r1, r3
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	4059      	eors	r1, r3
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	404b      	eors	r3, r1
 800d9ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800d9ce:	613b      	str	r3, [r7, #16]
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	441a      	add	r2, r3
 800d9d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800d9da:	441a      	add	r2, r3
 800d9dc:	4b6f      	ldr	r3, [pc, #444]	@ (800db9c <mg_sha1_transform+0x60c>)
 800d9de:	4413      	add	r3, r2
 800d9e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d9e2:	4413      	add	r3, r2
 800d9e4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800d9ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 800d9ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9f2:	405a      	eors	r2, r3
 800d9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f6:	401a      	ands	r2, r3
 800d9f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9fa:	405a      	eors	r2, r3
 800d9fc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da00:	4059      	eors	r1, r3
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	4059      	eors	r1, r3
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	404b      	eors	r3, r1
 800da0a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800da0e:	617b      	str	r3, [r7, #20]
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	441a      	add	r2, r3
 800da14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da16:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800da1a:	441a      	add	r2, r3
 800da1c:	4b5f      	ldr	r3, [pc, #380]	@ (800db9c <mg_sha1_transform+0x60c>)
 800da1e:	4413      	add	r3, r2
 800da20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da22:	4413      	add	r3, r2
 800da24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da28:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800da2c:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 800da2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da32:	405a      	eors	r2, r3
 800da34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da36:	401a      	ands	r2, r3
 800da38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3a:	405a      	eors	r2, r3
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da40:	4059      	eors	r1, r3
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	4059      	eors	r1, r3
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	404b      	eors	r3, r1
 800da4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800da4e:	61bb      	str	r3, [r7, #24]
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	441a      	add	r2, r3
 800da54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800da5a:	441a      	add	r2, r3
 800da5c:	4b4f      	ldr	r3, [pc, #316]	@ (800db9c <mg_sha1_transform+0x60c>)
 800da5e:	4413      	add	r3, r2
 800da60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800da62:	4413      	add	r3, r2
 800da64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800da6c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 800da6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da72:	405a      	eors	r2, r3
 800da74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da76:	405a      	eors	r2, r3
 800da78:	6939      	ldr	r1, [r7, #16]
 800da7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da7c:	4059      	eors	r1, r3
 800da7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da80:	4059      	eors	r1, r3
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	404b      	eors	r3, r1
 800da86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800da8a:	61fb      	str	r3, [r7, #28]
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	441a      	add	r2, r3
 800da90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800da96:	441a      	add	r2, r3
 800da98:	4b41      	ldr	r3, [pc, #260]	@ (800dba0 <mg_sha1_transform+0x610>)
 800da9a:	4413      	add	r3, r2
 800da9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da9e:	4413      	add	r3, r2
 800daa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daa4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800daa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 800daaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800daac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daae:	405a      	eors	r2, r3
 800dab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dab2:	405a      	eors	r2, r3
 800dab4:	6979      	ldr	r1, [r7, #20]
 800dab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dab8:	4059      	eors	r1, r3
 800daba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabc:	4059      	eors	r1, r3
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	404b      	eors	r3, r1
 800dac2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dac6:	623b      	str	r3, [r7, #32]
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	441a      	add	r2, r3
 800dacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dace:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dad2:	441a      	add	r2, r3
 800dad4:	4b32      	ldr	r3, [pc, #200]	@ (800dba0 <mg_sha1_transform+0x610>)
 800dad6:	4413      	add	r3, r2
 800dad8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dada:	4413      	add	r3, r2
 800dadc:	653b      	str	r3, [r7, #80]	@ 0x50
 800dade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dae0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 800dae6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800daea:	405a      	eors	r2, r3
 800daec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daee:	405a      	eors	r2, r3
 800daf0:	69b9      	ldr	r1, [r7, #24]
 800daf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daf4:	4059      	eors	r1, r3
 800daf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf8:	4059      	eors	r1, r3
 800dafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafc:	404b      	eors	r3, r1
 800dafe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800db02:	627b      	str	r3, [r7, #36]	@ 0x24
 800db04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db06:	441a      	add	r2, r3
 800db08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800db0e:	441a      	add	r2, r3
 800db10:	4b23      	ldr	r3, [pc, #140]	@ (800dba0 <mg_sha1_transform+0x610>)
 800db12:	4413      	add	r3, r2
 800db14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db16:	4413      	add	r3, r2
 800db18:	657b      	str	r3, [r7, #84]	@ 0x54
 800db1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800db20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 800db22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db26:	405a      	eors	r2, r3
 800db28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db2a:	405a      	eors	r2, r3
 800db2c:	69f9      	ldr	r1, [r7, #28]
 800db2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db30:	4059      	eors	r1, r3
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	4059      	eors	r1, r3
 800db36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db38:	404b      	eors	r3, r1
 800db3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800db3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db42:	441a      	add	r2, r3
 800db44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800db4a:	441a      	add	r2, r3
 800db4c:	4b14      	ldr	r3, [pc, #80]	@ (800dba0 <mg_sha1_transform+0x610>)
 800db4e:	4413      	add	r3, r2
 800db50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800db52:	4413      	add	r3, r2
 800db54:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800db5c:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 800db5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db62:	405a      	eors	r2, r3
 800db64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db66:	405a      	eors	r2, r3
 800db68:	6a39      	ldr	r1, [r7, #32]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4059      	eors	r1, r3
 800db6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db70:	4059      	eors	r1, r3
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	404b      	eors	r3, r1
 800db76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800db7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7e:	441a      	add	r2, r3
 800db80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800db86:	441a      	add	r2, r3
 800db88:	4b05      	ldr	r3, [pc, #20]	@ (800dba0 <mg_sha1_transform+0x610>)
 800db8a:	4413      	add	r3, r2
 800db8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db8e:	4413      	add	r3, r2
 800db90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800db98:	e004      	b.n	800dba4 <mg_sha1_transform+0x614>
 800db9a:	bf00      	nop
 800db9c:	5a827999 	.word	0x5a827999
 800dba0:	6ed9eba1 	.word	0x6ed9eba1
 800dba4:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 800dba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbaa:	405a      	eors	r2, r3
 800dbac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbae:	405a      	eors	r2, r3
 800dbb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	4059      	eors	r1, r3
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb8:	4059      	eors	r1, r3
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	404b      	eors	r3, r1
 800dbbe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dbc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc6:	441a      	add	r2, r3
 800dbc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbca:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dbce:	441a      	add	r2, r3
 800dbd0:	4ba9      	ldr	r3, [pc, #676]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dbd2:	4413      	add	r3, r2
 800dbd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbd6:	4413      	add	r3, r2
 800dbd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dbdc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dbe0:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 800dbe2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dbe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dbe6:	405a      	eors	r2, r3
 800dbe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbea:	405a      	eors	r2, r3
 800dbec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	4059      	eors	r1, r3
 800dbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbf4:	4059      	eors	r1, r3
 800dbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbf8:	404b      	eors	r3, r1
 800dbfa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dbfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc02:	441a      	add	r2, r3
 800dc04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc06:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dc0a:	441a      	add	r2, r3
 800dc0c:	4b9a      	ldr	r3, [pc, #616]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dc0e:	4413      	add	r3, r2
 800dc10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc12:	4413      	add	r3, r2
 800dc14:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc18:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dc1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 800dc1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc22:	405a      	eors	r2, r3
 800dc24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc26:	405a      	eors	r2, r3
 800dc28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	4059      	eors	r1, r3
 800dc2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc30:	4059      	eors	r1, r3
 800dc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc34:	404b      	eors	r3, r1
 800dc36:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dc3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	441a      	add	r2, r3
 800dc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dc46:	441a      	add	r2, r3
 800dc48:	4b8b      	ldr	r3, [pc, #556]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dc4a:	4413      	add	r3, r2
 800dc4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dc4e:	4413      	add	r3, r2
 800dc50:	657b      	str	r3, [r7, #84]	@ 0x54
 800dc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc54:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dc58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 800dc5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc5e:	405a      	eors	r2, r3
 800dc60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dc62:	405a      	eors	r2, r3
 800dc64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	4059      	eors	r1, r3
 800dc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc6c:	4059      	eors	r1, r3
 800dc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc70:	404b      	eors	r3, r1
 800dc72:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc7a:	441a      	add	r2, r3
 800dc7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc7e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dc82:	441a      	add	r2, r3
 800dc84:	4b7c      	ldr	r3, [pc, #496]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dc86:	4413      	add	r3, r2
 800dc88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dc8a:	4413      	add	r3, r2
 800dc8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc90:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dc94:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 800dc96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc9a:	405a      	eors	r2, r3
 800dc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc9e:	405a      	eors	r2, r3
 800dca0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	4059      	eors	r1, r3
 800dca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dca8:	4059      	eors	r1, r3
 800dcaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcac:	404b      	eors	r3, r1
 800dcae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dcb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcb6:	441a      	add	r2, r3
 800dcb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dcba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dcbe:	441a      	add	r2, r3
 800dcc0:	4b6d      	ldr	r3, [pc, #436]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dcc2:	4413      	add	r3, r2
 800dcc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dcc6:	4413      	add	r3, r2
 800dcc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dcca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dccc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dcd0:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 800dcd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcd6:	405a      	eors	r2, r3
 800dcd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcda:	405a      	eors	r2, r3
 800dcdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	4059      	eors	r1, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	4059      	eors	r1, r3
 800dce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dce8:	404b      	eors	r3, r1
 800dcea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dcee:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcf2:	441a      	add	r2, r3
 800dcf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcf6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dcfa:	441a      	add	r2, r3
 800dcfc:	4b5e      	ldr	r3, [pc, #376]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dcfe:	4413      	add	r3, r2
 800dd00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd02:	4413      	add	r3, r2
 800dd04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd08:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dd0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 800dd0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dd10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd12:	405a      	eors	r2, r3
 800dd14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd16:	405a      	eors	r2, r3
 800dd18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1c:	4059      	eors	r1, r3
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	4059      	eors	r1, r3
 800dd22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd24:	404b      	eors	r3, r1
 800dd26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dd2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd2e:	441a      	add	r2, r3
 800dd30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd32:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dd36:	441a      	add	r2, r3
 800dd38:	4b4f      	ldr	r3, [pc, #316]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dd3a:	4413      	add	r3, r2
 800dd3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd3e:	4413      	add	r3, r2
 800dd40:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd44:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dd48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 800dd4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd4e:	405a      	eors	r2, r3
 800dd50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd52:	405a      	eors	r2, r3
 800dd54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd58:	4059      	eors	r1, r3
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	4059      	eors	r1, r3
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	404b      	eors	r3, r1
 800dd62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	441a      	add	r2, r3
 800dd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd6e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dd72:	441a      	add	r2, r3
 800dd74:	4b40      	ldr	r3, [pc, #256]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800dd76:	4413      	add	r3, r2
 800dd78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd7a:	4413      	add	r3, r2
 800dd7c:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dd84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 800dd86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd8a:	405a      	eors	r2, r3
 800dd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd8e:	405a      	eors	r2, r3
 800dd90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd94:	4059      	eors	r1, r3
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	4059      	eors	r1, r3
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	404b      	eors	r3, r1
 800dd9e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dda2:	613b      	str	r3, [r7, #16]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	441a      	add	r2, r3
 800dda8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddaa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800ddae:	441a      	add	r2, r3
 800ddb0:	4b31      	ldr	r3, [pc, #196]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800ddb2:	4413      	add	r3, r2
 800ddb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ddb6:	4413      	add	r3, r2
 800ddb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ddba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddbc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ddc0:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 800ddc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ddc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ddc6:	405a      	eors	r2, r3
 800ddc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddca:	405a      	eors	r2, r3
 800ddcc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ddce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd0:	4059      	eors	r1, r3
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	4059      	eors	r1, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	404b      	eors	r3, r1
 800ddda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	441a      	add	r2, r3
 800dde4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dde6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800ddea:	441a      	add	r2, r3
 800ddec:	4b22      	ldr	r3, [pc, #136]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800ddee:	4413      	add	r3, r2
 800ddf0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ddf2:	4413      	add	r3, r2
 800ddf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800ddfc:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 800ddfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de02:	405a      	eors	r2, r3
 800de04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de06:	405a      	eors	r2, r3
 800de08:	68f9      	ldr	r1, [r7, #12]
 800de0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0c:	4059      	eors	r1, r3
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	4059      	eors	r1, r3
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	404b      	eors	r3, r1
 800de16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	441a      	add	r2, r3
 800de20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800de26:	441a      	add	r2, r3
 800de28:	4b13      	ldr	r3, [pc, #76]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800de2a:	4413      	add	r3, r2
 800de2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de2e:	4413      	add	r3, r2
 800de30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800de38:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 800de3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de3e:	405a      	eors	r2, r3
 800de40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de42:	405a      	eors	r2, r3
 800de44:	6939      	ldr	r1, [r7, #16]
 800de46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de48:	4059      	eors	r1, r3
 800de4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4c:	4059      	eors	r1, r3
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	404b      	eors	r3, r1
 800de52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800de56:	61fb      	str	r3, [r7, #28]
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	441a      	add	r2, r3
 800de5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800de62:	441a      	add	r2, r3
 800de64:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <mg_sha1_transform+0x8e8>)
 800de66:	4413      	add	r3, r2
 800de68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de6a:	4413      	add	r3, r2
 800de6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800de6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800de74:	e002      	b.n	800de7c <mg_sha1_transform+0x8ec>
 800de76:	bf00      	nop
 800de78:	6ed9eba1 	.word	0x6ed9eba1
 800de7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 800de7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de82:	405a      	eors	r2, r3
 800de84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de86:	405a      	eors	r2, r3
 800de88:	6979      	ldr	r1, [r7, #20]
 800de8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de8c:	4059      	eors	r1, r3
 800de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de90:	4059      	eors	r1, r3
 800de92:	6a3b      	ldr	r3, [r7, #32]
 800de94:	404b      	eors	r3, r1
 800de96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800de9a:	623b      	str	r3, [r7, #32]
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	441a      	add	r2, r3
 800dea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dea2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dea6:	441a      	add	r2, r3
 800dea8:	4ba9      	ldr	r3, [pc, #676]	@ (800e150 <mg_sha1_transform+0xbc0>)
 800deaa:	4413      	add	r3, r2
 800deac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800deae:	4413      	add	r3, r2
 800deb0:	657b      	str	r3, [r7, #84]	@ 0x54
 800deb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800deb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 800deba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800debc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800debe:	405a      	eors	r2, r3
 800dec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dec2:	405a      	eors	r2, r3
 800dec4:	69b9      	ldr	r1, [r7, #24]
 800dec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dec8:	4059      	eors	r1, r3
 800deca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800decc:	4059      	eors	r1, r3
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	404b      	eors	r3, r1
 800ded2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800ded6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ded8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deda:	441a      	add	r2, r3
 800dedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dede:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dee2:	441a      	add	r2, r3
 800dee4:	4b9a      	ldr	r3, [pc, #616]	@ (800e150 <mg_sha1_transform+0xbc0>)
 800dee6:	4413      	add	r3, r2
 800dee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800deea:	4413      	add	r3, r2
 800deec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800deee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800def0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800def4:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 800def6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800def8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800defa:	405a      	eors	r2, r3
 800defc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800defe:	405a      	eors	r2, r3
 800df00:	69f9      	ldr	r1, [r7, #28]
 800df02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df04:	4059      	eors	r1, r3
 800df06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df08:	4059      	eors	r1, r3
 800df0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0c:	404b      	eors	r3, r1
 800df0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800df12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df16:	441a      	add	r2, r3
 800df18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800df1e:	441a      	add	r2, r3
 800df20:	4b8b      	ldr	r3, [pc, #556]	@ (800e150 <mg_sha1_transform+0xbc0>)
 800df22:	4413      	add	r3, r2
 800df24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df26:	4413      	add	r3, r2
 800df28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800df30:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 800df32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df36:	431a      	orrs	r2, r3
 800df38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df3a:	401a      	ands	r2, r3
 800df3c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800df3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df40:	400b      	ands	r3, r1
 800df42:	431a      	orrs	r2, r3
 800df44:	6a39      	ldr	r1, [r7, #32]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	4059      	eors	r1, r3
 800df4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df4c:	4059      	eors	r1, r3
 800df4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df50:	404b      	eors	r3, r1
 800df52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800df56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5a:	441a      	add	r2, r3
 800df5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800df62:	441a      	add	r2, r3
 800df64:	4b7b      	ldr	r3, [pc, #492]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800df66:	4413      	add	r3, r2
 800df68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800df6a:	4413      	add	r3, r2
 800df6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800df74:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 800df76:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df7a:	431a      	orrs	r2, r3
 800df7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df7e:	401a      	ands	r2, r3
 800df80:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800df82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df84:	400b      	ands	r3, r1
 800df86:	431a      	orrs	r2, r3
 800df88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	4059      	eors	r1, r3
 800df8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df90:	4059      	eors	r1, r3
 800df92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df94:	404b      	eors	r3, r1
 800df96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800df9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df9e:	441a      	add	r2, r3
 800dfa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dfa6:	441a      	add	r2, r3
 800dfa8:	4b6a      	ldr	r3, [pc, #424]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800dfaa:	4413      	add	r3, r2
 800dfac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dfae:	4413      	add	r3, r2
 800dfb0:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dfb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 800dfba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dfc2:	401a      	ands	r2, r3
 800dfc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dfc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfc8:	400b      	ands	r3, r1
 800dfca:	431a      	orrs	r2, r3
 800dfcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	4059      	eors	r1, r3
 800dfd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd4:	4059      	eors	r1, r3
 800dfd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfd8:	404b      	eors	r3, r1
 800dfda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800dfde:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe2:	441a      	add	r2, r3
 800dfe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfe6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800dfea:	441a      	add	r2, r3
 800dfec:	4b59      	ldr	r3, [pc, #356]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800dfee:	4413      	add	r3, r2
 800dff0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dff2:	4413      	add	r3, r2
 800dff4:	657b      	str	r3, [r7, #84]	@ 0x54
 800dff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dff8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800dffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 800dffe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e002:	431a      	orrs	r2, r3
 800e004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e006:	401a      	ands	r2, r3
 800e008:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e00c:	400b      	ands	r3, r1
 800e00e:	431a      	orrs	r2, r3
 800e010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	4059      	eors	r1, r3
 800e016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e018:	4059      	eors	r1, r3
 800e01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01c:	404b      	eors	r3, r1
 800e01e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e022:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e026:	441a      	add	r2, r3
 800e028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e02a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e02e:	441a      	add	r2, r3
 800e030:	4b48      	ldr	r3, [pc, #288]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800e032:	4413      	add	r3, r2
 800e034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e036:	4413      	add	r3, r2
 800e038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e03a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e03c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e040:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 800e042:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e046:	431a      	orrs	r2, r3
 800e048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e04a:	401a      	ands	r2, r3
 800e04c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e050:	400b      	ands	r3, r1
 800e052:	431a      	orrs	r2, r3
 800e054:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	4059      	eors	r1, r3
 800e05a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e05c:	4059      	eors	r1, r3
 800e05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e060:	404b      	eors	r3, r1
 800e062:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06a:	441a      	add	r2, r3
 800e06c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e06e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e072:	441a      	add	r2, r3
 800e074:	4b37      	ldr	r3, [pc, #220]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800e076:	4413      	add	r3, r2
 800e078:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e07a:	4413      	add	r3, r2
 800e07c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e080:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e084:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 800e086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e08a:	431a      	orrs	r2, r3
 800e08c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e08e:	401a      	ands	r2, r3
 800e090:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e094:	400b      	ands	r3, r1
 800e096:	431a      	orrs	r2, r3
 800e098:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	4059      	eors	r1, r3
 800e09e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0a0:	4059      	eors	r1, r3
 800e0a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0a4:	404b      	eors	r3, r1
 800e0a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e0aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0ae:	441a      	add	r2, r3
 800e0b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e0b6:	441a      	add	r2, r3
 800e0b8:	4b26      	ldr	r3, [pc, #152]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800e0ba:	4413      	add	r3, r2
 800e0bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0be:	4413      	add	r3, r2
 800e0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0c4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e0c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 800e0ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0ce:	431a      	orrs	r2, r3
 800e0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0d2:	401a      	ands	r2, r3
 800e0d4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e0d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0d8:	400b      	ands	r3, r1
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e0:	4059      	eors	r1, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	4059      	eors	r1, r3
 800e0e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e8:	404b      	eors	r3, r1
 800e0ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e0ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0f2:	441a      	add	r2, r3
 800e0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e0fa:	441a      	add	r2, r3
 800e0fc:	4b15      	ldr	r3, [pc, #84]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800e0fe:	4413      	add	r3, r2
 800e100:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e102:	4413      	add	r3, r2
 800e104:	653b      	str	r3, [r7, #80]	@ 0x50
 800e106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e108:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e10c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 800e10e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e112:	431a      	orrs	r2, r3
 800e114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e116:	401a      	ands	r2, r3
 800e118:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e11a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e11c:	400b      	ands	r3, r1
 800e11e:	431a      	orrs	r2, r3
 800e120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e124:	4059      	eors	r1, r3
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	4059      	eors	r1, r3
 800e12a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e12c:	404b      	eors	r3, r1
 800e12e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e132:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e136:	441a      	add	r2, r3
 800e138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e13a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e13e:	441a      	add	r2, r3
 800e140:	4b04      	ldr	r3, [pc, #16]	@ (800e154 <mg_sha1_transform+0xbc4>)
 800e142:	4413      	add	r3, r2
 800e144:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e146:	4413      	add	r3, r2
 800e148:	657b      	str	r3, [r7, #84]	@ 0x54
 800e14a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e14c:	e004      	b.n	800e158 <mg_sha1_transform+0xbc8>
 800e14e:	bf00      	nop
 800e150:	6ed9eba1 	.word	0x6ed9eba1
 800e154:	8f1bbcdc 	.word	0x8f1bbcdc
 800e158:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e15c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 800e15e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e162:	431a      	orrs	r2, r3
 800e164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e166:	401a      	ands	r2, r3
 800e168:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e16c:	400b      	ands	r3, r1
 800e16e:	431a      	orrs	r2, r3
 800e170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e174:	4059      	eors	r1, r3
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	4059      	eors	r1, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	404b      	eors	r3, r1
 800e17e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	441a      	add	r2, r3
 800e188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e18a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e18e:	441a      	add	r2, r3
 800e190:	4ba8      	ldr	r3, [pc, #672]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e192:	4413      	add	r3, r2
 800e194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e196:	4413      	add	r3, r2
 800e198:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e19c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e1a0:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 800e1a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1a6:	431a      	orrs	r2, r3
 800e1a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1aa:	401a      	ands	r2, r3
 800e1ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1b0:	400b      	ands	r3, r1
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	4059      	eors	r1, r3
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	4059      	eors	r1, r3
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	404b      	eors	r3, r1
 800e1c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e1c6:	613b      	str	r3, [r7, #16]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	441a      	add	r2, r3
 800e1cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e1ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e1d2:	441a      	add	r2, r3
 800e1d4:	4b97      	ldr	r3, [pc, #604]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e1d6:	4413      	add	r3, r2
 800e1d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e1da:	4413      	add	r3, r2
 800e1dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e1de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e1e4:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 800e1e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e1e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1ea:	431a      	orrs	r2, r3
 800e1ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ee:	401a      	ands	r2, r3
 800e1f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1f4:	400b      	ands	r3, r1
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1fc:	4059      	eors	r1, r3
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	4059      	eors	r1, r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	404b      	eors	r3, r1
 800e206:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	441a      	add	r2, r3
 800e210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e212:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e216:	441a      	add	r2, r3
 800e218:	4b86      	ldr	r3, [pc, #536]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e21a:	4413      	add	r3, r2
 800e21c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e21e:	4413      	add	r3, r2
 800e220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e224:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e228:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 800e22a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e22c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e22e:	431a      	orrs	r2, r3
 800e230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e232:	401a      	ands	r2, r3
 800e234:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e236:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e238:	400b      	ands	r3, r1
 800e23a:	431a      	orrs	r2, r3
 800e23c:	68f9      	ldr	r1, [r7, #12]
 800e23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e240:	4059      	eors	r1, r3
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	4059      	eors	r1, r3
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	404b      	eors	r3, r1
 800e24a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e24e:	61bb      	str	r3, [r7, #24]
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	441a      	add	r2, r3
 800e254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e256:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e25a:	441a      	add	r2, r3
 800e25c:	4b75      	ldr	r3, [pc, #468]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e25e:	4413      	add	r3, r2
 800e260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e262:	4413      	add	r3, r2
 800e264:	653b      	str	r3, [r7, #80]	@ 0x50
 800e266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e268:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e26c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 800e26e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e272:	431a      	orrs	r2, r3
 800e274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e276:	401a      	ands	r2, r3
 800e278:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e27a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e27c:	400b      	ands	r3, r1
 800e27e:	431a      	orrs	r2, r3
 800e280:	6939      	ldr	r1, [r7, #16]
 800e282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e284:	4059      	eors	r1, r3
 800e286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e288:	4059      	eors	r1, r3
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	404b      	eors	r3, r1
 800e28e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e292:	61fb      	str	r3, [r7, #28]
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	441a      	add	r2, r3
 800e298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e29a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e29e:	441a      	add	r2, r3
 800e2a0:	4b64      	ldr	r3, [pc, #400]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e2a2:	4413      	add	r3, r2
 800e2a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2a6:	4413      	add	r3, r2
 800e2a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e2b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 800e2b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2b6:	431a      	orrs	r2, r3
 800e2b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2ba:	401a      	ands	r2, r3
 800e2bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e2be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2c0:	400b      	ands	r3, r1
 800e2c2:	431a      	orrs	r2, r3
 800e2c4:	6979      	ldr	r1, [r7, #20]
 800e2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2c8:	4059      	eors	r1, r3
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	4059      	eors	r1, r3
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	404b      	eors	r3, r1
 800e2d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e2d6:	623b      	str	r3, [r7, #32]
 800e2d8:	6a3b      	ldr	r3, [r7, #32]
 800e2da:	441a      	add	r2, r3
 800e2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e2e2:	441a      	add	r2, r3
 800e2e4:	4b53      	ldr	r3, [pc, #332]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e2e6:	4413      	add	r3, r2
 800e2e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2ea:	4413      	add	r3, r2
 800e2ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e2f4:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 800e2f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2fe:	401a      	ands	r2, r3
 800e300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e304:	400b      	ands	r3, r1
 800e306:	431a      	orrs	r2, r3
 800e308:	69b9      	ldr	r1, [r7, #24]
 800e30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e30c:	4059      	eors	r1, r3
 800e30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e310:	4059      	eors	r1, r3
 800e312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e314:	404b      	eors	r3, r1
 800e316:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e31a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	441a      	add	r2, r3
 800e320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e322:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e326:	441a      	add	r2, r3
 800e328:	4b42      	ldr	r3, [pc, #264]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e32a:	4413      	add	r3, r2
 800e32c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e32e:	4413      	add	r3, r2
 800e330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e334:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e338:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 800e33a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e33c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e33e:	431a      	orrs	r2, r3
 800e340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e342:	401a      	ands	r2, r3
 800e344:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e348:	400b      	ands	r3, r1
 800e34a:	431a      	orrs	r2, r3
 800e34c:	69f9      	ldr	r1, [r7, #28]
 800e34e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e350:	4059      	eors	r1, r3
 800e352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e354:	4059      	eors	r1, r3
 800e356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e358:	404b      	eors	r3, r1
 800e35a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e35e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e362:	441a      	add	r2, r3
 800e364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e366:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e36a:	441a      	add	r2, r3
 800e36c:	4b31      	ldr	r3, [pc, #196]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e36e:	4413      	add	r3, r2
 800e370:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e372:	4413      	add	r3, r2
 800e374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e376:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e37c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 800e37e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e382:	431a      	orrs	r2, r3
 800e384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e386:	401a      	ands	r2, r3
 800e388:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800e38a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e38c:	400b      	ands	r3, r1
 800e38e:	431a      	orrs	r2, r3
 800e390:	6a39      	ldr	r1, [r7, #32]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	4059      	eors	r1, r3
 800e396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e398:	4059      	eors	r1, r3
 800e39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39c:	404b      	eors	r3, r1
 800e39e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a6:	441a      	add	r2, r3
 800e3a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e3ae:	441a      	add	r2, r3
 800e3b0:	4b20      	ldr	r3, [pc, #128]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e3b2:	4413      	add	r3, r2
 800e3b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e3b6:	4413      	add	r3, r2
 800e3b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e3c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 800e3c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e3c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3c6:	431a      	orrs	r2, r3
 800e3c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3ca:	401a      	ands	r2, r3
 800e3cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e3ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3d0:	400b      	ands	r3, r1
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	4059      	eors	r1, r3
 800e3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3dc:	4059      	eors	r1, r3
 800e3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e0:	404b      	eors	r3, r1
 800e3e2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e3e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ea:	441a      	add	r2, r3
 800e3ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ee:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e3f2:	441a      	add	r2, r3
 800e3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e434 <mg_sha1_transform+0xea4>)
 800e3f6:	4413      	add	r3, r2
 800e3f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3fa:	4413      	add	r3, r2
 800e3fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e400:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 800e406:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e40a:	431a      	orrs	r2, r3
 800e40c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e40e:	401a      	ands	r2, r3
 800e410:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e414:	400b      	ands	r3, r1
 800e416:	431a      	orrs	r2, r3
 800e418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	4059      	eors	r1, r3
 800e41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e420:	4059      	eors	r1, r3
 800e422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e424:	404b      	eors	r3, r1
 800e426:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e42a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e42e:	441a      	add	r2, r3
 800e430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e432:	e001      	b.n	800e438 <mg_sha1_transform+0xea8>
 800e434:	8f1bbcdc 	.word	0x8f1bbcdc
 800e438:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e43c:	441a      	add	r2, r3
 800e43e:	4ba9      	ldr	r3, [pc, #676]	@ (800e6e4 <mg_sha1_transform+0x1154>)
 800e440:	4413      	add	r3, r2
 800e442:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e444:	4413      	add	r3, r2
 800e446:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e44a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e44e:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 800e450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e454:	431a      	orrs	r2, r3
 800e456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e458:	401a      	ands	r2, r3
 800e45a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e45c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e45e:	400b      	ands	r3, r1
 800e460:	431a      	orrs	r2, r3
 800e462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	4059      	eors	r1, r3
 800e468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e46a:	4059      	eors	r1, r3
 800e46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46e:	404b      	eors	r3, r1
 800e470:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e474:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e478:	441a      	add	r2, r3
 800e47a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e47c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e480:	441a      	add	r2, r3
 800e482:	4b98      	ldr	r3, [pc, #608]	@ (800e6e4 <mg_sha1_transform+0x1154>)
 800e484:	4413      	add	r3, r2
 800e486:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e488:	4413      	add	r3, r2
 800e48a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e48c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e48e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e492:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 800e494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e498:	405a      	eors	r2, r3
 800e49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e49c:	405a      	eors	r2, r3
 800e49e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	4059      	eors	r1, r3
 800e4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4a6:	4059      	eors	r1, r3
 800e4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4aa:	404b      	eors	r3, r1
 800e4ac:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b4:	441a      	add	r2, r3
 800e4b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4b8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e4bc:	441a      	add	r2, r3
 800e4be:	4b8a      	ldr	r3, [pc, #552]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e4c0:	4413      	add	r3, r2
 800e4c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e4c4:	4413      	add	r3, r2
 800e4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e4c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4ca:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 800e4d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e4d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4d4:	405a      	eors	r2, r3
 800e4d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4d8:	405a      	eors	r2, r3
 800e4da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e4dc:	6a3b      	ldr	r3, [r7, #32]
 800e4de:	4059      	eors	r1, r3
 800e4e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4e2:	4059      	eors	r1, r3
 800e4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4e6:	404b      	eors	r3, r1
 800e4e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e4ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4f0:	441a      	add	r2, r3
 800e4f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4f4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e4f8:	441a      	add	r2, r3
 800e4fa:	4b7b      	ldr	r3, [pc, #492]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e4fc:	4413      	add	r3, r2
 800e4fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e500:	4413      	add	r3, r2
 800e502:	653b      	str	r3, [r7, #80]	@ 0x50
 800e504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e506:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e50a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 800e50c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e510:	405a      	eors	r2, r3
 800e512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e514:	405a      	eors	r2, r3
 800e516:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51a:	4059      	eors	r1, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	4059      	eors	r1, r3
 800e520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e522:	404b      	eors	r3, r1
 800e524:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e528:	647b      	str	r3, [r7, #68]	@ 0x44
 800e52a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e52c:	441a      	add	r2, r3
 800e52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e530:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e534:	441a      	add	r2, r3
 800e536:	4b6c      	ldr	r3, [pc, #432]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e538:	4413      	add	r3, r2
 800e53a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e53c:	4413      	add	r3, r2
 800e53e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e542:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 800e548:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e54c:	405a      	eors	r2, r3
 800e54e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e550:	405a      	eors	r2, r3
 800e552:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e556:	4059      	eors	r1, r3
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	4059      	eors	r1, r3
 800e55c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e55e:	404b      	eors	r3, r1
 800e560:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e564:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e568:	441a      	add	r2, r3
 800e56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e570:	441a      	add	r2, r3
 800e572:	4b5d      	ldr	r3, [pc, #372]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e574:	4413      	add	r3, r2
 800e576:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e578:	4413      	add	r3, r2
 800e57a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e57c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e57e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e582:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 800e584:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e588:	405a      	eors	r2, r3
 800e58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e58c:	405a      	eors	r2, r3
 800e58e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	4059      	eors	r1, r3
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	4059      	eors	r1, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	404b      	eors	r3, r1
 800e59c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e5a0:	60fb      	str	r3, [r7, #12]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	441a      	add	r2, r3
 800e5a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5a8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e5ac:	441a      	add	r2, r3
 800e5ae:	4b4e      	ldr	r3, [pc, #312]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e5b0:	4413      	add	r3, r2
 800e5b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5b4:	4413      	add	r3, r2
 800e5b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e5be:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 800e5c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5c4:	405a      	eors	r2, r3
 800e5c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5c8:	405a      	eors	r2, r3
 800e5ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ce:	4059      	eors	r1, r3
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	4059      	eors	r1, r3
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	404b      	eors	r3, r1
 800e5d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e5dc:	613b      	str	r3, [r7, #16]
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	441a      	add	r2, r3
 800e5e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5e4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e5e8:	441a      	add	r2, r3
 800e5ea:	4b3f      	ldr	r3, [pc, #252]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e5ec:	4413      	add	r3, r2
 800e5ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e5f0:	4413      	add	r3, r2
 800e5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e5f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e5fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 800e5fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e600:	405a      	eors	r2, r3
 800e602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e604:	405a      	eors	r2, r3
 800e606:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e60a:	4059      	eors	r1, r3
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	4059      	eors	r1, r3
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	404b      	eors	r3, r1
 800e614:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e618:	617b      	str	r3, [r7, #20]
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	441a      	add	r2, r3
 800e61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e620:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e624:	441a      	add	r2, r3
 800e626:	4b30      	ldr	r3, [pc, #192]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e628:	4413      	add	r3, r2
 800e62a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e62c:	4413      	add	r3, r2
 800e62e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e632:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e636:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 800e638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e63a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e63c:	405a      	eors	r2, r3
 800e63e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e640:	405a      	eors	r2, r3
 800e642:	68f9      	ldr	r1, [r7, #12]
 800e644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e646:	4059      	eors	r1, r3
 800e648:	6a3b      	ldr	r3, [r7, #32]
 800e64a:	4059      	eors	r1, r3
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	404b      	eors	r3, r1
 800e650:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e654:	61bb      	str	r3, [r7, #24]
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	441a      	add	r2, r3
 800e65a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e65c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e660:	441a      	add	r2, r3
 800e662:	4b21      	ldr	r3, [pc, #132]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e664:	4413      	add	r3, r2
 800e666:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e668:	4413      	add	r3, r2
 800e66a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e66c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e66e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 800e674:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e678:	405a      	eors	r2, r3
 800e67a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e67c:	405a      	eors	r2, r3
 800e67e:	6939      	ldr	r1, [r7, #16]
 800e680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e682:	4059      	eors	r1, r3
 800e684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e686:	4059      	eors	r1, r3
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	404b      	eors	r3, r1
 800e68c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e690:	61fb      	str	r3, [r7, #28]
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	441a      	add	r2, r3
 800e696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e698:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e69c:	441a      	add	r2, r3
 800e69e:	4b12      	ldr	r3, [pc, #72]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e6a0:	4413      	add	r3, r2
 800e6a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6a4:	4413      	add	r3, r2
 800e6a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e6ae:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 800e6b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6b4:	405a      	eors	r2, r3
 800e6b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6b8:	405a      	eors	r2, r3
 800e6ba:	6979      	ldr	r1, [r7, #20]
 800e6bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6be:	4059      	eors	r1, r3
 800e6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6c2:	4059      	eors	r1, r3
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	404b      	eors	r3, r1
 800e6c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e6cc:	623b      	str	r3, [r7, #32]
 800e6ce:	6a3b      	ldr	r3, [r7, #32]
 800e6d0:	441a      	add	r2, r3
 800e6d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e6d8:	441a      	add	r2, r3
 800e6da:	4b03      	ldr	r3, [pc, #12]	@ (800e6e8 <mg_sha1_transform+0x1158>)
 800e6dc:	4413      	add	r3, r2
 800e6de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e6e0:	4413      	add	r3, r2
 800e6e2:	e003      	b.n	800e6ec <mg_sha1_transform+0x115c>
 800e6e4:	8f1bbcdc 	.word	0x8f1bbcdc
 800e6e8:	ca62c1d6 	.word	0xca62c1d6
 800e6ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e6f4:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 800e6f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e6f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6fa:	405a      	eors	r2, r3
 800e6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6fe:	405a      	eors	r2, r3
 800e700:	69b9      	ldr	r1, [r7, #24]
 800e702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e704:	4059      	eors	r1, r3
 800e706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e708:	4059      	eors	r1, r3
 800e70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70c:	404b      	eors	r3, r1
 800e70e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e712:	627b      	str	r3, [r7, #36]	@ 0x24
 800e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e716:	441a      	add	r2, r3
 800e718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e71a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e71e:	441a      	add	r2, r3
 800e720:	4ba7      	ldr	r3, [pc, #668]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e722:	4413      	add	r3, r2
 800e724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e726:	4413      	add	r3, r2
 800e728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e72a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e72c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e730:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 800e732:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e736:	405a      	eors	r2, r3
 800e738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e73a:	405a      	eors	r2, r3
 800e73c:	69f9      	ldr	r1, [r7, #28]
 800e73e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e740:	4059      	eors	r1, r3
 800e742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e744:	4059      	eors	r1, r3
 800e746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e748:	404b      	eors	r3, r1
 800e74a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e74e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e752:	441a      	add	r2, r3
 800e754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e756:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e75a:	441a      	add	r2, r3
 800e75c:	4b98      	ldr	r3, [pc, #608]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e75e:	4413      	add	r3, r2
 800e760:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e762:	4413      	add	r3, r2
 800e764:	653b      	str	r3, [r7, #80]	@ 0x50
 800e766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e768:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e76c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 800e76e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e772:	405a      	eors	r2, r3
 800e774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e776:	405a      	eors	r2, r3
 800e778:	6a39      	ldr	r1, [r7, #32]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	4059      	eors	r1, r3
 800e77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e780:	4059      	eors	r1, r3
 800e782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e784:	404b      	eors	r3, r1
 800e786:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e78e:	441a      	add	r2, r3
 800e790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e792:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e796:	441a      	add	r2, r3
 800e798:	4b89      	ldr	r3, [pc, #548]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e79a:	4413      	add	r3, r2
 800e79c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e79e:	4413      	add	r3, r2
 800e7a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e7a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 800e7aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e7ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7ae:	405a      	eors	r2, r3
 800e7b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7b2:	405a      	eors	r2, r3
 800e7b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	4059      	eors	r1, r3
 800e7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7bc:	4059      	eors	r1, r3
 800e7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c0:	404b      	eors	r3, r1
 800e7c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e7c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ca:	441a      	add	r2, r3
 800e7cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e7d2:	441a      	add	r2, r3
 800e7d4:	4b7a      	ldr	r3, [pc, #488]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e7d6:	4413      	add	r3, r2
 800e7d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7da:	4413      	add	r3, r2
 800e7dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e7e4:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 800e7e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e7e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ea:	405a      	eors	r2, r3
 800e7ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7ee:	405a      	eors	r2, r3
 800e7f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	4059      	eors	r1, r3
 800e7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7f8:	4059      	eors	r1, r3
 800e7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7fc:	404b      	eors	r3, r1
 800e7fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e802:	637b      	str	r3, [r7, #52]	@ 0x34
 800e804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e806:	441a      	add	r2, r3
 800e808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e80a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e80e:	441a      	add	r2, r3
 800e810:	4b6b      	ldr	r3, [pc, #428]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e812:	4413      	add	r3, r2
 800e814:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e816:	4413      	add	r3, r2
 800e818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e81a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e81c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e820:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 800e822:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e826:	405a      	eors	r2, r3
 800e828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e82a:	405a      	eors	r2, r3
 800e82c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	4059      	eors	r1, r3
 800e832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e834:	4059      	eors	r1, r3
 800e836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e838:	404b      	eors	r3, r1
 800e83a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e83e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	441a      	add	r2, r3
 800e844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e846:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e84a:	441a      	add	r2, r3
 800e84c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e84e:	4413      	add	r3, r2
 800e850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e852:	4413      	add	r3, r2
 800e854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e858:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e85c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 800e85e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e862:	405a      	eors	r2, r3
 800e864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e866:	405a      	eors	r2, r3
 800e868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	4059      	eors	r1, r3
 800e86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e870:	4059      	eors	r1, r3
 800e872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e874:	404b      	eors	r3, r1
 800e876:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e87e:	441a      	add	r2, r3
 800e880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e882:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e886:	441a      	add	r2, r3
 800e888:	4b4d      	ldr	r3, [pc, #308]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e88a:	4413      	add	r3, r2
 800e88c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e88e:	4413      	add	r3, r2
 800e890:	653b      	str	r3, [r7, #80]	@ 0x50
 800e892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e894:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e898:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 800e89a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e89c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e89e:	405a      	eors	r2, r3
 800e8a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e8a2:	405a      	eors	r2, r3
 800e8a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	4059      	eors	r1, r3
 800e8aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8ac:	4059      	eors	r1, r3
 800e8ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8b0:	404b      	eors	r3, r1
 800e8b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e8b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8ba:	441a      	add	r2, r3
 800e8bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e8c2:	441a      	add	r2, r3
 800e8c4:	4b3e      	ldr	r3, [pc, #248]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e8c6:	4413      	add	r3, r2
 800e8c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e8ca:	4413      	add	r3, r2
 800e8cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800e8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e8d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 800e8d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e8d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8da:	405a      	eors	r2, r3
 800e8dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e8de:	405a      	eors	r2, r3
 800e8e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	4059      	eors	r1, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4059      	eors	r1, r3
 800e8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ec:	404b      	eors	r3, r1
 800e8ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e8f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8f6:	441a      	add	r2, r3
 800e8f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e8fe:	441a      	add	r2, r3
 800e900:	4b2f      	ldr	r3, [pc, #188]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e902:	4413      	add	r3, r2
 800e904:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e906:	4413      	add	r3, r2
 800e908:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e90c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e910:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 800e912:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e916:	405a      	eors	r2, r3
 800e918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e91a:	405a      	eors	r2, r3
 800e91c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e920:	4059      	eors	r1, r3
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	4059      	eors	r1, r3
 800e926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e928:	404b      	eors	r3, r1
 800e92a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800e92e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e932:	441a      	add	r2, r3
 800e934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e936:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800e93a:	441a      	add	r2, r3
 800e93c:	4b20      	ldr	r3, [pc, #128]	@ (800e9c0 <mg_sha1_transform+0x1430>)
 800e93e:	4413      	add	r3, r2
 800e940:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e942:	4413      	add	r3, r2
 800e944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e948:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800e94c:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e954:	441a      	add	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	601a      	str	r2, [r3, #0]
  state[1] += b;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	3304      	adds	r3, #4
 800e95e:	6819      	ldr	r1, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3304      	adds	r3, #4
 800e964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e966:	440a      	add	r2, r1
 800e968:	601a      	str	r2, [r3, #0]
  state[2] += c;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	3308      	adds	r3, #8
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3308      	adds	r3, #8
 800e974:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e976:	440a      	add	r2, r1
 800e978:	601a      	str	r2, [r3, #0]
  state[3] += d;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	330c      	adds	r3, #12
 800e97e:	6819      	ldr	r1, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	330c      	adds	r3, #12
 800e984:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e986:	440a      	add	r2, r1
 800e988:	601a      	str	r2, [r3, #0]
  state[4] += e;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3310      	adds	r3, #16
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3310      	adds	r3, #16
 800e994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e996:	440a      	add	r2, r1
 800e998:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 800e99a:	f107 030c 	add.w	r3, r7, #12
 800e99e:	2240      	movs	r2, #64	@ 0x40
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f00f fe65 	bl	801e672 <memset>
  a = b = c = d = e = 0;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800e9b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e9ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9bc:	e002      	b.n	800e9c4 <mg_sha1_transform+0x1434>
 800e9be:	bf00      	nop
 800e9c0:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 800e9c4:	bf00      	nop
 800e9c6:	3764      	adds	r7, #100	@ 0x64
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd90      	pop	{r4, r7, pc}

0800e9cc <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4a0d      	ldr	r2, [pc, #52]	@ (800ea0c <mg_sha1_init+0x40>)
 800e9d8:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a0c      	ldr	r2, [pc, #48]	@ (800ea10 <mg_sha1_init+0x44>)
 800e9de:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea14 <mg_sha1_init+0x48>)
 800e9e4:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4a0b      	ldr	r2, [pc, #44]	@ (800ea18 <mg_sha1_init+0x4c>)
 800e9ea:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a0b      	ldr	r2, [pc, #44]	@ (800ea1c <mg_sha1_init+0x50>)
 800e9f0:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	619a      	str	r2, [r3, #24]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	699a      	ldr	r2, [r3, #24]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	615a      	str	r2, [r3, #20]
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	67452301 	.word	0x67452301
 800ea10:	efcdab89 	.word	0xefcdab89
 800ea14:	98badcfe 	.word	0x98badcfe
 800ea18:	10325476 	.word	0x10325476
 800ea1c:	c3d2e1f0 	.word	0xc3d2e1f0

0800ea20 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	695a      	ldr	r2, [r3, #20]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	441a      	add	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	615a      	str	r2, [r3, #20]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	693a      	ldr	r2, [r7, #16]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d904      	bls.n	800ea54 <mg_sha1_update+0x34>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	1c5a      	adds	r2, r3, #1
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	699a      	ldr	r2, [r3, #24]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	0f5b      	lsrs	r3, r3, #29
 800ea5c:	441a      	add	r2, r3
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	08db      	lsrs	r3, r3, #3
 800ea66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ea6a:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 800ea6c:	693a      	ldr	r2, [r7, #16]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4413      	add	r3, r2
 800ea72:	2b3f      	cmp	r3, #63	@ 0x3f
 800ea74:	d926      	bls.n	800eac4 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	3318      	adds	r3, #24
 800ea7a:	68fa      	ldr	r2, [r7, #12]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	1d18      	adds	r0, r3, #4
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800ea86:	617b      	str	r3, [r7, #20]
 800ea88:	697a      	ldr	r2, [r7, #20]
 800ea8a:	68b9      	ldr	r1, [r7, #8]
 800ea8c:	f00f ff27 	bl	801e8de <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	331c      	adds	r3, #28
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f7fe fd79 	bl	800d590 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 800ea9e:	e009      	b.n	800eab4 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	f7fe fd71 	bl	800d590 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	3340      	adds	r3, #64	@ 0x40
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	333f      	adds	r3, #63	@ 0x3f
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d8f0      	bhi.n	800eaa0 <mg_sha1_update+0x80>
    }
    j = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	613b      	str	r3, [r7, #16]
 800eac2:	e001      	b.n	800eac8 <mg_sha1_update+0xa8>
  } else
    i = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3318      	adds	r3, #24
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	4413      	add	r3, r2
 800ead0:	1d18      	adds	r0, r3, #4
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	18d1      	adds	r1, r2, r3
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	461a      	mov	r2, r3
 800eae0:	f00f fefd 	bl	801e8de <memcpy>
}
 800eae4:	bf00      	nop
 800eae6:	3718      	adds	r7, #24
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	617b      	str	r3, [r7, #20]
 800eafa:	e01b      	b.n	800eb34 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	bf94      	ite	ls
 800eb02:	2301      	movls	r3, #1
 800eb04:	2300      	movhi	r3, #0
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	683a      	ldr	r2, [r7, #0]
 800eb0a:	3304      	adds	r3, #4
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	43db      	mvns	r3, r3
 800eb16:	f003 0303 	and.w	r3, r3, #3
 800eb1a:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 800eb1c:	fa22 f303 	lsr.w	r3, r2, r3
 800eb20:	b2d9      	uxtb	r1, r3
 800eb22:	f107 020c 	add.w	r2, r7, #12
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	4413      	add	r3, r2
 800eb2a:	460a      	mov	r2, r1
 800eb2c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	3301      	adds	r3, #1
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b07      	cmp	r3, #7
 800eb38:	d9e0      	bls.n	800eafc <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 800eb3a:	2380      	movs	r3, #128	@ 0x80
 800eb3c:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 800eb3e:	f107 030b 	add.w	r3, r7, #11
 800eb42:	2201      	movs	r2, #1
 800eb44:	4619      	mov	r1, r3
 800eb46:	6838      	ldr	r0, [r7, #0]
 800eb48:	f7ff ff6a 	bl	800ea20 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 800eb4c:	e008      	b.n	800eb60 <mg_sha1_final+0x74>
    c = 0000;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 800eb52:	f107 030b 	add.w	r3, r7, #11
 800eb56:	2201      	movs	r2, #1
 800eb58:	4619      	mov	r1, r3
 800eb5a:	6838      	ldr	r0, [r7, #0]
 800eb5c:	f7ff ff60 	bl	800ea20 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 800eb68:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800eb6c:	d1ef      	bne.n	800eb4e <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	2208      	movs	r2, #8
 800eb74:	4619      	mov	r1, r3
 800eb76:	6838      	ldr	r0, [r7, #0]
 800eb78:	f7ff ff52 	bl	800ea20 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	617b      	str	r3, [r7, #20]
 800eb80:	e013      	b.n	800ebaa <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	089a      	lsrs	r2, r3, #2
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	43db      	mvns	r3, r3
 800eb90:	f003 0303 	and.w	r3, r3, #3
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 800eba0:	b2ca      	uxtb	r2, r1
    digest[i] =
 800eba2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	3301      	adds	r3, #1
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b13      	cmp	r3, #19
 800ebae:	d9e8      	bls.n	800eb82 <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 800ebb0:	225c      	movs	r2, #92	@ 0x5c
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	6838      	ldr	r0, [r7, #0]
 800ebb6:	f00f fd5c 	bl	801e672 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 800ebba:	f107 030c 	add.w	r3, r7, #12
 800ebbe:	2208      	movs	r2, #8
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f00f fd55 	bl	801e672 <memset>
}
 800ebc8:	bf00      	nop
 800ebca:	3718      	adds	r7, #24
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 800ebde:	6879      	ldr	r1, [r7, #4]
 800ebe0:	f04f 0200 	mov.w	r2, #0
 800ebe4:	f04f 0300 	mov.w	r3, #0
 800ebe8:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	4a0e      	ldr	r2, [pc, #56]	@ (800ec28 <mg_sha256_init+0x58>)
 800ebf0:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a0d      	ldr	r2, [pc, #52]	@ (800ec2c <mg_sha256_init+0x5c>)
 800ebf6:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a0d      	ldr	r2, [pc, #52]	@ (800ec30 <mg_sha256_init+0x60>)
 800ebfc:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4a0c      	ldr	r2, [pc, #48]	@ (800ec34 <mg_sha256_init+0x64>)
 800ec02:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	4a0c      	ldr	r2, [pc, #48]	@ (800ec38 <mg_sha256_init+0x68>)
 800ec08:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ec3c <mg_sha256_init+0x6c>)
 800ec0e:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a0b      	ldr	r2, [pc, #44]	@ (800ec40 <mg_sha256_init+0x70>)
 800ec14:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a0a      	ldr	r2, [pc, #40]	@ (800ec44 <mg_sha256_init+0x74>)
 800ec1a:	61da      	str	r2, [r3, #28]
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	6a09e667 	.word	0x6a09e667
 800ec2c:	bb67ae85 	.word	0xbb67ae85
 800ec30:	3c6ef372 	.word	0x3c6ef372
 800ec34:	a54ff53a 	.word	0xa54ff53a
 800ec38:	510e527f 	.word	0x510e527f
 800ec3c:	9b05688c 	.word	0x9b05688c
 800ec40:	1f83d9ab 	.word	0x1f83d9ab
 800ec44:	5be0cd19 	.word	0x5be0cd19

0800ec48 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 800ec48:	b480      	push	{r7}
 800ec4a:	b0cf      	sub	sp, #316	@ 0x13c
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ec56:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ec5e:	2300      	movs	r3, #0
 800ec60:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800ec64:	e043      	b.n	800ecee <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800ec66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec6a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ec74:	4413      	add	r3, r2
 800ec76:	332c      	adds	r3, #44	@ 0x2c
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800ec7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ec80:	3301      	adds	r3, #1
 800ec82:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800ec86:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800ec8a:	6809      	ldr	r1, [r1, #0]
 800ec8c:	440b      	add	r3, r1
 800ec8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ec92:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800ec94:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 800ec96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ec9a:	3302      	adds	r3, #2
 800ec9c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800eca0:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800eca4:	6809      	ldr	r1, [r1, #0]
 800eca6:	440b      	add	r3, r1
 800eca8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ecac:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 800ecae:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 800ecb0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800ecb4:	3203      	adds	r2, #3
 800ecb6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800ecba:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800ecbe:	6809      	ldr	r1, [r1, #0]
 800ecc0:	440a      	add	r2, r1
 800ecc2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 800ecc6:	ea43 0102 	orr.w	r1, r3, r2
 800ecca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ecce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ecd2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800ecd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 800ecda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ecde:	3301      	adds	r3, #1
 800ece0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ece4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ece8:	3304      	adds	r3, #4
 800ecea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800ecee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ecf2:	2b0f      	cmp	r3, #15
 800ecf4:	ddb7      	ble.n	800ec66 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 800ecf6:	e069      	b.n	800edcc <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 800ecf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ecfc:	1e9a      	subs	r2, r3, #2
 800ecfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0a:	ea4f 4273 	mov.w	r2, r3, ror #17
 800ed0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed12:	1e99      	subs	r1, r3, #2
 800ed14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed18:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed20:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800ed24:	405a      	eors	r2, r3
 800ed26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed2a:	1e99      	subs	r1, r3, #2
 800ed2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed30:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed38:	0a9b      	lsrs	r3, r3, #10
 800ed3a:	405a      	eors	r2, r3
 800ed3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed40:	1fd9      	subs	r1, r3, #7
 800ed42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed4e:	441a      	add	r2, r3
 800ed50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed54:	f1a3 010f 	sub.w	r1, r3, #15
 800ed58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed5c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed64:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800ed68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed6c:	f1a3 000f 	sub.w	r0, r3, #15
 800ed70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed74:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ed7c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800ed80:	4059      	eors	r1, r3
 800ed82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed86:	f1a3 000f 	sub.w	r0, r3, #15
 800ed8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ed92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ed96:	08db      	lsrs	r3, r3, #3
 800ed98:	404b      	eors	r3, r1
 800ed9a:	441a      	add	r2, r3
 800ed9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eda0:	f1a3 0110 	sub.w	r1, r3, #16
 800eda4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eda8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800edac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edb0:	18d1      	adds	r1, r2, r3
 800edb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800edba:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800edbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 800edc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800edc6:	3301      	adds	r3, #1
 800edc8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800edcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800edd0:	2b3f      	cmp	r3, #63	@ 0x3f
 800edd2:	dd91      	ble.n	800ecf8 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 800edd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 800ede4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ede8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 800edf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800edf8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 800ee04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 800ee14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 800ee24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 800ee34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	699b      	ldr	r3, [r3, #24]
 800ee40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 800ee44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ee48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 800ee54:	2300      	movs	r3, #0
 800ee56:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ee5a:	e078      	b.n	800ef4e <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 800ee5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ee60:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800ee64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ee68:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800ee6c:	405a      	eors	r2, r3
 800ee6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ee72:	ea4f 6373 	mov.w	r3, r3, ror #25
 800ee76:	405a      	eors	r2, r3
 800ee78:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ee7c:	441a      	add	r2, r3
 800ee7e:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800ee82:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ee86:	4019      	ands	r1, r3
 800ee88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ee8c:	43d8      	mvns	r0, r3
 800ee8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee92:	4003      	ands	r3, r0
 800ee94:	404b      	eors	r3, r1
 800ee96:	441a      	add	r2, r3
 800ee98:	496e      	ldr	r1, [pc, #440]	@ (800f054 <mg_sha256_chunk+0x40c>)
 800ee9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eea2:	441a      	add	r2, r3
 800eea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eea8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800eeac:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800eeb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 800eeba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eebe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800eec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eec6:	ea4f 3373 	mov.w	r3, r3, ror #13
 800eeca:	405a      	eors	r2, r3
 800eecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eed0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800eed4:	405a      	eors	r2, r3
 800eed6:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800eeda:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800eede:	4059      	eors	r1, r3
 800eee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eee4:	4019      	ands	r1, r3
 800eee6:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800eeea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800eeee:	4003      	ands	r3, r0
 800eef0:	404b      	eors	r3, r1
 800eef2:	4413      	add	r3, r2
 800eef4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 800eef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eefc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 800ef00:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ef04:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 800ef08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ef0c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 800ef10:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800ef14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ef18:	4413      	add	r3, r2
 800ef1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 800ef1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800ef22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 800ef26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 800ef2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 800ef36:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800ef3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800ef3e:	4413      	add	r3, r2
 800ef40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 800ef44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ef48:	3301      	adds	r3, #1
 800ef4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800ef4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ef52:	2b3f      	cmp	r3, #63	@ 0x3f
 800ef54:	dd82      	ble.n	800ee5c <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 800ef56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef66:	441a      	add	r2, r3
 800ef68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 800ef74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef84:	441a      	add	r2, r3
 800ef86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 800ef92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ef96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	689a      	ldr	r2, [r3, #8]
 800ef9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800efa2:	441a      	add	r2, r3
 800efa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efa8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 800efb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68da      	ldr	r2, [r3, #12]
 800efbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800efc0:	441a      	add	r2, r3
 800efc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 800efce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efd2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	691a      	ldr	r2, [r3, #16]
 800efda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800efde:	441a      	add	r2, r3
 800efe0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800efe4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 800efec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eff0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	695a      	ldr	r2, [r3, #20]
 800eff8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800effc:	441a      	add	r2, r3
 800effe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f002:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 800f00a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f00e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	699a      	ldr	r2, [r3, #24]
 800f016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f01a:	441a      	add	r2, r3
 800f01c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f020:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 800f028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f02c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	69da      	ldr	r2, [r3, #28]
 800f034:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800f038:	441a      	add	r2, r3
 800f03a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f03e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	61da      	str	r2, [r3, #28]
}
 800f046:	bf00      	nop
 800f048:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	080223c4 	.word	0x080223c4

0800f058 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 800f058:	b5b0      	push	{r4, r5, r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 800f064:	2300      	movs	r3, #0
 800f066:	617b      	str	r3, [r7, #20]
 800f068:	e026      	b.n	800f0b8 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 800f06a:	68ba      	ldr	r2, [r7, #8]
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	441a      	add	r2, r3
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f074:	7811      	ldrb	r1, [r2, #0]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	4413      	add	r3, r2
 800f07a:	460a      	mov	r2, r1
 800f07c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f084:	1c5a      	adds	r2, r3, #1
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	629a      	str	r2, [r3, #40]	@ 0x28
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f08e:	2b40      	cmp	r3, #64	@ 0x40
 800f090:	d10f      	bne.n	800f0b2 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f7ff fdd8 	bl	800ec48 <mg_sha256_chunk>
      ctx->bits += 512;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f09e:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 800f0a2:	f143 0500 	adc.w	r5, r3, #0
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	617b      	str	r3, [r7, #20]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d3d4      	bcc.n	800f06a <mg_sha256_update+0x12>
    }
  }
}
 800f0c0:	bf00      	nop
 800f0c2:	bf00      	nop
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bdb0      	pop	{r4, r5, r7, pc}

0800f0ca <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 800f0ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0da:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b37      	cmp	r3, #55	@ 0x37
 800f0e0:	d814      	bhi.n	800f10c <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	60fa      	str	r2, [r7, #12]
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	2280      	movs	r2, #128	@ 0x80
 800f0ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800f0f2:	e007      	b.n	800f104 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	60fa      	str	r2, [r7, #12]
 800f0fa:	683a      	ldr	r2, [r7, #0]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	2200      	movs	r2, #0
 800f100:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b37      	cmp	r3, #55	@ 0x37
 800f108:	d9f4      	bls.n	800f0f4 <mg_sha256_final+0x2a>
 800f10a:	e01d      	b.n	800f148 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	1c5a      	adds	r2, r3, #1
 800f110:	60fa      	str	r2, [r7, #12]
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	4413      	add	r3, r2
 800f116:	2280      	movs	r2, #128	@ 0x80
 800f118:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800f11c:	e007      	b.n	800f12e <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	60fa      	str	r2, [r7, #12]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	4413      	add	r3, r2
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2b3f      	cmp	r3, #63	@ 0x3f
 800f132:	d9f4      	bls.n	800f11e <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 800f134:	6838      	ldr	r0, [r7, #0]
 800f136:	f7ff fd87 	bl	800ec48 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	332c      	adds	r3, #44	@ 0x2c
 800f13e:	2238      	movs	r2, #56	@ 0x38
 800f140:	2100      	movs	r1, #0
 800f142:	4618      	mov	r0, r3
 800f144:	f00f fa95 	bl	801e672 <memset>
  }

  ctx->bits += ctx->len * 8;
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800f152:	00c9      	lsls	r1, r1, #3
 800f154:	2000      	movs	r0, #0
 800f156:	460c      	mov	r4, r1
 800f158:	4605      	mov	r5, r0
 800f15a:	eb12 0804 	adds.w	r8, r2, r4
 800f15e:	eb43 0905 	adc.w	r9, r3, r5
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f16e:	b2d2      	uxtb	r2, r2
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f17c:	f04f 0200 	mov.w	r2, #0
 800f180:	f04f 0300 	mov.w	r3, #0
 800f184:	0a02      	lsrs	r2, r0, #8
 800f186:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800f18a:	0a0b      	lsrs	r3, r1, #8
 800f18c:	b2d2      	uxtb	r2, r2
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f19a:	f04f 0200 	mov.w	r2, #0
 800f19e:	f04f 0300 	mov.w	r3, #0
 800f1a2:	0c02      	lsrs	r2, r0, #16
 800f1a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800f1a8:	0c0b      	lsrs	r3, r1, #16
 800f1aa:	b2d2      	uxtb	r2, r2
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f1b8:	f04f 0200 	mov.w	r2, #0
 800f1bc:	f04f 0300 	mov.w	r3, #0
 800f1c0:	0e02      	lsrs	r2, r0, #24
 800f1c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800f1c6:	0e0b      	lsrs	r3, r1, #24
 800f1c8:	b2d2      	uxtb	r2, r2
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f1d6:	f04f 0200 	mov.w	r2, #0
 800f1da:	f04f 0300 	mov.w	r3, #0
 800f1de:	000a      	movs	r2, r1
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f1f0:	f04f 0200 	mov.w	r2, #0
 800f1f4:	f04f 0300 	mov.w	r3, #0
 800f1f8:	0a0a      	lsrs	r2, r1, #8
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	b2d2      	uxtb	r2, r2
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f20a:	f04f 0200 	mov.w	r2, #0
 800f20e:	f04f 0300 	mov.w	r3, #0
 800f212:	0c0a      	lsrs	r2, r1, #16
 800f214:	2300      	movs	r3, #0
 800f216:	b2d2      	uxtb	r2, r2
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800f224:	f04f 0200 	mov.w	r2, #0
 800f228:	f04f 0300 	mov.w	r3, #0
 800f22c:	0e0a      	lsrs	r2, r1, #24
 800f22e:	2300      	movs	r3, #0
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 800f238:	6838      	ldr	r0, [r7, #0]
 800f23a:	f7ff fd05 	bl	800ec48 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	e071      	b.n	800f328 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f1c3 0303 	rsb	r3, r3, #3
 800f24e:	00db      	lsls	r3, r3, #3
 800f250:	fa22 f103 	lsr.w	r1, r2, r3
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	4413      	add	r3, r2
 800f25a:	b2ca      	uxtb	r2, r1
 800f25c:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	685a      	ldr	r2, [r3, #4]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f1c3 0303 	rsb	r3, r3, #3
 800f268:	00db      	lsls	r3, r3, #3
 800f26a:	fa22 f103 	lsr.w	r1, r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	3304      	adds	r3, #4
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	4413      	add	r3, r2
 800f276:	b2ca      	uxtb	r2, r1
 800f278:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f1c3 0303 	rsb	r3, r3, #3
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	fa22 f103 	lsr.w	r1, r2, r3
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	3308      	adds	r3, #8
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	4413      	add	r3, r2
 800f292:	b2ca      	uxtb	r2, r1
 800f294:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	68da      	ldr	r2, [r3, #12]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f1c3 0303 	rsb	r3, r3, #3
 800f2a0:	00db      	lsls	r3, r3, #3
 800f2a2:	fa22 f103 	lsr.w	r1, r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	330c      	adds	r3, #12
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	b2ca      	uxtb	r2, r1
 800f2b0:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	691a      	ldr	r2, [r3, #16]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f1c3 0303 	rsb	r3, r3, #3
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	fa22 f103 	lsr.w	r1, r2, r3
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	3310      	adds	r3, #16
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	b2ca      	uxtb	r2, r1
 800f2cc:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f1c3 0303 	rsb	r3, r3, #3
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	fa22 f103 	lsr.w	r1, r2, r3
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	3314      	adds	r3, #20
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	b2ca      	uxtb	r2, r1
 800f2e8:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	699a      	ldr	r2, [r3, #24]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f1c3 0303 	rsb	r3, r3, #3
 800f2f4:	00db      	lsls	r3, r3, #3
 800f2f6:	fa22 f103 	lsr.w	r1, r2, r3
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3318      	adds	r3, #24
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	4413      	add	r3, r2
 800f302:	b2ca      	uxtb	r2, r1
 800f304:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	69da      	ldr	r2, [r3, #28]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f1c3 0303 	rsb	r3, r3, #3
 800f310:	00db      	lsls	r3, r3, #3
 800f312:	fa22 f103 	lsr.w	r1, r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	331c      	adds	r3, #28
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	4413      	add	r3, r2
 800f31e:	b2ca      	uxtb	r2, r1
 800f320:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	3301      	adds	r3, #1
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d98a      	bls.n	800f244 <mg_sha256_final+0x17a>
  }
}
 800f32e:	bf00      	nop
 800f330:	bf00      	nop
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f33a <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b0a0      	sub	sp, #128	@ 0x80
 800f33e:	af00      	add	r7, sp, #0
 800f340:	60f8      	str	r0, [r7, #12]
 800f342:	60b9      	str	r1, [r7, #8]
 800f344:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 800f346:	f107 0310 	add.w	r3, r7, #16
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7ff fc40 	bl	800ebd0 <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 800f350:	f107 0310 	add.w	r3, r7, #16
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	68b9      	ldr	r1, [r7, #8]
 800f358:	4618      	mov	r0, r3
 800f35a:	f7ff fe7d 	bl	800f058 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800f35e:	f107 0310 	add.w	r3, r7, #16
 800f362:	4619      	mov	r1, r3
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7ff feb0 	bl	800f0ca <mg_sha256_final>
}
 800f36a:	bf00      	nop
 800f36c:	3780      	adds	r7, #128	@ 0x80
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 800f372:	b590      	push	{r4, r7, lr}
 800f374:	b0d3      	sub	sp, #332	@ 0x14c
 800f376:	af00      	add	r7, sp, #0
 800f378:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 800f37c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800f380:	6020      	str	r0, [r4, #0]
 800f382:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800f386:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800f38a:	6001      	str	r1, [r0, #0]
 800f38c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 800f390:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 800f394:	600a      	str	r2, [r1, #0]
 800f396:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800f39a:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800f39e:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 800f3a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f3a4:	2240      	movs	r2, #64	@ 0x40
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f00f f962 	bl	801e672 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 800f3ae:	f107 0310 	add.w	r3, r7, #16
 800f3b2:	2240      	movs	r2, #64	@ 0x40
 800f3b4:	2136      	movs	r1, #54	@ 0x36
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f00f f95b 	bl	801e672 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 800f3bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f3c0:	2240      	movs	r2, #64	@ 0x40
 800f3c2:	215c      	movs	r1, #92	@ 0x5c
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f00f f954 	bl	801e672 <memset>
  if (keysz < 64) {
 800f3ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f3ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2b3f      	cmp	r3, #63	@ 0x3f
 800f3d6:	d815      	bhi.n	800f404 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 800f3d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f3dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d029      	beq.n	800f43a <mg_hmac_sha256+0xc8>
 800f3e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f3ea:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800f3ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f3f2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800f3f6:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 800f3fa:	6812      	ldr	r2, [r2, #0]
 800f3fc:	6819      	ldr	r1, [r3, #0]
 800f3fe:	f00f f91e 	bl	801e63e <memmove>
 800f402:	e01a      	b.n	800f43a <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 800f404:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff fbe1 	bl	800ebd0 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 800f40e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f412:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 800f416:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f41a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800f41e:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	6819      	ldr	r1, [r3, #0]
 800f426:	f7ff fe17 	bl	800f058 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 800f42a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f42e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f432:	4611      	mov	r1, r2
 800f434:	4618      	mov	r0, r3
 800f436:	f7ff fe48 	bl	800f0ca <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 800f43a:	2300      	movs	r3, #0
 800f43c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800f440:	e032      	b.n	800f4a8 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 800f442:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f446:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800f44a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f44e:	4413      	add	r3, r2
 800f450:	781a      	ldrb	r2, [r3, #0]
 800f452:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800f456:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f45a:	440b      	add	r3, r1
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	4053      	eors	r3, r2
 800f460:	b2d9      	uxtb	r1, r3
 800f462:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f466:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800f46a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f46e:	4413      	add	r3, r2
 800f470:	460a      	mov	r2, r1
 800f472:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 800f474:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800f478:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f47c:	4413      	add	r3, r2
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 800f484:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f488:	440b      	add	r3, r1
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	4053      	eors	r3, r2
 800f48e:	b2d9      	uxtb	r1, r3
 800f490:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800f494:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f498:	4413      	add	r3, r2
 800f49a:	460a      	mov	r2, r1
 800f49c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 800f49e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800f4a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f4ac:	2b3f      	cmp	r3, #63	@ 0x3f
 800f4ae:	d9c8      	bls.n	800f442 <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 800f4b0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7ff fb8b 	bl	800ebd0 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 800f4ba:	f107 0110 	add.w	r1, r7, #16
 800f4be:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f4c2:	2240      	movs	r2, #64	@ 0x40
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fdc7 	bl	800f058 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 800f4ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f4ce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800f4d2:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800f4d6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800f4da:	6819      	ldr	r1, [r3, #0]
 800f4dc:	f7ff fdbc 	bl	800f058 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800f4e0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f4e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f4e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	f7ff fdeb 	bl	800f0ca <mg_sha256_final>
  mg_sha256_init(&ctx);
 800f4f4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff fb69 	bl	800ebd0 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 800f4fe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800f502:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800f506:	2240      	movs	r2, #64	@ 0x40
 800f508:	4618      	mov	r0, r3
 800f50a:	f7ff fda5 	bl	800f058 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 800f50e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f512:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800f516:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 800f51a:	2220      	movs	r2, #32
 800f51c:	6819      	ldr	r1, [r3, #0]
 800f51e:	f7ff fd9b 	bl	800f058 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 800f522:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800f526:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800f52a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800f52e:	4611      	mov	r1, r2
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	f7ff fdca 	bl	800f0ca <mg_sha256_final>
}
 800f536:	bf00      	nop
 800f538:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd90      	pop	{r4, r7, pc}

0800f540 <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 800f540:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f544:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f54e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f552:	6018      	str	r0, [r3, #0]
 800f554:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f558:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f55c:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 800f55e:	2300      	movs	r3, #0
 800f560:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800f564:	2300      	movs	r3, #0
 800f566:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 800f56a:	e113      	b.n	800f794 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 800f56c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 800f570:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f574:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4413      	add	r3, r2
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2200      	movs	r2, #0
 800f582:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800f586:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800f58a:	f04f 0000 	mov.w	r0, #0
 800f58e:	f04f 0100 	mov.w	r1, #0
 800f592:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800f596:	0619      	lsls	r1, r3, #24
 800f598:	2000      	movs	r0, #0
 800f59a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f5a4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4413      	add	r3, r2
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800f5b6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800f5ba:	f04f 0200 	mov.w	r2, #0
 800f5be:	f04f 0300 	mov.w	r3, #0
 800f5c2:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 800f5c6:	0433      	lsls	r3, r6, #16
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	ea40 0602 	orr.w	r6, r0, r2
 800f5ce:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 800f5d2:	430b      	orrs	r3, r1
 800f5d4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 800f5d8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f5dc:	1c9a      	adds	r2, r3, #2
 800f5de:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f5e2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800f5f4:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800f5f8:	f04f 0200 	mov.w	r2, #0
 800f5fc:	f04f 0300 	mov.w	r3, #0
 800f600:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800f604:	020b      	lsls	r3, r1, #8
 800f606:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 800f608:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 800f60c:	4311      	orrs	r1, r2
 800f60e:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 800f612:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 800f616:	430b      	orrs	r3, r1
 800f618:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 800f61c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f620:	1cda      	adds	r2, r3, #3
 800f622:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f626:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4413      	add	r3, r2
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	b2db      	uxtb	r3, r3
 800f632:	2200      	movs	r2, #0
 800f634:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800f638:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 800f63c:	f04f 0200 	mov.w	r2, #0
 800f640:	f04f 0300 	mov.w	r3, #0
 800f644:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 800f648:	000b      	movs	r3, r1
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800f650:	4311      	orrs	r1, r2
 800f652:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 800f656:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800f65a:	430b      	orrs	r3, r1
 800f65c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 800f660:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f664:	1d1a      	adds	r2, r3, #4
 800f666:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f66a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	b2db      	uxtb	r3, r3
 800f676:	2200      	movs	r2, #0
 800f678:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800f67c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800f680:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 800f684:	460b      	mov	r3, r1
 800f686:	0a1b      	lsrs	r3, r3, #8
 800f688:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800f68c:	460b      	mov	r3, r1
 800f68e:	061b      	lsls	r3, r3, #24
 800f690:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 800f694:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800f698:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 800f69c:	4602      	mov	r2, r0
 800f69e:	ea43 0a02 	orr.w	sl, r3, r2
 800f6a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800f6a6:	460a      	mov	r2, r1
 800f6a8:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 800f6ac:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f6b0:	1d5a      	adds	r2, r3, #5
 800f6b2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f6b6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4413      	add	r3, r2
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800f6c8:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800f6cc:	f04f 0200 	mov.w	r2, #0
 800f6d0:	f04f 0300 	mov.w	r3, #0
 800f6d4:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 800f6d8:	040b      	lsls	r3, r1, #16
 800f6da:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 800f6de:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800f6e2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 800f6e6:	040a      	lsls	r2, r1, #16
 800f6e8:	ea4a 0802 	orr.w	r8, sl, r2
 800f6ec:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 800f6f0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f6f4:	1d9a      	adds	r2, r3, #6
 800f6f6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f6fa:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	4413      	add	r3, r2
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2200      	movs	r2, #0
 800f708:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800f70c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800f710:	f04f 0200 	mov.w	r2, #0
 800f714:	f04f 0300 	mov.w	r3, #0
 800f718:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 800f71c:	020b      	lsls	r3, r1, #8
 800f71e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800f722:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f726:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800f72a:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 800f72c:	ea48 0402 	orr.w	r4, r8, r2
 800f730:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 800f734:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f738:	1dda      	adds	r2, r3, #7
 800f73a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f73e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	4413      	add	r3, r2
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2200      	movs	r2, #0
 800f74c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800f750:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800f754:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 800f758:	460b      	mov	r3, r1
 800f75a:	4323      	orrs	r3, r4
 800f75c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800f760:	4613      	mov	r3, r2
 800f762:	432b      	orrs	r3, r5
 800f764:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 800f768:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f76c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f770:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	4413      	add	r3, r2
 800f778:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 800f77c:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 800f780:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f784:	3301      	adds	r3, #1
 800f786:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800f78a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 800f78e:	3308      	adds	r3, #8
 800f790:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 800f794:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f798:	2b0f      	cmp	r3, #15
 800f79a:	f77f aee7 	ble.w	800f56c <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 800f79e:	e0f8      	b.n	800f992 <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 800f7a0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f7a4:	1e99      	subs	r1, r3, #2
 800f7a6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f7aa:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f7ae:	00cb      	lsls	r3, r1, #3
 800f7b0:	4413      	add	r3, r2
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	0358      	lsls	r0, r3, #13
 800f7b8:	0cd1      	lsrs	r1, r2, #19
 800f7ba:	4301      	orrs	r1, r0
 800f7bc:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 800f7c0:	0351      	lsls	r1, r2, #13
 800f7c2:	0cdb      	lsrs	r3, r3, #19
 800f7c4:	430b      	orrs	r3, r1
 800f7c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800f7ca:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f7ce:	1e99      	subs	r1, r3, #2
 800f7d0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f7d4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f7d8:	00cb      	lsls	r3, r1, #3
 800f7da:	4413      	add	r3, r2
 800f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e0:	0f50      	lsrs	r0, r2, #29
 800f7e2:	00d9      	lsls	r1, r3, #3
 800f7e4:	4301      	orrs	r1, r0
 800f7e6:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 800f7ea:	0f59      	lsrs	r1, r3, #29
 800f7ec:	00d3      	lsls	r3, r2, #3
 800f7ee:	430b      	orrs	r3, r1
 800f7f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800f7f4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800f7f8:	4623      	mov	r3, r4
 800f7fa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 800f7fe:	4602      	mov	r2, r0
 800f800:	4053      	eors	r3, r2
 800f802:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800f806:	462b      	mov	r3, r5
 800f808:	460a      	mov	r2, r1
 800f80a:	4053      	eors	r3, r2
 800f80c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800f810:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f814:	1e99      	subs	r1, r3, #2
 800f816:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f81a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f81e:	00cb      	lsls	r3, r1, #3
 800f820:	4413      	add	r3, r2
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f04f 0000 	mov.w	r0, #0
 800f82a:	f04f 0100 	mov.w	r1, #0
 800f82e:	0990      	lsrs	r0, r2, #6
 800f830:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800f834:	0999      	lsrs	r1, r3, #6
 800f836:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800f83a:	4623      	mov	r3, r4
 800f83c:	4043      	eors	r3, r0
 800f83e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800f842:	462b      	mov	r3, r5
 800f844:	404b      	eors	r3, r1
 800f846:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800f84a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f84e:	1fd9      	subs	r1, r3, #7
 800f850:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f854:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f858:	00cb      	lsls	r3, r1, #3
 800f85a:	4413      	add	r3, r2
 800f85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f860:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 800f864:	4621      	mov	r1, r4
 800f866:	1889      	adds	r1, r1, r2
 800f868:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 800f86c:	4629      	mov	r1, r5
 800f86e:	eb41 0303 	adc.w	r3, r1, r3
 800f872:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800f876:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f87a:	f1a3 010f 	sub.w	r1, r3, #15
 800f87e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f882:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f886:	00cb      	lsls	r3, r1, #3
 800f888:	4413      	add	r3, r2
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	07d8      	lsls	r0, r3, #31
 800f890:	0851      	lsrs	r1, r2, #1
 800f892:	4301      	orrs	r1, r0
 800f894:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800f898:	07d1      	lsls	r1, r2, #31
 800f89a:	085b      	lsrs	r3, r3, #1
 800f89c:	430b      	orrs	r3, r1
 800f89e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800f8a2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f8a6:	f1a3 010f 	sub.w	r1, r3, #15
 800f8aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f8ae:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f8b2:	00cb      	lsls	r3, r1, #3
 800f8b4:	4413      	add	r3, r2
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	0618      	lsls	r0, r3, #24
 800f8bc:	0a11      	lsrs	r1, r2, #8
 800f8be:	4301      	orrs	r1, r0
 800f8c0:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 800f8c4:	0611      	lsls	r1, r2, #24
 800f8c6:	0a1b      	lsrs	r3, r3, #8
 800f8c8:	430b      	orrs	r3, r1
 800f8ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800f8ce:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 800f8d2:	4623      	mov	r3, r4
 800f8d4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 800f8d8:	4602      	mov	r2, r0
 800f8da:	4053      	eors	r3, r2
 800f8dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800f8e0:	462b      	mov	r3, r5
 800f8e2:	460a      	mov	r2, r1
 800f8e4:	4053      	eors	r3, r2
 800f8e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800f8ea:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f8ee:	f1a3 010f 	sub.w	r1, r3, #15
 800f8f2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f8f6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f8fa:	00cb      	lsls	r3, r1, #3
 800f8fc:	4413      	add	r3, r2
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	f04f 0000 	mov.w	r0, #0
 800f906:	f04f 0100 	mov.w	r1, #0
 800f90a:	09d0      	lsrs	r0, r2, #7
 800f90c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800f910:	09d9      	lsrs	r1, r3, #7
 800f912:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 800f916:	4623      	mov	r3, r4
 800f918:	4043      	eors	r3, r0
 800f91a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800f91e:	462b      	mov	r3, r5
 800f920:	404b      	eors	r3, r1
 800f922:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800f926:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 800f92a:	4623      	mov	r3, r4
 800f92c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800f930:	4602      	mov	r2, r0
 800f932:	189b      	adds	r3, r3, r2
 800f934:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800f938:	462b      	mov	r3, r5
 800f93a:	460a      	mov	r2, r1
 800f93c:	4153      	adcs	r3, r2
 800f93e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800f942:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f946:	f1a3 0110 	sub.w	r1, r3, #16
 800f94a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f94e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f952:	00cb      	lsls	r3, r1, #3
 800f954:	4413      	add	r3, r2
 800f956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 800f95e:	4621      	mov	r1, r4
 800f960:	1889      	adds	r1, r1, r2
 800f962:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 800f966:	4629      	mov	r1, r5
 800f968:	eb41 0303 	adc.w	r3, r1, r3
 800f96c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800f970:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f974:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800f978:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f97c:	00db      	lsls	r3, r3, #3
 800f97e:	4413      	add	r3, r2
 800f980:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800f984:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 800f988:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f98c:	3301      	adds	r3, #1
 800f98e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800f992:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800f996:	2b4f      	cmp	r3, #79	@ 0x4f
 800f998:	f77f af02 	ble.w	800f7a0 <mg_sha384_transform+0x260>

  a = ctx->state[0];
 800f99c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f9a0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 800f9ae:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 800f9b2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f9b6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800f9c0:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 800f9c4:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 800f9c8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f9cc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f9d6:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 800f9da:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 800f9de:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f9e2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800f9ec:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 800f9f0:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 800f9f4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800f9f8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa02:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 800fa06:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 800fa0a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fa0e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800fa18:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 800fa1c:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 800fa20:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fa24:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800fa2e:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 800fa32:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 800fa36:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fa3a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fa44:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 800fa48:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800fa52:	e1c3      	b.n	800fddc <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 800fa54:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800fa58:	049a      	lsls	r2, r3, #18
 800fa5a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fa5e:	0b9b      	lsrs	r3, r3, #14
 800fa60:	4313      	orrs	r3, r2
 800fa62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800fa66:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fa6a:	049a      	lsls	r2, r3, #18
 800fa6c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800fa70:	0b9b      	lsrs	r3, r3, #14
 800fa72:	4313      	orrs	r3, r2
 800fa74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800fa78:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800fa7c:	039a      	lsls	r2, r3, #14
 800fa7e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fa82:	0c9b      	lsrs	r3, r3, #18
 800fa84:	4313      	orrs	r3, r2
 800fa86:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800fa8a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fa8e:	039a      	lsls	r2, r3, #14
 800fa90:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800fa94:	0c9b      	lsrs	r3, r3, #18
 800fa96:	4313      	orrs	r3, r2
 800fa98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800fa9c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800faa0:	4623      	mov	r3, r4
 800faa2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800faa6:	4602      	mov	r2, r0
 800faa8:	4053      	eors	r3, r2
 800faaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800faae:	462b      	mov	r3, r5
 800fab0:	460a      	mov	r2, r1
 800fab2:	4053      	eors	r3, r2
 800fab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800fab8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fabc:	0a5a      	lsrs	r2, r3, #9
 800fabe:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800fac2:	05db      	lsls	r3, r3, #23
 800fac4:	4313      	orrs	r3, r2
 800fac6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800faca:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 800face:	0a5a      	lsrs	r2, r3, #9
 800fad0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 800fad4:	05db      	lsls	r3, r3, #23
 800fad6:	4313      	orrs	r3, r2
 800fad8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fadc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800fae0:	4623      	mov	r3, r4
 800fae2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800fae6:	4602      	mov	r2, r0
 800fae8:	4053      	eors	r3, r2
 800faea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800faee:	462b      	mov	r3, r5
 800faf0:	460a      	mov	r2, r1
 800faf2:	4053      	eors	r3, r2
 800faf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800faf8:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800fb04:	4621      	mov	r1, r4
 800fb06:	1889      	adds	r1, r1, r2
 800fb08:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	eb41 0303 	adc.w	r3, r1, r3
 800fb12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800fb16:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800fb1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb1e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	ea00 0402 	and.w	r4, r0, r2
 800fb2a:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 800fb2e:	400b      	ands	r3, r1
 800fb30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800fb34:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	43d1      	mvns	r1, r2
 800fb3e:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800fb42:	43db      	mvns	r3, r3
 800fb44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800fb48:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb50:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800fb54:	4621      	mov	r1, r4
 800fb56:	4011      	ands	r1, r2
 800fb58:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	400b      	ands	r3, r1
 800fb60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb64:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800fb68:	4623      	mov	r3, r4
 800fb6a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800fb6e:	4602      	mov	r2, r0
 800fb70:	4053      	eors	r3, r2
 800fb72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fb76:	462b      	mov	r3, r5
 800fb78:	460a      	mov	r2, r1
 800fb7a:	4053      	eors	r3, r2
 800fb7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800fb80:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800fb84:	4623      	mov	r3, r4
 800fb86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	189b      	adds	r3, r3, r2
 800fb8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb92:	462b      	mov	r3, r5
 800fb94:	460a      	mov	r2, r1
 800fb96:	4153      	adcs	r3, r2
 800fb98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb9c:	4a8e      	ldr	r2, [pc, #568]	@ (800fdd8 <mg_sha384_transform+0x898>)
 800fb9e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800fba2:	00db      	lsls	r3, r3, #3
 800fba4:	4413      	add	r3, r2
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800fbae:	4621      	mov	r1, r4
 800fbb0:	1889      	adds	r1, r1, r2
 800fbb2:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	eb41 0303 	adc.w	r3, r1, r3
 800fbbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fbc0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fbc4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800fbc8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	4413      	add	r3, r2
 800fbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800fbd8:	4621      	mov	r1, r4
 800fbda:	1889      	adds	r1, r1, r2
 800fbdc:	61b9      	str	r1, [r7, #24]
 800fbde:	4629      	mov	r1, r5
 800fbe0:	eb41 0303 	adc.w	r3, r1, r3
 800fbe4:	61fb      	str	r3, [r7, #28]
 800fbe6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800fbea:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 800fbee:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 800fbf2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fbf6:	011a      	lsls	r2, r3, #4
 800fbf8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fbfc:	0f1b      	lsrs	r3, r3, #28
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800fc04:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fc08:	011a      	lsls	r2, r3, #4
 800fc0a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fc0e:	0f1b      	lsrs	r3, r3, #28
 800fc10:	4313      	orrs	r3, r2
 800fc12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800fc16:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fc1a:	089a      	lsrs	r2, r3, #2
 800fc1c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fc20:	079b      	lsls	r3, r3, #30
 800fc22:	4313      	orrs	r3, r2
 800fc24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fc28:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fc2c:	089a      	lsrs	r2, r3, #2
 800fc2e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fc32:	079b      	lsls	r3, r3, #30
 800fc34:	4313      	orrs	r3, r2
 800fc36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fc3a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800fc3e:	4623      	mov	r3, r4
 800fc40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800fc44:	4602      	mov	r2, r0
 800fc46:	4053      	eors	r3, r2
 800fc48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fc4c:	462b      	mov	r3, r5
 800fc4e:	460a      	mov	r2, r1
 800fc50:	4053      	eors	r3, r2
 800fc52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc56:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fc5a:	09da      	lsrs	r2, r3, #7
 800fc5c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fc60:	065b      	lsls	r3, r3, #25
 800fc62:	4313      	orrs	r3, r2
 800fc64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800fc68:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800fc6c:	09da      	lsrs	r2, r3, #7
 800fc6e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 800fc72:	065b      	lsls	r3, r3, #25
 800fc74:	4313      	orrs	r3, r2
 800fc76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800fc7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800fc7e:	4623      	mov	r3, r4
 800fc80:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800fc84:	4602      	mov	r2, r0
 800fc86:	4053      	eors	r3, r2
 800fc88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fc8c:	462b      	mov	r3, r5
 800fc8e:	460a      	mov	r2, r1
 800fc90:	4053      	eors	r3, r2
 800fc92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fc96:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800fc9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc9e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800fca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca6:	ea80 0402 	eor.w	r4, r0, r2
 800fcaa:	67bc      	str	r4, [r7, #120]	@ 0x78
 800fcac:	404b      	eors	r3, r1
 800fcae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fcb0:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800fcbc:	4621      	mov	r1, r4
 800fcbe:	4011      	ands	r1, r2
 800fcc0:	6739      	str	r1, [r7, #112]	@ 0x70
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	400b      	ands	r3, r1
 800fcc6:	677b      	str	r3, [r7, #116]	@ 0x74
 800fcc8:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800fccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fcd0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	ea00 0402 	and.w	r4, r0, r2
 800fcdc:	66bc      	str	r4, [r7, #104]	@ 0x68
 800fcde:	400b      	ands	r3, r1
 800fce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fce2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800fce6:	4623      	mov	r3, r4
 800fce8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800fcec:	4602      	mov	r2, r0
 800fcee:	4053      	eors	r3, r2
 800fcf0:	663b      	str	r3, [r7, #96]	@ 0x60
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	4053      	eors	r3, r2
 800fcf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800fcfa:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800fcfe:	4623      	mov	r3, r4
 800fd00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fd04:	4602      	mov	r2, r0
 800fd06:	189b      	adds	r3, r3, r2
 800fd08:	613b      	str	r3, [r7, #16]
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	460a      	mov	r2, r1
 800fd0e:	4153      	adcs	r3, r2
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800fd16:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800fd1a:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 800fd1e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 800fd2a:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 800fd2e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800fd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd36:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 800fd3a:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 800fd3e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800fd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd46:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 800fd4a:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 800fd4e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800fd52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd56:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	1884      	adds	r4, r0, r2
 800fd60:	60bc      	str	r4, [r7, #8]
 800fd62:	eb41 0303 	adc.w	r3, r1, r3
 800fd66:	60fb      	str	r3, [r7, #12]
 800fd68:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fd6c:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 800fd70:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 800fd74:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 800fd80:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 800fd84:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 800fd90:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 800fd94:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800fd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9c:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 800fda0:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 800fda4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800fda8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdac:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	1884      	adds	r4, r0, r2
 800fdb6:	603c      	str	r4, [r7, #0]
 800fdb8:	eb41 0303 	adc.w	r3, r1, r3
 800fdbc:	607b      	str	r3, [r7, #4]
 800fdbe:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fdc2:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 800fdc6:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 800fdca:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800fdce:	3301      	adds	r3, #1
 800fdd0:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800fdd4:	e002      	b.n	800fddc <mg_sha384_transform+0x89c>
 800fdd6:	bf00      	nop
 800fdd8:	080224c8 	.word	0x080224c8
 800fddc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 800fde0:	2b4f      	cmp	r3, #79	@ 0x4f
 800fde2:	f77f ae37 	ble.w	800fa54 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 800fde6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fdea:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdf4:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800fdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfc:	1884      	adds	r4, r0, r2
 800fdfe:	65bc      	str	r4, [r7, #88]	@ 0x58
 800fe00:	eb41 0303 	adc.w	r3, r1, r3
 800fe04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fe06:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe0a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800fe14:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 800fe18:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe1c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800fe26:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 800fe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2e:	1884      	adds	r4, r0, r2
 800fe30:	653c      	str	r4, [r7, #80]	@ 0x50
 800fe32:	eb41 0303 	adc.w	r3, r1, r3
 800fe36:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe38:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe3c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fe46:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 800fe4a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe4e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fe58:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	1884      	adds	r4, r0, r2
 800fe62:	64bc      	str	r4, [r7, #72]	@ 0x48
 800fe64:	eb41 0303 	adc.w	r3, r1, r3
 800fe68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe6a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe6e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fe78:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 800fe7c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fe80:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800fe8a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	1884      	adds	r4, r0, r2
 800fe94:	643c      	str	r4, [r7, #64]	@ 0x40
 800fe96:	eb41 0303 	adc.w	r3, r1, r3
 800fe9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe9c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fea0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800feaa:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 800feae:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800feb2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800febc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	1884      	adds	r4, r0, r2
 800fec6:	63bc      	str	r4, [r7, #56]	@ 0x38
 800fec8:	eb41 0303 	adc.w	r3, r1, r3
 800fecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fece:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fed2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800fedc:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 800fee0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800fee4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800feee:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	1884      	adds	r4, r0, r2
 800fef8:	633c      	str	r4, [r7, #48]	@ 0x30
 800fefa:	eb41 0303 	adc.w	r3, r1, r3
 800fefe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff00:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800ff04:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ff0e:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 800ff12:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800ff16:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800ff20:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ff24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff28:	1884      	adds	r4, r0, r2
 800ff2a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800ff2c:	eb41 0303 	adc.w	r3, r1, r3
 800ff30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff32:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800ff36:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ff40:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 800ff44:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800ff48:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ff52:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	1884      	adds	r4, r0, r2
 800ff5c:	623c      	str	r4, [r7, #32]
 800ff5e:	eb41 0303 	adc.w	r3, r1, r3
 800ff62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff64:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800ff68:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ff72:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 800ff76:	bf00      	nop
 800ff78:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ff82:	4770      	bx	lr
 800ff84:	0000      	movs	r0, r0
	...

0800ff88 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 800ff98:	6879      	ldr	r1, [r7, #4]
 800ff9a:	f04f 0200 	mov.w	r2, #0
 800ff9e:	f04f 0300 	mov.w	r3, #0
 800ffa2:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 800ffa6:	6879      	ldr	r1, [r7, #4]
 800ffa8:	f04f 0200 	mov.w	r2, #0
 800ffac:	f04f 0300 	mov.w	r3, #0
 800ffb0:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 800ffb4:	6879      	ldr	r1, [r7, #4]
 800ffb6:	a31a      	add	r3, pc, #104	@ (adr r3, 8010020 <mg_sha384_init+0x98>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 800ffc0:	6879      	ldr	r1, [r7, #4]
 800ffc2:	a319      	add	r3, pc, #100	@ (adr r3, 8010028 <mg_sha384_init+0xa0>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 800ffcc:	6879      	ldr	r1, [r7, #4]
 800ffce:	a318      	add	r3, pc, #96	@ (adr r3, 8010030 <mg_sha384_init+0xa8>)
 800ffd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 800ffd8:	6879      	ldr	r1, [r7, #4]
 800ffda:	a317      	add	r3, pc, #92	@ (adr r3, 8010038 <mg_sha384_init+0xb0>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 800ffe4:	6879      	ldr	r1, [r7, #4]
 800ffe6:	a316      	add	r3, pc, #88	@ (adr r3, 8010040 <mg_sha384_init+0xb8>)
 800ffe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffec:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 800fff0:	6879      	ldr	r1, [r7, #4]
 800fff2:	a315      	add	r3, pc, #84	@ (adr r3, 8010048 <mg_sha384_init+0xc0>)
 800fff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 800fffc:	6879      	ldr	r1, [r7, #4]
 800fffe:	a314      	add	r3, pc, #80	@ (adr r3, 8010050 <mg_sha384_init+0xc8>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8010008:	6879      	ldr	r1, [r7, #4]
 801000a:	a313      	add	r3, pc, #76	@ (adr r3, 8010058 <mg_sha384_init+0xd0>)
 801000c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010010:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	c1059ed8 	.word	0xc1059ed8
 8010024:	cbbb9d5d 	.word	0xcbbb9d5d
 8010028:	367cd507 	.word	0x367cd507
 801002c:	629a292a 	.word	0x629a292a
 8010030:	3070dd17 	.word	0x3070dd17
 8010034:	9159015a 	.word	0x9159015a
 8010038:	f70e5939 	.word	0xf70e5939
 801003c:	152fecd8 	.word	0x152fecd8
 8010040:	ffc00b31 	.word	0xffc00b31
 8010044:	67332667 	.word	0x67332667
 8010048:	68581511 	.word	0x68581511
 801004c:	8eb44a87 	.word	0x8eb44a87
 8010050:	64f98fa7 	.word	0x64f98fa7
 8010054:	db0c2e0d 	.word	0xdb0c2e0d
 8010058:	befa4fa4 	.word	0xbefa4fa4
 801005c:	47b5481d 	.word	0x47b5481d

08010060 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8010060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010064:	b086      	sub	sp, #24
 8010066:	af00      	add	r7, sp, #0
 8010068:	60f8      	str	r0, [r7, #12]
 801006a:	60b9      	str	r1, [r7, #8]
 801006c:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 801006e:	2300      	movs	r3, #0
 8010070:	617b      	str	r3, [r7, #20]
 8010072:	e040      	b.n	80100f6 <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 8010074:	68ba      	ldr	r2, [r7, #8]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	441a      	add	r2, r3
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010080:	7811      	ldrb	r1, [r2, #0]
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	4413      	add	r3, r2
 8010086:	460a      	mov	r2, r1
 8010088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80100a0:	2b80      	cmp	r3, #128	@ 0x80
 80100a2:	d125      	bne.n	80100f0 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	3340      	adds	r3, #64	@ 0x40
 80100a8:	4619      	mov	r1, r3
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f7ff fa48 	bl	800f540 <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80100b6:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 80100ba:	f143 0500 	adc.w	r5, r3, #0
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80100ca:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80100ce:	f173 0300 	sbcs.w	r3, r3, #0
 80100d2:	d209      	bcs.n	80100e8 <mg_sha384_update+0x88>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80100da:	f112 0801 	adds.w	r8, r2, #1
 80100de:	f143 0900 	adc.w	r9, r3, #0
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	3301      	adds	r3, #1
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	697a      	ldr	r2, [r7, #20]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d3ba      	bcc.n	8010074 <mg_sha384_update+0x14>
    }
  }
}
 80100fe:	bf00      	nop
 8010100:	bf00      	nop
 8010102:	3718      	adds	r7, #24
 8010104:	46bd      	mov	sp, r7
 8010106:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801010a <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 801010a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 801011c:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8010124:	2b6f      	cmp	r3, #111	@ 0x6f
 8010126:	d814      	bhi.n	8010152 <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	617a      	str	r2, [r7, #20]
 801012e:	68ba      	ldr	r2, [r7, #8]
 8010130:	4413      	add	r3, r2
 8010132:	2280      	movs	r2, #128	@ 0x80
 8010134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8010138:	e007      	b.n	801014a <mg_sha384_final+0x40>
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	1c5a      	adds	r2, r3, #1
 801013e:	617a      	str	r2, [r7, #20]
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	4413      	add	r3, r2
 8010144:	2200      	movs	r2, #0
 8010146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b6f      	cmp	r3, #111	@ 0x6f
 801014e:	d9f4      	bls.n	801013a <mg_sha384_final+0x30>
 8010150:	e020      	b.n	8010194 <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	617a      	str	r2, [r7, #20]
 8010158:	68ba      	ldr	r2, [r7, #8]
 801015a:	4413      	add	r3, r2
 801015c:	2280      	movs	r2, #128	@ 0x80
 801015e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 8010162:	e007      	b.n	8010174 <mg_sha384_final+0x6a>
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	1c5a      	adds	r2, r3, #1
 8010168:	617a      	str	r2, [r7, #20]
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	4413      	add	r3, r2
 801016e:	2200      	movs	r2, #0
 8010170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	2b7f      	cmp	r3, #127	@ 0x7f
 8010178:	d9f4      	bls.n	8010164 <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	3340      	adds	r3, #64	@ 0x40
 801017e:	4619      	mov	r1, r3
 8010180:	68b8      	ldr	r0, [r7, #8]
 8010182:	f7ff f9dd 	bl	800f540 <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	3340      	adds	r3, #64	@ 0x40
 801018a:	2270      	movs	r2, #112	@ 0x70
 801018c:	2100      	movs	r1, #0
 801018e:	4618      	mov	r0, r3
 8010190:	f00e fa6f 	bl	801e672 <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801019a:	68b9      	ldr	r1, [r7, #8]
 801019c:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80101a0:	00c9      	lsls	r1, r1, #3
 80101a2:	2000      	movs	r0, #0
 80101a4:	4688      	mov	r8, r1
 80101a6:	4681      	mov	r9, r0
 80101a8:	eb12 0108 	adds.w	r1, r2, r8
 80101ac:	6039      	str	r1, [r7, #0]
 80101ae:	eb43 0309 	adc.w	r3, r3, r9
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80101ba:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80101c4:	68b9      	ldr	r1, [r7, #8]
 80101c6:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80101ca:	00c9      	lsls	r1, r1, #3
 80101cc:	2000      	movs	r0, #0
 80101ce:	460c      	mov	r4, r1
 80101d0:	4605      	mov	r5, r0
 80101d2:	42a2      	cmp	r2, r4
 80101d4:	41ab      	sbcs	r3, r5
 80101d6:	d209      	bcs.n	80101ec <mg_sha384_final+0xe2>
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80101de:	f112 0a01 	adds.w	sl, r2, #1
 80101e2:	f143 0b00 	adc.w	fp, r3, #0
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80101f2:	b2d2      	uxtb	r2, r2
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8010200:	f04f 0200 	mov.w	r2, #0
 8010204:	f04f 0300 	mov.w	r3, #0
 8010208:	0a02      	lsrs	r2, r0, #8
 801020a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801020e:	0a0b      	lsrs	r3, r1, #8
 8010210:	b2d2      	uxtb	r2, r2
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801021e:	f04f 0200 	mov.w	r2, #0
 8010222:	f04f 0300 	mov.w	r3, #0
 8010226:	0c02      	lsrs	r2, r0, #16
 8010228:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801022c:	0c0b      	lsrs	r3, r1, #16
 801022e:	b2d2      	uxtb	r2, r2
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801023c:	f04f 0200 	mov.w	r2, #0
 8010240:	f04f 0300 	mov.w	r3, #0
 8010244:	0e02      	lsrs	r2, r0, #24
 8010246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801024a:	0e0b      	lsrs	r3, r1, #24
 801024c:	b2d2      	uxtb	r2, r2
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801025a:	f04f 0200 	mov.w	r2, #0
 801025e:	f04f 0300 	mov.w	r3, #0
 8010262:	000a      	movs	r2, r1
 8010264:	2300      	movs	r3, #0
 8010266:	b2d2      	uxtb	r2, r2
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8010274:	f04f 0200 	mov.w	r2, #0
 8010278:	f04f 0300 	mov.w	r3, #0
 801027c:	0a0a      	lsrs	r2, r1, #8
 801027e:	2300      	movs	r3, #0
 8010280:	b2d2      	uxtb	r2, r2
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 801028e:	f04f 0200 	mov.w	r2, #0
 8010292:	f04f 0300 	mov.w	r3, #0
 8010296:	0c0a      	lsrs	r2, r1, #16
 8010298:	2300      	movs	r3, #0
 801029a:	b2d2      	uxtb	r2, r2
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80102a8:	f04f 0200 	mov.w	r2, #0
 80102ac:	f04f 0300 	mov.w	r3, #0
 80102b0:	0e0a      	lsrs	r2, r1, #24
 80102b2:	2300      	movs	r3, #0
 80102b4:	b2d2      	uxtb	r2, r2
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80102c2:	b2d2      	uxtb	r2, r2
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80102d0:	f04f 0200 	mov.w	r2, #0
 80102d4:	f04f 0300 	mov.w	r3, #0
 80102d8:	0a02      	lsrs	r2, r0, #8
 80102da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80102de:	0a0b      	lsrs	r3, r1, #8
 80102e0:	b2d2      	uxtb	r2, r2
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 80102ee:	f04f 0200 	mov.w	r2, #0
 80102f2:	f04f 0300 	mov.w	r3, #0
 80102f6:	0c02      	lsrs	r2, r0, #16
 80102f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80102fc:	0c0b      	lsrs	r3, r1, #16
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801030c:	f04f 0200 	mov.w	r2, #0
 8010310:	f04f 0300 	mov.w	r3, #0
 8010314:	0e02      	lsrs	r2, r0, #24
 8010316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801031a:	0e0b      	lsrs	r3, r1, #24
 801031c:	b2d2      	uxtb	r2, r2
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801032a:	f04f 0200 	mov.w	r2, #0
 801032e:	f04f 0300 	mov.w	r3, #0
 8010332:	000a      	movs	r2, r1
 8010334:	2300      	movs	r3, #0
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8010344:	f04f 0200 	mov.w	r2, #0
 8010348:	f04f 0300 	mov.w	r3, #0
 801034c:	0a0a      	lsrs	r2, r1, #8
 801034e:	2300      	movs	r3, #0
 8010350:	b2d2      	uxtb	r2, r2
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 801035e:	f04f 0200 	mov.w	r2, #0
 8010362:	f04f 0300 	mov.w	r3, #0
 8010366:	0c0a      	lsrs	r2, r1, #16
 8010368:	2300      	movs	r3, #0
 801036a:	b2d2      	uxtb	r2, r2
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8010378:	f04f 0200 	mov.w	r2, #0
 801037c:	f04f 0300 	mov.w	r3, #0
 8010380:	0e0a      	lsrs	r2, r1, #24
 8010382:	2300      	movs	r3, #0
 8010384:	b2d2      	uxtb	r2, r2
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	3340      	adds	r3, #64	@ 0x40
 8010390:	4619      	mov	r1, r3
 8010392:	68b8      	ldr	r0, [r7, #8]
 8010394:	f7ff f8d4 	bl	800f540 <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8010398:	2300      	movs	r3, #0
 801039a:	617b      	str	r3, [r7, #20]
 801039c:	e099      	b.n	80104d2 <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	4413      	add	r3, r2
 80103a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103aa:	f04f 0200 	mov.w	r2, #0
 80103ae:	f04f 0300 	mov.w	r3, #0
 80103b2:	0e0a      	lsrs	r2, r1, #24
 80103b4:	2300      	movs	r3, #0
 80103b6:	6979      	ldr	r1, [r7, #20]
 80103b8:	00c9      	lsls	r1, r1, #3
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	4401      	add	r1, r0
 80103be:	b2d3      	uxtb	r3, r2
 80103c0:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 80103c2:	68ba      	ldr	r2, [r7, #8]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	00db      	lsls	r3, r3, #3
 80103c8:	4413      	add	r3, r2
 80103ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103ce:	f04f 0200 	mov.w	r2, #0
 80103d2:	f04f 0300 	mov.w	r3, #0
 80103d6:	0c0a      	lsrs	r2, r1, #16
 80103d8:	2300      	movs	r3, #0
 80103da:	6979      	ldr	r1, [r7, #20]
 80103dc:	00c9      	lsls	r1, r1, #3
 80103de:	3101      	adds	r1, #1
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	4401      	add	r1, r0
 80103e4:	b2d3      	uxtb	r3, r2
 80103e6:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	4413      	add	r3, r2
 80103f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80103f4:	f04f 0200 	mov.w	r2, #0
 80103f8:	f04f 0300 	mov.w	r3, #0
 80103fc:	0a0a      	lsrs	r2, r1, #8
 80103fe:	2300      	movs	r3, #0
 8010400:	6979      	ldr	r1, [r7, #20]
 8010402:	00c9      	lsls	r1, r1, #3
 8010404:	3102      	adds	r1, #2
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	4401      	add	r1, r0
 801040a:	b2d3      	uxtb	r3, r2
 801040c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	4413      	add	r3, r2
 8010416:	e9d3 0100 	ldrd	r0, r1, [r3]
 801041a:	f04f 0200 	mov.w	r2, #0
 801041e:	f04f 0300 	mov.w	r3, #0
 8010422:	000a      	movs	r2, r1
 8010424:	2300      	movs	r3, #0
 8010426:	6979      	ldr	r1, [r7, #20]
 8010428:	00c9      	lsls	r1, r1, #3
 801042a:	3103      	adds	r1, #3
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	4401      	add	r1, r0
 8010430:	b2d3      	uxtb	r3, r2
 8010432:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 8010434:	68ba      	ldr	r2, [r7, #8]
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	00db      	lsls	r3, r3, #3
 801043a:	4413      	add	r3, r2
 801043c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010440:	f04f 0200 	mov.w	r2, #0
 8010444:	f04f 0300 	mov.w	r3, #0
 8010448:	0e02      	lsrs	r2, r0, #24
 801044a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801044e:	0e0b      	lsrs	r3, r1, #24
 8010450:	6979      	ldr	r1, [r7, #20]
 8010452:	00c9      	lsls	r1, r1, #3
 8010454:	3104      	adds	r1, #4
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	4401      	add	r1, r0
 801045a:	b2d3      	uxtb	r3, r2
 801045c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	00db      	lsls	r3, r3, #3
 8010464:	4413      	add	r3, r2
 8010466:	e9d3 0100 	ldrd	r0, r1, [r3]
 801046a:	f04f 0200 	mov.w	r2, #0
 801046e:	f04f 0300 	mov.w	r3, #0
 8010472:	0c02      	lsrs	r2, r0, #16
 8010474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010478:	0c0b      	lsrs	r3, r1, #16
 801047a:	6979      	ldr	r1, [r7, #20]
 801047c:	00c9      	lsls	r1, r1, #3
 801047e:	3105      	adds	r1, #5
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	4401      	add	r1, r0
 8010484:	b2d3      	uxtb	r3, r2
 8010486:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	00db      	lsls	r3, r3, #3
 801048e:	4413      	add	r3, r2
 8010490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010494:	f04f 0200 	mov.w	r2, #0
 8010498:	f04f 0300 	mov.w	r3, #0
 801049c:	0a02      	lsrs	r2, r0, #8
 801049e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80104a2:	0a0b      	lsrs	r3, r1, #8
 80104a4:	6979      	ldr	r1, [r7, #20]
 80104a6:	00c9      	lsls	r1, r1, #3
 80104a8:	3106      	adds	r1, #6
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	4401      	add	r1, r0
 80104ae:	b2d3      	uxtb	r3, r2
 80104b0:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	00db      	lsls	r3, r3, #3
 80104b8:	4413      	add	r3, r2
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	6979      	ldr	r1, [r7, #20]
 80104c0:	00c9      	lsls	r1, r1, #3
 80104c2:	3107      	adds	r1, #7
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	4401      	add	r1, r0
 80104c8:	b2d3      	uxtb	r3, r2
 80104ca:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	3301      	adds	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	2b05      	cmp	r3, #5
 80104d6:	f67f af62 	bls.w	801039e <mg_sha384_final+0x294>
  }
}
 80104da:	bf00      	nop
 80104dc:	bf00      	nop
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080104e6 <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b0ba      	sub	sp, #232	@ 0xe8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	60f8      	str	r0, [r7, #12]
 80104ee:	60b9      	str	r1, [r7, #8]
 80104f0:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 80104f2:	f107 0310 	add.w	r3, r7, #16
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7ff fd46 	bl	800ff88 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 80104fc:	f107 0310 	add.w	r3, r7, #16
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	68b9      	ldr	r1, [r7, #8]
 8010504:	4618      	mov	r0, r3
 8010506:	f7ff fdab 	bl	8010060 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 801050a:	f107 0310 	add.w	r3, r7, #16
 801050e:	4619      	mov	r1, r3
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f7ff fdfa 	bl	801010a <mg_sha384_final>
}
 8010516:	bf00      	nop
 8010518:	37e8      	adds	r7, #232	@ 0xe8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
	...

08010520 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 801052c:	4b05      	ldr	r3, [pc, #20]	@ (8010544 <mg_http_serve_ssi+0x24>)
 801052e:	2200      	movs	r2, #0
 8010530:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f7f6 fa81 	bl	8006a3c <mg_http_reply>
  (void) root, (void) fullpath;
}
 801053a:	bf00      	nop
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	08020c5c 	.word	0x08020c5c

08010548 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	60bb      	str	r3, [r7, #8]
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d004      	beq.n	8010566 <mg_str_s+0x1e>
 801055c:	6838      	ldr	r0, [r7, #0]
 801055e:	f7ef fecf 	bl	8000300 <strlen>
 8010562:	4603      	mov	r3, r0
 8010564:	e000      	b.n	8010568 <mg_str_s+0x20>
 8010566:	2300      	movs	r3, #0
 8010568:	60fb      	str	r3, [r7, #12]
  return str;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	461a      	mov	r2, r3
 801056e:	f107 0308 	add.w	r3, r7, #8
 8010572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010576:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8010582:	b480      	push	{r7}
 8010584:	b087      	sub	sp, #28
 8010586:	af00      	add	r7, sp, #0
 8010588:	60f8      	str	r0, [r7, #12]
 801058a:	60b9      	str	r1, [r7, #8]
 801058c:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	613b      	str	r3, [r7, #16]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	617b      	str	r3, [r7, #20]
  return str;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	461a      	mov	r2, r3
 801059a:	f107 0310 	add.w	r3, r7, #16
 801059e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr

080105b2 <mg_tolc>:

static int mg_tolc(char c) {
 80105b2:	b480      	push	{r7}
 80105b4:	b083      	sub	sp, #12
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	4603      	mov	r3, r0
 80105ba:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	2b40      	cmp	r3, #64	@ 0x40
 80105c0:	d905      	bls.n	80105ce <mg_tolc+0x1c>
 80105c2:	79fb      	ldrb	r3, [r7, #7]
 80105c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80105c6:	d802      	bhi.n	80105ce <mg_tolc+0x1c>
 80105c8:	79fb      	ldrb	r3, [r7, #7]
 80105ca:	3320      	adds	r3, #32
 80105cc:	e000      	b.n	80105d0 <mg_tolc+0x1e>
 80105ce:	79fb      	ldrb	r3, [r7, #7]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	1d3b      	adds	r3, r7, #4
 80105e6:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 80105ea:	2300      	movs	r3, #0
 80105ec:	617b      	str	r3, [r7, #20]
 80105ee:	2300      	movs	r3, #0
 80105f0:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d01c      	beq.n	8010632 <mg_strdup+0x56>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d019      	beq.n	8010632 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	3301      	adds	r3, #1
 8010602:	4619      	mov	r1, r3
 8010604:	2001      	movs	r0, #1
 8010606:	f00d fd5f 	bl	801e0c8 <calloc>
 801060a:	4603      	mov	r3, r0
 801060c:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00e      	beq.n	8010632 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	4619      	mov	r1, r3
 801061a:	69f8      	ldr	r0, [r7, #28]
 801061c:	f00e f95f 	bl	801e8de <memcpy>
      sc[s.len] = '\0';
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	69fa      	ldr	r2, [r7, #28]
 8010624:	4413      	add	r3, r2
 8010626:	2200      	movs	r2, #0
 8010628:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	461a      	mov	r2, r3
 8010636:	f107 0314 	add.w	r3, r7, #20
 801063a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801063e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	3720      	adds	r7, #32
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}

0801064a <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 801064a:	b490      	push	{r4, r7}
 801064c:	b088      	sub	sp, #32
 801064e:	af00      	add	r7, sp, #0
 8010650:	f107 0408 	add.w	r4, r7, #8
 8010654:	e884 0003 	stmia.w	r4, {r0, r1}
 8010658:	4639      	mov	r1, r7
 801065a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8010662:	e019      	b.n	8010698 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	4413      	add	r3, r2
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 801066e:	683a      	ldr	r2, [r7, #0]
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	4413      	add	r3, r2
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8010678:	69ba      	ldr	r2, [r7, #24]
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	429a      	cmp	r2, r3
 801067e:	da02      	bge.n	8010686 <mg_strcmp+0x3c>
 8010680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010684:	e01e      	b.n	80106c4 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8010686:	69ba      	ldr	r2, [r7, #24]
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	429a      	cmp	r2, r3
 801068c:	dd01      	ble.n	8010692 <mg_strcmp+0x48>
 801068e:	2301      	movs	r3, #1
 8010690:	e018      	b.n	80106c4 <mg_strcmp+0x7a>
    i++;
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	3301      	adds	r3, #1
 8010696:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	69fa      	ldr	r2, [r7, #28]
 801069c:	429a      	cmp	r2, r3
 801069e:	d203      	bcs.n	80106a8 <mg_strcmp+0x5e>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d3dd      	bcc.n	8010664 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	69fa      	ldr	r2, [r7, #28]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d201      	bcs.n	80106b4 <mg_strcmp+0x6a>
 80106b0:	2301      	movs	r3, #1
 80106b2:	e007      	b.n	80106c4 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	69fa      	ldr	r2, [r7, #28]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d202      	bcs.n	80106c2 <mg_strcmp+0x78>
 80106bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106c0:	e000      	b.n	80106c4 <mg_strcmp+0x7a>
  return 0;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3720      	adds	r7, #32
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bc90      	pop	{r4, r7}
 80106cc:	4770      	bx	lr

080106ce <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 80106ce:	b590      	push	{r4, r7, lr}
 80106d0:	b089      	sub	sp, #36	@ 0x24
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	f107 0408 	add.w	r4, r7, #8
 80106d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80106dc:	4639      	mov	r1, r7
 80106de:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80106e6:	e01f      	b.n	8010728 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	4413      	add	r3, r2
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff ff5e 	bl	80105b2 <mg_tolc>
 80106f6:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 80106f8:	683a      	ldr	r2, [r7, #0]
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	4413      	add	r3, r2
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	4618      	mov	r0, r3
 8010702:	f7ff ff56 	bl	80105b2 <mg_tolc>
 8010706:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8010708:	69ba      	ldr	r2, [r7, #24]
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	429a      	cmp	r2, r3
 801070e:	da02      	bge.n	8010716 <mg_strcasecmp+0x48>
 8010710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010714:	e01e      	b.n	8010754 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	429a      	cmp	r2, r3
 801071c:	dd01      	ble.n	8010722 <mg_strcasecmp+0x54>
 801071e:	2301      	movs	r3, #1
 8010720:	e018      	b.n	8010754 <mg_strcasecmp+0x86>
    i++;
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	3301      	adds	r3, #1
 8010726:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	69fa      	ldr	r2, [r7, #28]
 801072c:	429a      	cmp	r2, r3
 801072e:	d203      	bcs.n	8010738 <mg_strcasecmp+0x6a>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	69fa      	ldr	r2, [r7, #28]
 8010734:	429a      	cmp	r2, r3
 8010736:	d3d7      	bcc.n	80106e8 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	69fa      	ldr	r2, [r7, #28]
 801073c:	429a      	cmp	r2, r3
 801073e:	d201      	bcs.n	8010744 <mg_strcasecmp+0x76>
 8010740:	2301      	movs	r3, #1
 8010742:	e007      	b.n	8010754 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	69fa      	ldr	r2, [r7, #28]
 8010748:	429a      	cmp	r2, r3
 801074a:	d202      	bcs.n	8010752 <mg_strcasecmp+0x84>
 801074c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010750:	e000      	b.n	8010754 <mg_strcasecmp+0x86>
  return 0;
 8010752:	2300      	movs	r3, #0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3724      	adds	r7, #36	@ 0x24
 8010758:	46bd      	mov	sp, r7
 801075a:	bd90      	pop	{r4, r7, pc}

0801075c <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 801075c:	b490      	push	{r4, r7}
 801075e:	b088      	sub	sp, #32
 8010760:	af00      	add	r7, sp, #0
 8010762:	f107 0408 	add.w	r4, r7, #8
 8010766:	e884 0003 	stmia.w	r4, {r0, r1}
 801076a:	4639      	mov	r1, r7
 801076c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8010770:	2300      	movs	r3, #0
 8010772:	61fb      	str	r3, [r7, #28]
 8010774:	2300      	movs	r3, #0
 8010776:	61bb      	str	r3, [r7, #24]
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]
 801077c:	2300      	movs	r3, #0
 801077e:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8010780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010782:	2b00      	cmp	r3, #0
 8010784:	f000 80ba 	beq.w	80108fc <mg_match+0x1a0>
 8010788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801078a:	2200      	movs	r2, #0
 801078c:	601a      	str	r2, [r3, #0]
 801078e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010790:	2200      	movs	r2, #0
 8010792:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8010794:	e0b2      	b.n	80108fc <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	429a      	cmp	r2, r3
 801079c:	d25b      	bcs.n	8010856 <mg_match+0xfa>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	69ba      	ldr	r2, [r7, #24]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d257      	bcs.n	8010856 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	4413      	add	r3, r2
 80107ac:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 80107ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80107b0:	d015      	beq.n	80107de <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80107b2:	683a      	ldr	r2, [r7, #0]
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	4413      	add	r3, r2
 80107b8:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 80107ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80107bc:	d04b      	beq.n	8010856 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 80107be:	683a      	ldr	r2, [r7, #0]
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	4413      	add	r3, r2
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	2b23      	cmp	r3, #35	@ 0x23
 80107c8:	d045      	beq.n	8010856 <mg_match+0xfa>
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	4413      	add	r3, r2
 80107d0:	781a      	ldrb	r2, [r3, #0]
 80107d2:	6839      	ldr	r1, [r7, #0]
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	440b      	add	r3, r1
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d13b      	bne.n	8010856 <mg_match+0xfa>
      if (caps == NULL) {
 80107de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d031      	beq.n	8010848 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 80107e4:	683a      	ldr	r2, [r7, #0]
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	4413      	add	r3, r2
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80107ee:	d111      	bne.n	8010814 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	441a      	add	r2, r3
 80107f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f8:	601a      	str	r2, [r3, #0]
 80107fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fc:	2201      	movs	r2, #1
 80107fe:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	3308      	adds	r3, #8
 8010804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010808:	2200      	movs	r2, #0
 801080a:	601a      	str	r2, [r3, #0]
 801080c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080e:	2200      	movs	r2, #0
 8010810:	605a      	str	r2, [r3, #4]
 8010812:	e019      	b.n	8010848 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8010814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d015      	beq.n	8010848 <mg_match+0xec>
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d111      	bne.n	8010848 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	441a      	add	r2, r3
 801082a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	461a      	mov	r2, r3
 8010832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010834:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8010836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010838:	3308      	adds	r3, #8
 801083a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083e:	2200      	movs	r2, #0
 8010840:	605a      	str	r2, [r3, #4]
 8010842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	3301      	adds	r3, #1
 801084c:	61fb      	str	r3, [r7, #28]
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	3301      	adds	r3, #1
 8010852:	61bb      	str	r3, [r7, #24]
 8010854:	e052      	b.n	80108fc <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	69fa      	ldr	r2, [r7, #28]
 801085a:	429a      	cmp	r2, r3
 801085c:	d222      	bcs.n	80108a4 <mg_match+0x148>
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	4413      	add	r3, r2
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	2b2a      	cmp	r3, #42	@ 0x2a
 8010868:	d005      	beq.n	8010876 <mg_match+0x11a>
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	69fb      	ldr	r3, [r7, #28]
 801086e:	4413      	add	r3, r2
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	2b23      	cmp	r3, #35	@ 0x23
 8010874:	d116      	bne.n	80108a4 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8010876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00b      	beq.n	8010894 <mg_match+0x138>
 801087c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d107      	bne.n	8010894 <mg_match+0x138>
 8010884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010886:	2200      	movs	r2, #0
 8010888:	605a      	str	r2, [r3, #4]
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	69bb      	ldr	r3, [r7, #24]
 801088e:	441a      	add	r2, r3
 8010890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010892:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8010894:	69fb      	ldr	r3, [r7, #28]
 8010896:	1c5a      	adds	r2, r3, #1
 8010898:	61fa      	str	r2, [r7, #28]
 801089a:	617b      	str	r3, [r7, #20]
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	3301      	adds	r3, #1
 80108a0:	613b      	str	r3, [r7, #16]
 80108a2:	e02b      	b.n	80108fc <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d025      	beq.n	80108f6 <mg_match+0x19a>
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	693a      	ldr	r2, [r7, #16]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d821      	bhi.n	80108f6 <mg_match+0x19a>
 80108b2:	683a      	ldr	r2, [r7, #0]
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	4413      	add	r3, r2
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b23      	cmp	r3, #35	@ 0x23
 80108bc:	d005      	beq.n	80108ca <mg_match+0x16e>
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	4413      	add	r3, r2
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80108c8:	d015      	beq.n	80108f6 <mg_match+0x19a>
      i = ni, j = nj;
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	61fb      	str	r3, [r7, #28]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80108d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d010      	beq.n	80108fa <mg_match+0x19e>
 80108d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10c      	bne.n	80108fa <mg_match+0x19e>
 80108e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d108      	bne.n	80108fa <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 80108e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ea:	3b08      	subs	r3, #8
 80108ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f0:	2200      	movs	r2, #0
 80108f2:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80108f4:	e001      	b.n	80108fa <mg_match+0x19e>
      }
    } else {
      return false;
 80108f6:	2300      	movs	r3, #0
 80108f8:	e01f      	b.n	801093a <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80108fa:	bf00      	nop
  while (i < p.len || j < s.len) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	69fa      	ldr	r2, [r7, #28]
 8010900:	429a      	cmp	r2, r3
 8010902:	f4ff af48 	bcc.w	8010796 <mg_match+0x3a>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	69ba      	ldr	r2, [r7, #24]
 801090a:	429a      	cmp	r2, r3
 801090c:	f4ff af43 	bcc.w	8010796 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8010910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010912:	2b00      	cmp	r3, #0
 8010914:	d010      	beq.n	8010938 <mg_match+0x1dc>
 8010916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00c      	beq.n	8010938 <mg_match+0x1dc>
 801091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d108      	bne.n	8010938 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	441a      	add	r2, r3
 801092c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	461a      	mov	r2, r3
 8010934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010936:	605a      	str	r2, [r3, #4]
  }
  return true;
 8010938:	2301      	movs	r3, #1
}
 801093a:	4618      	mov	r0, r3
 801093c:	3720      	adds	r7, #32
 801093e:	46bd      	mov	sp, r7
 8010940:	bc90      	pop	{r4, r7}
 8010942:	4770      	bx	lr

08010944 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8010944:	b590      	push	{r4, r7, lr}
 8010946:	b089      	sub	sp, #36	@ 0x24
 8010948:	af00      	add	r7, sp, #0
 801094a:	f107 0410 	add.w	r4, r7, #16
 801094e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010952:	60fa      	str	r2, [r7, #12]
 8010954:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <mg_span+0x1e>
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d101      	bne.n	8010966 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8010962:	2300      	movs	r3, #0
 8010964:	e047      	b.n	80109f6 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 801096a:	e002      	b.n	8010972 <mg_span+0x2e>
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	3301      	adds	r3, #1
 8010970:	61fb      	str	r3, [r7, #28]
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	69fa      	ldr	r2, [r7, #28]
 8010976:	429a      	cmp	r2, r3
 8010978:	d207      	bcs.n	801098a <mg_span+0x46>
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	4413      	add	r3, r2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8010986:	429a      	cmp	r2, r3
 8010988:	d1f0      	bne.n	801096c <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d00c      	beq.n	80109aa <mg_span+0x66>
 8010990:	6939      	ldr	r1, [r7, #16]
 8010992:	68fc      	ldr	r4, [r7, #12]
 8010994:	463b      	mov	r3, r7
 8010996:	69fa      	ldr	r2, [r7, #28]
 8010998:	4618      	mov	r0, r3
 801099a:	f7ff fdf2 	bl	8010582 <mg_str_n>
 801099e:	4622      	mov	r2, r4
 80109a0:	463b      	mov	r3, r7
 80109a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109a6:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d010      	beq.n	80109d2 <mg_span+0x8e>
 80109b0:	693a      	ldr	r2, [r7, #16]
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	18d1      	adds	r1, r2, r3
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	1ad2      	subs	r2, r2, r3
 80109bc:	68bc      	ldr	r4, [r7, #8]
 80109be:	463b      	mov	r3, r7
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff fdde 	bl	8010582 <mg_str_n>
 80109c6:	4622      	mov	r2, r4
 80109c8:	463b      	mov	r3, r7
 80109ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109ce:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00d      	beq.n	80109f4 <mg_span+0xb0>
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	69fa      	ldr	r2, [r7, #28]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d209      	bcs.n	80109f4 <mg_span+0xb0>
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	1c5a      	adds	r2, r3, #1
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	601a      	str	r2, [r3, #0]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	1e5a      	subs	r2, r3, #1
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	605a      	str	r2, [r3, #4]
    return true;
 80109f4:	2301      	movs	r3, #1
  }
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3724      	adds	r7, #36	@ 0x24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd90      	pop	{r4, r7, pc}

080109fe <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 80109fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a02:	b0a5      	sub	sp, #148	@ 0x94
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8010a0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8010a0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010a10:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010a18:	2300      	movs	r3, #0
 8010a1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8010a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d016      	beq.n	8010a54 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8010a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	d00d      	beq.n	8010a4a <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8010a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010a32:	2b04      	cmp	r3, #4
 8010a34:	d104      	bne.n	8010a40 <mg_str_to_num+0x42>
 8010a36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a3a:	f04f 0300 	mov.w	r3, #0
 8010a3e:	e00d      	b.n	8010a5c <mg_str_to_num+0x5e>
 8010a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010a48:	e008      	b.n	8010a5c <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8010a4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a4e:	f04f 0300 	mov.w	r3, #0
 8010a52:	e003      	b.n	8010a5c <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8010a54:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8010a58:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8010a5c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8010a60:	f04f 0200 	mov.w	r2, #0
 8010a64:	f04f 0300 	mov.w	r3, #0
 8010a68:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8010a6c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8010a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010a74:	bf08      	it	eq
 8010a76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8010a7a:	d105      	bne.n	8010a88 <mg_str_to_num+0x8a>
 8010a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010a80:	2b08      	cmp	r3, #8
 8010a82:	d001      	beq.n	8010a88 <mg_str_to_num+0x8a>
 8010a84:	2300      	movs	r3, #0
 8010a86:	e1e8      	b.n	8010e5a <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8010a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d12d      	bne.n	8010aea <mg_str_to_num+0xec>
 8010a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d92a      	bls.n	8010aea <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8010a94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a9a:	4413      	add	r3, r2
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2b30      	cmp	r3, #48	@ 0x30
 8010aa0:	d121      	bne.n	8010ae6 <mg_str_to_num+0xe8>
      i++;
 8010aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8010aac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ab2:	4413      	add	r3, r2
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	2b62      	cmp	r3, #98	@ 0x62
 8010ab8:	d00a      	beq.n	8010ad0 <mg_str_to_num+0xd2>
 8010aba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ac0:	4413      	add	r3, r2
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	2b78      	cmp	r3, #120	@ 0x78
 8010ac6:	d101      	bne.n	8010acc <mg_str_to_num+0xce>
 8010ac8:	2310      	movs	r3, #16
 8010aca:	e002      	b.n	8010ad2 <mg_str_to_num+0xd4>
 8010acc:	230a      	movs	r3, #10
 8010ace:	e000      	b.n	8010ad2 <mg_str_to_num+0xd4>
 8010ad0:	2302      	movs	r3, #2
 8010ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8010ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ad6:	2b0a      	cmp	r3, #10
 8010ad8:	d007      	beq.n	8010aea <mg_str_to_num+0xec>
 8010ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ade:	3301      	adds	r3, #1
 8010ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010ae4:	e001      	b.n	8010aea <mg_str_to_num+0xec>
    } else {
      base = 10;
 8010ae6:	230a      	movs	r3, #10
 8010ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8010aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aec:	2b10      	cmp	r3, #16
 8010aee:	f000 8178 	beq.w	8010de2 <mg_str_to_num+0x3e4>
 8010af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010af4:	2b10      	cmp	r3, #16
 8010af6:	f300 817d 	bgt.w	8010df4 <mg_str_to_num+0x3f6>
 8010afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d052      	beq.n	8010ba6 <mg_str_to_num+0x1a8>
 8010b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b02:	2b0a      	cmp	r3, #10
 8010b04:	f000 80cd 	beq.w	8010ca2 <mg_str_to_num+0x2a4>
 8010b08:	e174      	b.n	8010df4 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8010b0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b10:	4413      	add	r3, r2
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	3b30      	subs	r3, #48	@ 0x30
 8010b16:	17da      	asrs	r2, r3, #31
 8010b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8010b1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8010b20:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8010b24:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010b28:	f04f 0200 	mov.w	r2, #0
 8010b2c:	f04f 0300 	mov.w	r3, #0
 8010b30:	0842      	lsrs	r2, r0, #1
 8010b32:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010b36:	084b      	lsrs	r3, r1, #1
 8010b38:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010b3c:	4282      	cmp	r2, r0
 8010b3e:	418b      	sbcs	r3, r1
 8010b40:	d201      	bcs.n	8010b46 <mg_str_to_num+0x148>
 8010b42:	2300      	movs	r3, #0
 8010b44:	e189      	b.n	8010e5a <mg_str_to_num+0x45c>
        result *= 2;
 8010b46:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010b4a:	1891      	adds	r1, r2, r2
 8010b4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010b4e:	415b      	adcs	r3, r3
 8010b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b52:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8010b56:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8010b5a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010b62:	1a85      	subs	r5, r0, r2
 8010b64:	eb61 0603 	sbc.w	r6, r1, r3
 8010b68:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010b6c:	4295      	cmp	r5, r2
 8010b6e:	eb76 0303 	sbcs.w	r3, r6, r3
 8010b72:	d201      	bcs.n	8010b78 <mg_str_to_num+0x17a>
 8010b74:	2300      	movs	r3, #0
 8010b76:	e170      	b.n	8010e5a <mg_str_to_num+0x45c>
        result += digit;
 8010b78:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010b7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010b80:	1884      	adds	r4, r0, r2
 8010b82:	623c      	str	r4, [r7, #32]
 8010b84:	eb41 0303 	adc.w	r3, r1, r3
 8010b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b8a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010b8e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8010b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010b96:	3301      	adds	r3, #1
 8010b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8010ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ba8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010bac:	429a      	cmp	r2, r3
 8010bae:	f080 8123 	bcs.w	8010df8 <mg_str_to_num+0x3fa>
 8010bb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bb8:	4413      	add	r3, r2
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	2b30      	cmp	r3, #48	@ 0x30
 8010bbe:	d0a4      	beq.n	8010b0a <mg_str_to_num+0x10c>
 8010bc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bc6:	4413      	add	r3, r2
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	2b31      	cmp	r3, #49	@ 0x31
 8010bcc:	d09d      	beq.n	8010b0a <mg_str_to_num+0x10c>
      }
      break;
 8010bce:	e113      	b.n	8010df8 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8010bd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010bd6:	4413      	add	r3, r2
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	3b30      	subs	r3, #48	@ 0x30
 8010bdc:	17da      	asrs	r2, r3, #31
 8010bde:	61bb      	str	r3, [r7, #24]
 8010be0:	61fa      	str	r2, [r7, #28]
 8010be2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010be6:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8010bea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010bee:	f04f 020a 	mov.w	r2, #10
 8010bf2:	f04f 0300 	mov.w	r3, #0
 8010bf6:	f7ef fb8b 	bl	8000310 <__aeabi_uldivmod>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4610      	mov	r0, r2
 8010c00:	4619      	mov	r1, r3
 8010c02:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010c06:	4290      	cmp	r0, r2
 8010c08:	eb71 0303 	sbcs.w	r3, r1, r3
 8010c0c:	d201      	bcs.n	8010c12 <mg_str_to_num+0x214>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	e123      	b.n	8010e5a <mg_str_to_num+0x45c>
        result *= 10;
 8010c12:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8010c16:	4622      	mov	r2, r4
 8010c18:	462b      	mov	r3, r5
 8010c1a:	f04f 0000 	mov.w	r0, #0
 8010c1e:	f04f 0100 	mov.w	r1, #0
 8010c22:	0099      	lsls	r1, r3, #2
 8010c24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010c28:	0090      	lsls	r0, r2, #2
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	eb12 0804 	adds.w	r8, r2, r4
 8010c32:	eb43 0905 	adc.w	r9, r3, r5
 8010c36:	eb18 0308 	adds.w	r3, r8, r8
 8010c3a:	613b      	str	r3, [r7, #16]
 8010c3c:	eb49 0309 	adc.w	r3, r9, r9
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8010c46:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8010c4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010c4e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8010c52:	1a84      	subs	r4, r0, r2
 8010c54:	63bc      	str	r4, [r7, #56]	@ 0x38
 8010c56:	eb61 0303 	sbc.w	r3, r1, r3
 8010c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010c5c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010c60:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010c64:	4621      	mov	r1, r4
 8010c66:	4291      	cmp	r1, r2
 8010c68:	4629      	mov	r1, r5
 8010c6a:	eb71 0303 	sbcs.w	r3, r1, r3
 8010c6e:	d201      	bcs.n	8010c74 <mg_str_to_num+0x276>
 8010c70:	2300      	movs	r3, #0
 8010c72:	e0f2      	b.n	8010e5a <mg_str_to_num+0x45c>
        result += digit;
 8010c74:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010c78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8010c7c:	1884      	adds	r4, r0, r2
 8010c7e:	60bc      	str	r4, [r7, #8]
 8010c80:	eb41 0303 	adc.w	r3, r1, r3
 8010c84:	60fb      	str	r3, [r7, #12]
 8010c86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010c8a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8010c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c92:	3301      	adds	r3, #1
 8010c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8010ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ca4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	f080 80a7 	bcs.w	8010dfc <mg_str_to_num+0x3fe>
 8010cae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cb4:	4413      	add	r3, r2
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8010cba:	f240 809f 	bls.w	8010dfc <mg_str_to_num+0x3fe>
 8010cbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cc4:	4413      	add	r3, r2
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	2b39      	cmp	r3, #57	@ 0x39
 8010cca:	d981      	bls.n	8010bd0 <mg_str_to_num+0x1d2>
      }
      break;
 8010ccc:	e096      	b.n	8010dfc <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8010cce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cd4:	4413      	add	r3, r2
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8010cdc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010ce0:	2b2f      	cmp	r3, #47	@ 0x2f
 8010ce2:	d90a      	bls.n	8010cfa <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8010ce4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010ce8:	2b39      	cmp	r3, #57	@ 0x39
 8010cea:	d806      	bhi.n	8010cfa <mg_str_to_num+0x2fc>
 8010cec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010cf0:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8010cf2:	17da      	asrs	r2, r3, #31
 8010cf4:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8010cf8:	e023      	b.n	8010d42 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8010cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010cfe:	2b40      	cmp	r3, #64	@ 0x40
 8010d00:	d90a      	bls.n	8010d18 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8010d02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010d06:	2b46      	cmp	r3, #70	@ 0x46
 8010d08:	d806      	bhi.n	8010d18 <mg_str_to_num+0x31a>
 8010d0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010d0e:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8010d10:	17da      	asrs	r2, r3, #31
 8010d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d14:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d16:	e014      	b.n	8010d42 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 8010d18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010d1c:	2b60      	cmp	r3, #96	@ 0x60
 8010d1e:	d90a      	bls.n	8010d36 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8010d20:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010d24:	2b66      	cmp	r3, #102	@ 0x66
 8010d26:	d806      	bhi.n	8010d36 <mg_str_to_num+0x338>
 8010d28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010d2c:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8010d2e:	17da      	asrs	r2, r3, #31
 8010d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d32:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d34:	e005      	b.n	8010d42 <mg_str_to_num+0x344>
 8010d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010d3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010d3e:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8010d42:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8010d46:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 8010d4a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d52:	bf08      	it	eq
 8010d54:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8010d58:	d04a      	beq.n	8010df0 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 8010d5a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010d5e:	f04f 0200 	mov.w	r2, #0
 8010d62:	f04f 0300 	mov.w	r3, #0
 8010d66:	0902      	lsrs	r2, r0, #4
 8010d68:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8010d6c:	090b      	lsrs	r3, r1, #4
 8010d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010d72:	4282      	cmp	r2, r0
 8010d74:	418b      	sbcs	r3, r1
 8010d76:	d201      	bcs.n	8010d7c <mg_str_to_num+0x37e>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	e06e      	b.n	8010e5a <mg_str_to_num+0x45c>
        result *= 16;
 8010d7c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010d80:	f04f 0200 	mov.w	r2, #0
 8010d84:	f04f 0300 	mov.w	r3, #0
 8010d88:	010b      	lsls	r3, r1, #4
 8010d8a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8010d8e:	0102      	lsls	r2, r0, #4
 8010d90:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8010d94:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8010d98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010d9c:	ebb0 0a02 	subs.w	sl, r0, r2
 8010da0:	eb61 0b03 	sbc.w	fp, r1, r3
 8010da4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010da8:	4592      	cmp	sl, r2
 8010daa:	eb7b 0303 	sbcs.w	r3, fp, r3
 8010dae:	d201      	bcs.n	8010db4 <mg_str_to_num+0x3b6>
 8010db0:	2300      	movs	r3, #0
 8010db2:	e052      	b.n	8010e5a <mg_str_to_num+0x45c>
        result += digit;
 8010db4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010dbc:	1884      	adds	r4, r0, r2
 8010dbe:	603c      	str	r4, [r7, #0]
 8010dc0:	eb41 0303 	adc.w	r3, r1, r3
 8010dc4:	607b      	str	r3, [r7, #4]
 8010dc6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010dca:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8010dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ddc:	3301      	adds	r3, #1
 8010dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8010de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010de4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010de8:	429a      	cmp	r2, r3
 8010dea:	f4ff af70 	bcc.w	8010cce <mg_str_to_num+0x2d0>
      }
      break;
 8010dee:	e006      	b.n	8010dfe <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8010df0:	bf00      	nop
      break;
 8010df2:	e004      	b.n	8010dfe <mg_str_to_num+0x400>
    default:
      return false;
 8010df4:	2300      	movs	r3, #0
 8010df6:	e030      	b.n	8010e5a <mg_str_to_num+0x45c>
      break;
 8010df8:	bf00      	nop
 8010dfa:	e000      	b.n	8010dfe <mg_str_to_num+0x400>
      break;
 8010dfc:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8010dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d101      	bne.n	8010e0a <mg_str_to_num+0x40c>
 8010e06:	2300      	movs	r3, #0
 8010e08:	e027      	b.n	8010e5a <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8010e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d001      	beq.n	8010e18 <mg_str_to_num+0x41a>
 8010e14:	2300      	movs	r3, #0
 8010e16:	e020      	b.n	8010e5a <mg_str_to_num+0x45c>
  if (val_len == 1) {
 8010e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d104      	bne.n	8010e2a <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 8010e20:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8010e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e26:	701a      	strb	r2, [r3, #0]
 8010e28:	e016      	b.n	8010e58 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 8010e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d104      	bne.n	8010e3c <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8010e32:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 8010e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e38:	801a      	strh	r2, [r3, #0]
 8010e3a:	e00d      	b.n	8010e58 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8010e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d104      	bne.n	8010e4e <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8010e44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	e004      	b.n	8010e58 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 8010e4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010e50:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8010e54:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 8010e58:	2301      	movs	r3, #1
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3794      	adds	r7, #148	@ 0x94
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e64 <mg_timer_free>:
  t->period_ms = ms, t->expire = 0;
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
  *head = t;
}

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 8010e64:	b480      	push	{r7}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 8010e6e:	e003      	b.n	8010e78 <mg_timer_free+0x14>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	331c      	adds	r3, #28
 8010e76:	607b      	str	r3, [r7, #4]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d004      	beq.n	8010e8a <mg_timer_free+0x26>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d1f2      	bne.n	8010e70 <mg_timer_free+0xc>
  if (*head) *head = t->next;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <mg_timer_free+0x36>
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	69da      	ldr	r2, [r3, #28]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	601a      	str	r2, [r3, #0]
}
 8010e9a:	bf00      	nop
 8010e9c:	370c      	adds	r7, #12
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8010ea6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6178      	str	r0, [r7, #20]
 8010eb0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8010eb4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ebc:	eb10 0a02 	adds.w	sl, r0, r2
 8010ec0:	eb41 0b03 	adc.w	fp, r1, r3
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eca:	4592      	cmp	sl, r2
 8010ecc:	eb7b 0303 	sbcs.w	r3, fp, r3
 8010ed0:	d206      	bcs.n	8010ee0 <mg_timer_expired+0x3a>
 8010ed2:	6979      	ldr	r1, [r7, #20]
 8010ed4:	f04f 0200 	mov.w	r2, #0
 8010ed8:	f04f 0300 	mov.w	r3, #0
 8010edc:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	d10d      	bne.n	8010f06 <mg_timer_expired+0x60>
 8010eea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ef2:	1886      	adds	r6, r0, r2
 8010ef4:	603e      	str	r6, [r7, #0]
 8010ef6:	eb41 0303 	adc.w	r3, r1, r3
 8010efa:	607b      	str	r3, [r7, #4]
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010f02:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010f10:	4290      	cmp	r0, r2
 8010f12:	eb71 0303 	sbcs.w	r3, r1, r3
 8010f16:	d201      	bcs.n	8010f1c <mg_timer_expired+0x76>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e022      	b.n	8010f62 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010f26:	ebb0 0802 	subs.w	r8, r0, r2
 8010f2a:	eb61 0903 	sbc.w	r9, r1, r3
 8010f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f32:	4542      	cmp	r2, r8
 8010f34:	eb73 0309 	sbcs.w	r3, r3, r9
 8010f38:	d207      	bcs.n	8010f4a <mg_timer_expired+0xa4>
 8010f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f42:	1884      	adds	r4, r0, r2
 8010f44:	eb41 0503 	adc.w	r5, r1, r3
 8010f48:	e007      	b.n	8010f5a <mg_timer_expired+0xb4>
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f54:	1884      	adds	r4, r0, r2
 8010f56:	eb41 0503 	adc.w	r5, r1, r3
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8010f60:	2301      	movs	r3, #1
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3718      	adds	r7, #24
 8010f66:	46bd      	mov	sp, r7
 8010f68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010f6c:	4770      	bx	lr

08010f6e <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8010f6e:	b590      	push	{r4, r7, lr}
 8010f70:	b08b      	sub	sp, #44	@ 0x2c
 8010f72:	af02      	add	r7, sp, #8
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	61fb      	str	r3, [r7, #28]
 8010f80:	e067      	b.n	8011052 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	d10d      	bne.n	8010fa8 <mg_timer_poll+0x3a>
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	f003 0302 	and.w	r3, r3, #2
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d007      	beq.n	8010fa8 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d101      	bne.n	8010fa8 <mg_timer_poll+0x3a>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e000      	b.n	8010faa <mg_timer_poll+0x3c>
 8010fa8:	2300      	movs	r3, #0
 8010faa:	76fb      	strb	r3, [r7, #27]
 8010fac:	7efb      	ldrb	r3, [r7, #27]
 8010fae:	f003 0301 	and.w	r3, r3, #1
 8010fb2:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	f103 0408 	add.w	r4, r3, #8
 8010fba:	69fb      	ldr	r3, [r7, #28]
 8010fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f7ff ff6a 	bl	8010ea6 <mg_timer_expired>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8010fdc:	7efb      	ldrb	r3, [r7, #27]
 8010fde:	f083 0301 	eor.w	r3, r3, #1
 8010fe2:	b2db      	uxtb	r3, r3
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d005      	beq.n	8010ff4 <mg_timer_poll+0x86>
 8010fe8:	7ebb      	ldrb	r3, [r7, #26]
 8010fea:	f083 0301 	eor.w	r3, r3, #1
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d12b      	bne.n	801104c <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	f003 0301 	and.w	r3, r3, #1
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d105      	bne.n	801100c <mg_timer_poll+0x9e>
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	691b      	ldr	r3, [r3, #16]
 8011004:	f003 0304 	and.w	r3, r3, #4
 8011008:	2b00      	cmp	r3, #0
 801100a:	d105      	bne.n	8011018 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	695b      	ldr	r3, [r3, #20]
 8011010:	69fa      	ldr	r2, [r7, #28]
 8011012:	6992      	ldr	r2, [r2, #24]
 8011014:	4610      	mov	r0, r2
 8011016:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	691b      	ldr	r3, [r3, #16]
 801101c:	f043 0204 	orr.w	r2, r3, #4
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	f003 0301 	and.w	r3, r3, #1
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10e      	bne.n	801104e <mg_timer_poll+0xe0>
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	f003 0308 	and.w	r3, r3, #8
 8011038:	2b00      	cmp	r3, #0
 801103a:	d008      	beq.n	801104e <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 801103c:	69f9      	ldr	r1, [r7, #28]
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7ff ff10 	bl	8010e64 <mg_timer_free>
      free(t);
 8011044:	69f8      	ldr	r0, [r7, #28]
 8011046:	f00d f863 	bl	801e110 <free>
 801104a:	e000      	b.n	801104e <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 801104c:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	61fb      	str	r3, [r7, #28]
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d194      	bne.n	8010f82 <mg_timer_poll+0x14>
    }
  }
}
 8011058:	bf00      	nop
 801105a:	bf00      	nop
 801105c:	3724      	adds	r7, #36	@ 0x24
 801105e:	46bd      	mov	sp, r7
 8011060:	bd90      	pop	{r4, r7, pc}
	...

08011064 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af02      	add	r7, sp, #8
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 8011070:	4b0b      	ldr	r3, [pc, #44]	@ (80110a0 <mg_tls_hexdump+0x3c>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b03      	cmp	r3, #3
 8011076:	dd0e      	ble.n	8011096 <mg_tls_hexdump+0x32>
 8011078:	4b0a      	ldr	r3, [pc, #40]	@ (80110a4 <mg_tls_hexdump+0x40>)
 801107a:	f642 02d1 	movw	r2, #10449	@ 0x28d1
 801107e:	490a      	ldr	r1, [pc, #40]	@ (80110a8 <mg_tls_hexdump+0x44>)
 8011080:	2004      	movs	r0, #4
 8011082:	f7f8 f893 	bl	80091ac <mg_log_prefix>
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4a07      	ldr	r2, [pc, #28]	@ (80110ac <mg_tls_hexdump+0x48>)
 801108e:	68f9      	ldr	r1, [r7, #12]
 8011090:	4807      	ldr	r0, [pc, #28]	@ (80110b0 <mg_tls_hexdump+0x4c>)
 8011092:	f7f8 f8db 	bl	800924c <mg_log>
}
 8011096:	bf00      	nop
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	20000254 	.word	0x20000254
 80110a4:	080229a4 	.word	0x080229a4
 80110a8:	0801f338 	.word	0x0801f338
 80110ac:	0800d1e5 	.word	0x0800d1e5
 80110b0:	08020c6c 	.word	0x08020c6c

080110b4 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 80110b4:	b480      	push	{r7}
 80110b6:	b089      	sub	sp, #36	@ 0x24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 80110c0:	2302      	movs	r3, #2
 80110c2:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d903      	bls.n	80110d2 <mg_der_parse+0x1e>
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3301      	adds	r3, #1
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	e000      	b.n	80110d4 <mg_der_parse+0x20>
 80110d2:	2300      	movs	r3, #0
 80110d4:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d802      	bhi.n	80110e2 <mg_der_parse+0x2e>
 80110dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110e0:	e042      	b.n	8011168 <mg_der_parse+0xb4>
  tlv->type = der[0];
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	781a      	ldrb	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80110ee:	d927      	bls.n	8011140 <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110f8:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 80110fa:	7dbb      	ldrb	r3, [r7, #22]
 80110fc:	3302      	adds	r3, #2
 80110fe:	461a      	mov	r2, r3
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	4293      	cmp	r3, r2
 8011104:	d202      	bcs.n	801110c <mg_der_parse+0x58>
 8011106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801110a:	e02d      	b.n	8011168 <mg_der_parse+0xb4>
    len = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8011110:	2300      	movs	r3, #0
 8011112:	75fb      	strb	r3, [r7, #23]
 8011114:	e00c      	b.n	8011130 <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	021b      	lsls	r3, r3, #8
 801111a:	7dfa      	ldrb	r2, [r7, #23]
 801111c:	3202      	adds	r2, #2
 801111e:	4611      	mov	r1, r2
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	440a      	add	r2, r1
 8011124:	7812      	ldrb	r2, [r2, #0]
 8011126:	4313      	orrs	r3, r2
 8011128:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	3301      	adds	r3, #1
 801112e:	75fb      	strb	r3, [r7, #23]
 8011130:	7dfa      	ldrb	r2, [r7, #23]
 8011132:	7dbb      	ldrb	r3, [r7, #22]
 8011134:	429a      	cmp	r2, r3
 8011136:	d3ee      	bcc.n	8011116 <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 8011138:	7dbb      	ldrb	r3, [r7, #22]
 801113a:	69fa      	ldr	r2, [r7, #28]
 801113c:	4413      	add	r3, r2
 801113e:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 8011140:	69fa      	ldr	r2, [r7, #28]
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	4413      	add	r3, r2
 8011146:	68ba      	ldr	r2, [r7, #8]
 8011148:	429a      	cmp	r2, r3
 801114a:	d202      	bcs.n	8011152 <mg_der_parse+0x9e>
 801114c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011150:	e00a      	b.n	8011168 <mg_der_parse+0xb4>
  tlv->len = len;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	69ba      	ldr	r2, [r7, #24]
 8011156:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	441a      	add	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 8011162:	69fa      	ldr	r2, [r7, #28]
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	4413      	add	r3, r2
}
 8011168:	4618      	mov	r0, r3
 801116a:	3724      	adds	r7, #36	@ 0x24
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d101      	bne.n	801118a <mg_der_next+0x16>
 8011186:	2300      	movs	r3, #0
 8011188:	e01b      	b.n	80111c2 <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6898      	ldr	r0, [r3, #8]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	683a      	ldr	r2, [r7, #0]
 8011194:	4619      	mov	r1, r3
 8011196:	f7ff ff8d 	bl	80110b4 <mg_der_parse>
 801119a:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	da02      	bge.n	80111a8 <mg_der_next+0x34>
 80111a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111a6:	e00c      	b.n	80111c2 <mg_der_next+0x4e>
  parent->value += consumed;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	689a      	ldr	r2, [r3, #8]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	441a      	add	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	685a      	ldr	r2, [r3, #4]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	1ad2      	subs	r2, r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	605a      	str	r2, [r3, #4]
  return 1;
 80111c0:	2301      	movs	r3, #1
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b08e      	sub	sp, #56	@ 0x38
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	60f8      	str	r0, [r7, #12]
 80111d2:	60b9      	str	r1, [r7, #8]
 80111d4:	607a      	str	r2, [r7, #4]
 80111d6:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80111de:	ca07      	ldmia	r2, {r0, r1, r2}
 80111e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 80111e4:	e031      	b.n	801124a <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 80111e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80111ea:	2b06      	cmp	r3, #6
 80111ec:	d114      	bne.n	8011218 <mg_der_find_oid+0x4e>
 80111ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d110      	bne.n	8011218 <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 80111f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	68b9      	ldr	r1, [r7, #8]
 80111fc:	4618      	mov	r0, r3
 80111fe:	f00d fa0e 	bl	801e61e <memcmp>
 8011202:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8011204:	2b00      	cmp	r3, #0
 8011206:	d107      	bne.n	8011218 <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 8011208:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801120c:	6839      	ldr	r1, [r7, #0]
 801120e:	4618      	mov	r0, r3
 8011210:	f7ff ffb0 	bl	8011174 <mg_der_next>
 8011214:	4603      	mov	r3, r0
 8011216:	e024      	b.n	8011262 <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 8011218:	f897 3020 	ldrb.w	r3, [r7, #32]
 801121c:	f003 0320 	and.w	r3, r3, #32
 8011220:	2b00      	cmp	r3, #0
 8011222:	d012      	beq.n	801124a <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8011224:	f107 0314 	add.w	r3, r7, #20
 8011228:	f107 0220 	add.w	r2, r7, #32
 801122c:	ca07      	ldmia	r2, {r0, r1, r2}
 801122e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 8011232:	f107 0014 	add.w	r0, r7, #20
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	68b9      	ldr	r1, [r7, #8]
 801123c:	f7ff ffc5 	bl	80111ca <mg_der_find_oid>
 8011240:	4603      	mov	r3, r0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <mg_der_find_oid+0x80>
 8011246:	2301      	movs	r3, #1
 8011248:	e00b      	b.n	8011262 <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 801124a:	f107 0220 	add.w	r2, r7, #32
 801124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011252:	4611      	mov	r1, r2
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff ff8d 	bl	8011174 <mg_der_next>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	dcc2      	bgt.n	80111e6 <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3738      	adds	r7, #56	@ 0x38
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 801126a:	b480      	push	{r7}
 801126c:	b087      	sub	sp, #28
 801126e:	af00      	add	r7, sp, #0
 8011270:	60f8      	str	r0, [r7, #12]
 8011272:	60b9      	str	r1, [r7, #8]
 8011274:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d802      	bhi.n	8011282 <mg_der_to_tlv+0x18>
    return -1;
 801127c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011280:	e041      	b.n	8011306 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	781a      	ldrb	r2, [r3, #0]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	3301      	adds	r3, #1
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	461a      	mov	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	1c9a      	adds	r2, r3, #2
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80112a4:	d921      	bls.n	80112ea <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	3b80      	subs	r3, #128	@ 0x80
 80112ac:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2200      	movs	r2, #0
 80112b2:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 80112b4:	2300      	movs	r3, #0
 80112b6:	617b      	str	r3, [r7, #20]
 80112b8:	e00d      	b.n	80112d6 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	021b      	lsls	r3, r3, #8
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	3202      	adds	r2, #2
 80112c4:	68f9      	ldr	r1, [r7, #12]
 80112c6:	440a      	add	r2, r1
 80112c8:	7812      	ldrb	r2, [r2, #0]
 80112ca:	431a      	orrs	r2, r3
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	3301      	adds	r3, #1
 80112d4:	617b      	str	r3, [r7, #20]
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d3ed      	bcc.n	80112ba <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	3302      	adds	r3, #2
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	441a      	add	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 80112ea:	68fa      	ldr	r2, [r7, #12]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	441a      	add	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6899      	ldr	r1, [r3, #8]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	440b      	add	r3, r1
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d202      	bcs.n	8011304 <mg_der_to_tlv+0x9a>
    return -1;
 80112fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011302:	e000      	b.n	8011306 <mg_der_to_tlv+0x9c>
  }
  return 0;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	371c      	adds	r7, #28
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr

08011312 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8011312:	b480      	push	{r7}
 8011314:	b083      	sub	sp, #12
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801131e:	2b04      	cmp	r3, #4
 8011320:	d915      	bls.n	801134e <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801132a:	3203      	adds	r2, #3
 801132c:	7812      	ldrb	r2, [r2, #0]
 801132e:	b212      	sxth	r2, r2
 8011330:	0212      	lsls	r2, r2, #8
 8011332:	b211      	sxth	r1, r2
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8011338:	3204      	adds	r2, #4
 801133a:	7812      	ldrb	r2, [r2, #0]
 801133c:	b212      	sxth	r2, r2
 801133e:	430a      	orrs	r2, r1
 8011340:	b212      	sxth	r2, r2
 8011342:	b292      	uxth	r2, r2
 8011344:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8011346:	4293      	cmp	r3, r2
 8011348:	d301      	bcc.n	801134e <mg_tls_got_record+0x3c>
 801134a:	2301      	movs	r3, #1
 801134c:	e000      	b.n	8011350 <mg_tls_got_record+0x3e>
 801134e:	2300      	movs	r3, #0
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	b2db      	uxtb	r3, r3
}
 8011356:	4618      	mov	r0, r3
 8011358:	370c      	adds	r7, #12
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr

08011362 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 8011362:	b580      	push	{r7, lr}
 8011364:	b084      	sub	sp, #16
 8011366:	af00      	add	r7, sp, #0
 8011368:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3368      	adds	r3, #104	@ 0x68
 801136e:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	3303      	adds	r3, #3
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	b21b      	sxth	r3, r3
 801137a:	021b      	lsls	r3, r3, #8
 801137c:	b21a      	sxth	r2, r3
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	3304      	adds	r3, #4
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	b21b      	sxth	r3, r3
 8011388:	4313      	orrs	r3, r2
 801138a:	b21b      	sxth	r3, r3
 801138c:	b29b      	uxth	r3, r3
 801138e:	3305      	adds	r3, #5
 8011390:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 8011392:	897b      	ldrh	r3, [r7, #10]
 8011394:	461a      	mov	r2, r3
 8011396:	2100      	movs	r1, #0
 8011398:	68f8      	ldr	r0, [r7, #12]
 801139a:	f7f7 f839 	bl	8008410 <mg_iobuf_del>
}
 801139e:	bf00      	nop
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
	...

080113a8 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80113b6:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	695b      	ldr	r3, [r3, #20]
 80113c0:	4413      	add	r3, r2
 80113c2:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	699b      	ldr	r3, [r3, #24]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d033      	beq.n	8011434 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	3301      	adds	r3, #1
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	041a      	lsls	r2, r3, #16
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	3302      	adds	r3, #2
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	021b      	lsls	r3, r3, #8
 80113dc:	4313      	orrs	r3, r2
 80113de:	693a      	ldr	r2, [r7, #16]
 80113e0:	3203      	adds	r2, #3
 80113e2:	7812      	ldrb	r2, [r2, #0]
 80113e4:	4313      	orrs	r3, r2
 80113e6:	3304      	adds	r3, #4
 80113e8:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	699b      	ldr	r3, [r3, #24]
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d904      	bls.n	80113fe <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 80113f4:	4911      	ldr	r1, [pc, #68]	@ (801143c <mg_tls_drop_message+0x94>)
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f7f2 fd5e 	bl	8003eb8 <mg_error>
    return;
 80113fc:	e01b      	b.n	8011436 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	3320      	adds	r3, #32
 8011402:	68fa      	ldr	r2, [r7, #12]
 8011404:	6939      	ldr	r1, [r7, #16]
 8011406:	4618      	mov	r0, r3
 8011408:	f7fd fe26 	bl	800f058 <mg_sha256_update>
  tls->recv_offset += len;
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	695a      	ldr	r2, [r3, #20]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	441a      	add	r2, r3
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	699a      	ldr	r2, [r3, #24]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	1ad2      	subs	r2, r2, r3
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	699b      	ldr	r3, [r3, #24]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d104      	bne.n	8011436 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff ff98 	bl	8011362 <mg_tls_drop_record>
 8011432:	e000      	b.n	8011436 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8011434:	bf00      	nop
  }
}
 8011436:	3718      	adds	r7, #24
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	08020c74 	.word	0x08020c74

08011440 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8011440:	b590      	push	{r4, r7, lr}
 8011442:	b0d1      	sub	sp, #324	@ 0x144
 8011444:	af02      	add	r7, sp, #8
 8011446:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 801144a:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 801144e:	6020      	str	r0, [r4, #0]
 8011450:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8011454:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8011458:	6001      	str	r1, [r0, #0]
 801145a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801145e:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8011462:	600a      	str	r2, [r1, #0]
 8011464:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011468:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 801146c:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 801146e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011472:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011476:	6818      	ldr	r0, [r3, #0]
 8011478:	f7ee ff42 	bl	8000300 <strlen>
 801147c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 8011480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011484:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011488:	4618      	mov	r0, r3
 801148a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801148e:	461a      	mov	r2, r3
 8011490:	2100      	movs	r1, #0
 8011492:	f00d f8ee 	bl	801e672 <memset>
 8011496:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801149a:	b2da      	uxtb	r2, r3
 801149c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80114a4:	705a      	strb	r2, [r3, #1]
 80114a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80114b4:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 80114b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00c      	beq.n	80114d8 <mg_tls_derive_secret+0x98>
 80114be:	f107 0314 	add.w	r3, r7, #20
 80114c2:	3303      	adds	r3, #3
 80114c4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80114c8:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 80114cc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80114d0:	6809      	ldr	r1, [r1, #0]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f00d f8b3 	bl	801e63e <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 80114d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80114dc:	3303      	adds	r3, #3
 80114de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80114e2:	b2d1      	uxtb	r1, r2
 80114e4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80114e8:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80114ec:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 80114ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00e      	beq.n	8011514 <mg_tls_derive_secret+0xd4>
 80114f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80114fa:	3304      	adds	r3, #4
 80114fc:	f107 0214 	add.w	r2, r7, #20
 8011500:	18d0      	adds	r0, r2, r3
 8011502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011506:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801150a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 801150e:	6819      	ldr	r1, [r3, #0]
 8011510:	f00d f895 	bl	801e63e <memmove>
  packed[4 + labelsz + datasz] = 1;
 8011514:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8011518:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801151c:	4413      	add	r3, r2
 801151e:	3304      	adds	r3, #4
 8011520:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011524:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8011528:	2101      	movs	r1, #1
 801152a:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 801152c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8011530:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011534:	4413      	add	r3, r2
 8011536:	3305      	adds	r3, #5
 8011538:	f107 0414 	add.w	r4, r7, #20
 801153c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011540:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8011544:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8011548:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 801154c:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	4623      	mov	r3, r4
 8011554:	6812      	ldr	r2, [r2, #0]
 8011556:	6809      	ldr	r1, [r1, #0]
 8011558:	f7fd ff0b 	bl	800f372 <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 801155c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8011560:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8011564:	4619      	mov	r1, r3
 8011566:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 801156a:	f00d f868 	bl	801e63e <memmove>
}
 801156e:	bf00      	nop
 8011570:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8011574:	46bd      	mov	sp, r7
 8011576:	bd90      	pop	{r4, r7, pc}

08011578 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 8011578:	b580      	push	{r7, lr}
 801157a:	b0cc      	sub	sp, #304	@ 0x130
 801157c:	af04      	add	r7, sp, #16
 801157e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011582:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011586:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011588:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801158c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011596:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 801159a:	2320      	movs	r3, #32
 801159c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 80115a0:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80115a4:	2320      	movs	r3, #32
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	4b89      	ldr	r3, [pc, #548]	@ (80117d0 <mg_tls_generate_handshake_keys+0x258>)
 80115aa:	2200      	movs	r2, #0
 80115ac:	2100      	movs	r1, #0
 80115ae:	f7fd fee0 	bl	800f372 <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 80115b2:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80115b6:	2320      	movs	r3, #32
 80115b8:	9302      	str	r3, [sp, #8]
 80115ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	2320      	movs	r3, #32
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	4b83      	ldr	r3, [pc, #524]	@ (80117d4 <mg_tls_generate_handshake_keys+0x25c>)
 80115c6:	2220      	movs	r2, #32
 80115c8:	4883      	ldr	r0, [pc, #524]	@ (80117d8 <mg_tls_generate_handshake_keys+0x260>)
 80115ca:	f7ff ff39 	bl	8011440 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80115ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115d2:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 80115d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115da:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80115dc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80115e0:	2220      	movs	r2, #32
 80115e2:	9200      	str	r2, [sp, #0]
 80115e4:	2220      	movs	r2, #32
 80115e6:	f7fd fec4 	bl	800f372 <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 80115ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115ee:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 80115f2:	2220      	movs	r2, #32
 80115f4:	4619      	mov	r1, r3
 80115f6:	4879      	ldr	r0, [pc, #484]	@ (80117dc <mg_tls_generate_handshake_keys+0x264>)
 80115f8:	f7ff fd34 	bl	8011064 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80115fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011600:	f103 0120 	add.w	r1, r3, #32
 8011604:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8011608:	2270      	movs	r2, #112	@ 0x70
 801160a:	4618      	mov	r0, r3
 801160c:	f00d f817 	bl	801e63e <memmove>
  mg_sha256_final(hello_hash, &sha256);
 8011610:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8011614:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011618:	4611      	mov	r1, r2
 801161a:	4618      	mov	r0, r3
 801161c:	f7fd fd55 	bl	800f0ca <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 8011620:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011624:	2220      	movs	r2, #32
 8011626:	4619      	mov	r1, r3
 8011628:	486d      	ldr	r0, [pc, #436]	@ (80117e0 <mg_tls_generate_handshake_keys+0x268>)
 801162a:	f7ff fd1b 	bl	8011064 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 801162e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011632:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8011636:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801163a:	2320      	movs	r3, #32
 801163c:	9302      	str	r3, [sp, #8]
 801163e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011642:	9301      	str	r3, [sp, #4]
 8011644:	2320      	movs	r3, #32
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	4613      	mov	r3, r2
 801164a:	2220      	movs	r2, #32
 801164c:	4865      	ldr	r0, [pc, #404]	@ (80117e4 <mg_tls_generate_handshake_keys+0x26c>)
 801164e:	f7ff fef7 	bl	8011440 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 8011652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011656:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 801165a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801165e:	2320      	movs	r3, #32
 8011660:	9302      	str	r3, [sp, #8]
 8011662:	f107 0308 	add.w	r3, r7, #8
 8011666:	9301      	str	r3, [sp, #4]
 8011668:	2320      	movs	r3, #32
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	4613      	mov	r3, r2
 801166e:	2220      	movs	r2, #32
 8011670:	485d      	ldr	r0, [pc, #372]	@ (80117e8 <mg_tls_generate_handshake_keys+0x270>)
 8011672:	f7ff fee5 	bl	8011440 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8011676:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801167a:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 801167e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011682:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011686:	9202      	str	r2, [sp, #8]
 8011688:	9301      	str	r3, [sp, #4]
 801168a:	2300      	movs	r3, #0
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	2300      	movs	r3, #0
 8011690:	2220      	movs	r2, #32
 8011692:	4856      	ldr	r0, [pc, #344]	@ (80117ec <mg_tls_generate_handshake_keys+0x274>)
 8011694:	f7ff fed4 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8011698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801169c:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 80116a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80116a4:	220c      	movs	r2, #12
 80116a6:	9202      	str	r2, [sp, #8]
 80116a8:	9301      	str	r3, [sp, #4]
 80116aa:	2300      	movs	r3, #0
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	2300      	movs	r3, #0
 80116b0:	2220      	movs	r2, #32
 80116b2:	484f      	ldr	r0, [pc, #316]	@ (80117f0 <mg_tls_generate_handshake_keys+0x278>)
 80116b4:	f7ff fec4 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 80116b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116bc:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 80116c0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80116c4:	2220      	movs	r2, #32
 80116c6:	9202      	str	r2, [sp, #8]
 80116c8:	9301      	str	r3, [sp, #4]
 80116ca:	2300      	movs	r3, #0
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	2300      	movs	r3, #0
 80116d0:	2220      	movs	r2, #32
 80116d2:	4848      	ldr	r0, [pc, #288]	@ (80117f4 <mg_tls_generate_handshake_keys+0x27c>)
 80116d4:	f7ff feb4 	bl	8011440 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80116d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116dc:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 80116e0:	f107 0108 	add.w	r1, r7, #8
 80116e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80116e8:	9202      	str	r2, [sp, #8]
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	2300      	movs	r3, #0
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	2300      	movs	r3, #0
 80116f2:	2220      	movs	r2, #32
 80116f4:	483d      	ldr	r0, [pc, #244]	@ (80117ec <mg_tls_generate_handshake_keys+0x274>)
 80116f6:	f7ff fea3 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 80116fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116fe:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 8011702:	f107 0108 	add.w	r1, r7, #8
 8011706:	220c      	movs	r2, #12
 8011708:	9202      	str	r2, [sp, #8]
 801170a:	9301      	str	r3, [sp, #4]
 801170c:	2300      	movs	r3, #0
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	2300      	movs	r3, #0
 8011712:	2220      	movs	r2, #32
 8011714:	4836      	ldr	r0, [pc, #216]	@ (80117f0 <mg_tls_generate_handshake_keys+0x278>)
 8011716:	f7ff fe93 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 801171a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801171e:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 8011722:	f107 0108 	add.w	r1, r7, #8
 8011726:	2220      	movs	r2, #32
 8011728:	9202      	str	r2, [sp, #8]
 801172a:	9301      	str	r3, [sp, #4]
 801172c:	2300      	movs	r3, #0
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	2300      	movs	r3, #0
 8011732:	2220      	movs	r2, #32
 8011734:	482f      	ldr	r0, [pc, #188]	@ (80117f4 <mg_tls_generate_handshake_keys+0x27c>)
 8011736:	f7ff fe83 	bl	8011440 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 801173a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801173e:	2220      	movs	r2, #32
 8011740:	4619      	mov	r1, r3
 8011742:	482d      	ldr	r0, [pc, #180]	@ (80117f8 <mg_tls_generate_handshake_keys+0x280>)
 8011744:	f7ff fc8e 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8011748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801174c:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8011750:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011754:	4619      	mov	r1, r3
 8011756:	4829      	ldr	r0, [pc, #164]	@ (80117fc <mg_tls_generate_handshake_keys+0x284>)
 8011758:	f7ff fc84 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 801175c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011760:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8011764:	220c      	movs	r2, #12
 8011766:	4619      	mov	r1, r3
 8011768:	4825      	ldr	r0, [pc, #148]	@ (8011800 <mg_tls_generate_handshake_keys+0x288>)
 801176a:	f7ff fc7b 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 801176e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011772:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8011776:	2220      	movs	r2, #32
 8011778:	4619      	mov	r1, r3
 801177a:	4822      	ldr	r0, [pc, #136]	@ (8011804 <mg_tls_generate_handshake_keys+0x28c>)
 801177c:	f7ff fc72 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8011780:	f107 0308 	add.w	r3, r7, #8
 8011784:	2220      	movs	r2, #32
 8011786:	4619      	mov	r1, r3
 8011788:	481f      	ldr	r0, [pc, #124]	@ (8011808 <mg_tls_generate_handshake_keys+0x290>)
 801178a:	f7ff fc6b 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 801178e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011792:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8011796:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801179a:	4619      	mov	r1, r3
 801179c:	481b      	ldr	r0, [pc, #108]	@ (801180c <mg_tls_generate_handshake_keys+0x294>)
 801179e:	f7ff fc61 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 80117a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80117a6:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80117aa:	220c      	movs	r2, #12
 80117ac:	4619      	mov	r1, r3
 80117ae:	4818      	ldr	r0, [pc, #96]	@ (8011810 <mg_tls_generate_handshake_keys+0x298>)
 80117b0:	f7ff fc58 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 80117b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80117b8:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80117bc:	2220      	movs	r2, #32
 80117be:	4619      	mov	r1, r3
 80117c0:	4814      	ldr	r0, [pc, #80]	@ (8011814 <mg_tls_generate_handshake_keys+0x29c>)
 80117c2:	f7ff fc4f 	bl	8011064 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 80117c6:	bf00      	nop
 80117c8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	20000638 	.word	0x20000638
 80117d4:	2000025c 	.word	0x2000025c
 80117d8:	08020c80 	.word	0x08020c80
 80117dc:	08020c90 	.word	0x08020c90
 80117e0:	08020c9c 	.word	0x08020c9c
 80117e4:	08020ca8 	.word	0x08020ca8
 80117e8:	08020cbc 	.word	0x08020cbc
 80117ec:	08020cd0 	.word	0x08020cd0
 80117f0:	08020cdc 	.word	0x08020cdc
 80117f4:	08020ce8 	.word	0x08020ce8
 80117f8:	08020cf8 	.word	0x08020cf8
 80117fc:	08020d08 	.word	0x08020d08
 8011800:	08020d10 	.word	0x08020d10
 8011804:	08020d18 	.word	0x08020d18
 8011808:	08020d24 	.word	0x08020d24
 801180c:	08020d34 	.word	0x08020d34
 8011810:	08020d3c 	.word	0x08020d3c
 8011814:	08020d44 	.word	0x08020d44

08011818 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 8011818:	b580      	push	{r7, lr}
 801181a:	b0cc      	sub	sp, #304	@ 0x130
 801181c:	af04      	add	r7, sp, #16
 801181e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8011822:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011826:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011828:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801182c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 801183a:	2320      	movs	r3, #32
 801183c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8011840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011844:	f103 0120 	add.w	r1, r3, #32
 8011848:	f107 0308 	add.w	r3, r7, #8
 801184c:	2270      	movs	r2, #112	@ 0x70
 801184e:	4618      	mov	r0, r3
 8011850:	f00c fef5 	bl	801e63e <memmove>
  mg_sha256_final(hash, &sha256);
 8011854:	f107 0208 	add.w	r2, r7, #8
 8011858:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f7fd fc33 	bl	800f0ca <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8011864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011868:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 801186c:	2320      	movs	r3, #32
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	2320      	movs	r3, #32
 8011878:	9300      	str	r3, [sp, #0]
 801187a:	4b64      	ldr	r3, [pc, #400]	@ (8011a0c <mg_tls_generate_application_keys+0x1f4>)
 801187c:	2220      	movs	r2, #32
 801187e:	4864      	ldr	r0, [pc, #400]	@ (8011a10 <mg_tls_generate_application_keys+0x1f8>)
 8011880:	f7ff fdde 	bl	8011440 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8011884:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8011888:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 801188c:	2320      	movs	r3, #32
 801188e:	9300      	str	r3, [sp, #0]
 8011890:	4b60      	ldr	r3, [pc, #384]	@ (8011a14 <mg_tls_generate_application_keys+0x1fc>)
 8011892:	2220      	movs	r2, #32
 8011894:	f7fd fd6d 	bl	800f372 <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8011898:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 801189c:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80118a0:	2320      	movs	r3, #32
 80118a2:	9302      	str	r3, [sp, #8]
 80118a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80118a8:	9301      	str	r3, [sp, #4]
 80118aa:	2320      	movs	r3, #32
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	4613      	mov	r3, r2
 80118b0:	2220      	movs	r2, #32
 80118b2:	4859      	ldr	r0, [pc, #356]	@ (8011a18 <mg_tls_generate_application_keys+0x200>)
 80118b4:	f7ff fdc4 	bl	8011440 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 80118b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118bc:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 80118c0:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80118c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80118c8:	9202      	str	r2, [sp, #8]
 80118ca:	9301      	str	r3, [sp, #4]
 80118cc:	2300      	movs	r3, #0
 80118ce:	9300      	str	r3, [sp, #0]
 80118d0:	2300      	movs	r3, #0
 80118d2:	2220      	movs	r2, #32
 80118d4:	4851      	ldr	r0, [pc, #324]	@ (8011a1c <mg_tls_generate_application_keys+0x204>)
 80118d6:	f7ff fdb3 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 80118da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118de:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 80118e2:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80118e6:	220c      	movs	r2, #12
 80118e8:	9202      	str	r2, [sp, #8]
 80118ea:	9301      	str	r3, [sp, #4]
 80118ec:	2300      	movs	r3, #0
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	2300      	movs	r3, #0
 80118f2:	2220      	movs	r2, #32
 80118f4:	484a      	ldr	r0, [pc, #296]	@ (8011a20 <mg_tls_generate_application_keys+0x208>)
 80118f6:	f7ff fda3 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 80118fa:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80118fe:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8011902:	2320      	movs	r3, #32
 8011904:	9302      	str	r3, [sp, #8]
 8011906:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	2320      	movs	r3, #32
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	4613      	mov	r3, r2
 8011912:	2220      	movs	r2, #32
 8011914:	4843      	ldr	r0, [pc, #268]	@ (8011a24 <mg_tls_generate_application_keys+0x20c>)
 8011916:	f7ff fd93 	bl	8011440 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 801191a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801191e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8011922:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8011926:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801192a:	9202      	str	r2, [sp, #8]
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	2300      	movs	r3, #0
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	2300      	movs	r3, #0
 8011934:	2220      	movs	r2, #32
 8011936:	4839      	ldr	r0, [pc, #228]	@ (8011a1c <mg_tls_generate_application_keys+0x204>)
 8011938:	f7ff fd82 	bl	8011440 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 801193c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011940:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8011944:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8011948:	220c      	movs	r2, #12
 801194a:	9202      	str	r2, [sp, #8]
 801194c:	9301      	str	r3, [sp, #4]
 801194e:	2300      	movs	r3, #0
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	2300      	movs	r3, #0
 8011954:	2220      	movs	r2, #32
 8011956:	4832      	ldr	r0, [pc, #200]	@ (8011a20 <mg_tls_generate_application_keys+0x208>)
 8011958:	f7ff fd72 	bl	8011440 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 801195c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011960:	2220      	movs	r2, #32
 8011962:	4619      	mov	r1, r3
 8011964:	4830      	ldr	r0, [pc, #192]	@ (8011a28 <mg_tls_generate_application_keys+0x210>)
 8011966:	f7ff fb7d 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 801196a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801196e:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8011972:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8011976:	4619      	mov	r1, r3
 8011978:	482c      	ldr	r0, [pc, #176]	@ (8011a2c <mg_tls_generate_application_keys+0x214>)
 801197a:	f7ff fb73 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 801197e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011982:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8011986:	220c      	movs	r2, #12
 8011988:	4619      	mov	r1, r3
 801198a:	4829      	ldr	r0, [pc, #164]	@ (8011a30 <mg_tls_generate_application_keys+0x218>)
 801198c:	f7ff fb6a 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8011990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011994:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8011998:	2220      	movs	r2, #32
 801199a:	4619      	mov	r1, r3
 801199c:	4825      	ldr	r0, [pc, #148]	@ (8011a34 <mg_tls_generate_application_keys+0x21c>)
 801199e:	f7ff fb61 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 80119a2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80119a6:	2220      	movs	r2, #32
 80119a8:	4619      	mov	r1, r3
 80119aa:	4823      	ldr	r0, [pc, #140]	@ (8011a38 <mg_tls_generate_application_keys+0x220>)
 80119ac:	f7ff fb5a 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 80119b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119b4:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 80119b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80119bc:	4619      	mov	r1, r3
 80119be:	481f      	ldr	r0, [pc, #124]	@ (8011a3c <mg_tls_generate_application_keys+0x224>)
 80119c0:	f7ff fb50 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 80119c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119c8:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80119cc:	220c      	movs	r2, #12
 80119ce:	4619      	mov	r1, r3
 80119d0:	481b      	ldr	r0, [pc, #108]	@ (8011a40 <mg_tls_generate_application_keys+0x228>)
 80119d2:	f7ff fb47 	bl	8011064 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 80119d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119da:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80119de:	2220      	movs	r2, #32
 80119e0:	4619      	mov	r1, r3
 80119e2:	4818      	ldr	r0, [pc, #96]	@ (8011a44 <mg_tls_generate_application_keys+0x22c>)
 80119e4:	f7ff fb3e 	bl	8011064 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 80119e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119ec:	2200      	movs	r2, #0
 80119ee:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 80119f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119f6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80119fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119fe:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8011a02:	bf00      	nop
 8011a04:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	2000025c 	.word	0x2000025c
 8011a10:	08020c80 	.word	0x08020c80
 8011a14:	20000638 	.word	0x20000638
 8011a18:	08020d50 	.word	0x08020d50
 8011a1c:	08020cd0 	.word	0x08020cd0
 8011a20:	08020cdc 	.word	0x08020cdc
 8011a24:	08020d64 	.word	0x08020d64
 8011a28:	08020d78 	.word	0x08020d78
 8011a2c:	08020d08 	.word	0x08020d08
 8011a30:	08020d10 	.word	0x08020d10
 8011a34:	08020d18 	.word	0x08020d18
 8011a38:	08020d88 	.word	0x08020d88
 8011a3c:	08020d34 	.word	0x08020d34
 8011a40:	08020d3c 	.word	0x08020d3c
 8011a44:	08020d44 	.word	0x08020d44

08011a48 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b09a      	sub	sp, #104	@ 0x68
 8011a4c:	af04      	add	r7, sp, #16
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
 8011a54:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8011a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a60:	3304      	adds	r3, #4
 8011a62:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	3311      	adds	r3, #17
 8011a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011a6a:	2317      	movs	r3, #23
 8011a6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8011a70:	2303      	movs	r3, #3
 8011a72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011a76:	2303      	movs	r3, #3
 8011a78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8011a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a7e:	0a1b      	lsrs	r3, r3, #8
 8011a80:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8011a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a88:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011a8a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011a8e:	2317      	movs	r3, #23
 8011a90:	773b      	strb	r3, [r7, #28]
 8011a92:	2303      	movs	r3, #3
 8011a94:	777b      	strb	r3, [r7, #29]
 8011a96:	2303      	movs	r3, #3
 8011a98:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8011a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a9c:	0a1b      	lsrs	r3, r3, #8
 8011a9e:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011aa0:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8011aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011aa4:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8011aa6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011ab0:	f003 0302 	and.w	r3, r3, #2
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d003      	beq.n	8011ac2 <mg_tls_encrypt+0x7a>
 8011aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011abc:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8011ac0:	e002      	b.n	8011ac8 <mg_tls_encrypt+0x80>
 8011ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ac4:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8011ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011ad0:	f003 0302 	and.w	r3, r3, #2
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <mg_tls_encrypt+0x9a>
 8011ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011adc:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8011ae0:	e002      	b.n	8011ae8 <mg_tls_encrypt+0xa0>
 8011ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ae4:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 8011ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011af0:	f003 0302 	and.w	r3, r3, #2
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d003      	beq.n	8011b02 <mg_tls_encrypt+0xba>
 8011afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011afc:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8011b00:	e002      	b.n	8011b08 <mg_tls_encrypt+0xc0>
 8011b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b04:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 8011b08:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 8011b0a:	f107 0310 	add.w	r3, r7, #16
 8011b0e:	220c      	movs	r2, #12
 8011b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b12:	4618      	mov	r0, r3
 8011b14:	f00c fd93 	bl	801e63e <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8011b18:	7e3a      	ldrb	r2, [r7, #24]
 8011b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b1c:	0e1b      	lsrs	r3, r3, #24
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	4053      	eors	r3, r2
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8011b26:	7e7a      	ldrb	r2, [r7, #25]
 8011b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b2a:	0c1b      	lsrs	r3, r3, #16
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	4053      	eors	r3, r2
 8011b30:	b2db      	uxtb	r3, r3
 8011b32:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8011b34:	7eba      	ldrb	r2, [r7, #26]
 8011b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b38:	0a1b      	lsrs	r3, r3, #8
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	4053      	eors	r3, r2
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8011b42:	7efa      	ldrb	r2, [r7, #27]
 8011b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	4053      	eors	r3, r2
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8011b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b50:	6899      	ldr	r1, [r3, #8]
 8011b52:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011b56:	2305      	movs	r3, #5
 8011b58:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011b5a:	f7f6 fc07 	bl	800836c <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8011b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b60:	689a      	ldr	r2, [r3, #8]
 8011b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b64:	4413      	add	r3, r2
 8011b66:	4619      	mov	r1, r3
 8011b68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011b6a:	f7f6 fb73 	bl	8008254 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8011b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b70:	681a      	ldr	r2, [r3, #0]
 8011b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b74:	689b      	ldr	r3, [r3, #8]
 8011b76:	4413      	add	r3, r2
 8011b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8011b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b80:	6899      	ldr	r1, [r3, #8]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	440b      	add	r3, r1
 8011b86:	3301      	adds	r3, #1
 8011b88:	4413      	add	r3, r2
 8011b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	68b9      	ldr	r1, [r7, #8]
 8011b90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011b92:	f00c fd54 	bl	801e63e <memmove>
  outmsg[msgsz] = msgtype;
 8011b96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	4413      	add	r3, r2
 8011b9c:	78fa      	ldrb	r2, [r7, #3]
 8011b9e:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8011ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011ba4:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8011ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ba8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8011bac:	4619      	mov	r1, r3
 8011bae:	2001      	movs	r0, #1
 8011bb0:	f00c fa8a 	bl	801e0c8 <calloc>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8011bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d104      	bne.n	8011bc8 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8011bbe:	491f      	ldr	r1, [pc, #124]	@ (8011c3c <mg_tls_encrypt+0x1f4>)
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7f2 f979 	bl	8003eb8 <mg_error>
 8011bc6:	e035      	b.n	8011c34 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	f107 011c 	add.w	r1, r7, #28
 8011bd0:	f107 0210 	add.w	r2, r7, #16
 8011bd4:	9302      	str	r3, [sp, #8]
 8011bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	2305      	movs	r3, #5
 8011bdc:	9300      	str	r3, [sp, #0]
 8011bde:	460b      	mov	r3, r1
 8011be0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011be2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011be4:	f005 fa49 	bl	801707a <mg_chacha20_poly1305_encrypt>
 8011be8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 8011bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011bee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011bf0:	f00c fd25 	bl	801e63e <memmove>
      free(enc);
 8011bf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bf6:	f00c fa8b 	bl	801e110 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011c00:	f003 0302 	and.w	r3, r3, #2
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d007      	beq.n	8011c1a <mg_tls_encrypt+0x1d2>
 8011c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c0c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c14:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8011c18:	e006      	b.n	8011c28 <mg_tls_encrypt+0x1e0>
 8011c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c1c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c24:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 8011c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c2a:	689a      	ldr	r2, [r3, #8]
 8011c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c2e:	441a      	add	r2, r3
 8011c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c32:	609a      	str	r2, [r3, #8]
}
 8011c34:	3758      	adds	r7, #88	@ 0x58
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	08020d98 	.word	0x08020d98

08011c40 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b092      	sub	sp, #72	@ 0x48
 8011c44:	af02      	add	r7, sp, #8
 8011c46:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3368      	adds	r3, #104	@ 0x68
 8011c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	b2db      	uxtb	r3, r3
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d003      	beq.n	8011c6e <mg_tls_recv_record+0x2e>
 8011c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c68:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8011c6c:	e002      	b.n	8011c74 <mg_tls_recv_record+0x34>
 8011c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c70:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8011c74:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011c7c:	f003 0302 	and.w	r3, r3, #2
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d003      	beq.n	8011c8e <mg_tls_recv_record+0x4e>
 8011c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c88:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8011c8c:	e002      	b.n	8011c94 <mg_tls_recv_record+0x54>
 8011c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c90:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8011c94:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011c9c:	f003 0302 	and.w	r3, r3, #2
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d003      	beq.n	8011cae <mg_tls_recv_record+0x6e>
 8011ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ca8:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8011cac:	e002      	b.n	8011cb4 <mg_tls_recv_record+0x74>
 8011cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cb0:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8011cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8011cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	e0c7      	b.n	8011e52 <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7ff fb25 	bl	8011312 <mg_tls_got_record>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	f083 0301 	eor.w	r3, r3, #1
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8011cd4:	f06f 0301 	mvn.w	r3, #1
 8011cd8:	e0bb      	b.n	8011e52 <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 8011cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	2b17      	cmp	r3, #23
 8011ce2:	d026      	beq.n	8011d32 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	2b14      	cmp	r3, #20
 8011cec:	d103      	bne.n	8011cf6 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ff fb37 	bl	8011362 <mg_tls_drop_record>
 8011cf4:	e7e5      	b.n	8011cc2 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 8011cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b15      	cmp	r3, #21
 8011cfe:	d111      	bne.n	8011d24 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8011d00:	4b56      	ldr	r3, [pc, #344]	@ (8011e5c <mg_tls_recv_record+0x21c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	dd09      	ble.n	8011d1c <mg_tls_recv_record+0xdc>
 8011d08:	4b55      	ldr	r3, [pc, #340]	@ (8011e60 <mg_tls_recv_record+0x220>)
 8011d0a:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8011d0e:	4955      	ldr	r1, [pc, #340]	@ (8011e64 <mg_tls_recv_record+0x224>)
 8011d10:	2002      	movs	r0, #2
 8011d12:	f7f7 fa4b 	bl	80091ac <mg_log_prefix>
 8011d16:	4854      	ldr	r0, [pc, #336]	@ (8011e68 <mg_tls_recv_record+0x228>)
 8011d18:	f7f7 fa98 	bl	800924c <mg_log>
      mg_tls_drop_record(c);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7ff fb20 	bl	8011362 <mg_tls_drop_record>
 8011d22:	e7ce      	b.n	8011cc2 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8011d24:	4951      	ldr	r1, [pc, #324]	@ (8011e6c <mg_tls_recv_record+0x22c>)
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7f2 f8c6 	bl	8003eb8 <mg_error>
      return -1;
 8011d2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d30:	e08f      	b.n	8011e52 <mg_tls_recv_record+0x212>
      break;
 8011d32:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8011d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3303      	adds	r3, #3
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	b21b      	sxth	r3, r3
 8011d3e:	021b      	lsls	r3, r3, #8
 8011d40:	b21a      	sxth	r2, r3
 8011d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	3304      	adds	r3, #4
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	b21b      	sxth	r3, r3
 8011d4c:	4313      	orrs	r3, r2
 8011d4e:	b21b      	sxth	r3, r3
 8011d50:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 8011d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	3305      	adds	r3, #5
 8011d58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 8011d5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011d5c:	2b0f      	cmp	r3, #15
 8011d5e:	d806      	bhi.n	8011d6e <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 8011d60:	4943      	ldr	r1, [pc, #268]	@ (8011e70 <mg_tls_recv_record+0x230>)
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f7f2 f8a8 	bl	8003eb8 <mg_error>
    return -1;
 8011d68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d6c:	e071      	b.n	8011e52 <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 8011d6e:	f107 030c 	add.w	r3, r7, #12
 8011d72:	220c      	movs	r2, #12
 8011d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d76:	4618      	mov	r0, r3
 8011d78:	f00c fc61 	bl	801e63e <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8011d7c:	7d3a      	ldrb	r2, [r7, #20]
 8011d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d80:	0e1b      	lsrs	r3, r3, #24
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	4053      	eors	r3, r2
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8011d8a:	7d7a      	ldrb	r2, [r7, #21]
 8011d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d8e:	0c1b      	lsrs	r3, r3, #16
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	4053      	eors	r3, r2
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8011d98:	7dba      	ldrb	r2, [r7, #22]
 8011d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d9c:	0a1b      	lsrs	r3, r3, #8
 8011d9e:	b2db      	uxtb	r3, r3
 8011da0:	4053      	eors	r3, r2
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8011da6:	7dfa      	ldrb	r2, [r7, #23]
 8011da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	4053      	eors	r3, r2
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8011db2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011db4:	4619      	mov	r1, r3
 8011db6:	2001      	movs	r0, #1
 8011db8:	f00c f986 	bl	801e0c8 <calloc>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8011dc0:	6a3b      	ldr	r3, [r7, #32]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d106      	bne.n	8011dd4 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 8011dc6:	492b      	ldr	r1, [pc, #172]	@ (8011e74 <mg_tls_recv_record+0x234>)
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7f2 f875 	bl	8003eb8 <mg_error>
      return -1;
 8011dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011dd2:	e03e      	b.n	8011e52 <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8011dd4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011dd6:	f107 020c 	add.w	r2, r7, #12
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011de0:	6a38      	ldr	r0, [r7, #32]
 8011de2:	f005 f982 	bl	80170ea <mg_chacha20_poly1305_decrypt>
 8011de6:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 8011de8:	69fa      	ldr	r2, [r7, #28]
 8011dea:	6a39      	ldr	r1, [r7, #32]
 8011dec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011dee:	f00c fc26 	bl	801e63e <memmove>
    free(dec);
 8011df2:	6a38      	ldr	r0, [r7, #32]
 8011df4:	f00c f98c 	bl	801e110 <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 8011df8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011dfa:	3b11      	subs	r3, #17
 8011dfc:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 8011dfe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011e00:	3b11      	subs	r3, #17
 8011e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e04:	4413      	add	r3, r2
 8011e06:	781a      	ldrb	r2, [r3, #0]
 8011e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e0a:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011e10:	6812      	ldr	r2, [r2, #0]
 8011e12:	1a9a      	subs	r2, r3, r2
 8011e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e16:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 8011e18:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011e1a:	f1a3 0211 	sub.w	r2, r3, #17
 8011e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e20:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011e28:	f003 0302 	and.w	r3, r3, #2
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d007      	beq.n	8011e42 <mg_tls_recv_record+0x202>
 8011e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e34:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8011e38:	1c5a      	adds	r2, r3, #1
 8011e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e3c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 8011e40:	e006      	b.n	8011e50 <mg_tls_recv_record+0x210>
 8011e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e44:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8011e48:	1c5a      	adds	r2, r3, #1
 8011e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e4c:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 8011e50:	69bb      	ldr	r3, [r7, #24]
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3740      	adds	r7, #64	@ 0x40
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	20000254 	.word	0x20000254
 8011e60:	080229b4 	.word	0x080229b4
 8011e64:	0801f338 	.word	0x0801f338
 8011e68:	08020da0 	.word	0x08020da0
 8011e6c:	08020dbc 	.word	0x08020dbc
 8011e70:	08020c74 	.word	0x08020c74
 8011e74:	08020d98 	.word	0x08020d98

08011e78 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 8011e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e7a:	b0d5      	sub	sp, #340	@ 0x154
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011e82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011e86:	6018      	str	r0, [r3, #0]
 8011e88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011e8c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011e90:	6019      	str	r1, [r3, #0]
 8011e92:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011e96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011e9a:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011e9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011ea0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011eaa:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8011eae:	4b41      	ldr	r3, [pc, #260]	@ (8011fb4 <mg_tls_calc_cert_verify_hash+0x13c>)
 8011eb0:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8011eb4:	461d      	mov	r5, r3
 8011eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8011ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8011fb8 <mg_tls_calc_cert_verify_hash+0x140>)
 8011ec4:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8011ec8:	461d      	mov	r5, r3
 8011eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ed2:	682b      	ldr	r3, [r5, #0]
 8011ed4:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8011ed6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011eda:	2240      	movs	r2, #64	@ 0x40
 8011edc:	2120      	movs	r1, #32
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f00c fbc7 	bl	801e672 <memset>
  if (is_client) {
 8011ee4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011ee8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d018      	beq.n	8011f24 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8011ef2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011ef6:	3340      	adds	r3, #64	@ 0x40
 8011ef8:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8011efc:	469c      	mov	ip, r3
 8011efe:	f104 0e20 	add.w	lr, r4, #32
 8011f02:	4665      	mov	r5, ip
 8011f04:	4626      	mov	r6, r4
 8011f06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f08:	6028      	str	r0, [r5, #0]
 8011f0a:	6069      	str	r1, [r5, #4]
 8011f0c:	60aa      	str	r2, [r5, #8]
 8011f0e:	60eb      	str	r3, [r5, #12]
 8011f10:	3410      	adds	r4, #16
 8011f12:	f10c 0c10 	add.w	ip, ip, #16
 8011f16:	4574      	cmp	r4, lr
 8011f18:	d1f3      	bne.n	8011f02 <mg_tls_calc_cert_verify_hash+0x8a>
 8011f1a:	4662      	mov	r2, ip
 8011f1c:	4623      	mov	r3, r4
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	8013      	strh	r3, [r2, #0]
 8011f22:	e017      	b.n	8011f54 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8011f24:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011f28:	3340      	adds	r3, #64	@ 0x40
 8011f2a:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8011f2e:	469c      	mov	ip, r3
 8011f30:	f104 0e20 	add.w	lr, r4, #32
 8011f34:	4665      	mov	r5, ip
 8011f36:	4626      	mov	r6, r4
 8011f38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011f3a:	6028      	str	r0, [r5, #0]
 8011f3c:	6069      	str	r1, [r5, #4]
 8011f3e:	60aa      	str	r2, [r5, #8]
 8011f40:	60eb      	str	r3, [r5, #12]
 8011f42:	3410      	adds	r4, #16
 8011f44:	f10c 0c10 	add.w	ip, ip, #16
 8011f48:	4574      	cmp	r4, lr
 8011f4a:	d1f3      	bne.n	8011f34 <mg_tls_calc_cert_verify_hash+0xbc>
 8011f4c:	4662      	mov	r2, ip
 8011f4e:	4623      	mov	r3, r4
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8011f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8011f58:	f103 0120 	add.w	r1, r3, #32
 8011f5c:	f107 0310 	add.w	r3, r7, #16
 8011f60:	2270      	movs	r2, #112	@ 0x70
 8011f62:	4618      	mov	r0, r3
 8011f64:	f00c fb6b 	bl	801e63e <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 8011f68:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8011f6c:	3362      	adds	r3, #98	@ 0x62
 8011f6e:	f107 0210 	add.w	r2, r7, #16
 8011f72:	4611      	mov	r1, r2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fd f8a8 	bl	800f0ca <mg_sha256_final>

  mg_sha256_init(&sha256);
 8011f7a:	f107 0310 	add.w	r3, r7, #16
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fc fe26 	bl	800ebd0 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 8011f84:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8011f88:	f107 0310 	add.w	r3, r7, #16
 8011f8c:	2282      	movs	r2, #130	@ 0x82
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fd f862 	bl	800f058 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8011f94:	f107 0210 	add.w	r2, r7, #16
 8011f98:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011f9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	6818      	ldr	r0, [r3, #0]
 8011fa4:	f7fd f891 	bl	800f0ca <mg_sha256_final>
}
 8011fa8:	bf00      	nop
 8011faa:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	08020dd0 	.word	0x08020dd0
 8011fb8:	08020df4 	.word	0x08020df4

08011fbc <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b08c      	sub	sp, #48	@ 0x30
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	3368      	adds	r3, #104	@ 0x68
 8011fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7ff f99d 	bl	8011312 <mg_tls_got_record>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	f083 0301 	eor.w	r3, r3, #1
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8011fe4:	f06f 0301 	mvn.w	r3, #1
 8011fe8:	e15f      	b.n	80122aa <mg_tls_server_recv_hello+0x2ee>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8011fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	2b16      	cmp	r3, #22
 8011ff2:	d105      	bne.n	8012000 <mg_tls_server_recv_hello+0x44>
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	3305      	adds	r3, #5
 8011ffa:	781b      	ldrb	r3, [r3, #0]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d006      	beq.n	801200e <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8012000:	49a1      	ldr	r1, [pc, #644]	@ (8012288 <mg_tls_server_recv_hello+0x2cc>)
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7f1 ff58 	bl	8003eb8 <mg_error>
    return -1;
 8012008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801200c:	e14d      	b.n	80122aa <mg_tls_server_recv_hello+0x2ee>
  }
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	3303      	adds	r3, #3
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	b21b      	sxth	r3, r3
 8012018:	021b      	lsls	r3, r3, #8
 801201a:	b21a      	sxth	r2, r3
 801201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	3304      	adds	r3, #4
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	b21b      	sxth	r3, r3
 8012026:	4313      	orrs	r3, r2
 8012028:	b21b      	sxth	r3, r3
 801202a:	847b      	strh	r3, [r7, #34]	@ 0x22
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 801202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801202e:	f103 0020 	add.w	r0, r3, #32
 8012032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	3305      	adds	r3, #5
 8012038:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801203a:	4619      	mov	r1, r3
 801203c:	f7fd f80c 	bl	800f058 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 8012040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012042:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8012046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	330b      	adds	r3, #11
 801204c:	2220      	movs	r2, #32
 801204e:	4619      	mov	r1, r3
 8012050:	f00c faf5 	bl	801e63e <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 8012054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 801205c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 8012060:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012064:	2b20      	cmp	r3, #32
 8012066:	d10b      	bne.n	8012080 <mg_tls_server_recv_hello+0xc4>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 8012068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801206a:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 801206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	332c      	adds	r3, #44	@ 0x2c
 8012074:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8012078:	4619      	mov	r1, r3
 801207a:	f00c fae0 	bl	801e63e <memmove>
 801207e:	e011      	b.n	80120a4 <mg_tls_server_recv_hello+0xe8>
  } else if (session_id_len != 0) {
 8012080:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012084:	2b00      	cmp	r3, #0
 8012086:	d00d      	beq.n	80120a4 <mg_tls_server_recv_hello+0xe8>
    MG_INFO(("bad session id len"));
 8012088:	4b80      	ldr	r3, [pc, #512]	@ (801228c <mg_tls_server_recv_hello+0x2d0>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b01      	cmp	r3, #1
 801208e:	dd09      	ble.n	80120a4 <mg_tls_server_recv_hello+0xe8>
 8012090:	4b7f      	ldr	r3, [pc, #508]	@ (8012290 <mg_tls_server_recv_hello+0x2d4>)
 8012092:	f642 228e 	movw	r2, #10894	@ 0x2a8e
 8012096:	497f      	ldr	r1, [pc, #508]	@ (8012294 <mg_tls_server_recv_hello+0x2d8>)
 8012098:	2002      	movs	r0, #2
 801209a:	f7f7 f887 	bl	80091ac <mg_log_prefix>
 801209e:	487e      	ldr	r0, [pc, #504]	@ (8012298 <mg_tls_server_recv_hello+0x2dc>)
 80120a0:	f7f7 f8d4 	bl	800924c <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 80120a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80120ac:	332c      	adds	r3, #44	@ 0x2c
 80120ae:	4413      	add	r3, r2
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	b21b      	sxth	r3, r3
 80120b4:	021b      	lsls	r3, r3, #8
 80120b6:	b21a      	sxth	r2, r3
 80120b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ba:	6819      	ldr	r1, [r3, #0]
 80120bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80120c0:	332d      	adds	r3, #45	@ 0x2d
 80120c2:	440b      	add	r3, r1
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	b21b      	sxth	r3, r3
 80120c8:	4313      	orrs	r3, r2
 80120ca:	b21b      	sxth	r3, r3
 80120cc:	83fb      	strh	r3, [r7, #30]
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 80120ce:	8bfa      	ldrh	r2, [r7, #30]
 80120d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d2:	6899      	ldr	r1, [r3, #8]
 80120d4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80120d8:	1acb      	subs	r3, r1, r3
 80120da:	3b2e      	subs	r3, #46	@ 0x2e
 80120dc:	429a      	cmp	r2, r3
 80120de:	f200 80cc 	bhi.w	801227a <mg_tls_server_recv_hello+0x2be>
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 80120e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 80120ea:	8bfb      	ldrh	r3, [r7, #30]
 80120ec:	440b      	add	r3, r1
 80120ee:	3330      	adds	r3, #48	@ 0x30
 80120f0:	4413      	add	r3, r2
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	b21b      	sxth	r3, r3
 80120f6:	021b      	lsls	r3, r3, #8
 80120f8:	b21a      	sxth	r2, r3
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	6819      	ldr	r1, [r3, #0]
 80120fe:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8012102:	8bfb      	ldrh	r3, [r7, #30]
 8012104:	4403      	add	r3, r0
 8012106:	3331      	adds	r3, #49	@ 0x31
 8012108:	440b      	add	r3, r1
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	b21b      	sxth	r3, r3
 801210e:	4313      	orrs	r3, r2
 8012110:	b21b      	sxth	r3, r3
 8012112:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8012114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012116:	681a      	ldr	r2, [r3, #0]
 8012118:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 801211c:	8bfb      	ldrh	r3, [r7, #30]
 801211e:	440b      	add	r3, r1
 8012120:	3332      	adds	r3, #50	@ 0x32
 8012122:	4413      	add	r3, r2
 8012124:	61bb      	str	r3, [r7, #24]
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 8012126:	8bba      	ldrh	r2, [r7, #28]
 8012128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801212a:	6899      	ldr	r1, [r3, #8]
 801212c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012130:	1ac9      	subs	r1, r1, r3
 8012132:	8bfb      	ldrh	r3, [r7, #30]
 8012134:	1acb      	subs	r3, r1, r3
 8012136:	3b32      	subs	r3, #50	@ 0x32
 8012138:	429a      	cmp	r2, r3
 801213a:	f200 80a0 	bhi.w	801227e <mg_tls_server_recv_hello+0x2c2>
  for (j = 0; j < ext_len;) {
 801213e:	2300      	movs	r3, #0
 8012140:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012142:	e094      	b.n	801226e <mg_tls_server_recv_hello+0x2b2>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 8012144:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012146:	3302      	adds	r3, #2
 8012148:	69ba      	ldr	r2, [r7, #24]
 801214a:	4413      	add	r3, r2
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	b21b      	sxth	r3, r3
 8012150:	021b      	lsls	r3, r3, #8
 8012152:	b21a      	sxth	r2, r3
 8012154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012156:	3303      	adds	r3, #3
 8012158:	69b9      	ldr	r1, [r7, #24]
 801215a:	440b      	add	r3, r1
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	b21b      	sxth	r3, r3
 8012160:	4313      	orrs	r3, r2
 8012162:	b21b      	sxth	r3, r3
 8012164:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 8012166:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012168:	69ba      	ldr	r2, [r7, #24]
 801216a:	4413      	add	r3, r2
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	b21b      	sxth	r3, r3
 8012170:	021b      	lsls	r3, r3, #8
 8012172:	b21a      	sxth	r2, r3
 8012174:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012176:	3301      	adds	r3, #1
 8012178:	69b9      	ldr	r1, [r7, #24]
 801217a:	440b      	add	r3, r1
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	b21b      	sxth	r3, r3
 8012180:	4313      	orrs	r3, r2
 8012182:	b21b      	sxth	r3, r3
 8012184:	2b33      	cmp	r3, #51	@ 0x33
 8012186:	d006      	beq.n	8012196 <mg_tls_server_recv_hello+0x1da>
      j += (uint16_t) (n + 4);
 8012188:	8afa      	ldrh	r2, [r7, #22]
 801218a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801218c:	4413      	add	r3, r2
 801218e:	b29b      	uxth	r3, r3
 8012190:	3304      	adds	r3, #4
 8012192:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8012194:	e06b      	b.n	801226e <mg_tls_server_recv_hello+0x2b2>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8012196:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012198:	3304      	adds	r3, #4
 801219a:	69ba      	ldr	r2, [r7, #24]
 801219c:	4413      	add	r3, r2
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	b21b      	sxth	r3, r3
 80121a2:	021b      	lsls	r3, r3, #8
 80121a4:	b21a      	sxth	r2, r3
 80121a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121a8:	3305      	adds	r3, #5
 80121aa:	69b9      	ldr	r1, [r7, #24]
 80121ac:	440b      	add	r3, r1
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	b21b      	sxth	r3, r3
 80121b2:	4313      	orrs	r3, r2
 80121b4:	b21b      	sxth	r3, r3
 80121b6:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 80121b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80121ba:	3306      	adds	r3, #6
 80121bc:	69ba      	ldr	r2, [r7, #24]
 80121be:	4413      	add	r3, r2
 80121c0:	613b      	str	r3, [r7, #16]
    if (key_exchange_len >
 80121c2:	8aba      	ldrh	r2, [r7, #20]
        rio->len - (uint16_t) ((size_t) key_exchange - (size_t) rio->buf))
 80121c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	6939      	ldr	r1, [r7, #16]
 80121ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121cc:	6800      	ldr	r0, [r0, #0]
 80121ce:	1a09      	subs	r1, r1, r0
 80121d0:	b289      	uxth	r1, r1
 80121d2:	1a5b      	subs	r3, r3, r1
    if (key_exchange_len >
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d854      	bhi.n	8012282 <mg_tls_server_recv_hello+0x2c6>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 80121d8:	2300      	movs	r3, #0
 80121da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80121dc:	e03d      	b.n	801225a <mg_tls_server_recv_hello+0x29e>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 80121de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80121e0:	3302      	adds	r3, #2
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	4413      	add	r3, r2
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	b21b      	sxth	r3, r3
 80121ea:	021b      	lsls	r3, r3, #8
 80121ec:	b21a      	sxth	r2, r3
 80121ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80121f0:	3303      	adds	r3, #3
 80121f2:	6939      	ldr	r1, [r7, #16]
 80121f4:	440b      	add	r3, r1
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	b21b      	sxth	r3, r3
 80121fa:	4313      	orrs	r3, r2
 80121fc:	b21b      	sxth	r3, r3
 80121fe:	81fb      	strh	r3, [r7, #14]
      if (m > (key_exchange_len - k - 4)) goto fail;
 8012200:	8aba      	ldrh	r2, [r7, #20]
 8012202:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012204:	1ad3      	subs	r3, r2, r3
 8012206:	1eda      	subs	r2, r3, #3
 8012208:	89fb      	ldrh	r3, [r7, #14]
 801220a:	429a      	cmp	r2, r3
 801220c:	dd46      	ble.n	801229c <mg_tls_server_recv_hello+0x2e0>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 801220e:	89fb      	ldrh	r3, [r7, #14]
 8012210:	2b20      	cmp	r3, #32
 8012212:	d11c      	bne.n	801224e <mg_tls_server_recv_hello+0x292>
 8012214:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012216:	693a      	ldr	r2, [r7, #16]
 8012218:	4413      	add	r3, r2
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d116      	bne.n	801224e <mg_tls_server_recv_hello+0x292>
 8012220:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012222:	3301      	adds	r3, #1
 8012224:	693a      	ldr	r2, [r7, #16]
 8012226:	4413      	add	r3, r2
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	2b1d      	cmp	r3, #29
 801222c:	d10f      	bne.n	801224e <mg_tls_server_recv_hello+0x292>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 801222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012230:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8012234:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012236:	3304      	adds	r3, #4
 8012238:	693a      	ldr	r2, [r7, #16]
 801223a:	4413      	add	r3, r2
 801223c:	89fa      	ldrh	r2, [r7, #14]
 801223e:	4619      	mov	r1, r3
 8012240:	f00c f9fd 	bl	801e63e <memmove>
        mg_tls_drop_record(c);
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f7ff f88c 	bl	8011362 <mg_tls_drop_record>
        return 0;
 801224a:	2300      	movs	r3, #0
 801224c:	e02d      	b.n	80122aa <mg_tls_server_recv_hello+0x2ee>
      }
      k += (uint16_t) (m + 4);
 801224e:	89fa      	ldrh	r2, [r7, #14]
 8012250:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012252:	4413      	add	r3, r2
 8012254:	b29b      	uxth	r3, r3
 8012256:	3304      	adds	r3, #4
 8012258:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 801225a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801225c:	8abb      	ldrh	r3, [r7, #20]
 801225e:	429a      	cmp	r2, r3
 8012260:	d3bd      	bcc.n	80121de <mg_tls_server_recv_hello+0x222>
    }
    j += (uint16_t) (n + 4);
 8012262:	8afa      	ldrh	r2, [r7, #22]
 8012264:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012266:	4413      	add	r3, r2
 8012268:	b29b      	uxth	r3, r3
 801226a:	3304      	adds	r3, #4
 801226c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 801226e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012270:	8bbb      	ldrh	r3, [r7, #28]
 8012272:	429a      	cmp	r2, r3
 8012274:	f4ff af66 	bcc.w	8012144 <mg_tls_server_recv_hello+0x188>
  }
fail:
 8012278:	e011      	b.n	801229e <mg_tls_server_recv_hello+0x2e2>
  if (cipher_suites_len > (rio->len - 46 - session_id_len)) goto fail;
 801227a:	bf00      	nop
 801227c:	e00f      	b.n	801229e <mg_tls_server_recv_hello+0x2e2>
  if (ext_len > (rio->len - 50 - session_id_len - cipher_suites_len)) goto fail;
 801227e:	bf00      	nop
 8012280:	e00d      	b.n	801229e <mg_tls_server_recv_hello+0x2e2>
      goto fail;
 8012282:	bf00      	nop
 8012284:	e00b      	b.n	801229e <mg_tls_server_recv_hello+0x2e2>
 8012286:	bf00      	nop
 8012288:	08020e18 	.word	0x08020e18
 801228c:	20000254 	.word	0x20000254
 8012290:	080229c8 	.word	0x080229c8
 8012294:	0801f338 	.word	0x0801f338
 8012298:	08020e34 	.word	0x08020e34
      if (m > (key_exchange_len - k - 4)) goto fail;
 801229c:	bf00      	nop
  mg_error(c, "bad client hello");
 801229e:	4905      	ldr	r1, [pc, #20]	@ (80122b4 <mg_tls_server_recv_hello+0x2f8>)
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7f1 fe09 	bl	8003eb8 <mg_error>
  return -1;
 80122a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3730      	adds	r7, #48	@ 0x30
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	08020e48 	.word	0x08020e48

080122b8 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 80122b8:	b5b0      	push	{r4, r5, r7, lr}
 80122ba:	b0b4      	sub	sp, #208	@ 0xd0
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80122c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 80122ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80122ce:	3304      	adds	r3, #4
 80122d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 80122d4:	4a4c      	ldr	r2, [pc, #304]	@ (8012408 <mg_tls_server_send_hello+0x150>)
 80122d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80122da:	4611      	mov	r1, r2
 80122dc:	227a      	movs	r2, #122	@ 0x7a
 80122de:	4618      	mov	r0, r3
 80122e0:	f00c fafd 	bl	801e8de <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 80122e4:	f107 030c 	add.w	r3, r7, #12
 80122e8:	2120      	movs	r1, #32
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7ee f9a6 	bl	800063c <mg_random>
 80122f0:	4603      	mov	r3, r0
 80122f2:	f083 0301 	eor.w	r3, r3, #1
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d003      	beq.n	8012304 <mg_tls_server_send_hello+0x4c>
 80122fc:	4943      	ldr	r1, [pc, #268]	@ (801240c <mg_tls_server_send_hello+0x154>)
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7f1 fdda 	bl	8003eb8 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8012304:	f107 010c 	add.w	r1, r7, #12
 8012308:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801230c:	2301      	movs	r3, #1
 801230e:	4a40      	ldr	r2, [pc, #256]	@ (8012410 <mg_tls_server_send_hello+0x158>)
 8012310:	f009 f868 	bl	801b3e4 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8012314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012318:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 801231c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012320:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8012324:	f107 010c 	add.w	r1, r7, #12
 8012328:	2301      	movs	r3, #1
 801232a:	f009 f85b 	bl	801b3e4 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 801232e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012332:	33f0      	adds	r3, #240	@ 0xf0
 8012334:	2220      	movs	r2, #32
 8012336:	4619      	mov	r1, r3
 8012338:	4836      	ldr	r0, [pc, #216]	@ (8012414 <mg_tls_server_send_hello+0x15c>)
 801233a:	f7fe fe93 	bl	8011064 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 801233e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012342:	3306      	adds	r3, #6
 8012344:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8012348:	3290      	adds	r2, #144	@ 0x90
 801234a:	6815      	ldr	r5, [r2, #0]
 801234c:	6854      	ldr	r4, [r2, #4]
 801234e:	6890      	ldr	r0, [r2, #8]
 8012350:	68d1      	ldr	r1, [r2, #12]
 8012352:	601d      	str	r5, [r3, #0]
 8012354:	605c      	str	r4, [r3, #4]
 8012356:	6098      	str	r0, [r3, #8]
 8012358:	60d9      	str	r1, [r3, #12]
 801235a:	6915      	ldr	r5, [r2, #16]
 801235c:	6954      	ldr	r4, [r2, #20]
 801235e:	6990      	ldr	r0, [r2, #24]
 8012360:	69d1      	ldr	r1, [r2, #28]
 8012362:	611d      	str	r5, [r3, #16]
 8012364:	615c      	str	r4, [r3, #20]
 8012366:	6198      	str	r0, [r3, #24]
 8012368:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 801236a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801236e:	3327      	adds	r3, #39	@ 0x27
 8012370:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8012374:	32b0      	adds	r2, #176	@ 0xb0
 8012376:	6815      	ldr	r5, [r2, #0]
 8012378:	6854      	ldr	r4, [r2, #4]
 801237a:	6890      	ldr	r0, [r2, #8]
 801237c:	68d1      	ldr	r1, [r2, #12]
 801237e:	601d      	str	r5, [r3, #0]
 8012380:	605c      	str	r4, [r3, #4]
 8012382:	6098      	str	r0, [r3, #8]
 8012384:	60d9      	str	r1, [r3, #12]
 8012386:	6915      	ldr	r5, [r2, #16]
 8012388:	6954      	ldr	r4, [r2, #20]
 801238a:	6990      	ldr	r0, [r2, #24]
 801238c:	69d1      	ldr	r1, [r2, #28]
 801238e:	611d      	str	r5, [r3, #16]
 8012390:	615c      	str	r4, [r3, #20]
 8012392:	6198      	str	r0, [r3, #24]
 8012394:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8012396:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801239a:	3354      	adds	r3, #84	@ 0x54
 801239c:	461d      	mov	r5, r3
 801239e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80123a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123a4:	6028      	str	r0, [r5, #0]
 80123a6:	6069      	str	r1, [r5, #4]
 80123a8:	60aa      	str	r2, [r5, #8]
 80123aa:	60eb      	str	r3, [r5, #12]
 80123ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123ae:	6128      	str	r0, [r5, #16]
 80123b0:	6169      	str	r1, [r5, #20]
 80123b2:	61aa      	str	r2, [r5, #24]
 80123b4:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 80123b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123ba:	6899      	ldr	r1, [r3, #8]
 80123bc:	2305      	movs	r3, #5
 80123be:	4a16      	ldr	r2, [pc, #88]	@ (8012418 <mg_tls_server_send_hello+0x160>)
 80123c0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80123c4:	f7f5 ffd2 	bl	800836c <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 80123c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123cc:	6899      	ldr	r1, [r3, #8]
 80123ce:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80123d2:	237a      	movs	r3, #122	@ 0x7a
 80123d4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80123d8:	f7f5 ffc8 	bl	800836c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 80123dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80123e0:	3320      	adds	r3, #32
 80123e2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80123e6:	227a      	movs	r2, #122	@ 0x7a
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fc fe35 	bl	800f058 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 80123ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80123f2:	6899      	ldr	r1, [r3, #8]
 80123f4:	2306      	movs	r3, #6
 80123f6:	4a09      	ldr	r2, [pc, #36]	@ (801241c <mg_tls_server_send_hello+0x164>)
 80123f8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80123fc:	f7f5 ffb6 	bl	800836c <mg_iobuf_add>
}
 8012400:	bf00      	nop
 8012402:	37d0      	adds	r7, #208	@ 0xd0
 8012404:	46bd      	mov	sp, r7
 8012406:	bdb0      	pop	{r4, r5, r7, pc}
 8012408:	08020e80 	.word	0x08020e80
 801240c:	08020e5c 	.word	0x08020e5c
 8012410:	080227fc 	.word	0x080227fc
 8012414:	08020e60 	.word	0x08020e60
 8012418:	08020e70 	.word	0x08020e70
 801241c:	08020e78 	.word	0x08020e78

08012420 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8012420:	b580      	push	{r7, lr}
 8012422:	b086      	sub	sp, #24
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801242e:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8012430:	4b0b      	ldr	r3, [pc, #44]	@ (8012460 <mg_tls_server_send_ext+0x40>)
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	2300      	movs	r3, #0
 8012436:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	3320      	adds	r3, #32
 801243c:	f107 010c 	add.w	r1, r7, #12
 8012440:	2206      	movs	r2, #6
 8012442:	4618      	mov	r0, r3
 8012444:	f7fc fe08 	bl	800f058 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8012448:	f107 010c 	add.w	r1, r7, #12
 801244c:	2316      	movs	r3, #22
 801244e:	2206      	movs	r2, #6
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7ff faf9 	bl	8011a48 <mg_tls_encrypt>
}
 8012456:	bf00      	nop
 8012458:	3718      	adds	r7, #24
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	02000008 	.word	0x02000008

08012464 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012472:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801247a:	f003 0302 	and.w	r3, r3, #2
 801247e:	b2db      	uxtb	r3, r3
 8012480:	2b00      	cmp	r3, #0
 8012482:	d106      	bne.n	8012492 <mg_tls_server_send_cert+0x2e>
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801248a:	2b00      	cmp	r3, #0
 801248c:	d001      	beq.n	8012492 <mg_tls_server_send_cert+0x2e>
 801248e:	2301      	movs	r3, #1
 8012490:	e000      	b.n	8012494 <mg_tls_server_send_cert+0x30>
 8012492:	2300      	movs	r3, #0
 8012494:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <mg_tls_server_send_cert+0x48>
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80124a8:	3305      	adds	r3, #5
 80124aa:	e000      	b.n	80124ae <mg_tls_server_send_cert+0x4a>
 80124ac:	2300      	movs	r3, #0
 80124ae:	4413      	add	r3, r2
 80124b0:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	330d      	adds	r3, #13
 80124b6:	4619      	mov	r1, r3
 80124b8:	2001      	movs	r0, #1
 80124ba:	f00b fe05 	bl	801e0c8 <calloc>
 80124be:	4603      	mov	r3, r0
 80124c0:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d104      	bne.n	80124d2 <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 80124c8:	495e      	ldr	r1, [pc, #376]	@ (8012644 <mg_tls_server_send_cert+0x1e0>)
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7f1 fcf4 	bl	8003eb8 <mg_error>
    return;
 80124d0:	e0b4      	b.n	801263c <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	220b      	movs	r2, #11
 80124d6:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	3309      	adds	r3, #9
 80124dc:	0c1a      	lsrs	r2, r3, #16
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	3301      	adds	r3, #1
 80124e2:	b2d2      	uxtb	r2, r2
 80124e4:	701a      	strb	r2, [r3, #0]
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	3309      	adds	r3, #9
 80124ea:	0a1a      	lsrs	r2, r3, #8
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	3302      	adds	r3, #2
 80124f0:	b2d2      	uxtb	r2, r2
 80124f2:	701a      	strb	r2, [r3, #0]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	3303      	adds	r3, #3
 80124fc:	3209      	adds	r2, #9
 80124fe:	b2d2      	uxtb	r2, r2
 8012500:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	3304      	adds	r3, #4
 8012506:	2200      	movs	r2, #0
 8012508:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	3305      	adds	r3, #5
 801250e:	0c1a      	lsrs	r2, r3, #16
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	3305      	adds	r3, #5
 8012514:	b2d2      	uxtb	r2, r2
 8012516:	701a      	strb	r2, [r3, #0]
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	3305      	adds	r3, #5
 801251c:	0a1a      	lsrs	r2, r3, #8
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	3306      	adds	r3, #6
 8012522:	b2d2      	uxtb	r2, r2
 8012524:	701a      	strb	r2, [r3, #0]
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	b2da      	uxtb	r2, r3
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	3307      	adds	r3, #7
 801252e:	3205      	adds	r2, #5
 8012530:	b2d2      	uxtb	r2, r2
 8012532:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801253a:	0c1a      	lsrs	r2, r3, #16
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	3308      	adds	r3, #8
 8012540:	b2d2      	uxtb	r2, r2
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801254a:	0a1a      	lsrs	r2, r3, #8
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	3309      	adds	r3, #9
 8012550:	b2d2      	uxtb	r2, r2
 8012552:	701a      	strb	r2, [r3, #0]
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	330a      	adds	r3, #10
 801255e:	b2d2      	uxtb	r2, r2
 8012560:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	f103 000b 	add.w	r0, r3, #11
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012574:	461a      	mov	r2, r3
 8012576:	f00c f862 	bl	801e63e <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012580:	330b      	adds	r3, #11
 8012582:	693a      	ldr	r2, [r7, #16]
 8012584:	4413      	add	r3, r2
 8012586:	2200      	movs	r2, #0
 8012588:	701a      	strb	r2, [r3, #0]
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012590:	330c      	adds	r3, #12
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	4413      	add	r3, r2
 8012596:	2200      	movs	r2, #0
 8012598:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d039      	beq.n	8012614 <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80125a6:	330d      	adds	r3, #13
 80125a8:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 80125aa:	69fb      	ldr	r3, [r7, #28]
 80125ac:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80125b0:	0c19      	lsrs	r1, r3, #16
 80125b2:	693a      	ldr	r2, [r7, #16]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	4413      	add	r3, r2
 80125b8:	b2ca      	uxtb	r2, r1
 80125ba:	701a      	strb	r2, [r3, #0]
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80125c2:	0a19      	lsrs	r1, r3, #8
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	3301      	adds	r3, #1
 80125c8:	693a      	ldr	r2, [r7, #16]
 80125ca:	4413      	add	r3, r2
 80125cc:	b2ca      	uxtb	r2, r1
 80125ce:	701a      	strb	r2, [r3, #0]
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	3302      	adds	r3, #2
 80125da:	693a      	ldr	r2, [r7, #16]
 80125dc:	4413      	add	r3, r2
 80125de:	b2ca      	uxtb	r2, r1
 80125e0:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	3303      	adds	r3, #3
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	18d0      	adds	r0, r2, r3
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80125f6:	461a      	mov	r2, r3
 80125f8:	f00c f821 	bl	801e63e <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	330b      	adds	r3, #11
 8012600:	693a      	ldr	r2, [r7, #16]
 8012602:	4413      	add	r3, r2
 8012604:	2200      	movs	r2, #0
 8012606:	701a      	strb	r2, [r3, #0]
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	330c      	adds	r3, #12
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	4413      	add	r3, r2
 8012610:	2200      	movs	r2, #0
 8012612:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	f103 0020 	add.w	r0, r3, #32
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	330d      	adds	r3, #13
 801261e:	461a      	mov	r2, r3
 8012620:	6939      	ldr	r1, [r7, #16]
 8012622:	f7fc fd19 	bl	800f058 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	f103 020d 	add.w	r2, r3, #13
 801262c:	2316      	movs	r3, #22
 801262e:	6939      	ldr	r1, [r7, #16]
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff fa09 	bl	8011a48 <mg_tls_encrypt>
  free(cert);
 8012636:	6938      	ldr	r0, [r7, #16]
 8012638:	f00b fd6a 	bl	801e110 <free>
}
 801263c:	3720      	adds	r7, #32
 801263e:	46bd      	mov	sp, r7
 8012640:	bd80      	pop	{r7, pc}
 8012642:	bf00      	nop
 8012644:	08020efc 	.word	0x08020efc

08012648 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	3318      	adds	r3, #24
 8012658:	4618      	mov	r0, r3
 801265a:	f7fc fab9 	bl	800ebd0 <mg_sha256_init>
}
 801265e:	bf00      	nop
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8012666:	b580      	push	{r7, lr}
 8012668:	b086      	sub	sp, #24
 801266a:	af00      	add	r7, sp, #0
 801266c:	60f8      	str	r0, [r7, #12]
 801266e:	60b9      	str	r1, [r7, #8]
 8012670:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	3318      	adds	r3, #24
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	68b9      	ldr	r1, [r7, #8]
 801267e:	4618      	mov	r0, r3
 8012680:	f7fc fcea 	bl	800f058 <mg_sha256_update>
}
 8012684:	bf00      	nop
 8012686:	3718      	adds	r7, #24
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	3318      	adds	r3, #24
 801269e:	4619      	mov	r1, r3
 80126a0:	6838      	ldr	r0, [r7, #0]
 80126a2:	f7fc fd12 	bl	800f0ca <mg_sha256_final>
}
 80126a6:	bf00      	nop
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
	...

080126b0 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 80126b0:	b590      	push	{r4, r7, lr}
 80126b2:	b0f9      	sub	sp, #484	@ 0x1e4
 80126b4:	af02      	add	r7, sp, #8
 80126b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80126ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80126be:	6018      	str	r0, [r3, #0]
 80126c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80126c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80126c8:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80126ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80126ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80126d8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 80126dc:	4a8a      	ldr	r2, [pc, #552]	@ (8012908 <mg_tls_send_cert_verify+0x258>)
 80126de:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80126e2:	6810      	ldr	r0, [r2, #0]
 80126e4:	6851      	ldr	r1, [r2, #4]
 80126e6:	c303      	stmia	r3!, {r0, r1}
 80126e8:	7a12      	ldrb	r2, [r2, #8]
 80126ea:	701a      	strb	r2, [r3, #0]
 80126ec:	f207 1379 	addw	r3, r7, #377	@ 0x179
 80126f0:	2249      	movs	r2, #73	@ 0x49
 80126f2:	2100      	movs	r1, #0
 80126f4:	4618      	mov	r0, r3
 80126f6:	f00b ffbc 	bl	801e672 <memset>
  size_t sigsz, verifysz = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8012700:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8012704:	2220      	movs	r2, #32
 8012706:	2100      	movs	r1, #0
 8012708:	4618      	mov	r0, r3
 801270a:	f00b ffb2 	bl	801e672 <memset>
 801270e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8012716:	4618      	mov	r0, r3
 8012718:	2380      	movs	r3, #128	@ 0x80
 801271a:	461a      	mov	r2, r3
 801271c:	2100      	movs	r1, #0
 801271e:	f00b ffa8 	bl	801e672 <memset>
  struct SHA256_HashContext ctx = {
 8012722:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012726:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801272a:	4618      	mov	r0, r3
 801272c:	2388      	movs	r3, #136	@ 0x88
 801272e:	461a      	mov	r2, r3
 8012730:	2100      	movs	r1, #0
 8012732:	f00b ff9e 	bl	801e672 <memset>
 8012736:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801273a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801273e:	4a73      	ldr	r2, [pc, #460]	@ (801290c <mg_tls_send_cert_verify+0x25c>)
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012746:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801274a:	4a71      	ldr	r2, [pc, #452]	@ (8012910 <mg_tls_send_cert_verify+0x260>)
 801274c:	605a      	str	r2, [r3, #4]
 801274e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012752:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8012756:	4a6f      	ldr	r2, [pc, #444]	@ (8012914 <mg_tls_send_cert_verify+0x264>)
 8012758:	609a      	str	r2, [r3, #8]
 801275a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801275e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8012762:	2240      	movs	r2, #64	@ 0x40
 8012764:	60da      	str	r2, [r3, #12]
 8012766:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801276a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801276e:	2220      	movs	r2, #32
 8012770:	611a      	str	r2, [r3, #16]
 8012772:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012776:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801277a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801277e:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8012780:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012784:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8012788:	4618      	mov	r0, r3
 801278a:	2340      	movs	r3, #64	@ 0x40
 801278c:	461a      	mov	r2, r3
 801278e:	2100      	movs	r1, #0
 8012790:	f00b ff6f 	bl	801e672 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8012794:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8012798:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 801279c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80127a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80127a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80127a8:	6812      	ldr	r2, [r2, #0]
 80127aa:	6818      	ldr	r0, [r3, #0]
 80127ac:	f7ff fb64 	bl	8011e78 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 80127b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80127b4:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 80127b8:	f006 fdc0 	bl	801933c <mg_uecc_secp256r1>
 80127bc:	4603      	mov	r3, r0
 80127be:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80127c2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80127c6:	9301      	str	r3, [sp, #4]
 80127c8:	f107 0308 	add.w	r3, r7, #8
 80127cc:	9300      	str	r3, [sp, #0]
 80127ce:	4613      	mov	r3, r2
 80127d0:	2220      	movs	r2, #32
 80127d2:	4620      	mov	r0, r4
 80127d4:	f007 fe22 	bl	801a41c <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 80127d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80127dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	b25b      	sxtb	r3, r3
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	09db      	lsrs	r3, r3, #7
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 80127ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80127f2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80127f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127fa:	b25b      	sxtb	r3, r3
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	09db      	lsrs	r3, r3, #7
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8012806:	2330      	movs	r3, #48	@ 0x30
 8012808:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 801280c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8012810:	b2da      	uxtb	r2, r3
 8012812:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012816:	b2db      	uxtb	r3, r3
 8012818:	4413      	add	r3, r2
 801281a:	b2db      	uxtb	r3, r3
 801281c:	3344      	adds	r3, #68	@ 0x44
 801281e:	b2db      	uxtb	r3, r3
 8012820:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8012824:	2302      	movs	r3, #2
 8012826:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 801282a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801282e:	b2db      	uxtb	r3, r3
 8012830:	3320      	adds	r3, #32
 8012832:	b2db      	uxtb	r3, r3
 8012834:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8012838:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801283c:	330c      	adds	r3, #12
 801283e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8012842:	4413      	add	r3, r2
 8012844:	f107 0108 	add.w	r1, r7, #8
 8012848:	2220      	movs	r2, #32
 801284a:	4618      	mov	r0, r3
 801284c:	f00b fef7 	bl	801e63e <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8012850:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8012854:	332c      	adds	r3, #44	@ 0x2c
 8012856:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 801285a:	443b      	add	r3, r7
 801285c:	2202      	movs	r2, #2
 801285e:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8012862:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012866:	b2da      	uxtb	r2, r3
 8012868:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801286c:	332d      	adds	r3, #45	@ 0x2d
 801286e:	3220      	adds	r2, #32
 8012870:	b2d2      	uxtb	r2, r2
 8012872:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8012876:	443b      	add	r3, r7
 8012878:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 801287c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012884:	4413      	add	r3, r2
 8012886:	332e      	adds	r3, #46	@ 0x2e
 8012888:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 801288c:	18d0      	adds	r0, r2, r3
 801288e:	f107 0308 	add.w	r3, r7, #8
 8012892:	3320      	adds	r3, #32
 8012894:	2220      	movs	r2, #32
 8012896:	4619      	mov	r1, r3
 8012898:	f00b fed1 	bl	801e63e <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 801289c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80128a0:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 80128a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80128a8:	4413      	add	r3, r2
 80128aa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 80128ae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80128b2:	3308      	adds	r3, #8
 80128b4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 80128b8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	3304      	adds	r3, #4
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 80128c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 80128d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80128d4:	3320      	adds	r3, #32
 80128d6:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80128da:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80128de:	4618      	mov	r0, r3
 80128e0:	f7fc fbba 	bl	800f058 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 80128e4:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80128e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80128ec:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 80128f0:	2316      	movs	r3, #22
 80128f2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80128f6:	6800      	ldr	r0, [r0, #0]
 80128f8:	f7ff f8a6 	bl	8011a48 <mg_tls_encrypt>
}
 80128fc:	bf00      	nop
 80128fe:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8012902:	46bd      	mov	sp, r7
 8012904:	bd90      	pop	{r4, r7, pc}
 8012906:	bf00      	nop
 8012908:	08020f0c 	.word	0x08020f0c
 801290c:	08012649 	.word	0x08012649
 8012910:	08012667 	.word	0x08012667
 8012914:	0801268d 	.word	0x0801268d

08012918 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8012918:	b580      	push	{r7, lr}
 801291a:	b0b4      	sub	sp, #208	@ 0xd0
 801291c:	af02      	add	r7, sp, #8
 801291e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 801292a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801292e:	3304      	adds	r3, #4
 8012930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8012934:	4b25      	ldr	r3, [pc, #148]	@ (80129cc <mg_tls_server_send_finish+0xb4>)
 8012936:	60fb      	str	r3, [r7, #12]
 8012938:	f107 0310 	add.w	r3, r7, #16
 801293c:	2220      	movs	r2, #32
 801293e:	2100      	movs	r1, #0
 8012940:	4618      	mov	r0, r3
 8012942:	f00b fe96 	bl	801e672 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8012946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801294a:	f103 0120 	add.w	r1, r3, #32
 801294e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012952:	2270      	movs	r2, #112	@ 0x70
 8012954:	4618      	mov	r0, r3
 8012956:	f00b fe72 	bl	801e63e <memmove>
  mg_sha256_final(hash, &sha256);
 801295a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801295e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012962:	4611      	mov	r1, r2
 8012964:	4618      	mov	r0, r3
 8012966:	f7fc fbb0 	bl	800f0ca <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 801296a:	f107 000c 	add.w	r0, r7, #12
 801296e:	3004      	adds	r0, #4
 8012970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012974:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 8012978:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801297c:	2220      	movs	r2, #32
 801297e:	9200      	str	r2, [sp, #0]
 8012980:	2220      	movs	r2, #32
 8012982:	f7fc fcf6 	bl	800f372 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8012986:	f107 010c 	add.w	r1, r7, #12
 801298a:	2316      	movs	r3, #22
 801298c:	2224      	movs	r2, #36	@ 0x24
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7ff f85a 	bl	8011a48 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 8012994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012998:	6819      	ldr	r1, [r3, #0]
 801299a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	461a      	mov	r2, r3
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f7f8 fc62 	bl	800b26c <mg_io_send>
  wio->len = 0;
 80129a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80129ac:	2200      	movs	r2, #0
 80129ae:	609a      	str	r2, [r3, #8]

  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 80129b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129b4:	3320      	adds	r3, #32
 80129b6:	f107 010c 	add.w	r1, r7, #12
 80129ba:	2224      	movs	r2, #36	@ 0x24
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fc fb4b 	bl	800f058 <mg_sha256_update>
}
 80129c2:	bf00      	nop
 80129c4:	37c8      	adds	r7, #200	@ 0xc8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	20000014 	.word	0x20000014

080129d0 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b0a0      	sub	sp, #128	@ 0x80
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80129de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 80129e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80129e2:	f107 0008 	add.w	r0, r7, #8
 80129e6:	3320      	adds	r3, #32
 80129e8:	2270      	movs	r2, #112	@ 0x70
 80129ea:	4619      	mov	r1, r3
 80129ec:	f00b ff77 	bl	801e8de <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7ff f925 	bl	8011c40 <mg_tls_recv_record>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	da02      	bge.n	8012a02 <mg_tls_server_recv_finish+0x32>
    return -1;
 80129fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a00:	e01f      	b.n	8012a42 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8012a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8012a0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b14      	cmp	r3, #20
 8012a14:	d009      	beq.n	8012a2a <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 8012a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	490b      	ldr	r1, [pc, #44]	@ (8012a4c <mg_tls_server_recv_finish+0x7c>)
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f7f1 fa4a 	bl	8003eb8 <mg_error>
    return -1;
 8012a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a28:	e00b      	b.n	8012a42 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f7fe fcbc 	bl	80113a8 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8012a30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012a32:	3320      	adds	r3, #32
 8012a34:	f107 0108 	add.w	r1, r7, #8
 8012a38:	2270      	movs	r2, #112	@ 0x70
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f00b ff4f 	bl	801e8de <memcpy>
  return 0;
 8012a40:	2300      	movs	r3, #0
}
 8012a42:	4618      	mov	r0, r3
 8012a44:	3780      	adds	r7, #128	@ 0x80
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	08020f18 	.word	0x08020f18

08012a50 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8012a50:	b5b0      	push	{r4, r5, r7, lr}
 8012a52:	b0c6      	sub	sp, #280	@ 0x118
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012a5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012a5e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012a60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012a64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012a6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 8012a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a76:	3304      	adds	r3, #4
 8012a78:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 8012a7c:	4a27      	ldr	r2, [pc, #156]	@ (8012b1c <mg_tls_client_send_hello+0xcc>)
 8012a7e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8012a88:	4b25      	ldr	r3, [pc, #148]	@ (8012b20 <mg_tls_client_send_hello+0xd0>)
 8012a8a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8012a8e:	461d      	mov	r5, r3
 8012a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a98:	682b      	ldr	r3, [r5, #0]
 8012a9a:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8012a9c:	4a21      	ldr	r2, [pc, #132]	@ (8012b24 <mg_tls_client_send_hello+0xd4>)
 8012a9e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8012aa4:	c303      	stmia	r3!, {r0, r1}
 8012aa6:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8012aa8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012aac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8012b28 <mg_tls_client_send_hello+0xd8>)
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	4611      	mov	r1, r2
 8012ab6:	2391      	movs	r3, #145	@ 0x91
 8012ab8:	461a      	mov	r2, r3
 8012aba:	f00b ff10 	bl	801e8de <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8012abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ac2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8012ac6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8012aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ace:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7ed fc14 	bl	8000300 <strlen>
 8012ad8:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8012adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <mg_tls_client_send_hello+0x9c>
 8012ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012ae8:	3309      	adds	r3, #9
 8012aea:	e000      	b.n	8012aee <mg_tls_client_send_hello+0x9e>
 8012aec:	2300      	movs	r3, #0
 8012aee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 8012af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012af6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d002      	beq.n	8012b04 <mg_tls_client_send_hello+0xb4>
 8012afe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8012b02:	e001      	b.n	8012b08 <mg_tls_client_send_hello+0xb8>
 8012b04:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012b08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8012b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b10:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d009      	beq.n	8012b2c <mg_tls_client_send_hello+0xdc>
 8012b18:	2322      	movs	r3, #34	@ 0x22
 8012b1a:	e008      	b.n	8012b2e <mg_tls_client_send_hello+0xde>
 8012b1c:	08020f3c 	.word	0x08020f3c
 8012b20:	08020f48 	.word	0x08020f48
 8012b24:	08020f6c 	.word	0x08020f6c
 8012b28:	08020f78 	.word	0x08020f78
 8012b2c:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8012b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8012b32:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8012b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012b3a:	4413      	add	r3, r2
 8012b3c:	338c      	adds	r3, #140	@ 0x8c
 8012b3e:	0a1b      	lsrs	r3, r3, #8
 8012b40:	b2da      	uxtb	r2, r3
 8012b42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012b46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012b4a:	70da      	strb	r2, [r3, #3]
 8012b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	4413      	add	r3, r2
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	3b74      	subs	r3, #116	@ 0x74
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012b64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012b68:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8012b6a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8012b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012b72:	4413      	add	r3, r2
 8012b74:	3388      	adds	r3, #136	@ 0x88
 8012b76:	0a1b      	lsrs	r3, r3, #8
 8012b78:	b2da      	uxtb	r2, r3
 8012b7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012b7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012b82:	71da      	strb	r2, [r3, #7]
 8012b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b88:	b2da      	uxtb	r2, r3
 8012b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	4413      	add	r3, r2
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	3b78      	subs	r3, #120	@ 0x78
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012ba0:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8012ba2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8012ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012baa:	4413      	add	r3, r2
 8012bac:	333d      	adds	r3, #61	@ 0x3d
 8012bae:	0a1b      	lsrs	r3, r3, #8
 8012bb0:	b2da      	uxtb	r2, r3
 8012bb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012bb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012bba:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8012bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	4413      	add	r3, r2
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	333d      	adds	r3, #61	@ 0x3d
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012bd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012bda:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8012bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d026      	beq.n	8012c34 <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 8012be6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012bea:	3305      	adds	r3, #5
 8012bec:	0a1b      	lsrs	r3, r3, #8
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8012bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	3305      	adds	r3, #5
 8012bfc:	b2db      	uxtb	r3, r3
 8012bfe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 8012c02:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c06:	3303      	adds	r3, #3
 8012c08:	0a1b      	lsrs	r3, r3, #8
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8012c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	3303      	adds	r3, #3
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8012c1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c22:	0a1b      	lsrs	r3, r3, #8
 8012c24:	b2db      	uxtb	r3, r3
 8012c26:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8012c2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012c2e:	b2db      	uxtb	r3, r3
 8012c30:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8012c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c38:	33d0      	adds	r3, #208	@ 0xd0
 8012c3a:	2120      	movs	r1, #32
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7ed fcfd 	bl	800063c <mg_random>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f083 0301 	eor.w	r3, r3, #1
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d007      	beq.n	8012c5e <mg_tls_client_send_hello+0x20e>
 8012c4e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012c52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012c56:	4974      	ldr	r1, [pc, #464]	@ (8012e28 <mg_tls_client_send_hello+0x3d8>)
 8012c58:	6818      	ldr	r0, [r3, #0]
 8012c5a:	f7f1 f92d 	bl	8003eb8 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8012c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c62:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8012c66:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	4a6f      	ldr	r2, [pc, #444]	@ (8012e2c <mg_tls_client_send_hello+0x3dc>)
 8012c6e:	f008 fbb9 	bl	801b3e4 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8012c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012c76:	33b0      	adds	r3, #176	@ 0xb0
 8012c78:	2120      	movs	r1, #32
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7ed fcde 	bl	800063c <mg_random>
 8012c80:	4603      	mov	r3, r0
 8012c82:	f083 0301 	eor.w	r3, r3, #1
 8012c86:	b2db      	uxtb	r3, r3
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d007      	beq.n	8012c9c <mg_tls_client_send_hello+0x24c>
 8012c8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012c90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012c94:	4964      	ldr	r1, [pc, #400]	@ (8012e28 <mg_tls_client_send_hello+0x3d8>)
 8012c96:	6818      	ldr	r0, [r3, #0]
 8012c98:	f7f1 f90e 	bl	8003eb8 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8012c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012ca0:	3390      	adds	r3, #144	@ 0x90
 8012ca2:	2120      	movs	r1, #32
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ed fcc9 	bl	800063c <mg_random>
 8012caa:	4603      	mov	r3, r0
 8012cac:	f083 0301 	eor.w	r3, r3, #1
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d007      	beq.n	8012cc6 <mg_tls_client_send_hello+0x276>
 8012cb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012cba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012cbe:	495a      	ldr	r1, [pc, #360]	@ (8012e28 <mg_tls_client_send_hello+0x3d8>)
 8012cc0:	6818      	ldr	r0, [r3, #0]
 8012cc2:	f7f1 f8f9 	bl	8003eb8 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8012cc6:	f107 030c 	add.w	r3, r7, #12
 8012cca:	330b      	adds	r3, #11
 8012ccc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012cd0:	3290      	adds	r2, #144	@ 0x90
 8012cd2:	6815      	ldr	r5, [r2, #0]
 8012cd4:	6854      	ldr	r4, [r2, #4]
 8012cd6:	6890      	ldr	r0, [r2, #8]
 8012cd8:	68d1      	ldr	r1, [r2, #12]
 8012cda:	601d      	str	r5, [r3, #0]
 8012cdc:	605c      	str	r4, [r3, #4]
 8012cde:	6098      	str	r0, [r3, #8]
 8012ce0:	60d9      	str	r1, [r3, #12]
 8012ce2:	6915      	ldr	r5, [r2, #16]
 8012ce4:	6954      	ldr	r4, [r2, #20]
 8012ce6:	6990      	ldr	r0, [r2, #24]
 8012ce8:	69d1      	ldr	r1, [r2, #28]
 8012cea:	611d      	str	r5, [r3, #16]
 8012cec:	615c      	str	r4, [r3, #20]
 8012cee:	6198      	str	r0, [r3, #24]
 8012cf0:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 8012cf2:	f107 030c 	add.w	r3, r7, #12
 8012cf6:	332c      	adds	r3, #44	@ 0x2c
 8012cf8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012cfc:	32b0      	adds	r2, #176	@ 0xb0
 8012cfe:	6815      	ldr	r5, [r2, #0]
 8012d00:	6854      	ldr	r4, [r2, #4]
 8012d02:	6890      	ldr	r0, [r2, #8]
 8012d04:	68d1      	ldr	r1, [r2, #12]
 8012d06:	601d      	str	r5, [r3, #0]
 8012d08:	605c      	str	r4, [r3, #4]
 8012d0a:	6098      	str	r0, [r3, #8]
 8012d0c:	60d9      	str	r1, [r3, #12]
 8012d0e:	6915      	ldr	r5, [r2, #16]
 8012d10:	6954      	ldr	r4, [r2, #20]
 8012d12:	6990      	ldr	r0, [r2, #24]
 8012d14:	69d1      	ldr	r1, [r2, #28]
 8012d16:	611d      	str	r5, [r3, #16]
 8012d18:	615c      	str	r4, [r3, #20]
 8012d1a:	6198      	str	r0, [r3, #24]
 8012d1c:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 8012d1e:	f107 030c 	add.w	r3, r7, #12
 8012d22:	335e      	adds	r3, #94	@ 0x5e
 8012d24:	461d      	mov	r5, r3
 8012d26:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8012d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d2c:	6028      	str	r0, [r5, #0]
 8012d2e:	6069      	str	r1, [r5, #4]
 8012d30:	60aa      	str	r2, [r5, #8]
 8012d32:	60eb      	str	r3, [r5, #12]
 8012d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d36:	6128      	str	r0, [r5, #16]
 8012d38:	6169      	str	r1, [r5, #20]
 8012d3a:	61aa      	str	r2, [r5, #24]
 8012d3c:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 8012d3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d42:	6899      	ldr	r1, [r3, #8]
 8012d44:	f107 020c 	add.w	r2, r7, #12
 8012d48:	2391      	movs	r3, #145	@ 0x91
 8012d4a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8012d4e:	f7f5 fb0d 	bl	800836c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8012d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d56:	f103 0020 	add.w	r0, r3, #32
 8012d5a:	f107 030c 	add.w	r3, r7, #12
 8012d5e:	3305      	adds	r3, #5
 8012d60:	228c      	movs	r2, #140	@ 0x8c
 8012d62:	4619      	mov	r1, r3
 8012d64:	f7fc f978 	bl	800f058 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8012d68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d6c:	6899      	ldr	r1, [r3, #8]
 8012d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012d72:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8012d76:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8012d7a:	f7f5 faf7 	bl	800836c <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 8012d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d82:	3320      	adds	r3, #32
 8012d84:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8012d88:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fc f963 	bl	800f058 <mg_sha256_update>
  if (hostnamesz > 0) {
 8012d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d027      	beq.n	8012dea <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 8012d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d9e:	6899      	ldr	r1, [r3, #8]
 8012da0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8012da4:	2309      	movs	r3, #9
 8012da6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8012daa:	f7f5 fadf 	bl	800836c <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 8012dae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012db2:	6899      	ldr	r1, [r3, #8]
 8012db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012db8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8012dbc:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8012dc0:	f7f5 fad4 	bl	800836c <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 8012dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012dc8:	3320      	adds	r3, #32
 8012dca:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8012dce:	2209      	movs	r2, #9
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fc f941 	bl	800f058 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 8012dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012dda:	3320      	adds	r3, #32
 8012ddc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8012de0:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fc f937 	bl	800f058 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 8012dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012dee:	6899      	ldr	r1, [r3, #8]
 8012df0:	2306      	movs	r3, #6
 8012df2:	4a0f      	ldr	r2, [pc, #60]	@ (8012e30 <mg_tls_client_send_hello+0x3e0>)
 8012df4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8012df8:	f7f5 fab8 	bl	800836c <mg_iobuf_add>
  mg_io_send(c, wio->buf, wio->len);
 8012dfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e00:	6819      	ldr	r1, [r3, #0]
 8012e02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e06:	689a      	ldr	r2, [r3, #8]
 8012e08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012e0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012e10:	6818      	ldr	r0, [r3, #0]
 8012e12:	f7f8 fa2b 	bl	800b26c <mg_io_send>
  wio->len = 0;
 8012e16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	609a      	str	r2, [r3, #8]
}
 8012e1e:	bf00      	nop
 8012e20:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bdb0      	pop	{r4, r5, r7, pc}
 8012e28:	08020e5c 	.word	0x08020e5c
 8012e2c:	080227fc 	.word	0x080227fc
 8012e30:	08020e78 	.word	0x08020e78

08012e34 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b08a      	sub	sp, #40	@ 0x28
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012e42:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	3368      	adds	r3, #104	@ 0x68
 8012e48:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f7fe fa61 	bl	8011312 <mg_tls_got_record>
 8012e50:	4603      	mov	r3, r0
 8012e52:	f083 0301 	eor.w	r3, r3, #1
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d002      	beq.n	8012e62 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 8012e5c:	f06f 0301 	mvn.w	r3, #1
 8012e60:	e109      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	2b16      	cmp	r3, #22
 8012e6a:	d105      	bne.n	8012e78 <mg_tls_client_recv_hello+0x44>
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	3305      	adds	r3, #5
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	2b02      	cmp	r3, #2
 8012e76:	d032      	beq.n	8012ede <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	2b15      	cmp	r3, #21
 8012e80:	d10f      	bne.n	8012ea2 <mg_tls_client_recv_hello+0x6e>
 8012e82:	69fb      	ldr	r3, [r7, #28]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	2b06      	cmp	r3, #6
 8012e88:	d90b      	bls.n	8012ea2 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	3306      	adds	r3, #6
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	461a      	mov	r2, r3
 8012e94:	497a      	ldr	r1, [pc, #488]	@ (8013080 <mg_tls_client_recv_hello+0x24c>)
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f7f1 f80e 	bl	8003eb8 <mg_error>
      return -1;
 8012e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ea0:	e0e9      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8012ea2:	4b78      	ldr	r3, [pc, #480]	@ (8013084 <mg_tls_client_recv_hello+0x250>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	dd12      	ble.n	8012ed0 <mg_tls_client_recv_hello+0x9c>
 8012eaa:	4b77      	ldr	r3, [pc, #476]	@ (8013088 <mg_tls_client_recv_hello+0x254>)
 8012eac:	f642 32e9 	movw	r2, #11241	@ 0x2be9
 8012eb0:	4976      	ldr	r1, [pc, #472]	@ (801308c <mg_tls_client_recv_hello+0x258>)
 8012eb2:	2002      	movs	r0, #2
 8012eb4:	f7f6 f97a 	bl	80091ac <mg_log_prefix>
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	3305      	adds	r3, #5
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	461a      	mov	r2, r3
 8012eca:	4871      	ldr	r0, [pc, #452]	@ (8013090 <mg_tls_client_recv_hello+0x25c>)
 8012ecc:	f7f6 f9be 	bl	800924c <mg_log>
    mg_error(c, "not a server hello packet");
 8012ed0:	4970      	ldr	r1, [pc, #448]	@ (8013094 <mg_tls_client_recv_hello+0x260>)
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f7f0 fff0 	bl	8003eb8 <mg_error>
    return -1;
 8012ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012edc:	e0cb      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8012ede:	69fb      	ldr	r3, [r7, #28]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	3303      	adds	r3, #3
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	b21b      	sxth	r3, r3
 8012ee8:	021b      	lsls	r3, r3, #8
 8012eea:	b21a      	sxth	r2, r3
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	b21b      	sxth	r3, r3
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	b21b      	sxth	r3, r3
 8012efa:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	f103 0020 	add.w	r0, r3, #32
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	3305      	adds	r3, #5
 8012f08:	8b7a      	ldrh	r2, [r7, #26]
 8012f0a:	4619      	mov	r1, r3
 8012f0c:	f7fc f8a4 	bl	800f058 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8012f10:	69fb      	ldr	r3, [r7, #28]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	334f      	adds	r3, #79	@ 0x4f
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	b21b      	sxth	r3, r3
 8012f1a:	021b      	lsls	r3, r3, #8
 8012f1c:	b21a      	sxth	r2, r3
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	3350      	adds	r3, #80	@ 0x50
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	b21b      	sxth	r3, r3
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	b21b      	sxth	r3, r3
 8012f2c:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	3351      	adds	r3, #81	@ 0x51
 8012f34:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8012f36:	8b3a      	ldrh	r2, [r7, #24]
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	689b      	ldr	r3, [r3, #8]
 8012f3c:	3b51      	subs	r3, #81	@ 0x51
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	f200 8090 	bhi.w	8013064 <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 8012f44:	2300      	movs	r3, #0
 8012f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f48:	e086      	b.n	8013058 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4c:	697a      	ldr	r2, [r7, #20]
 8012f4e:	4413      	add	r3, r2
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	b21b      	sxth	r3, r3
 8012f54:	021b      	lsls	r3, r3, #8
 8012f56:	b21a      	sxth	r2, r3
 8012f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	6979      	ldr	r1, [r7, #20]
 8012f5e:	440b      	add	r3, r1
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	b21b      	sxth	r3, r3
 8012f64:	4313      	orrs	r3, r2
 8012f66:	b21b      	sxth	r3, r3
 8012f68:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6c:	3302      	adds	r3, #2
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	4413      	add	r3, r2
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	b21b      	sxth	r3, r3
 8012f76:	021b      	lsls	r3, r3, #8
 8012f78:	b21a      	sxth	r2, r3
 8012f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f7c:	3303      	adds	r3, #3
 8012f7e:	6979      	ldr	r1, [r7, #20]
 8012f80:	440b      	add	r3, r1
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	4313      	orrs	r3, r2
 8012f88:	b21b      	sxth	r3, r3
 8012f8a:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8012f8c:	8b3a      	ldrh	r2, [r7, #24]
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	1eda      	subs	r2, r3, #3
 8012f94:	8a3b      	ldrh	r3, [r7, #16]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	dd66      	ble.n	8013068 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 8012f9a:	8a7b      	ldrh	r3, [r7, #18]
 8012f9c:	2b33      	cmp	r3, #51	@ 0x33
 8012f9e:	d007      	beq.n	8012fb0 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 8012fa0:	8a3b      	ldrh	r3, [r7, #16]
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012faa:	4413      	add	r3, r2
 8012fac:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8012fae:	e053      	b.n	8013058 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	697a      	ldr	r2, [r7, #20]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	b21b      	sxth	r3, r3
 8012fbc:	021b      	lsls	r3, r3, #8
 8012fbe:	b21a      	sxth	r2, r3
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fc2:	3305      	adds	r3, #5
 8012fc4:	6979      	ldr	r1, [r7, #20]
 8012fc6:	440b      	add	r3, r1
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	b21b      	sxth	r3, r3
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	b21b      	sxth	r3, r3
 8012fd0:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8012fd2:	89fb      	ldrh	r3, [r7, #14]
 8012fd4:	2b1d      	cmp	r3, #29
 8012fd6:	d006      	beq.n	8012fe6 <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8012fd8:	492f      	ldr	r1, [pc, #188]	@ (8013098 <mg_tls_client_recv_hello+0x264>)
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7f0 ff6c 	bl	8003eb8 <mg_error>
      return -1;
 8012fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012fe4:	e047      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 8012fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fe8:	3306      	adds	r3, #6
 8012fea:	697a      	ldr	r2, [r7, #20]
 8012fec:	4413      	add	r3, r2
 8012fee:	781b      	ldrb	r3, [r3, #0]
 8012ff0:	b21b      	sxth	r3, r3
 8012ff2:	021b      	lsls	r3, r3, #8
 8012ff4:	b21a      	sxth	r2, r3
 8012ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ff8:	3307      	adds	r3, #7
 8012ffa:	6979      	ldr	r1, [r7, #20]
 8012ffc:	440b      	add	r3, r1
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	b21b      	sxth	r3, r3
 8013002:	4313      	orrs	r3, r2
 8013004:	b21b      	sxth	r3, r3
 8013006:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8013008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300a:	3308      	adds	r3, #8
 801300c:	697a      	ldr	r2, [r7, #20]
 801300e:	4413      	add	r3, r2
 8013010:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 8013012:	89bb      	ldrh	r3, [r7, #12]
 8013014:	2b20      	cmp	r3, #32
 8013016:	d006      	beq.n	8013026 <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8013018:	4920      	ldr	r1, [pc, #128]	@ (801309c <mg_tls_client_recv_hello+0x268>)
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f7f0 ff4c 	bl	8003eb8 <mg_error>
      return -1;
 8013020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013024:	e027      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8013032:	2301      	movs	r3, #1
 8013034:	68ba      	ldr	r2, [r7, #8]
 8013036:	f008 f9d5 	bl	801b3e4 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 801303a:	6a3b      	ldr	r3, [r7, #32]
 801303c:	33f0      	adds	r3, #240	@ 0xf0
 801303e:	2220      	movs	r2, #32
 8013040:	4619      	mov	r1, r3
 8013042:	4817      	ldr	r0, [pc, #92]	@ (80130a0 <mg_tls_client_recv_hello+0x26c>)
 8013044:	f7fe f80e 	bl	8011064 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7fe f98a 	bl	8011362 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7fe fa92 	bl	8011578 <mg_tls_generate_handshake_keys>
    return 0;
 8013054:	2300      	movs	r3, #0
 8013056:	e00e      	b.n	8013076 <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 8013058:	8b3b      	ldrh	r3, [r7, #24]
 801305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801305c:	429a      	cmp	r2, r3
 801305e:	f6ff af74 	blt.w	8012f4a <mg_tls_client_recv_hello+0x116>
  }
fail:
 8013062:	e002      	b.n	801306a <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8013064:	bf00      	nop
 8013066:	e000      	b.n	801306a <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8013068:	bf00      	nop
  mg_error(c, "bad server hello");
 801306a:	490e      	ldr	r1, [pc, #56]	@ (80130a4 <mg_tls_client_recv_hello+0x270>)
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7f0 ff23 	bl	8003eb8 <mg_error>
  return -1;
 8013072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013076:	4618      	mov	r0, r3
 8013078:	3728      	adds	r7, #40	@ 0x28
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	0802100c 	.word	0x0802100c
 8013084:	20000254 	.word	0x20000254
 8013088:	080229e4 	.word	0x080229e4
 801308c:	0801f338 	.word	0x0801f338
 8013090:	0802101c 	.word	0x0802101c
 8013094:	0802103c 	.word	0x0802103c
 8013098:	08021058 	.word	0x08021058
 801309c:	08021070 	.word	0x08021070
 80130a0:	08021088 	.word	0x08021088
 80130a4:	08021098 	.word	0x08021098

080130a8 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80130b6:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7fe fdc1 	bl	8011c40 <mg_tls_recv_record>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	da02      	bge.n	80130ca <mg_tls_client_recv_ext+0x22>
    return -1;
 80130c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130c8:	e017      	b.n	80130fa <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	695b      	ldr	r3, [r3, #20]
 80130d2:	4413      	add	r3, r2
 80130d4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2b08      	cmp	r3, #8
 80130dc:	d009      	beq.n	80130f2 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	461a      	mov	r2, r3
 80130e4:	4907      	ldr	r1, [pc, #28]	@ (8013104 <mg_tls_client_recv_ext+0x5c>)
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7f0 fee6 	bl	8003eb8 <mg_error>
    return -1;
 80130ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130f0:	e003      	b.n	80130fa <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7fe f958 	bl	80113a8 <mg_tls_drop_message>
  return 0;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	080210ac 	.word	0x080210ac

08013108 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8013108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310a:	b099      	sub	sp, #100	@ 0x64
 801310c:	af06      	add	r7, sp, #24
 801310e:	6178      	str	r0, [r7, #20]
 8013110:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 8013112:	f107 031c 	add.w	r3, r7, #28
 8013116:	4946      	ldr	r1, [pc, #280]	@ (8013230 <mg_der_debug_cert_name+0x128>)
 8013118:	4618      	mov	r0, r3
 801311a:	f7fd fa15 	bl	8010548 <mg_str_s>
 801311e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013122:	f107 021c 	add.w	r2, r7, #28
 8013126:	e892 0003 	ldmia.w	r2, {r0, r1}
 801312a:	e883 0003 	stmia.w	r3, {r0, r1}
 801312e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013132:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013136:	e892 0003 	ldmia.w	r2, {r0, r1}
 801313a:	e883 0003 	stmia.w	r3, {r0, r1}
 801313e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013142:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013146:	e892 0003 	ldmia.w	r2, {r0, r1}
 801314a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 801314e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013152:	2203      	movs	r2, #3
 8013154:	4937      	ldr	r1, [pc, #220]	@ (8013234 <mg_der_debug_cert_name+0x12c>)
 8013156:	6938      	ldr	r0, [r7, #16]
 8013158:	f7fe f837 	bl	80111ca <mg_der_find_oid>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d006      	beq.n	8013170 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 8013162:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013166:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801316a:	4618      	mov	r0, r3
 801316c:	f7fd fa09 	bl	8010582 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 8013170:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013174:	2203      	movs	r2, #3
 8013176:	4930      	ldr	r1, [pc, #192]	@ (8013238 <mg_der_debug_cert_name+0x130>)
 8013178:	6938      	ldr	r0, [r7, #16]
 801317a:	f7fe f826 	bl	80111ca <mg_der_find_oid>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	d006      	beq.n	8013192 <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 8013184:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013188:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801318c:	4618      	mov	r0, r3
 801318e:	f7fd f9f8 	bl	8010582 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 8013192:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013196:	2203      	movs	r2, #3
 8013198:	4928      	ldr	r1, [pc, #160]	@ (801323c <mg_der_debug_cert_name+0x134>)
 801319a:	6938      	ldr	r0, [r7, #16]
 801319c:	f7fe f815 	bl	80111ca <mg_der_find_oid>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d006      	beq.n	80131b4 <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 80131a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80131a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fd f9e7 	bl	8010582 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 80131b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80131b8:	2203      	movs	r2, #3
 80131ba:	4921      	ldr	r1, [pc, #132]	@ (8013240 <mg_der_debug_cert_name+0x138>)
 80131bc:	6938      	ldr	r0, [r7, #16]
 80131be:	f7fe f804 	bl	80111ca <mg_der_find_oid>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00e      	beq.n	80131e6 <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 80131c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80131ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131cc:	f107 0308 	add.w	r3, r7, #8
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fd f9d6 	bl	8010582 <mg_str_n>
 80131d6:	f107 031c 	add.w	r3, r7, #28
 80131da:	f107 0208 	add.w	r2, r7, #8
 80131de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131e2:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 80131e6:	4b17      	ldr	r3, [pc, #92]	@ (8013244 <mg_der_debug_cert_name+0x13c>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b03      	cmp	r3, #3
 80131ec:	dd1b      	ble.n	8013226 <mg_der_debug_cert_name+0x11e>
 80131ee:	4b16      	ldr	r3, [pc, #88]	@ (8013248 <mg_der_debug_cert_name+0x140>)
 80131f0:	f642 423b 	movw	r2, #11323	@ 0x2c3b
 80131f4:	4915      	ldr	r1, [pc, #84]	@ (801324c <mg_der_debug_cert_name+0x144>)
 80131f6:	2004      	movs	r0, #4
 80131f8:	f7f5 ffd8 	bl	80091ac <mg_log_prefix>
 80131fc:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80131fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013200:	607b      	str	r3, [r7, #4]
 8013202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801320a:	6a3c      	ldr	r4, [r7, #32]
 801320c:	69fd      	ldr	r5, [r7, #28]
 801320e:	9505      	str	r5, [sp, #20]
 8013210:	9404      	str	r4, [sp, #16]
 8013212:	9003      	str	r0, [sp, #12]
 8013214:	9102      	str	r1, [sp, #8]
 8013216:	9201      	str	r2, [sp, #4]
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	4632      	mov	r2, r6
 801321e:	6979      	ldr	r1, [r7, #20]
 8013220:	480b      	ldr	r0, [pc, #44]	@ (8013250 <mg_der_debug_cert_name+0x148>)
 8013222:	f7f6 f813 	bl	800924c <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 8013226:	bf00      	nop
 8013228:	374c      	adds	r7, #76	@ 0x4c
 801322a:	46bd      	mov	sp, r7
 801322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322e:	bf00      	nop
 8013230:	0801fb0c 	.word	0x0801fb0c
 8013234:	080210dc 	.word	0x080210dc
 8013238:	080210e0 	.word	0x080210e0
 801323c:	080210e4 	.word	0x080210e4
 8013240:	080210e8 	.word	0x080210e8
 8013244:	20000254 	.word	0x20000254
 8013248:	08022a00 	.word	0x08022a00
 801324c:	0801f338 	.word	0x0801f338
 8013250:	080210ec 	.word	0x080210ec

08013254 <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 8013254:	b590      	push	{r4, r7, lr}
 8013256:	b0af      	sub	sp, #188	@ 0xbc
 8013258:	af04      	add	r7, sp, #16
 801325a:	6178      	str	r0, [r7, #20]
 801325c:	6139      	str	r1, [r7, #16]
 801325e:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 8013266:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801326a:	461a      	mov	r2, r3
 801326c:	6939      	ldr	r1, [r7, #16]
 801326e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8013272:	f7fd ff1f 	bl	80110b4 <mg_der_parse>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	dd03      	ble.n	8013284 <mg_tls_parse_cert_der+0x30>
 801327c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8013280:	2b30      	cmp	r3, #48	@ 0x30
 8013282:	d002      	beq.n	801328a <mg_tls_parse_cert_der+0x36>
 8013284:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013288:	e38a      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 801328a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801328e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 8013292:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8013296:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801329a:	4611      	mov	r1, r2
 801329c:	4618      	mov	r0, r3
 801329e:	f7fd ff69 	bl	8011174 <mg_der_next>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dd03      	ble.n	80132b0 <mg_tls_parse_cert_der+0x5c>
 80132a8:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80132ac:	2b30      	cmp	r3, #48	@ 0x30
 80132ae:	d002      	beq.n	80132b6 <mg_tls_parse_cert_der+0x62>
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132b4:	e374      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 80132b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80132ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80132be:	441a      	add	r2, r3
 80132c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 80132ca:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80132ce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80132d2:	4611      	mov	r1, r2
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fd ff4d 	bl	8011174 <mg_der_next>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	dc02      	bgt.n	80132e6 <mg_tls_parse_cert_der+0x92>
 80132e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132e4:	e35c      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 80132e6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80132ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80132ec:	d123      	bne.n	8013336 <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 80132ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80132f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80132f4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fd fedb 	bl	80110b4 <mg_der_parse>
 80132fe:	4603      	mov	r3, r0
 8013300:	2b00      	cmp	r3, #0
 8013302:	dd07      	ble.n	8013314 <mg_tls_parse_cert_der+0xc0>
 8013304:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013306:	2b01      	cmp	r3, #1
 8013308:	d104      	bne.n	8013314 <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 801330a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801330e:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8013310:	2b02      	cmp	r3, #2
 8013312:	d002      	beq.n	801331a <mg_tls_parse_cert_der+0xc6>
      return -1;
 8013314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013318:	e342      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 801331a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801331e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013322:	4611      	mov	r1, r2
 8013324:	4618      	mov	r0, r3
 8013326:	f7fd ff25 	bl	8011174 <mg_der_next>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	dc02      	bgt.n	8013336 <mg_tls_parse_cert_der+0xe2>
 8013330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013334:	e334      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 8013336:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801333a:	2b02      	cmp	r3, #2
 801333c:	d002      	beq.n	8013344 <mg_tls_parse_cert_der+0xf0>
 801333e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013342:	e32d      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 8013344:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8013348:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801334a:	68fc      	ldr	r4, [r7, #12]
 801334c:	463b      	mov	r3, r7
 801334e:	4618      	mov	r0, r3
 8013350:	f7fd f917 	bl	8010582 <mg_str_n>
 8013354:	1d23      	adds	r3, r4, #4
 8013356:	463a      	mov	r2, r7
 8013358:	e892 0003 	ldmia.w	r2, {r0, r1}
 801335c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 8013360:	4bae      	ldr	r3, [pc, #696]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	2b03      	cmp	r3, #3
 8013366:	dd0e      	ble.n	8013386 <mg_tls_parse_cert_der+0x132>
 8013368:	4bad      	ldr	r3, [pc, #692]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 801336a:	f642 425a 	movw	r2, #11354	@ 0x2c5a
 801336e:	49ad      	ldr	r1, [pc, #692]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 8013370:	2004      	movs	r0, #4
 8013372:	f7f5 ff1b 	bl	80091ac <mg_log_prefix>
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	689a      	ldr	r2, [r3, #8]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	49aa      	ldr	r1, [pc, #680]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 8013380:	48aa      	ldr	r0, [pc, #680]	@ (801362c <mg_tls_parse_cert_der+0x3d8>)
 8013382:	f7f5 ff63 	bl	800924c <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8013386:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801338a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f7fd feef 	bl	8011174 <mg_der_next>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	dd03      	ble.n	80133a4 <mg_tls_parse_cert_der+0x150>
 801339c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80133a0:	2b30      	cmp	r3, #48	@ 0x30
 80133a2:	d002      	beq.n	80133aa <mg_tls_parse_cert_der+0x156>
 80133a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133a8:	e2fa      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 80133aa:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80133ae:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80133b2:	4611      	mov	r1, r2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fd fedd 	bl	8011174 <mg_der_next>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	dd03      	ble.n	80133c8 <mg_tls_parse_cert_der+0x174>
 80133c0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80133c4:	2b06      	cmp	r3, #6
 80133c6:	d002      	beq.n	80133ce <mg_tls_parse_cert_der+0x17a>
 80133c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80133cc:	e2e8      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 80133ce:	4b93      	ldr	r3, [pc, #588]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b03      	cmp	r3, #3
 80133d4:	dd0c      	ble.n	80133f0 <mg_tls_parse_cert_der+0x19c>
 80133d6:	4b92      	ldr	r3, [pc, #584]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 80133d8:	f642 4260 	movw	r2, #11360	@ 0x2c60
 80133dc:	4991      	ldr	r1, [pc, #580]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 80133de:	2004      	movs	r0, #4
 80133e0:	f7f5 fee4 	bl	80091ac <mg_log_prefix>
 80133e4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80133e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133e8:	498f      	ldr	r1, [pc, #572]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 80133ea:	4891      	ldr	r0, [pc, #580]	@ (8013630 <mg_tls_parse_cert_der+0x3dc>)
 80133ec:	f7f5 ff2e 	bl	800924c <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 80133f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80133f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80133f4:	498f      	ldr	r1, [pc, #572]	@ (8013634 <mg_tls_parse_cert_der+0x3e0>)
 80133f6:	4618      	mov	r0, r3
 80133f8:	f00b f911 	bl	801e61e <memcmp>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d11a      	bne.n	8013438 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 8013402:	4b86      	ldr	r3, [pc, #536]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b03      	cmp	r3, #3
 8013408:	dd09      	ble.n	801341e <mg_tls_parse_cert_der+0x1ca>
 801340a:	4b85      	ldr	r3, [pc, #532]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 801340c:	f642 4263 	movw	r2, #11363	@ 0x2c63
 8013410:	4984      	ldr	r1, [pc, #528]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 8013412:	2004      	movs	r0, #4
 8013414:	f7f5 feca 	bl	80091ac <mg_log_prefix>
 8013418:	4887      	ldr	r0, [pc, #540]	@ (8013638 <mg_tls_parse_cert_der+0x3e4>)
 801341a:	f7f5 ff17 	bl	800924c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	331c      	adds	r3, #28
 8013422:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8013426:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801342a:	4618      	mov	r0, r3
 801342c:	f7fb ff85 	bl	800f33a <mg_sha256>
    cert->tbshashsz = 32;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2220      	movs	r2, #32
 8013434:	64da      	str	r2, [r3, #76]	@ 0x4c
 8013436:	e07f      	b.n	8013538 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8013438:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 801343a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 801343c:	497f      	ldr	r1, [pc, #508]	@ (801363c <mg_tls_parse_cert_der+0x3e8>)
 801343e:	4618      	mov	r0, r3
 8013440:	f00b f8ed 	bl	801e61e <memcmp>
 8013444:	4603      	mov	r3, r0
 8013446:	2b00      	cmp	r3, #0
 8013448:	d11a      	bne.n	8013480 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 801344a:	4b74      	ldr	r3, [pc, #464]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b03      	cmp	r3, #3
 8013450:	dd09      	ble.n	8013466 <mg_tls_parse_cert_der+0x212>
 8013452:	4b73      	ldr	r3, [pc, #460]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 8013454:	f642 4268 	movw	r2, #11368	@ 0x2c68
 8013458:	4972      	ldr	r1, [pc, #456]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 801345a:	2004      	movs	r0, #4
 801345c:	f7f5 fea6 	bl	80091ac <mg_log_prefix>
 8013460:	4877      	ldr	r0, [pc, #476]	@ (8013640 <mg_tls_parse_cert_der+0x3ec>)
 8013462:	f7f5 fef3 	bl	800924c <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	331c      	adds	r3, #28
 801346a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801346e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013472:	4618      	mov	r0, r3
 8013474:	f7fb ff61 	bl	800f33a <mg_sha256>
    cert->tbshashsz = 32;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2220      	movs	r2, #32
 801347c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801347e:	e05b      	b.n	8013538 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 8013480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013482:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013484:	496f      	ldr	r1, [pc, #444]	@ (8013644 <mg_tls_parse_cert_der+0x3f0>)
 8013486:	4618      	mov	r0, r3
 8013488:	f00b f8c9 	bl	801e61e <memcmp>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d11a      	bne.n	80134c8 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 8013492:	4b62      	ldr	r3, [pc, #392]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2b03      	cmp	r3, #3
 8013498:	dd09      	ble.n	80134ae <mg_tls_parse_cert_der+0x25a>
 801349a:	4b61      	ldr	r3, [pc, #388]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 801349c:	f642 426d 	movw	r2, #11373	@ 0x2c6d
 80134a0:	4960      	ldr	r1, [pc, #384]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 80134a2:	2004      	movs	r0, #4
 80134a4:	f7f5 fe82 	bl	80091ac <mg_log_prefix>
 80134a8:	4867      	ldr	r0, [pc, #412]	@ (8013648 <mg_tls_parse_cert_der+0x3f4>)
 80134aa:	f7f5 fecf 	bl	800924c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	331c      	adds	r3, #28
 80134b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80134b6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fd f813 	bl	80104e6 <mg_sha384>
    cert->tbshashsz = 48;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2230      	movs	r2, #48	@ 0x30
 80134c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80134c6:	e037      	b.n	8013538 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 80134c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 80134ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 80134cc:	495f      	ldr	r1, [pc, #380]	@ (801364c <mg_tls_parse_cert_der+0x3f8>)
 80134ce:	4618      	mov	r0, r3
 80134d0:	f00b f8a5 	bl	801e61e <memcmp>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d11a      	bne.n	8013510 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 80134da:	4b50      	ldr	r3, [pc, #320]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b03      	cmp	r3, #3
 80134e0:	dd09      	ble.n	80134f6 <mg_tls_parse_cert_der+0x2a2>
 80134e2:	4b4f      	ldr	r3, [pc, #316]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 80134e4:	f642 4272 	movw	r2, #11378	@ 0x2c72
 80134e8:	494e      	ldr	r1, [pc, #312]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 80134ea:	2004      	movs	r0, #4
 80134ec:	f7f5 fe5e 	bl	80091ac <mg_log_prefix>
 80134f0:	4857      	ldr	r0, [pc, #348]	@ (8013650 <mg_tls_parse_cert_der+0x3fc>)
 80134f2:	f7f5 feab 	bl	800924c <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	331c      	adds	r3, #28
 80134fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80134fe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013502:	4618      	mov	r0, r3
 8013504:	f7fc ffef 	bl	80104e6 <mg_sha384>
    cert->tbshashsz = 48;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2230      	movs	r2, #48	@ 0x30
 801350c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801350e:	e013      	b.n	8013538 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 8013510:	4b42      	ldr	r3, [pc, #264]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	dd0c      	ble.n	8013532 <mg_tls_parse_cert_der+0x2de>
 8013518:	4b41      	ldr	r3, [pc, #260]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 801351a:	f642 4276 	movw	r2, #11382	@ 0x2c76
 801351e:	4941      	ldr	r1, [pc, #260]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 8013520:	2001      	movs	r0, #1
 8013522:	f7f5 fe43 	bl	80091ac <mg_log_prefix>
 8013526:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801352a:	493f      	ldr	r1, [pc, #252]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 801352c:	4849      	ldr	r0, [pc, #292]	@ (8013654 <mg_tls_parse_cert_der+0x400>)
 801352e:	f7f5 fe8d 	bl	800924c <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 8013532:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013536:	e233      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 8013538:	4b38      	ldr	r3, [pc, #224]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b03      	cmp	r3, #3
 801353e:	dd0e      	ble.n	801355e <mg_tls_parse_cert_der+0x30a>
 8013540:	4b37      	ldr	r3, [pc, #220]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 8013542:	f642 427a 	movw	r2, #11386	@ 0x2c7a
 8013546:	4937      	ldr	r1, [pc, #220]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 8013548:	2004      	movs	r0, #4
 801354a:	f7f5 fe2f 	bl	80091ac <mg_log_prefix>
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	331c      	adds	r3, #28
 8013556:	4934      	ldr	r1, [pc, #208]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 8013558:	483f      	ldr	r0, [pc, #252]	@ (8013658 <mg_tls_parse_cert_der+0x404>)
 801355a:	f7f5 fe77 	bl	800924c <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801355e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8013562:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013566:	4611      	mov	r1, r2
 8013568:	4618      	mov	r0, r3
 801356a:	f7fd fe03 	bl	8011174 <mg_der_next>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	dd03      	ble.n	801357c <mg_tls_parse_cert_der+0x328>
 8013574:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8013578:	2b30      	cmp	r3, #48	@ 0x30
 801357a:	d002      	beq.n	8013582 <mg_tls_parse_cert_der+0x32e>
 801357c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013580:	e20e      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 8013582:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8013586:	4619      	mov	r1, r3
 8013588:	4834      	ldr	r0, [pc, #208]	@ (801365c <mg_tls_parse_cert_der+0x408>)
 801358a:	f7ff fdbd 	bl	8013108 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801358e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8013592:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013596:	4611      	mov	r1, r2
 8013598:	4618      	mov	r0, r3
 801359a:	f7fd fdeb 	bl	8011174 <mg_der_next>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	dd03      	ble.n	80135ac <mg_tls_parse_cert_der+0x358>
 80135a4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80135a8:	2b30      	cmp	r3, #48	@ 0x30
 80135aa:	d002      	beq.n	80135b2 <mg_tls_parse_cert_der+0x35e>
 80135ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80135b0:	e1f6      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 80135b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80135b6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80135ba:	4611      	mov	r1, r2
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fd fdd9 	bl	8011174 <mg_der_next>
    mg_der_next(&field, &after);
 80135c2:	f107 0218 	add.w	r2, r7, #24
 80135c6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80135ca:	4611      	mov	r1, r2
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fd fdd1 	bl	8011174 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 80135d2:	6a3b      	ldr	r3, [r7, #32]
 80135d4:	69fa      	ldr	r2, [r7, #28]
 80135d6:	4922      	ldr	r1, [pc, #136]	@ (8013660 <mg_tls_parse_cert_der+0x40c>)
 80135d8:	4618      	mov	r0, r3
 80135da:	f00b f820 	bl	801e61e <memcmp>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	da41      	bge.n	8013668 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 80135e4:	4b0d      	ldr	r3, [pc, #52]	@ (801361c <mg_tls_parse_cert_der+0x3c8>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	dd14      	ble.n	8013616 <mg_tls_parse_cert_der+0x3c2>
 80135ec:	4b0c      	ldr	r3, [pc, #48]	@ (8013620 <mg_tls_parse_cert_der+0x3cc>)
 80135ee:	f642 4287 	movw	r2, #11399	@ 0x2c87
 80135f2:	490c      	ldr	r1, [pc, #48]	@ (8013624 <mg_tls_parse_cert_der+0x3d0>)
 80135f4:	2001      	movs	r0, #1
 80135f6:	f7f5 fdd9 	bl	80091ac <mg_log_prefix>
 80135fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80135fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	6a3a      	ldr	r2, [r7, #32]
 8013602:	9202      	str	r2, [sp, #8]
 8013604:	9301      	str	r3, [sp, #4]
 8013606:	4b08      	ldr	r3, [pc, #32]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	4603      	mov	r3, r0
 801360c:	460a      	mov	r2, r1
 801360e:	4906      	ldr	r1, [pc, #24]	@ (8013628 <mg_tls_parse_cert_der+0x3d4>)
 8013610:	4814      	ldr	r0, [pc, #80]	@ (8013664 <mg_tls_parse_cert_der+0x410>)
 8013612:	f7f5 fe1b 	bl	800924c <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 8013616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801361a:	e1c1      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
 801361c:	20000254 	.word	0x20000254
 8013620:	08022a18 	.word	0x08022a18
 8013624:	0801f338 	.word	0x0801f338
 8013628:	0800d1e5 	.word	0x0800d1e5
 801362c:	08021114 	.word	0x08021114
 8013630:	08021124 	.word	0x08021124
 8013634:	08021138 	.word	0x08021138
 8013638:	08021144 	.word	0x08021144
 801363c:	08021160 	.word	0x08021160
 8013640:	0802116c 	.word	0x0802116c
 8013644:	08021188 	.word	0x08021188
 8013648:	08021194 	.word	0x08021194
 801364c:	080211b0 	.word	0x080211b0
 8013650:	080211bc 	.word	0x080211bc
 8013654:	080211d8 	.word	0x080211d8
 8013658:	080211f8 	.word	0x080211f8
 801365c:	08021208 	.word	0x08021208
 8013660:	08021210 	.word	0x08021210
 8013664:	08021220 	.word	0x08021220
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8013668:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801366c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8013670:	4611      	mov	r1, r2
 8013672:	4618      	mov	r0, r3
 8013674:	f7fd fd7e 	bl	8011174 <mg_der_next>
 8013678:	4603      	mov	r3, r0
 801367a:	2b00      	cmp	r3, #0
 801367c:	dd03      	ble.n	8013686 <mg_tls_parse_cert_der+0x432>
 801367e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8013682:	2b30      	cmp	r3, #48	@ 0x30
 8013684:	d002      	beq.n	801368c <mg_tls_parse_cert_der+0x438>
 8013686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801368a:	e189      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 801368c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8013690:	4619      	mov	r1, r3
 8013692:	48a2      	ldr	r0, [pc, #648]	@ (801391c <mg_tls_parse_cert_der+0x6c8>)
 8013694:	f7ff fd38 	bl	8013108 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8013698:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801369c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80136a0:	4611      	mov	r1, r2
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fd fd66 	bl	8011174 <mg_der_next>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	dd03      	ble.n	80136b6 <mg_tls_parse_cert_der+0x462>
 80136ae:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80136b2:	2b30      	cmp	r3, #48	@ 0x30
 80136b4:	d002      	beq.n	80136bc <mg_tls_parse_cert_der+0x468>
 80136b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136ba:	e171      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 80136bc:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80136c0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80136c4:	4611      	mov	r1, r2
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fd fd54 	bl	8011174 <mg_der_next>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	dd03      	ble.n	80136da <mg_tls_parse_cert_der+0x486>
 80136d2:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80136d6:	2b30      	cmp	r3, #48	@ 0x30
 80136d8:	d002      	beq.n	80136e0 <mg_tls_parse_cert_der+0x48c>
 80136da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80136de:	e15f      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 80136e0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80136e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80136e8:	4611      	mov	r1, r2
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fd fd42 	bl	8011174 <mg_der_next>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	dd03      	ble.n	80136fe <mg_tls_parse_cert_der+0x4aa>
 80136f6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80136fa:	2b06      	cmp	r3, #6
 80136fc:	d002      	beq.n	8013704 <mg_tls_parse_cert_der+0x4b0>
 80136fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013702:	e14d      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 8013704:	4b86      	ldr	r3, [pc, #536]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b03      	cmp	r3, #3
 801370a:	dd0c      	ble.n	8013726 <mg_tls_parse_cert_der+0x4d2>
 801370c:	4b85      	ldr	r3, [pc, #532]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 801370e:	f642 4299 	movw	r2, #11417	@ 0x2c99
 8013712:	4985      	ldr	r1, [pc, #532]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 8013714:	2004      	movs	r0, #4
 8013716:	f7f5 fd49 	bl	80091ac <mg_log_prefix>
 801371a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801371c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801371e:	4983      	ldr	r1, [pc, #524]	@ (801392c <mg_tls_parse_cert_der+0x6d8>)
 8013720:	4883      	ldr	r0, [pc, #524]	@ (8013930 <mg_tls_parse_cert_der+0x6dc>)
 8013722:	f7f5 fd93 	bl	800924c <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8013726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 8013728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 801372a:	4982      	ldr	r1, [pc, #520]	@ (8013934 <mg_tls_parse_cert_der+0x6e0>)
 801372c:	4618      	mov	r0, r3
 801372e:	f00a ff76 	bl	801e61e <memcmp>
 8013732:	4603      	mov	r3, r0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d111      	bne.n	801375c <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2201      	movs	r2, #1
 801373c:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 801373e:	4b78      	ldr	r3, [pc, #480]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2b03      	cmp	r3, #3
 8013744:	dd6f      	ble.n	8013826 <mg_tls_parse_cert_der+0x5d2>
 8013746:	4b77      	ldr	r3, [pc, #476]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 8013748:	f642 429d 	movw	r2, #11421	@ 0x2c9d
 801374c:	4976      	ldr	r1, [pc, #472]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 801374e:	2004      	movs	r0, #4
 8013750:	f7f5 fd2c 	bl	80091ac <mg_log_prefix>
 8013754:	4878      	ldr	r0, [pc, #480]	@ (8013938 <mg_tls_parse_cert_der+0x6e4>)
 8013756:	f7f5 fd79 	bl	800924c <mg_log>
 801375a:	e064      	b.n	8013826 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 801375c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801375e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8013760:	4976      	ldr	r1, [pc, #472]	@ (801393c <mg_tls_parse_cert_der+0x6e8>)
 8013762:	4618      	mov	r0, r3
 8013764:	f00a ff5b 	bl	801e61e <memcmp>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	d111      	bne.n	8013792 <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2201      	movs	r2, #1
 8013772:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8013774:	4b6a      	ldr	r3, [pc, #424]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2b03      	cmp	r3, #3
 801377a:	dd54      	ble.n	8013826 <mg_tls_parse_cert_der+0x5d2>
 801377c:	4b69      	ldr	r3, [pc, #420]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 801377e:	f642 42a1 	movw	r2, #11425	@ 0x2ca1
 8013782:	4969      	ldr	r1, [pc, #420]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 8013784:	2004      	movs	r0, #4
 8013786:	f7f5 fd11 	bl	80091ac <mg_log_prefix>
 801378a:	486d      	ldr	r0, [pc, #436]	@ (8013940 <mg_tls_parse_cert_der+0x6ec>)
 801378c:	f7f5 fd5e 	bl	800924c <mg_log>
 8013790:	e049      	b.n	8013826 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8013792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8013794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8013796:	496b      	ldr	r1, [pc, #428]	@ (8013944 <mg_tls_parse_cert_der+0x6f0>)
 8013798:	4618      	mov	r0, r3
 801379a:	f00a ff40 	bl	801e61e <memcmp>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d111      	bne.n	80137c8 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2201      	movs	r2, #1
 80137a8:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 80137aa:	4b5d      	ldr	r3, [pc, #372]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b03      	cmp	r3, #3
 80137b0:	dd39      	ble.n	8013826 <mg_tls_parse_cert_der+0x5d2>
 80137b2:	4b5c      	ldr	r3, [pc, #368]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 80137b4:	f642 42a5 	movw	r2, #11429	@ 0x2ca5
 80137b8:	495b      	ldr	r1, [pc, #364]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 80137ba:	2004      	movs	r0, #4
 80137bc:	f7f5 fcf6 	bl	80091ac <mg_log_prefix>
 80137c0:	4861      	ldr	r0, [pc, #388]	@ (8013948 <mg_tls_parse_cert_der+0x6f4>)
 80137c2:	f7f5 fd43 	bl	800924c <mg_log>
 80137c6:	e02e      	b.n	8013826 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 80137c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 80137ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 80137cc:	495f      	ldr	r1, [pc, #380]	@ (801394c <mg_tls_parse_cert_der+0x6f8>)
 80137ce:	4618      	mov	r0, r3
 80137d0:	f00a ff25 	bl	801e61e <memcmp>
 80137d4:	4603      	mov	r3, r0
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d111      	bne.n	80137fe <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 80137e0:	4b4f      	ldr	r3, [pc, #316]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b03      	cmp	r3, #3
 80137e6:	dd1e      	ble.n	8013826 <mg_tls_parse_cert_der+0x5d2>
 80137e8:	4b4e      	ldr	r3, [pc, #312]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 80137ea:	f642 42a9 	movw	r2, #11433	@ 0x2ca9
 80137ee:	494e      	ldr	r1, [pc, #312]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 80137f0:	2004      	movs	r0, #4
 80137f2:	f7f5 fcdb 	bl	80091ac <mg_log_prefix>
 80137f6:	4856      	ldr	r0, [pc, #344]	@ (8013950 <mg_tls_parse_cert_der+0x6fc>)
 80137f8:	f7f5 fd28 	bl	800924c <mg_log>
 80137fc:	e013      	b.n	8013826 <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 80137fe:	4b48      	ldr	r3, [pc, #288]	@ (8013920 <mg_tls_parse_cert_der+0x6cc>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	dd0c      	ble.n	8013820 <mg_tls_parse_cert_der+0x5cc>
 8013806:	4b47      	ldr	r3, [pc, #284]	@ (8013924 <mg_tls_parse_cert_der+0x6d0>)
 8013808:	f642 42ab 	movw	r2, #11435	@ 0x2cab
 801380c:	4946      	ldr	r1, [pc, #280]	@ (8013928 <mg_tls_parse_cert_der+0x6d4>)
 801380e:	2001      	movs	r0, #1
 8013810:	f7f5 fccc 	bl	80091ac <mg_log_prefix>
 8013814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013818:	4944      	ldr	r1, [pc, #272]	@ (801392c <mg_tls_parse_cert_der+0x6d8>)
 801381a:	484e      	ldr	r0, [pc, #312]	@ (8013954 <mg_tls_parse_cert_der+0x700>)
 801381c:	f7f5 fd16 	bl	800924c <mg_log>
              pki_algo.value));
    return -1;
 8013820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013824:	e0bc      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d011      	beq.n	8013852 <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 801382e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8013832:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f7fd fc9b 	bl	8011174 <mg_der_next>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	dd03      	ble.n	801384c <mg_tls_parse_cert_der+0x5f8>
 8013844:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8013848:	2b06      	cmp	r3, #6
 801384a:	d002      	beq.n	8013852 <mg_tls_parse_cert_der+0x5fe>
 801384c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013850:	e0a6      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 8013852:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013856:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801385a:	4611      	mov	r1, r2
 801385c:	4618      	mov	r0, r3
 801385e:	f7fd fc89 	bl	8011174 <mg_der_next>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	dd03      	ble.n	8013870 <mg_tls_parse_cert_der+0x61c>
 8013868:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801386c:	2b03      	cmp	r3, #3
 801386e:	d002      	beq.n	8013876 <mg_tls_parse_cert_der+0x622>
 8013870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013874:	e094      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d010      	beq.n	80138a0 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 801387e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013880:	1c99      	adds	r1, r3, #2
 8013882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013884:	1e9a      	subs	r2, r3, #2
 8013886:	68fc      	ldr	r4, [r7, #12]
 8013888:	463b      	mov	r3, r7
 801388a:	4618      	mov	r0, r3
 801388c:	f7fc fe79 	bl	8010582 <mg_str_n>
 8013890:	f104 030c 	add.w	r3, r4, #12
 8013894:	463a      	mov	r2, r7
 8013896:	e892 0003 	ldmia.w	r2, {r0, r1}
 801389a:	e883 0003 	stmia.w	r3, {r0, r1}
 801389e:	e00f      	b.n	80138c0 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 80138a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138a2:	1c59      	adds	r1, r3, #1
 80138a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138a6:	1e5a      	subs	r2, r3, #1
 80138a8:	68fc      	ldr	r4, [r7, #12]
 80138aa:	463b      	mov	r3, r7
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fc fe68 	bl	8010582 <mg_str_n>
 80138b2:	f104 030c 	add.w	r3, r4, #12
 80138b6:	463a      	mov	r2, r7
 80138b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138bc:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 80138c0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80138c4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80138c8:	4611      	mov	r1, r2
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fd fc52 	bl	8011174 <mg_der_next>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	dd03      	ble.n	80138de <mg_tls_parse_cert_der+0x68a>
 80138d6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80138da:	2b30      	cmp	r3, #48	@ 0x30
 80138dc:	d002      	beq.n	80138e4 <mg_tls_parse_cert_der+0x690>
 80138de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80138e2:	e05d      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 80138e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80138e8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80138ec:	4611      	mov	r1, r2
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fd fc40 	bl	8011174 <mg_der_next>
 80138f4:	4603      	mov	r3, r0
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	dd03      	ble.n	8013902 <mg_tls_parse_cert_der+0x6ae>
 80138fa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d002      	beq.n	8013908 <mg_tls_parse_cert_der+0x6b4>
 8013902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013906:	e04b      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 8013908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801390a:	2b00      	cmp	r3, #0
 801390c:	d003      	beq.n	8013916 <mg_tls_parse_cert_der+0x6c2>
 801390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d020      	beq.n	8013958 <mg_tls_parse_cert_der+0x704>
 8013916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801391a:	e041      	b.n	80139a0 <mg_tls_parse_cert_der+0x74c>
 801391c:	0802124c 	.word	0x0802124c
 8013920:	20000254 	.word	0x20000254
 8013924:	08022a18 	.word	0x08022a18
 8013928:	0801f338 	.word	0x0801f338
 801392c:	0800d1e5 	.word	0x0800d1e5
 8013930:	08021254 	.word	0x08021254
 8013934:	08021268 	.word	0x08021268
 8013938:	08021274 	.word	0x08021274
 801393c:	08021290 	.word	0x08021290
 8013940:	0802129c 	.word	0x0802129c
 8013944:	080212b8 	.word	0x080212b8
 8013948:	080212c0 	.word	0x080212c0
 801394c:	080212d8 	.word	0x080212d8
 8013950:	080212e4 	.word	0x080212e4
 8013954:	080212f4 	.word	0x080212f4

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	1c59      	adds	r1, r3, #1
 801395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801395e:	1e5a      	subs	r2, r3, #1
 8013960:	68fc      	ldr	r4, [r7, #12]
 8013962:	463b      	mov	r3, r7
 8013964:	4618      	mov	r0, r3
 8013966:	f7fc fe0c 	bl	8010582 <mg_str_n>
 801396a:	f104 0314 	add.w	r3, r4, #20
 801396e:	463a      	mov	r2, r7
 8013970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013974:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8013978:	4b0b      	ldr	r3, [pc, #44]	@ (80139a8 <mg_tls_parse_cert_der+0x754>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b03      	cmp	r3, #3
 801397e:	dd0e      	ble.n	801399e <mg_tls_parse_cert_der+0x74a>
 8013980:	4b0a      	ldr	r3, [pc, #40]	@ (80139ac <mg_tls_parse_cert_der+0x758>)
 8013982:	f642 42c2 	movw	r2, #11458	@ 0x2cc2
 8013986:	490a      	ldr	r1, [pc, #40]	@ (80139b0 <mg_tls_parse_cert_der+0x75c>)
 8013988:	2004      	movs	r0, #4
 801398a:	f7f5 fc0f 	bl	80091ac <mg_log_prefix>
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	699a      	ldr	r2, [r3, #24]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	695b      	ldr	r3, [r3, #20]
 8013996:	4907      	ldr	r1, [pc, #28]	@ (80139b4 <mg_tls_parse_cert_der+0x760>)
 8013998:	4807      	ldr	r0, [pc, #28]	@ (80139b8 <mg_tls_parse_cert_der+0x764>)
 801399a:	f7f5 fc57 	bl	800924c <mg_log>

  return 0;
 801399e:	2300      	movs	r3, #0
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	37ac      	adds	r7, #172	@ 0xac
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd90      	pop	{r4, r7, pc}
 80139a8:	20000254 	.word	0x20000254
 80139ac:	08022a18 	.word	0x08022a18
 80139b0:	0801f338 	.word	0x0801f338
 80139b4:	0800d1e5 	.word	0x0800d1e5
 80139b8:	0802130c 	.word	0x0802130c

080139bc <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 80139bc:	b580      	push	{r7, lr}
 80139be:	b094      	sub	sp, #80	@ 0x50
 80139c0:	af02      	add	r7, sp, #8
 80139c2:	60f8      	str	r0, [r7, #12]
 80139c4:	60b9      	str	r1, [r7, #8]
 80139c6:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 80139c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80139cc:	461a      	mov	r2, r3
 80139ce:	68b9      	ldr	r1, [r7, #8]
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	f7fd fb6f 	bl	80110b4 <mg_der_parse>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	db0a      	blt.n	80139f2 <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 80139dc:	f107 0320 	add.w	r3, r7, #32
 80139e0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80139e4:	2203      	movs	r2, #3
 80139e6:	492f      	ldr	r1, [pc, #188]	@ (8013aa4 <mg_tls_verify_cert_san+0xe8>)
 80139e8:	f7fd fbef 	bl	80111ca <mg_der_find_oid>
 80139ec:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	da10      	bge.n	8013a14 <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 80139f2:	4b2d      	ldr	r3, [pc, #180]	@ (8013aa8 <mg_tls_verify_cert_san+0xec>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	dd09      	ble.n	8013a0e <mg_tls_verify_cert_san+0x52>
 80139fa:	4b2c      	ldr	r3, [pc, #176]	@ (8013aac <mg_tls_verify_cert_san+0xf0>)
 80139fc:	f642 42cc 	movw	r2, #11468	@ 0x2ccc
 8013a00:	492b      	ldr	r1, [pc, #172]	@ (8013ab0 <mg_tls_verify_cert_san+0xf4>)
 8013a02:	2001      	movs	r0, #1
 8013a04:	f7f5 fbd2 	bl	80091ac <mg_log_prefix>
 8013a08:	482a      	ldr	r0, [pc, #168]	@ (8013ab4 <mg_tls_verify_cert_san+0xf8>)
 8013a0a:	f7f5 fc1f 	bl	800924c <mg_log>
    return -1;
 8013a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a12:	e043      	b.n	8013a9c <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 8013a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013a18:	f107 0220 	add.w	r2, r7, #32
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7fd fb49 	bl	80110b4 <mg_der_parse>
 8013a22:	4603      	mov	r3, r0
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	da2c      	bge.n	8013a82 <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 8013a28:	4b1f      	ldr	r3, [pc, #124]	@ (8013aa8 <mg_tls_verify_cert_san+0xec>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	dd09      	ble.n	8013a44 <mg_tls_verify_cert_san+0x88>
 8013a30:	4b1e      	ldr	r3, [pc, #120]	@ (8013aac <mg_tls_verify_cert_san+0xf0>)
 8013a32:	f642 42d0 	movw	r2, #11472	@ 0x2cd0
 8013a36:	491e      	ldr	r1, [pc, #120]	@ (8013ab0 <mg_tls_verify_cert_san+0xf4>)
 8013a38:	2001      	movs	r0, #1
 8013a3a:	f7f5 fbb7 	bl	80091ac <mg_log_prefix>
 8013a3e:	481e      	ldr	r0, [pc, #120]	@ (8013ab8 <mg_tls_verify_cert_san+0xfc>)
 8013a40:	f7f5 fc04 	bl	800924c <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 8013a44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013a48:	e028      	b.n	8013a9c <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 8013a4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7fc fd79 	bl	8010548 <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 8013a56:	69f9      	ldr	r1, [r7, #28]
 8013a58:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 8013a5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fc fd8f 	bl	8010582 <mg_str_n>
 8013a64:	2300      	movs	r3, #0
 8013a66:	9300      	str	r3, [sp, #0]
 8013a68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8013a6c:	cb0c      	ldmia	r3, {r2, r3}
 8013a6e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8013a72:	c903      	ldmia	r1, {r0, r1}
 8013a74:	f7fc fe72 	bl	801075c <mg_match>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	e00c      	b.n	8013a9c <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 8013a82:	f107 0214 	add.w	r2, r7, #20
 8013a86:	f107 0320 	add.w	r3, r7, #32
 8013a8a:	4611      	mov	r1, r2
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fd fb71 	bl	8011174 <mg_der_next>
 8013a92:	4603      	mov	r3, r0
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	dcd8      	bgt.n	8013a4a <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 8013a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3748      	adds	r7, #72	@ 0x48
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	08021314 	.word	0x08021314
 8013aa8:	20000254 	.word	0x20000254
 8013aac:	08022a30 	.word	0x08022a30
 8013ab0:	0801f338 	.word	0x0801f338
 8013ab4:	08021318 	.word	0x08021318
 8013ab8:	08021344 	.word	0x08021344

08013abc <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 8013abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013abe:	b0db      	sub	sp, #364	@ 0x16c
 8013ac0:	af04      	add	r7, sp, #16
 8013ac2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013ac6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013aca:	6018      	str	r0, [r3, #0]
 8013acc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013ad0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013ad4:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 8013ad6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013ada:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	f000 80eb 	beq.w	8013cbe <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8013ae8:	2300      	movs	r3, #0
 8013aea:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8013aee:	2300      	movs	r3, #0
 8013af0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8013af4:	2300      	movs	r3, #0
 8013af6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8013afa:	2300      	movs	r3, #0
 8013afc:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8013b00:	2300      	movs	r3, #0
 8013b02:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8013b06:	2300      	movs	r3, #0
 8013b08:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 8013b12:	2300      	movs	r3, #0
 8013b14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013b18:	2300      	movs	r3, #0
 8013b1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 8013b1e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013b22:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	6958      	ldr	r0, [r3, #20]
 8013b2a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013b2e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	699b      	ldr	r3, [r3, #24]
 8013b36:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	f7fd faba 	bl	80110b4 <mg_der_parse>
    mg_der_next(&seq, &a);
 8013b40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013b44:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8013b48:	4611      	mov	r1, r2
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fd fb12 	bl	8011174 <mg_der_next>
    mg_der_next(&seq, &b);
 8013b50:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8013b54:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8013b58:	4611      	mov	r1, r2
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fd fb0a 	bl	8011174 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8013b60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d003      	beq.n	8013b70 <mg_tls_verify_cert_signature+0xb4>
 8013b68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d10f      	bne.n	8013b90 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8013b70:	4b92      	ldr	r3, [pc, #584]	@ (8013dbc <mg_tls_verify_cert_signature+0x300>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	dd09      	ble.n	8013b8c <mg_tls_verify_cert_signature+0xd0>
 8013b78:	4b91      	ldr	r3, [pc, #580]	@ (8013dc0 <mg_tls_verify_cert_signature+0x304>)
 8013b7a:	f642 42e7 	movw	r2, #11495	@ 0x2ce7
 8013b7e:	4991      	ldr	r1, [pc, #580]	@ (8013dc4 <mg_tls_verify_cert_signature+0x308>)
 8013b80:	2001      	movs	r0, #1
 8013b82:	f7f5 fb13 	bl	80091ac <mg_log_prefix>
 8013b86:	4890      	ldr	r0, [pc, #576]	@ (8013dc8 <mg_tls_verify_cert_signature+0x30c>)
 8013b88:	f7f5 fb60 	bl	800924c <mg_log>
      return 0;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e110      	b.n	8013db2 <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8013b90:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013b94:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	691b      	ldr	r3, [r3, #16]
 8013b9c:	2b40      	cmp	r3, #64	@ 0x40
 8013b9e:	d15f      	bne.n	8013c60 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8013ba0:	2320      	movs	r3, #32
 8013ba2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 8013ba6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8013baa:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d20d      	bcs.n	8013bce <mg_tls_verify_cert_signature+0x112>
 8013bb2:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8013bb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8013bba:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8013bbe:	1acb      	subs	r3, r1, r3
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8013bc6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8013bca:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 8013bce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013bd2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	d20d      	bcs.n	8013bf6 <mg_tls_verify_cert_signature+0x13a>
 8013bda:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013bde:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8013be2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8013be6:	1acb      	subs	r3, r1, r3
 8013be8:	4413      	add	r3, r2
 8013bea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013bee:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8013bf2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 8013bf6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8013bfa:	f107 0308 	add.w	r3, r7, #8
 8013bfe:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8013c02:	4618      	mov	r0, r3
 8013c04:	f00a fd1b 	bl	801e63e <memmove>
      memmove(sig + N, b.value, N);
 8013c08:	f107 0208 	add.w	r2, r7, #8
 8013c0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8013c10:	4413      	add	r3, r2
 8013c12:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8013c16:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f00a fd0f 	bl	801e63e <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 8013c20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013c24:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	68dc      	ldr	r4, [r3, #12]
 8013c2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013c30:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 8013c3a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013c3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 8013c46:	f005 fb79 	bl	801933c <mg_uecc_secp256r1>
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	f107 0308 	add.w	r3, r7, #8
 8013c50:	9200      	str	r2, [sp, #0]
 8013c52:	4632      	mov	r2, r6
 8013c54:	4629      	mov	r1, r5
 8013c56:	4620      	mov	r0, r4
 8013c58:	f006 fd0c 	bl	801a674 <mg_uecc_verify>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	e0a8      	b.n	8013db2 <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8013c60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013c64:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	691b      	ldr	r3, [r3, #16]
 8013c6c:	2b60      	cmp	r3, #96	@ 0x60
 8013c6e:	d10f      	bne.n	8013c90 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8013c70:	4b52      	ldr	r3, [pc, #328]	@ (8013dbc <mg_tls_verify_cert_signature+0x300>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	2b02      	cmp	r3, #2
 8013c76:	dd09      	ble.n	8013c8c <mg_tls_verify_cert_signature+0x1d0>
 8013c78:	4b51      	ldr	r3, [pc, #324]	@ (8013dc0 <mg_tls_verify_cert_signature+0x304>)
 8013c7a:	f642 42f4 	movw	r2, #11508	@ 0x2cf4
 8013c7e:	4951      	ldr	r1, [pc, #324]	@ (8013dc4 <mg_tls_verify_cert_signature+0x308>)
 8013c80:	2003      	movs	r0, #3
 8013c82:	f7f5 fa93 	bl	80091ac <mg_log_prefix>
 8013c86:	4851      	ldr	r0, [pc, #324]	@ (8013dcc <mg_tls_verify_cert_signature+0x310>)
 8013c88:	f7f5 fae0 	bl	800924c <mg_log>
      return 1;
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	e090      	b.n	8013db2 <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 8013c90:	4b4a      	ldr	r3, [pc, #296]	@ (8013dbc <mg_tls_verify_cert_signature+0x300>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	dd10      	ble.n	8013cba <mg_tls_verify_cert_signature+0x1fe>
 8013c98:	4b49      	ldr	r3, [pc, #292]	@ (8013dc0 <mg_tls_verify_cert_signature+0x304>)
 8013c9a:	f642 42f7 	movw	r2, #11511	@ 0x2cf7
 8013c9e:	4949      	ldr	r1, [pc, #292]	@ (8013dc4 <mg_tls_verify_cert_signature+0x308>)
 8013ca0:	2001      	movs	r0, #1
 8013ca2:	f7f5 fa83 	bl	80091ac <mg_log_prefix>
 8013ca6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013caa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	691b      	ldr	r3, [r3, #16]
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4846      	ldr	r0, [pc, #280]	@ (8013dd0 <mg_tls_verify_cert_signature+0x314>)
 8013cb6:	f7f5 fac9 	bl	800924c <mg_log>
      return 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	e079      	b.n	8013db2 <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 8013cbe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013cc2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	68d8      	ldr	r0, [r3, #12]
 8013cca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013cce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	691b      	ldr	r3, [r3, #16]
 8013cd6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013cda:	4619      	mov	r1, r3
 8013cdc:	f7fd f9ea 	bl	80110b4 <mg_der_parse>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	dd1d      	ble.n	8013d22 <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8013ce6:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8013cea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fd fa3f 	bl	8011174 <mg_der_next>
 8013cf6:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	dd12      	ble.n	8013d22 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8013cfc:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	d10e      	bne.n	8013d22 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8013d04:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8013d08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fd fa30 	bl	8011174 <mg_der_next>
 8013d14:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	dd03      	ble.n	8013d22 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8013d1a:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8013d1e:	2b02      	cmp	r3, #2
 8013d20:	d002      	beq.n	8013d28 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 8013d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d26:	e044      	b.n	8013db2 <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8013d28:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8013d2c:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8013d30:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 8013d34:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 8013d38:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013d3c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	695b      	ldr	r3, [r3, #20]
 8013d44:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8013d48:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8013d4c:	6812      	ldr	r2, [r2, #0]
 8013d4e:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8013d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013d54:	9103      	str	r1, [sp, #12]
 8013d56:	f107 0108 	add.w	r1, r7, #8
 8013d5a:	9102      	str	r1, [sp, #8]
 8013d5c:	9201      	str	r2, [sp, #4]
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	4633      	mov	r3, r6
 8013d62:	462a      	mov	r2, r5
 8013d64:	4621      	mov	r1, r4
 8013d66:	f004 faba 	bl	80182de <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8013d6a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013d6e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d76:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8013d7a:	f107 0208 	add.w	r2, r7, #8
 8013d7e:	18d0      	adds	r0, r2, r3
 8013d80:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013d84:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 8013d8e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8013d92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	f00a fc3f 	bl	801e61e <memcmp>
 8013da0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 8013da4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	bf0c      	ite	eq
 8013dac:	2301      	moveq	r3, #1
 8013dae:	2300      	movne	r3, #0
 8013db0:	b2db      	uxtb	r3, r3
  }
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dbc:	20000254 	.word	0x20000254
 8013dc0:	08022a48 	.word	0x08022a48
 8013dc4:	0801f338 	.word	0x0801f338
 8013dc8:	08021388 	.word	0x08021388
 8013dcc:	080213a0 	.word	0x080213a0
 8013dd0:	080213b8 	.word	0x080213b8

08013dd4 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013de0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013de4:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 8013dec:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013df0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013dfa:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 8013dfe:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013e02:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013e06:	6818      	ldr	r0, [r3, #0]
 8013e08:	f7fd ff1a 	bl	8011c40 <mg_tls_recv_record>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	da02      	bge.n	8013e18 <mg_tls_client_recv_cert+0x44>
    return -1;
 8013e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e16:	e24a      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 8013e18:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013e1c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8013e24:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013e28:	695b      	ldr	r3, [r3, #20]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 8013e30:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	2b0d      	cmp	r3, #13
 8013e38:	d11c      	bne.n	8013e74 <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 8013e3a:	4bcb      	ldr	r3, [pc, #812]	@ (8014168 <mg_tls_client_recv_cert+0x394>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2b03      	cmp	r3, #3
 8013e40:	dd09      	ble.n	8013e56 <mg_tls_client_recv_cert+0x82>
 8013e42:	4bca      	ldr	r3, [pc, #808]	@ (801416c <mg_tls_client_recv_cert+0x398>)
 8013e44:	f642 521b 	movw	r2, #11547	@ 0x2d1b
 8013e48:	49c9      	ldr	r1, [pc, #804]	@ (8014170 <mg_tls_client_recv_cert+0x39c>)
 8013e4a:	2004      	movs	r0, #4
 8013e4c:	f7f5 f9ae 	bl	80091ac <mg_log_prefix>
 8013e50:	48c8      	ldr	r0, [pc, #800]	@ (8014174 <mg_tls_client_recv_cert+0x3a0>)
 8013e52:	f7f5 f9fb 	bl	800924c <mg_log>
    mg_tls_drop_message(c);
 8013e56:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013e5a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013e5e:	6818      	ldr	r0, [r3, #0]
 8013e60:	f7fd faa2 	bl	80113a8 <mg_tls_drop_message>
    tls->cert_requested = 1;
 8013e64:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013e68:	2201      	movs	r2, #1
 8013e6a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8013e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e72:	e21c      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 8013e74:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	2b0b      	cmp	r3, #11
 8013e7c:	d00e      	beq.n	8013e9c <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 8013e7e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	461a      	mov	r2, r3
 8013e86:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013e8a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013e8e:	49ba      	ldr	r1, [pc, #744]	@ (8014178 <mg_tls_client_recv_cert+0x3a4>)
 8013e90:	6818      	ldr	r0, [r3, #0]
 8013e92:	f7f0 f811 	bl	8003eb8 <mg_error>
    return -1;
 8013e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e9a:	e208      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 8013e9c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013ea0:	699b      	ldr	r3, [r3, #24]
 8013ea2:	2b0a      	cmp	r3, #10
 8013ea4:	d80a      	bhi.n	8013ebc <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 8013ea6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013eaa:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013eae:	49b3      	ldr	r1, [pc, #716]	@ (801417c <mg_tls_client_recv_cert+0x3a8>)
 8013eb0:	6818      	ldr	r0, [r3, #0]
 8013eb2:	f7f0 f801 	bl	8003eb8 <mg_error>
    return -1;
 8013eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013eba:	e1f8      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 8013ebc:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	041a      	lsls	r2, r3, #16
 8013ec6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013eca:	3302      	adds	r3, #2
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	021b      	lsls	r3, r3, #8
 8013ed0:	4313      	orrs	r3, r2
 8013ed2:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8013ed6:	3203      	adds	r2, #3
 8013ed8:	7812      	ldrb	r2, [r2, #0]
 8013eda:	4313      	orrs	r3, r2
 8013edc:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 8013ee0:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013ee4:	3305      	adds	r3, #5
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	041a      	lsls	r2, r3, #16
 8013eea:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013eee:	3306      	adds	r3, #6
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	021b      	lsls	r3, r3, #8
 8013ef4:	4313      	orrs	r3, r2
 8013ef6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8013efa:	3207      	adds	r2, #7
 8013efc:	7812      	ldrb	r2, [r2, #0]
 8013efe:	4313      	orrs	r3, r2
 8013f00:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 8013f04:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8013f08:	3b04      	subs	r3, #4
 8013f0a:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d01c      	beq.n	8013f4c <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 8013f12:	4b95      	ldr	r3, [pc, #596]	@ (8014168 <mg_tls_client_recv_cert+0x394>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	dd0d      	ble.n	8013f36 <mg_tls_client_recv_cert+0x162>
 8013f1a:	4b94      	ldr	r3, [pc, #592]	@ (801416c <mg_tls_client_recv_cert+0x398>)
 8013f1c:	f642 522e 	movw	r2, #11566	@ 0x2d2e
 8013f20:	4993      	ldr	r1, [pc, #588]	@ (8014170 <mg_tls_client_recv_cert+0x39c>)
 8013f22:	2001      	movs	r0, #1
 8013f24:	f7f5 f942 	bl	80091ac <mg_log_prefix>
 8013f28:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8013f2c:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 8013f30:	4893      	ldr	r0, [pc, #588]	@ (8014180 <mg_tls_client_recv_cert+0x3ac>)
 8013f32:	f7f5 f98b 	bl	800924c <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 8013f36:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013f3a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013f3e:	4991      	ldr	r1, [pc, #580]	@ (8014184 <mg_tls_client_recv_cert+0x3b0>)
 8013f40:	6818      	ldr	r0, [r3, #0]
 8013f42:	f7ef ffb9 	bl	8003eb8 <mg_error>
    return -1;
 8013f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f4a:	e1b0      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 8013f52:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8013f56:	3308      	adds	r3, #8
 8013f58:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 8013f5c:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8013f60:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8013f64:	4413      	add	r3, r2
 8013f66:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 8013f70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013f74:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013f78:	2100      	movs	r1, #0
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f00a fb79 	bl	801e672 <memset>
  memset(&ca, 0, sizeof(ca));
 8013f80:	f107 030c 	add.w	r3, r7, #12
 8013f84:	2250      	movs	r2, #80	@ 0x50
 8013f86:	2100      	movs	r1, #0
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f00a fb72 	bl	801e672 <memset>

  if (tls->ca_der.len > 0) {
 8013f8e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013f92:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	f000 8134 	beq.w	8014204 <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 8013f9c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013fa0:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 8013fa4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8013fa8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8013fac:	f107 020c 	add.w	r2, r7, #12
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	f7ff f94f 	bl	8013254 <mg_tls_parse_cert_der>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	da0a      	bge.n	8013fd2 <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 8013fbc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013fc0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8013fc4:	4970      	ldr	r1, [pc, #448]	@ (8014188 <mg_tls_client_recv_cert+0x3b4>)
 8013fc6:	6818      	ldr	r0, [r3, #0]
 8013fc8:	f7ef ff76 	bl	8003eb8 <mg_error>
      return -1;
 8013fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013fd0:	e16d      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 8013fd2:	4b65      	ldr	r3, [pc, #404]	@ (8014168 <mg_tls_client_recv_cert+0x394>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2b03      	cmp	r3, #3
 8013fd8:	f340 8114 	ble.w	8014204 <mg_tls_client_recv_cert+0x430>
 8013fdc:	4b63      	ldr	r3, [pc, #396]	@ (801416c <mg_tls_client_recv_cert+0x398>)
 8013fde:	f642 5246 	movw	r2, #11590	@ 0x2d46
 8013fe2:	4963      	ldr	r1, [pc, #396]	@ (8014170 <mg_tls_client_recv_cert+0x39c>)
 8013fe4:	2004      	movs	r0, #4
 8013fe6:	f7f5 f8e1 	bl	80091ac <mg_log_prefix>
 8013fea:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013fee:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8013ff2:	689a      	ldr	r2, [r3, #8]
 8013ff4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8013ff8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	4963      	ldr	r1, [pc, #396]	@ (801418c <mg_tls_client_recv_cert+0x3b8>)
 8014000:	4863      	ldr	r0, [pc, #396]	@ (8014190 <mg_tls_client_recv_cert+0x3bc>)
 8014002:	f7f5 f923 	bl	800924c <mg_log>
  }

  while (p < endp) {
 8014006:	e0fd      	b.n	8014204 <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 8014008:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801400c:	1c53      	adds	r3, r2, #1
 801400e:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8014012:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8014016:	4613      	mov	r3, r2
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	4413      	add	r3, r2
 801401c:	011b      	lsls	r3, r3, #4
 801401e:	440b      	add	r3, r1
 8014020:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 8014024:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	041a      	lsls	r2, r3, #16
 801402c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8014030:	3301      	adds	r3, #1
 8014032:	781b      	ldrb	r3, [r3, #0]
 8014034:	021b      	lsls	r3, r3, #8
 8014036:	4313      	orrs	r3, r2
 8014038:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 801403c:	3202      	adds	r2, #2
 801403e:	7812      	ldrb	r2, [r2, #0]
 8014040:	4313      	orrs	r3, r2
 8014042:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 8014046:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801404a:	3303      	adds	r3, #3
 801404c:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 8014050:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8014054:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8014058:	4413      	add	r3, r2
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	b21b      	sxth	r3, r3
 801405e:	021b      	lsls	r3, r3, #8
 8014060:	b21a      	sxth	r2, r3
 8014062:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8014066:	3301      	adds	r3, #1
 8014068:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 801406c:	440b      	add	r3, r1
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	b21b      	sxth	r3, r3
 8014072:	4313      	orrs	r3, r2
 8014074:	b21b      	sxth	r3, r3
 8014076:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 801407a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 801407e:	2b00      	cmp	r3, #0
 8014080:	d00a      	beq.n	8014098 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 8014082:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8014086:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801408a:	4942      	ldr	r1, [pc, #264]	@ (8014194 <mg_tls_client_recv_cert+0x3c0>)
 801408c:	6818      	ldr	r0, [r3, #0]
 801408e:	f7ef ff13 	bl	8003eb8 <mg_error>
      return -1;
 8014092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014096:	e10a      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 8014098:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801409c:	3302      	adds	r3, #2
 801409e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80140a2:	4413      	add	r3, r2
 80140a4:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 80140a8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80140ac:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 80140b0:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 80140b4:	f7ff f8ce 	bl	8013254 <mg_tls_parse_cert_der>
 80140b8:	4603      	mov	r3, r0
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	da0a      	bge.n	80140d4 <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 80140be:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80140c2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80140c6:	4934      	ldr	r1, [pc, #208]	@ (8014198 <mg_tls_client_recv_cert+0x3c4>)
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	f7ef fef5 	bl	8003eb8 <mg_error>
      return -1;
 80140ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80140d2:	e0ec      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 80140d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80140d8:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80140dc:	429a      	cmp	r2, r3
 80140de:	d12d      	bne.n	801413c <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 80140e0:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80140e4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80140e8:	461a      	mov	r2, r3
 80140ea:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 80140ee:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 80140f2:	f7ff fc63 	bl	80139bc <mg_tls_verify_cert_san>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	dc0a      	bgt.n	8014112 <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 80140fc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8014100:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8014104:	4925      	ldr	r1, [pc, #148]	@ (801419c <mg_tls_client_recv_cert+0x3c8>)
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	f7ef fed6 	bl	8003eb8 <mg_error>
        return -1;
 801410c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014110:	e0cd      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 8014112:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8014116:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 801411a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801411e:	68d9      	ldr	r1, [r3, #12]
 8014120:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	461a      	mov	r2, r3
 8014128:	f00a fa89 	bl	801e63e <memmove>
      tls->pubkeysz = ci->pubkey.len;
 801412c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8014130:	691a      	ldr	r2, [r3, #16]
 8014132:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8014136:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 801413a:	e033      	b.n	80141a4 <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 801413c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8014140:	3b50      	subs	r3, #80	@ 0x50
 8014142:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8014146:	4618      	mov	r0, r3
 8014148:	f7ff fcb8 	bl	8013abc <mg_tls_verify_cert_signature>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d128      	bne.n	80141a4 <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 8014152:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8014156:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801415a:	4911      	ldr	r1, [pc, #68]	@ (80141a0 <mg_tls_client_recv_cert+0x3cc>)
 801415c:	6818      	ldr	r0, [r3, #0]
 801415e:	f7ef feab 	bl	8003eb8 <mg_error>
        return -1;
 8014162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014166:	e0a2      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
 8014168:	20000254 	.word	0x20000254
 801416c:	08022a68 	.word	0x08022a68
 8014170:	0801f338 	.word	0x0801f338
 8014174:	080213dc 	.word	0x080213dc
 8014178:	080213f4 	.word	0x080213f4
 801417c:	08021424 	.word	0x08021424
 8014180:	08021440 	.word	0x08021440
 8014184:	08021468 	.word	0x08021468
 8014188:	0802148c 	.word	0x0802148c
 801418c:	0800d1e5 	.word	0x0800d1e5
 8014190:	080214ac 	.word	0x080214ac
 8014194:	080214bc 	.word	0x080214bc
 8014198:	080214e8 	.word	0x080214e8
 801419c:	08021504 	.word	0x08021504
 80141a0:	08021520 	.word	0x08021520
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 80141a4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80141a8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80141ac:	691a      	ldr	r2, [r3, #16]
 80141ae:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80141b2:	691b      	ldr	r3, [r3, #16]
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d116      	bne.n	80141e6 <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 80141b8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80141bc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80141c0:	68d8      	ldr	r0, [r3, #12]
 80141c2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80141c6:	68d9      	ldr	r1, [r3, #12]
 80141c8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80141cc:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80141d0:	691b      	ldr	r3, [r3, #16]
 80141d2:	461a      	mov	r2, r3
 80141d4:	f00a fa23 	bl	801e61e <memcmp>
 80141d8:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d103      	bne.n	80141e6 <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 80141de:	2301      	movs	r3, #1
 80141e0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 80141e4:	e015      	b.n	8014212 <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 80141e6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80141ea:	2b07      	cmp	r3, #7
 80141ec:	d10a      	bne.n	8014204 <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 80141ee:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80141f2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80141f6:	4930      	ldr	r1, [pc, #192]	@ (80142b8 <mg_tls_client_recv_cert+0x4e4>)
 80141f8:	6818      	ldr	r0, [r3, #0]
 80141fa:	f7ef fe5d 	bl	8003eb8 <mg_error>
      return -1;
 80141fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014202:	e054      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 8014204:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8014208:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801420c:	429a      	cmp	r2, r3
 801420e:	f4ff aefb 	bcc.w	8014008 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 8014212:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8014216:	2b00      	cmp	r3, #0
 8014218:	d135      	bne.n	8014286 <mg_tls_client_recv_cert+0x4b2>
 801421a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801421e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8014222:	2b00      	cmp	r3, #0
 8014224:	d02f      	beq.n	8014286 <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 8014226:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801422a:	2b00      	cmp	r3, #0
 801422c:	dd12      	ble.n	8014254 <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 801422e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8014232:	1e5a      	subs	r2, r3, #1
 8014234:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8014238:	4613      	mov	r3, r2
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	4413      	add	r3, r2
 801423e:	011b      	lsls	r3, r3, #4
 8014240:	440b      	add	r3, r1
 8014242:	f107 020c 	add.w	r2, r7, #12
 8014246:	4611      	mov	r1, r2
 8014248:	4618      	mov	r0, r3
 801424a:	f7ff fc37 	bl	8013abc <mg_tls_verify_cert_signature>
 801424e:	4603      	mov	r3, r0
    if (certnum < 1 ||
 8014250:	2b00      	cmp	r3, #0
 8014252:	d10a      	bne.n	801426a <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 8014254:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8014258:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801425c:	4917      	ldr	r1, [pc, #92]	@ (80142bc <mg_tls_client_recv_cert+0x4e8>)
 801425e:	6818      	ldr	r0, [r3, #0]
 8014260:	f7ef fe2a 	bl	8003eb8 <mg_error>
      return -1;
 8014264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014268:	e021      	b.n	80142ae <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 801426a:	4b15      	ldr	r3, [pc, #84]	@ (80142c0 <mg_tls_client_recv_cert+0x4ec>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b03      	cmp	r3, #3
 8014270:	dd09      	ble.n	8014286 <mg_tls_client_recv_cert+0x4b2>
 8014272:	4b14      	ldr	r3, [pc, #80]	@ (80142c4 <mg_tls_client_recv_cert+0x4f0>)
 8014274:	f642 527b 	movw	r2, #11643	@ 0x2d7b
 8014278:	4913      	ldr	r1, [pc, #76]	@ (80142c8 <mg_tls_client_recv_cert+0x4f4>)
 801427a:	2004      	movs	r0, #4
 801427c:	f7f4 ff96 	bl	80091ac <mg_log_prefix>
 8014280:	4812      	ldr	r0, [pc, #72]	@ (80142cc <mg_tls_client_recv_cert+0x4f8>)
 8014282:	f7f4 ffe3 	bl	800924c <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 8014286:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801428a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801428e:	6818      	ldr	r0, [r3, #0]
 8014290:	f7fd f88a 	bl	80113a8 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8014294:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8014298:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 801429c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80142a0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80142a4:	2200      	movs	r2, #0
 80142a6:	6818      	ldr	r0, [r3, #0]
 80142a8:	f7fd fde6 	bl	8011e78 <mg_tls_calc_cert_verify_hash>
  return 0;
 80142ac:	2300      	movs	r3, #0
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	08021544 	.word	0x08021544
 80142bc:	08021568 	.word	0x08021568
 80142c0:	20000254 	.word	0x20000254
 80142c4:	08022a68 	.word	0x08022a68
 80142c8:	0801f338 	.word	0x0801f338
 80142cc:	0802157c 	.word	0x0802157c

080142d0 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 80142d0:	b5b0      	push	{r4, r5, r7, lr}
 80142d2:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80142d6:	af04      	add	r7, sp, #16
 80142d8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80142dc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80142e0:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80142e2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80142e6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80142f0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80142f4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80142f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80142fc:	6818      	ldr	r0, [r3, #0]
 80142fe:	f7fd fc9f 	bl	8011c40 <mg_tls_recv_record>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	da02      	bge.n	801430e <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 8014308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801430c:	e1f9      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801430e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8014312:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801431a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801431e:	695b      	ldr	r3, [r3, #20]
 8014320:	4413      	add	r3, r2
 8014322:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8014326:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b0f      	cmp	r3, #15
 801432e:	d00e      	beq.n	801434e <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 8014330:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8014334:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 8014336:	461a      	mov	r2, r3
 8014338:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801433c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014340:	49cb      	ldr	r1, [pc, #812]	@ (8014670 <mg_tls_client_recv_cert_verify+0x3a0>)
 8014342:	6818      	ldr	r0, [r3, #0]
 8014344:	f7ef fdb8 	bl	8003eb8 <mg_error>
    return -1;
 8014348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801434c:	e1d9      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 801434e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014352:	699b      	ldr	r3, [r3, #24]
 8014354:	2b07      	cmp	r3, #7
 8014356:	d80d      	bhi.n	8014374 <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 8014358:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801435c:	699a      	ldr	r2, [r3, #24]
 801435e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8014362:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014366:	49c3      	ldr	r1, [pc, #780]	@ (8014674 <mg_tls_client_recv_cert_verify+0x3a4>)
 8014368:	6818      	ldr	r0, [r3, #0]
 801436a:	f7ef fda5 	bl	8003eb8 <mg_error>
             tls->recv_len);
    return -1;
 801436e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014372:	e1c6      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8014374:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014378:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801437c:	2b00      	cmp	r3, #0
 801437e:	d008      	beq.n	8014392 <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 8014380:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8014384:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014388:	6818      	ldr	r0, [r3, #0]
 801438a:	f7fd f80d 	bl	80113a8 <mg_tls_drop_message>
    return 0;
 801438e:	2300      	movs	r3, #0
 8014390:	e1b7      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 8014392:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8014396:	3304      	adds	r3, #4
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	b21b      	sxth	r3, r3
 801439c:	021b      	lsls	r3, r3, #8
 801439e:	b21a      	sxth	r2, r3
 80143a0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80143a4:	3305      	adds	r3, #5
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	b21b      	sxth	r3, r3
 80143aa:	4313      	orrs	r3, r2
 80143ac:	b21b      	sxth	r3, r3
 80143ae:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 80143b2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80143b6:	3306      	adds	r3, #6
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	b21b      	sxth	r3, r3
 80143bc:	021b      	lsls	r3, r3, #8
 80143be:	b21a      	sxth	r2, r3
 80143c0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80143c4:	3307      	adds	r3, #7
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	b21b      	sxth	r3, r3
 80143ca:	4313      	orrs	r3, r2
 80143cc:	b21b      	sxth	r3, r3
 80143ce:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 80143d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80143d6:	3308      	adds	r3, #8
 80143d8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 80143dc:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 80143e0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80143e4:	699b      	ldr	r3, [r3, #24]
 80143e6:	3b08      	subs	r3, #8
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d910      	bls.n	801440e <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 80143ec:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 80143f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80143f4:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 80143f6:	3b08      	subs	r3, #8
 80143f8:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 80143fc:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 8014400:	499d      	ldr	r1, [pc, #628]	@ (8014678 <mg_tls_client_recv_cert_verify+0x3a8>)
 8014402:	6800      	ldr	r0, [r0, #0]
 8014404:	f7ef fd58 	bl	8003eb8 <mg_error>
    return -1;
 8014408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801440c:	e179      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 801440e:	4b9b      	ldr	r3, [pc, #620]	@ (801467c <mg_tls_client_recv_cert_verify+0x3ac>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b03      	cmp	r3, #3
 8014414:	dd0e      	ble.n	8014434 <mg_tls_client_recv_cert_verify+0x164>
 8014416:	4b9a      	ldr	r3, [pc, #616]	@ (8014680 <mg_tls_client_recv_cert_verify+0x3b0>)
 8014418:	f642 52a5 	movw	r2, #11685	@ 0x2da5
 801441c:	4999      	ldr	r1, [pc, #612]	@ (8014684 <mg_tls_client_recv_cert_verify+0x3b4>)
 801441e:	2004      	movs	r0, #4
 8014420:	f7f4 fec4 	bl	80091ac <mg_log_prefix>
 8014424:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8014428:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801442c:	4619      	mov	r1, r3
 801442e:	4896      	ldr	r0, [pc, #600]	@ (8014688 <mg_tls_client_recv_cert_verify+0x3b8>)
 8014430:	f7f4 ff0c 	bl	800924c <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 8014434:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8014438:	f640 0204 	movw	r2, #2052	@ 0x804
 801443c:	4293      	cmp	r3, r2
 801443e:	d173      	bne.n	8014528 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8014440:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014444:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8014448:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801444c:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8014450:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8014454:	4619      	mov	r1, r3
 8014456:	f7fc fe2d 	bl	80110b4 <mg_der_parse>
 801445a:	4603      	mov	r3, r0
 801445c:	2b00      	cmp	r3, #0
 801445e:	dd1d      	ble.n	801449c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8014460:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8014464:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8014468:	4611      	mov	r1, r2
 801446a:	4618      	mov	r0, r3
 801446c:	f7fc fe82 	bl	8011174 <mg_der_next>
 8014470:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8014472:	2b00      	cmp	r3, #0
 8014474:	dd12      	ble.n	801449c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8014476:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 801447a:	2b02      	cmp	r3, #2
 801447c:	d10e      	bne.n	801449c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801447e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8014482:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8014486:	4611      	mov	r1, r2
 8014488:	4618      	mov	r0, r3
 801448a:	f7fc fe73 	bl	8011174 <mg_der_next>
 801448e:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8014490:	2b00      	cmp	r3, #0
 8014492:	dd03      	ble.n	801449c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8014494:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8014498:	2b02      	cmp	r3, #2
 801449a:	d00a      	beq.n	80144b2 <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 801449c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80144a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80144a4:	4979      	ldr	r1, [pc, #484]	@ (801468c <mg_tls_client_recv_cert_verify+0x3bc>)
 80144a6:	6818      	ldr	r0, [r3, #0]
 80144a8:	f7ef fd06 	bl	8003eb8 <mg_error>
      return -1;
 80144ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80144b0:	e127      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 80144b2:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 80144b6:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 80144ba:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 80144be:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 80144c2:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 80144c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80144ca:	9203      	str	r2, [sp, #12]
 80144cc:	f107 0208 	add.w	r2, r7, #8
 80144d0:	9202      	str	r2, [sp, #8]
 80144d2:	9301      	str	r3, [sp, #4]
 80144d4:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80144d8:	9300      	str	r3, [sp, #0]
 80144da:	462b      	mov	r3, r5
 80144dc:	4622      	mov	r2, r4
 80144de:	f003 fefe 	bl	80182de <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 80144e2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80144e6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80144ea:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80144ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80144f0:	d00a      	beq.n	8014508 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 80144f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80144f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80144fa:	4965      	ldr	r1, [pc, #404]	@ (8014690 <mg_tls_client_recv_cert_verify+0x3c0>)
 80144fc:	6818      	ldr	r0, [r3, #0]
 80144fe:	f7ef fcdb 	bl	8003eb8 <mg_error>
      return -1;
 8014502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014506:	e0fc      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 8014508:	4b5c      	ldr	r3, [pc, #368]	@ (801467c <mg_tls_client_recv_cert_verify+0x3ac>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b02      	cmp	r3, #2
 801450e:	f340 80f0 	ble.w	80146f2 <mg_tls_client_recv_cert_verify+0x422>
 8014512:	4b5b      	ldr	r3, [pc, #364]	@ (8014680 <mg_tls_client_recv_cert_verify+0x3b0>)
 8014514:	f642 52ba 	movw	r2, #11706	@ 0x2dba
 8014518:	495a      	ldr	r1, [pc, #360]	@ (8014684 <mg_tls_client_recv_cert_verify+0x3b4>)
 801451a:	2003      	movs	r0, #3
 801451c:	f7f4 fe46 	bl	80091ac <mg_log_prefix>
 8014520:	485c      	ldr	r0, [pc, #368]	@ (8014694 <mg_tls_client_recv_cert_verify+0x3c4>)
 8014522:	f7f4 fe93 	bl	800924c <mg_log>
 8014526:	e0e4      	b.n	80146f2 <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 8014528:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 801452c:	f240 4203 	movw	r2, #1027	@ 0x403
 8014530:	4293      	cmp	r3, r2
 8014532:	f040 80c8 	bne.w	80146c6 <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 8014536:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801453a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801453e:	4619      	mov	r1, r3
 8014540:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8014544:	f7fc fe91 	bl	801126a <mg_der_to_tlv>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	da0a      	bge.n	8014564 <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 801454e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8014552:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014556:	4950      	ldr	r1, [pc, #320]	@ (8014698 <mg_tls_client_recv_cert_verify+0x3c8>)
 8014558:	6818      	ldr	r0, [r3, #0]
 801455a:	f7ef fcad 	bl	8003eb8 <mg_error>
      return -1;
 801455e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014562:	e0ce      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 8014564:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8014568:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 801456c:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8014570:	4618      	mov	r0, r3
 8014572:	f7fc fe7a 	bl	801126a <mg_der_to_tlv>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	da0a      	bge.n	8014592 <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 801457c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8014580:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014584:	4945      	ldr	r1, [pc, #276]	@ (801469c <mg_tls_client_recv_cert_verify+0x3cc>)
 8014586:	6818      	ldr	r0, [r3, #0]
 8014588:	f7ef fc96 	bl	8003eb8 <mg_error>
      return -1;
 801458c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014590:	e0b7      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 8014592:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8014596:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801459a:	18d0      	adds	r0, r2, r3
 801459c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80145a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80145a4:	1ad3      	subs	r3, r2, r3
 80145a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80145aa:	4619      	mov	r1, r3
 80145ac:	f7fc fe5d 	bl	801126a <mg_der_to_tlv>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	da0a      	bge.n	80145cc <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 80145b6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80145ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80145be:	4938      	ldr	r1, [pc, #224]	@ (80146a0 <mg_tls_client_recv_cert_verify+0x3d0>)
 80145c0:	6818      	ldr	r0, [r3, #0]
 80145c2:	f7ef fc79 	bl	8003eb8 <mg_error>
      return -1;
 80145c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80145ca:	e09a      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 80145cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80145d0:	2b20      	cmp	r3, #32
 80145d2:	d90a      	bls.n	80145ea <mg_tls_client_recv_cert_verify+0x31a>
 80145d4:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80145d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80145dc:	3b20      	subs	r3, #32
 80145de:	4413      	add	r3, r2
 80145e0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80145e4:	2320      	movs	r3, #32
 80145e6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 80145ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80145ee:	2b20      	cmp	r3, #32
 80145f0:	d90a      	bls.n	8014608 <mg_tls_client_recv_cert_verify+0x338>
 80145f2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80145f6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80145fa:	3b20      	subs	r3, #32
 80145fc:	4413      	add	r3, r2
 80145fe:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8014602:	2320      	movs	r3, #32
 8014604:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 8014608:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 801460c:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8014610:	f107 0308 	add.w	r3, r7, #8
 8014614:	4618      	mov	r0, r3
 8014616:	f00a f812 	bl	801e63e <memmove>
    memmove(sig + 32, s.value, s.len);
 801461a:	f107 0308 	add.w	r3, r7, #8
 801461e:	3320      	adds	r3, #32
 8014620:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8014624:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8014628:	4618      	mov	r0, r3
 801462a:	f00a f808 	bl	801e63e <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 801462e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8014632:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 8014636:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 801463a:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 801463e:	f004 fe7d 	bl	801933c <mg_uecc_secp256r1>
 8014642:	4602      	mov	r2, r0
 8014644:	f107 0308 	add.w	r3, r7, #8
 8014648:	9200      	str	r2, [sp, #0]
 801464a:	2220      	movs	r2, #32
 801464c:	4629      	mov	r1, r5
 801464e:	4620      	mov	r0, r4
 8014650:	f006 f810 	bl	801a674 <mg_uecc_verify>
 8014654:	4603      	mov	r3, r0
 8014656:	2b01      	cmp	r3, #1
 8014658:	d026      	beq.n	80146a8 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 801465a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801465e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014662:	4910      	ldr	r1, [pc, #64]	@ (80146a4 <mg_tls_client_recv_cert_verify+0x3d4>)
 8014664:	6818      	ldr	r0, [r3, #0]
 8014666:	f7ef fc27 	bl	8003eb8 <mg_error>
      return -1;
 801466a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801466e:	e048      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
 8014670:	080215c0 	.word	0x080215c0
 8014674:	080215f8 	.word	0x080215f8
 8014678:	0802162c 	.word	0x0802162c
 801467c:	20000254 	.word	0x20000254
 8014680:	08022a80 	.word	0x08022a80
 8014684:	0801f338 	.word	0x0801f338
 8014688:	08021664 	.word	0x08021664
 801468c:	08021694 	.word	0x08021694
 8014690:	080216a8 	.word	0x080216a8
 8014694:	080216d8 	.word	0x080216d8
 8014698:	08021704 	.word	0x08021704
 801469c:	08021738 	.word	0x08021738
 80146a0:	0802175c 	.word	0x0802175c
 80146a4:	08021784 	.word	0x08021784
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 80146a8:	4b18      	ldr	r3, [pc, #96]	@ (801470c <mg_tls_client_recv_cert_verify+0x43c>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	2b02      	cmp	r3, #2
 80146ae:	dd20      	ble.n	80146f2 <mg_tls_client_recv_cert_verify+0x422>
 80146b0:	4b17      	ldr	r3, [pc, #92]	@ (8014710 <mg_tls_client_recv_cert_verify+0x440>)
 80146b2:	f642 52d7 	movw	r2, #11735	@ 0x2dd7
 80146b6:	4917      	ldr	r1, [pc, #92]	@ (8014714 <mg_tls_client_recv_cert_verify+0x444>)
 80146b8:	2003      	movs	r0, #3
 80146ba:	f7f4 fd77 	bl	80091ac <mg_log_prefix>
 80146be:	4816      	ldr	r0, [pc, #88]	@ (8014718 <mg_tls_client_recv_cert_verify+0x448>)
 80146c0:	f7f4 fdc4 	bl	800924c <mg_log>
 80146c4:	e015      	b.n	80146f2 <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 80146c6:	4b11      	ldr	r3, [pc, #68]	@ (801470c <mg_tls_client_recv_cert_verify+0x43c>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	dd0e      	ble.n	80146ec <mg_tls_client_recv_cert_verify+0x41c>
 80146ce:	4b10      	ldr	r3, [pc, #64]	@ (8014710 <mg_tls_client_recv_cert_verify+0x440>)
 80146d0:	f642 52e2 	movw	r2, #11746	@ 0x2de2
 80146d4:	490f      	ldr	r1, [pc, #60]	@ (8014714 <mg_tls_client_recv_cert_verify+0x444>)
 80146d6:	2001      	movs	r0, #1
 80146d8:	f7f4 fd68 	bl	80091ac <mg_log_prefix>
 80146dc:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80146e0:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 80146e4:	4619      	mov	r1, r3
 80146e6:	480d      	ldr	r0, [pc, #52]	@ (801471c <mg_tls_client_recv_cert_verify+0x44c>)
 80146e8:	f7f4 fdb0 	bl	800924c <mg_log>
              siglen));
    return -1;
 80146ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80146f0:	e007      	b.n	8014702 <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 80146f2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80146f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80146fa:	6818      	ldr	r0, [r3, #0]
 80146fc:	f7fc fe54 	bl	80113a8 <mg_tls_drop_message>
  return 0;
 8014700:	2300      	movs	r3, #0
}
 8014702:	4618      	mov	r0, r3
 8014704:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8014708:	46bd      	mov	sp, r7
 801470a:	bdb0      	pop	{r4, r5, r7, pc}
 801470c:	20000254 	.word	0x20000254
 8014710:	08022a80 	.word	0x08022a80
 8014714:	0801f338 	.word	0x0801f338
 8014718:	080217b4 	.word	0x080217b4
 801471c:	080217e0 	.word	0x080217e0

08014720 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801472e:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7fd fa85 	bl	8011c40 <mg_tls_recv_record>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	da02      	bge.n	8014742 <mg_tls_client_recv_finish+0x22>
    return -1;
 801473c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014740:	e017      	b.n	8014772 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	695b      	ldr	r3, [r3, #20]
 801474a:	4413      	add	r3, r2
 801474c:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b14      	cmp	r3, #20
 8014754:	d009      	beq.n	801476a <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	461a      	mov	r2, r3
 801475c:	4907      	ldr	r1, [pc, #28]	@ (801477c <mg_tls_client_recv_finish+0x5c>)
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f7ef fbaa 	bl	8003eb8 <mg_error>
    return -1;
 8014764:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014768:	e003      	b.n	8014772 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f7fc fe1c 	bl	80113a8 <mg_tls_drop_message>
  return 0;
 8014770:	2300      	movs	r3, #0
}
 8014772:	4618      	mov	r0, r3
 8014774:	3710      	adds	r7, #16
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	08021818 	.word	0x08021818

08014780 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8014780:	b580      	push	{r7, lr}
 8014782:	b0b4      	sub	sp, #208	@ 0xd0
 8014784:	af02      	add	r7, sp, #8
 8014786:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801478e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  struct mg_iobuf *wio = &tls->send;
 8014792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014796:	3304      	adds	r3, #4
 8014798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801479c:	4b20      	ldr	r3, [pc, #128]	@ (8014820 <mg_tls_client_send_finish+0xa0>)
 801479e:	60fb      	str	r3, [r7, #12]
 80147a0:	f107 0310 	add.w	r3, r7, #16
 80147a4:	2220      	movs	r2, #32
 80147a6:	2100      	movs	r1, #0
 80147a8:	4618      	mov	r0, r3
 80147aa:	f009 ff62 	bl	801e672 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80147ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80147b2:	f103 0120 	add.w	r1, r3, #32
 80147b6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80147ba:	2270      	movs	r2, #112	@ 0x70
 80147bc:	4618      	mov	r0, r3
 80147be:	f009 ff3e 	bl	801e63e <memmove>
  mg_sha256_final(hash, &sha256);
 80147c2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80147c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80147ca:	4611      	mov	r1, r2
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fa fc7c 	bl	800f0ca <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 80147d2:	f107 000c 	add.w	r0, r7, #12
 80147d6:	3004      	adds	r0, #4
 80147d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80147dc:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 80147e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80147e4:	2220      	movs	r2, #32
 80147e6:	9200      	str	r2, [sp, #0]
 80147e8:	2220      	movs	r2, #32
 80147ea:	f7fa fdc2 	bl	800f372 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 80147ee:	f107 010c 	add.w	r1, r7, #12
 80147f2:	2316      	movs	r3, #22
 80147f4:	2224      	movs	r2, #36	@ 0x24
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f7fd f926 	bl	8011a48 <mg_tls_encrypt>
  mg_io_send(c, wio->buf, wio->len);
 80147fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014800:	6819      	ldr	r1, [r3, #0]
 8014802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	461a      	mov	r2, r3
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7f6 fd2e 	bl	800b26c <mg_io_send>
  wio->len = 0;
 8014810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014814:	2200      	movs	r2, #0
 8014816:	609a      	str	r2, [r3, #8]
}
 8014818:	bf00      	nop
 801481a:	37c8      	adds	r7, #200	@ 0xc8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20000014 	.word	0x20000014

08014824 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 8014824:	b580      	push	{r7, lr}
 8014826:	b0e4      	sub	sp, #400	@ 0x190
 8014828:	af00      	add	r7, sp, #0
 801482a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801482e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014832:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014834:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014838:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014842:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 8014846:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	2b05      	cmp	r3, #5
 801484e:	f200 80da 	bhi.w	8014a06 <mg_tls_client_handshake+0x1e2>
 8014852:	a201      	add	r2, pc, #4	@ (adr r2, 8014858 <mg_tls_client_handshake+0x34>)
 8014854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014858:	08014871 	.word	0x08014871
 801485c:	08014887 	.word	0x08014887
 8014860:	080148a5 	.word	0x080148a5
 8014864:	080148c3 	.word	0x080148c3
 8014868:	080148e1 	.word	0x080148e1
 801486c:	080148ff 	.word	0x080148ff
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 8014870:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014874:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014878:	6818      	ldr	r0, [r3, #0]
 801487a:	f7fe f8e9 	bl	8012a50 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801487e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014882:	2201      	movs	r2, #1
 8014884:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8014886:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801488a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801488e:	6818      	ldr	r0, [r3, #0]
 8014890:	f7fe fad0 	bl	8012e34 <mg_tls_client_recv_hello>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	f2c0 80c2 	blt.w	8014a20 <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 801489c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80148a0:	2202      	movs	r2, #2
 80148a2:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 80148a4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80148a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80148ac:	6818      	ldr	r0, [r3, #0]
 80148ae:	f7fe fbfb 	bl	80130a8 <mg_tls_client_recv_ext>
 80148b2:	4603      	mov	r3, r0
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f2c0 80b5 	blt.w	8014a24 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 80148ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80148be:	2203      	movs	r2, #3
 80148c0:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 80148c2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80148c6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80148ca:	6818      	ldr	r0, [r3, #0]
 80148cc:	f7ff fa82 	bl	8013dd4 <mg_tls_client_recv_cert>
 80148d0:	4603      	mov	r3, r0
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f2c0 80a8 	blt.w	8014a28 <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 80148d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80148dc:	2204      	movs	r2, #4
 80148de:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 80148e0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80148e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80148e8:	6818      	ldr	r0, [r3, #0]
 80148ea:	f7ff fcf1 	bl	80142d0 <mg_tls_client_recv_cert_verify>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f2c0 809b 	blt.w	8014a2c <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISHED;
 80148f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80148fa:	2205      	movs	r2, #5
 80148fc:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISHED:
      if (mg_tls_client_recv_finish(c) < 0) {
 80148fe:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014902:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014906:	6818      	ldr	r0, [r3, #0]
 8014908:	f7ff ff0a 	bl	8014720 <mg_tls_client_recv_finish>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	f2c0 808e 	blt.w	8014a30 <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 8014914:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014918:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801491c:	2b00      	cmp	r3, #0
 801491e:	d04b      	beq.n	80149b8 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 8014920:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014924:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8014928:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801492c:	22c0      	movs	r2, #192	@ 0xc0
 801492e:	4619      	mov	r1, r3
 8014930:	f009 ffd5 	bl	801e8de <memcpy>
        mg_tls_generate_application_keys(c);
 8014934:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014938:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801493c:	6818      	ldr	r0, [r3, #0]
 801493e:	f7fc ff6b 	bl	8011818 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 8014942:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014946:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 801494a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801494e:	4610      	mov	r0, r2
 8014950:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8014954:	22c0      	movs	r2, #192	@ 0xc0
 8014956:	4619      	mov	r1, r3
 8014958:	f009 ffc1 	bl	801e8de <memcpy>
        tls->enc = hs_keys;
 801495c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014960:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8014964:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8014968:	22c0      	movs	r2, #192	@ 0xc0
 801496a:	4618      	mov	r0, r3
 801496c:	f009 ffb7 	bl	801e8de <memcpy>
        mg_tls_server_send_cert(c);
 8014970:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014974:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014978:	6818      	ldr	r0, [r3, #0]
 801497a:	f7fd fd73 	bl	8012464 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801497e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014982:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014986:	2101      	movs	r1, #1
 8014988:	6818      	ldr	r0, [r3, #0]
 801498a:	f7fd fe91 	bl	80126b0 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801498e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014992:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014996:	6818      	ldr	r0, [r3, #0]
 8014998:	f7ff fef2 	bl	8014780 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 801499c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80149a0:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 80149a4:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 80149a8:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80149ac:	4611      	mov	r1, r2
 80149ae:	22c0      	movs	r2, #192	@ 0xc0
 80149b0:	4618      	mov	r0, r3
 80149b2:	f009 ff94 	bl	801e8de <memcpy>
 80149b6:	e00d      	b.n	80149d4 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 80149b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80149bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80149c0:	6818      	ldr	r0, [r3, #0]
 80149c2:	f7ff fedd 	bl	8014780 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 80149c6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80149ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80149ce:	6818      	ldr	r0, [r3, #0]
 80149d0:	f7fc ff22 	bl	8011818 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 80149d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80149d8:	2206      	movs	r2, #6
 80149da:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 80149dc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80149e0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80149ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80149ee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 80149f2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80149f6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80149fa:	2200      	movs	r2, #0
 80149fc:	2106      	movs	r1, #6
 80149fe:	6818      	ldr	r0, [r3, #0]
 8014a00:	f7ef fa39 	bl	8003e76 <mg_call>
      break;
 8014a04:	e015      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8014a06:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8014a12:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014a16:	4909      	ldr	r1, [pc, #36]	@ (8014a3c <mg_tls_client_handshake+0x218>)
 8014a18:	6818      	ldr	r0, [r3, #0]
 8014a1a:	f7ef fa4d 	bl	8003eb8 <mg_error>
      break;
 8014a1e:	e008      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
        break;
 8014a20:	bf00      	nop
 8014a22:	e006      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
        break;
 8014a24:	bf00      	nop
 8014a26:	e004      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
        break;
 8014a28:	bf00      	nop
 8014a2a:	e002      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
        break;
 8014a2c:	bf00      	nop
 8014a2e:	e000      	b.n	8014a32 <mg_tls_client_handshake+0x20e>
        break;
 8014a30:	bf00      	nop
  }
}
 8014a32:	bf00      	nop
 8014a34:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	08021844 	.word	0x08021844

08014a40 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014a4e:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	781b      	ldrb	r3, [r3, #0]
 8014a54:	2b07      	cmp	r3, #7
 8014a56:	d002      	beq.n	8014a5e <mg_tls_server_handshake+0x1e>
 8014a58:	2b08      	cmp	r3, #8
 8014a5a:	d01c      	beq.n	8014a96 <mg_tls_server_handshake+0x56>
 8014a5c:	e02f      	b.n	8014abe <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7fd faac 	bl	8011fbc <mg_tls_server_recv_hello>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	db31      	blt.n	8014ace <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7fd fc24 	bl	80122b8 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7fc fd81 	bl	8011578 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7fd fcd2 	bl	8012420 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f7fd fcf1 	bl	8012464 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 8014a82:	2100      	movs	r1, #0
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f7fd fe13 	bl	80126b0 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f7fd ff44 	bl	8012918 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2208      	movs	r2, #8
 8014a94:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f7fd ff9a 	bl	80129d0 <mg_tls_server_recv_finish>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	db17      	blt.n	8014ad2 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7fc feb8 	bl	8011818 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2209      	movs	r2, #9
 8014aac:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8014aae:	687a      	ldr	r2, [r7, #4]
 8014ab0:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8014ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014ab8:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8014abc:	e00a      	b.n	8014ad4 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	4905      	ldr	r1, [pc, #20]	@ (8014adc <mg_tls_server_handshake+0x9c>)
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f7ef f9f6 	bl	8003eb8 <mg_error>
      break;
 8014acc:	e002      	b.n	8014ad4 <mg_tls_server_handshake+0x94>
        return;
 8014ace:	bf00      	nop
 8014ad0:	e000      	b.n	8014ad4 <mg_tls_server_handshake+0x94>
        return;
 8014ad2:	bf00      	nop
  }
}
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	08021860 	.word	0x08021860

08014ae0 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  if (c->is_client) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014aee:	f003 0302 	and.w	r3, r3, #2
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d003      	beq.n	8014b00 <mg_tls_handshake+0x20>
    mg_tls_client_handshake(c);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f7ff fe93 	bl	8014824 <mg_tls_client_handshake>
  } else {
    mg_tls_server_handshake(c);
  }
}
 8014afe:	e002      	b.n	8014b06 <mg_tls_handshake+0x26>
    mg_tls_server_handshake(c);
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f7ff ff9d 	bl	8014a40 <mg_tls_server_handshake>
}
 8014b06:	bf00      	nop
 8014b08:	3708      	adds	r7, #8
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
	...

08014b10 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 8014b10:	b590      	push	{r4, r7, lr}
 8014b12:	b09b      	sub	sp, #108	@ 0x6c
 8014b14:	af02      	add	r7, sp, #8
 8014b16:	f107 0410 	add.w	r4, r7, #16
 8014b1a:	e884 0003 	stmia.w	r4, {r0, r1}
 8014b1e:	f107 0108 	add.w	r1, r7, #8
 8014b22:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 8014b2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014b32:	4946      	ldr	r1, [pc, #280]	@ (8014c4c <mg_parse_pem+0x13c>)
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7fb fd07 	bl	8010548 <mg_str_s>
 8014b3a:	f107 0318 	add.w	r3, r7, #24
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014b44:	cb0c      	ldmia	r3, {r2, r3}
 8014b46:	f107 0110 	add.w	r1, r7, #16
 8014b4a:	c903      	ldmia	r1, {r0, r1}
 8014b4c:	f7fb fe06 	bl	801075c <mg_match>
 8014b50:	4603      	mov	r3, r0
 8014b52:	f083 0301 	eor.w	r3, r3, #1
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d00f      	beq.n	8014b7c <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8014b5c:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8014b5e:	4638      	mov	r0, r7
 8014b60:	f107 0310 	add.w	r3, r7, #16
 8014b64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8014b68:	f7fb fd38 	bl	80105dc <mg_strdup>
 8014b6c:	4622      	mov	r2, r4
 8014b6e:	463b      	mov	r3, r7
 8014b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b74:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e062      	b.n	8014c42 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8014b7c:	f107 0308 	add.w	r3, r7, #8
 8014b80:	cb0c      	ldmia	r3, {r2, r3}
 8014b82:	f107 0120 	add.w	r1, r7, #32
 8014b86:	c903      	ldmia	r1, {r0, r1}
 8014b88:	f7fb fd5f 	bl	801064a <mg_strcmp>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d10a      	bne.n	8014ba8 <mg_parse_pem+0x98>
 8014b92:	f107 0308 	add.w	r3, r7, #8
 8014b96:	cb0c      	ldmia	r3, {r2, r3}
 8014b98:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014b9c:	c903      	ldmia	r1, {r0, r1}
 8014b9e:	f7fb fd54 	bl	801064a <mg_strcmp>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d002      	beq.n	8014bae <mg_parse_pem+0x9e>
    return -1;  // bad label
 8014ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014bac:	e049      	b.n	8014c42 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 8014bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	2001      	movs	r0, #1
 8014bb4:	f009 fa88 	bl	801e0c8 <calloc>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8014bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d102      	bne.n	8014bc8 <mg_parse_pem+0xb8>
    return -1;
 8014bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014bc6:	e03c      	b.n	8014c42 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8014bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014bcc:	e01c      	b.n	8014c08 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 8014bce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	2b20      	cmp	r3, #32
 8014bd4:	d014      	beq.n	8014c00 <mg_parse_pem+0xf0>
 8014bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bd8:	781b      	ldrb	r3, [r3, #0]
 8014bda:	2b0a      	cmp	r3, #10
 8014bdc:	d010      	beq.n	8014c00 <mg_parse_pem+0xf0>
 8014bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	2b0d      	cmp	r3, #13
 8014be4:	d00c      	beq.n	8014c00 <mg_parse_pem+0xf0>
 8014be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	2b09      	cmp	r3, #9
 8014bec:	d008      	beq.n	8014c00 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 8014bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bf0:	1c5a      	adds	r2, r3, #1
 8014bf2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8014bf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014bf6:	4413      	add	r3, r2
 8014bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014bfa:	7812      	ldrb	r2, [r2, #0]
 8014bfc:	701a      	strb	r2, [r3, #0]
 8014bfe:	e000      	b.n	8014c02 <mg_parse_pem+0xf2>
      continue;
 8014c00:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8014c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c04:	3301      	adds	r3, #1
 8014c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0c:	4413      	add	r3, r2
 8014c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d3dc      	bcc.n	8014bce <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 8014c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014c16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014c18:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8014c1a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014c1c:	f7ef f84c 	bl	8003cb8 <mg_base64_decode>
 8014c20:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 8014c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d105      	bne.n	8014c34 <mg_parse_pem+0x124>
    free(s);
 8014c28:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014c2a:	f009 fa71 	bl	801e110 <free>
    return -1;
 8014c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014c32:	e006      	b.n	8014c42 <mg_parse_pem+0x132>
  }
  der->buf = s;
 8014c34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014c38:	601a      	str	r2, [r3, #0]
  der->len = m;
 8014c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014c3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8014c40:	2300      	movs	r3, #0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3764      	adds	r7, #100	@ 0x64
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd90      	pop	{r4, r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	0802187c 	.word	0x0802187c

08014c50 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b090      	sub	sp, #64	@ 0x40
 8014c54:	af02      	add	r7, sp, #8
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 8014c5a:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8014c5e:	2001      	movs	r0, #1
 8014c60:	f009 fa32 	bl	801e0c8 <calloc>
 8014c64:	4603      	mov	r3, r0
 8014c66:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 8014c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d104      	bne.n	8014c78 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 8014c6e:	49a5      	ldr	r1, [pc, #660]	@ (8014f04 <mg_tls_init+0x2b4>)
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7ef f921 	bl	8003eb8 <mg_error>
    return;
 8014c76:	e141      	b.n	8014efc <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014c7e:	f003 0302 	and.w	r3, r3, #2
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <mg_tls_init+0x3c>
 8014c88:	2200      	movs	r2, #0
 8014c8a:	e000      	b.n	8014c8e <mg_tls_init+0x3e>
 8014c8c:	2207      	movs	r2, #7
  tls->state =
 8014c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c90:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	6a1a      	ldr	r2, [r3, #32]
 8014c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c98:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ca0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8014caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014cae:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014cb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014cbc:	b2d9      	uxtb	r1, r3
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8014cc4:	f361 1386 	bfi	r3, r1, #6, #1
 8014cc8:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8014ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cce:	3320      	adds	r3, #32
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7f9 ff7d 	bl	800ebd0 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	69db      	ldr	r3, [r3, #28]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d018      	beq.n	8014d10 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	69db      	ldr	r3, [r3, #28]
 8014ce2:	2bfc      	cmp	r3, #252	@ 0xfc
 8014ce4:	d904      	bls.n	8014cf0 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 8014ce6:	4988      	ldr	r1, [pc, #544]	@ (8014f08 <mg_tls_init+0x2b8>)
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7ef f8e5 	bl	8003eb8 <mg_error>
      return;
 8014cee:	e105      	b.n	8014efc <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 8014cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cf2:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	699b      	ldr	r3, [r3, #24]
 8014cfa:	22fd      	movs	r2, #253	@ 0xfd
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	f009 fcdf 	bl	801e6c0 <strncpy>
    tls->hostname[opts->name.len] = 0;
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	69db      	ldr	r3, [r3, #28]
 8014d06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014d08:	4413      	add	r3, r2
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d023      	beq.n	8014d60 <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 8014d18:	f107 0314 	add.w	r3, r7, #20
 8014d1c:	497b      	ldr	r1, [pc, #492]	@ (8014f0c <mg_tls_init+0x2bc>)
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f7fb fc12 	bl	8010548 <mg_str_s>
 8014d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d26:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014d2a:	6839      	ldr	r1, [r7, #0]
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	f107 0314 	add.w	r3, r7, #20
 8014d32:	cb0c      	ldmia	r3, {r2, r3}
 8014d34:	c903      	ldmia	r1, {r0, r1}
 8014d36:	f7ff feeb 	bl	8014b10 <mg_parse_pem>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	da0f      	bge.n	8014d60 <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 8014d40:	4b73      	ldr	r3, [pc, #460]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f340 80d0 	ble.w	8014eea <mg_tls_init+0x29a>
 8014d4a:	4b72      	ldr	r3, [pc, #456]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014d4c:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 8014d50:	4971      	ldr	r1, [pc, #452]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014d52:	2001      	movs	r0, #1
 8014d54:	f7f4 fa2a 	bl	80091ac <mg_log_prefix>
 8014d58:	4870      	ldr	r0, [pc, #448]	@ (8014f1c <mg_tls_init+0x2cc>)
 8014d5a:	f7f4 fa77 	bl	800924c <mg_log>
      return;
 8014d5e:	e0c4      	b.n	8014eea <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	689b      	ldr	r3, [r3, #8]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d10f      	bne.n	8014d88 <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 8014d68:	4b69      	ldr	r3, [pc, #420]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	2b03      	cmp	r3, #3
 8014d6e:	f340 80be 	ble.w	8014eee <mg_tls_init+0x29e>
 8014d72:	4b68      	ldr	r3, [pc, #416]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014d74:	f642 62af 	movw	r2, #11951	@ 0x2eaf
 8014d78:	4967      	ldr	r1, [pc, #412]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014d7a:	2004      	movs	r0, #4
 8014d7c:	f7f4 fa16 	bl	80091ac <mg_log_prefix>
 8014d80:	4867      	ldr	r0, [pc, #412]	@ (8014f20 <mg_tls_init+0x2d0>)
 8014d82:	f7f4 fa63 	bl	800924c <mg_log>
    return;
 8014d86:	e0b2      	b.n	8014eee <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 8014d88:	f107 031c 	add.w	r3, r7, #28
 8014d8c:	495f      	ldr	r1, [pc, #380]	@ (8014f0c <mg_tls_init+0x2bc>)
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fb fbda 	bl	8010548 <mg_str_s>
 8014d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d96:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8014d9a:	6839      	ldr	r1, [r7, #0]
 8014d9c:	9300      	str	r3, [sp, #0]
 8014d9e:	f107 031c 	add.w	r3, r7, #28
 8014da2:	cb0c      	ldmia	r3, {r2, r3}
 8014da4:	3108      	adds	r1, #8
 8014da6:	c903      	ldmia	r1, {r0, r1}
 8014da8:	f7ff feb2 	bl	8014b10 <mg_parse_pem>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	da0f      	bge.n	8014dd2 <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 8014db2:	4b57      	ldr	r3, [pc, #348]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	f340 809b 	ble.w	8014ef2 <mg_tls_init+0x2a2>
 8014dbc:	4b55      	ldr	r3, [pc, #340]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014dbe:	f642 62b5 	movw	r2, #11957	@ 0x2eb5
 8014dc2:	4955      	ldr	r1, [pc, #340]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014dc4:	2001      	movs	r0, #1
 8014dc6:	f7f4 f9f1 	bl	80091ac <mg_log_prefix>
 8014dca:	4854      	ldr	r0, [pc, #336]	@ (8014f1c <mg_tls_init+0x2cc>)
 8014dcc:	f7f4 fa3e 	bl	800924c <mg_log>
    return;
 8014dd0:	e08f      	b.n	8014ef2 <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	691b      	ldr	r3, [r3, #16]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d104      	bne.n	8014de4 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 8014dda:	4952      	ldr	r1, [pc, #328]	@ (8014f24 <mg_tls_init+0x2d4>)
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7ef f86b 	bl	8003eb8 <mg_error>
    return;
 8014de2:	e08b      	b.n	8014efc <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 8014de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014de8:	494f      	ldr	r1, [pc, #316]	@ (8014f28 <mg_tls_init+0x2d8>)
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7fb fbac 	bl	8010548 <mg_str_s>
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	f107 030c 	add.w	r3, r7, #12
 8014df6:	9300      	str	r3, [sp, #0]
 8014df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014dfc:	cb0c      	ldmia	r3, {r2, r3}
 8014dfe:	3110      	adds	r1, #16
 8014e00:	c903      	ldmia	r1, {r0, r1}
 8014e02:	f7ff fe85 	bl	8014b10 <mg_parse_pem>
 8014e06:	4603      	mov	r3, r0
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d150      	bne.n	8014eae <mg_tls_init+0x25e>
    if (key.len < 39) {
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	2b26      	cmp	r3, #38	@ 0x26
 8014e10:	d80e      	bhi.n	8014e30 <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 8014e12:	4b3f      	ldr	r3, [pc, #252]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	dd6d      	ble.n	8014ef6 <mg_tls_init+0x2a6>
 8014e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014e1c:	f642 62c1 	movw	r2, #11969	@ 0x2ec1
 8014e20:	493d      	ldr	r1, [pc, #244]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014e22:	2001      	movs	r0, #1
 8014e24:	f7f4 f9c2 	bl	80091ac <mg_log_prefix>
 8014e28:	4840      	ldr	r0, [pc, #256]	@ (8014f2c <mg_tls_init+0x2dc>)
 8014e2a:	f7f4 fa0f 	bl	800924c <mg_log>
      return;
 8014e2e:	e062      	b.n	8014ef6 <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	2b30      	cmp	r3, #48	@ 0x30
 8014e36:	d105      	bne.n	8014e44 <mg_tls_init+0x1f4>
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	b25b      	sxtb	r3, r3
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	da0e      	bge.n	8014e62 <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8014e44:	4b32      	ldr	r3, [pc, #200]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	dd56      	ble.n	8014efa <mg_tls_init+0x2aa>
 8014e4c:	4b31      	ldr	r3, [pc, #196]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014e4e:	f642 62c7 	movw	r2, #11975	@ 0x2ec7
 8014e52:	4931      	ldr	r1, [pc, #196]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014e54:	2001      	movs	r0, #1
 8014e56:	f7f4 f9a9 	bl	80091ac <mg_log_prefix>
 8014e5a:	4835      	ldr	r0, [pc, #212]	@ (8014f30 <mg_tls_init+0x2e0>)
 8014e5c:	f7f4 f9f6 	bl	800924c <mg_log>
      return;
 8014e60:	e04b      	b.n	8014efa <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	3302      	adds	r3, #2
 8014e66:	2205      	movs	r2, #5
 8014e68:	4932      	ldr	r1, [pc, #200]	@ (8014f34 <mg_tls_init+0x2e4>)
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f009 fbd7 	bl	801e61e <memcmp>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d00d      	beq.n	8014e92 <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 8014e76:	4b26      	ldr	r3, [pc, #152]	@ (8014f10 <mg_tls_init+0x2c0>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	dd09      	ble.n	8014e92 <mg_tls_init+0x242>
 8014e7e:	4b25      	ldr	r3, [pc, #148]	@ (8014f14 <mg_tls_init+0x2c4>)
 8014e80:	f642 62cb 	movw	r2, #11979	@ 0x2ecb
 8014e84:	4924      	ldr	r1, [pc, #144]	@ (8014f18 <mg_tls_init+0x2c8>)
 8014e86:	2001      	movs	r0, #1
 8014e88:	f7f4 f990 	bl	80091ac <mg_log_prefix>
 8014e8c:	482a      	ldr	r0, [pc, #168]	@ (8014f38 <mg_tls_init+0x2e8>)
 8014e8e:	f7f4 f9dd 	bl	800924c <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 8014e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e94:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	3307      	adds	r3, #7
 8014e9c:	2220      	movs	r2, #32
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	f009 fbcd 	bl	801e63e <memmove>
    free((void *) key.buf);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f009 f932 	bl	801e110 <free>
 8014eac:	e026      	b.n	8014efc <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 8014eae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014eb2:	4922      	ldr	r1, [pc, #136]	@ (8014f3c <mg_tls_init+0x2ec>)
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7fb fb47 	bl	8010548 <mg_str_s>
 8014eba:	6839      	ldr	r1, [r7, #0]
 8014ebc:	f107 030c 	add.w	r3, r7, #12
 8014ec0:	9300      	str	r3, [sp, #0]
 8014ec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014ec6:	cb0c      	ldmia	r3, {r2, r3}
 8014ec8:	3110      	adds	r1, #16
 8014eca:	c903      	ldmia	r1, {r0, r1}
 8014ecc:	f7ff fe20 	bl	8014b10 <mg_parse_pem>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d104      	bne.n	8014ee0 <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 8014ed6:	491a      	ldr	r1, [pc, #104]	@ (8014f40 <mg_tls_init+0x2f0>)
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7ee ffed 	bl	8003eb8 <mg_error>
 8014ede:	e00d      	b.n	8014efc <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 8014ee0:	4918      	ldr	r1, [pc, #96]	@ (8014f44 <mg_tls_init+0x2f4>)
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7ee ffe8 	bl	8003eb8 <mg_error>
 8014ee8:	e008      	b.n	8014efc <mg_tls_init+0x2ac>
      return;
 8014eea:	bf00      	nop
 8014eec:	e006      	b.n	8014efc <mg_tls_init+0x2ac>
    return;
 8014eee:	bf00      	nop
 8014ef0:	e004      	b.n	8014efc <mg_tls_init+0x2ac>
    return;
 8014ef2:	bf00      	nop
 8014ef4:	e002      	b.n	8014efc <mg_tls_init+0x2ac>
      return;
 8014ef6:	bf00      	nop
 8014ef8:	e000      	b.n	8014efc <mg_tls_init+0x2ac>
      return;
 8014efa:	bf00      	nop
  }
}
 8014efc:	3738      	adds	r7, #56	@ 0x38
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	080218a0 	.word	0x080218a0
 8014f08:	080218a8 	.word	0x080218a8
 8014f0c:	080218bc 	.word	0x080218bc
 8014f10:	20000254 	.word	0x20000254
 8014f14:	08022aa0 	.word	0x08022aa0
 8014f18:	0801f338 	.word	0x0801f338
 8014f1c:	080218c8 	.word	0x080218c8
 8014f20:	080218e4 	.word	0x080218e4
 8014f24:	080218fc 	.word	0x080218fc
 8014f28:	08021928 	.word	0x08021928
 8014f2c:	08021938 	.word	0x08021938
 8014f30:	08021954 	.word	0x08021954
 8014f34:	08021978 	.word	0x08021978
 8014f38:	08021980 	.word	0x08021980
 8014f3c:	080219a0 	.word	0x080219a0
 8014f40:	080219ac 	.word	0x080219ac
 8014f44:	080219d8 	.word	0x080219d8

08014f48 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014f56:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d010      	beq.n	8014f80 <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3304      	adds	r3, #4
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7f3 fa9f 	bl	80084a6 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f009 f8ce 	bl	801e110 <free>
    free((void *) tls->ca_der.buf);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f009 f8c8 	bl	801e110 <free>
  }
  free(c->tls);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014f86:	4618      	mov	r0, r3
 8014f88:	f009 f8c2 	bl	801e110 <free>
  c->tls = NULL;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8014f94:	bf00      	nop
 8014f96:	3710      	adds	r7, #16
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8014f9c:	b590      	push	{r4, r7, lr}
 8014f9e:	b08d      	sub	sp, #52	@ 0x34
 8014fa0:	af04      	add	r7, sp, #16
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014fae:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 8014fb0:	f06f 0301 	mvn.w	r3, #1
 8014fb4:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8014fbc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	bf14      	ite	ne
 8014fc6:	2301      	movne	r3, #1
 8014fc8:	2300      	moveq	r3, #0
 8014fca:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 8014fcc:	7dfb      	ldrb	r3, [r7, #23]
 8014fce:	f083 0301 	eor.w	r3, r3, #1
 8014fd2:	b2db      	uxtb	r3, r3
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d01b      	beq.n	8015010 <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014fde:	d902      	bls.n	8014fe6 <mg_tls_send+0x4a>
 8014fe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014fe4:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fec:	d902      	bls.n	8014ff4 <mg_tls_send+0x58>
 8014fee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014ff2:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 8014ff4:	2317      	movs	r3, #23
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	68b9      	ldr	r1, [r7, #8]
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	f7fc fd24 	bl	8011a48 <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 8015000:	e006      	b.n	8015010 <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8015002:	69bb      	ldr	r3, [r7, #24]
 8015004:	3304      	adds	r3, #4
 8015006:	69fa      	ldr	r2, [r7, #28]
 8015008:	2100      	movs	r1, #0
 801500a:	4618      	mov	r0, r3
 801500c:	f7f3 fa00 	bl	8008410 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d00b      	beq.n	8015030 <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	6859      	ldr	r1, [r3, #4]
 801501c:	69bb      	ldr	r3, [r7, #24]
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	461a      	mov	r2, r3
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f7f6 f922 	bl	800b26c <mg_io_send>
 8015028:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	2b00      	cmp	r3, #0
 801502e:	dce8      	bgt.n	8015002 <mg_tls_send+0x66>
  }
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d005      	beq.n	8015044 <mg_tls_send+0xa8>
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	f113 0f02 	cmn.w	r3, #2
 801503e:	d101      	bne.n	8015044 <mg_tls_send+0xa8>
 8015040:	2301      	movs	r3, #1
 8015042:	e000      	b.n	8015046 <mg_tls_send+0xaa>
 8015044:	2300      	movs	r3, #0
 8015046:	f003 0301 	and.w	r3, r3, #1
 801504a:	b2d9      	uxtb	r1, r3
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8015052:	f361 13c7 	bfi	r3, r1, #7, #1
 8015056:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801505a:	4b1e      	ldr	r3, [pc, #120]	@ (80150d4 <mg_tls_send+0x138>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	2b03      	cmp	r3, #3
 8015060:	dd26      	ble.n	80150b0 <mg_tls_send+0x114>
 8015062:	4b1d      	ldr	r3, [pc, #116]	@ (80150d8 <mg_tls_send+0x13c>)
 8015064:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 8015068:	491c      	ldr	r1, [pc, #112]	@ (80150dc <mg_tls_send+0x140>)
 801506a:	2004      	movs	r0, #4
 801506c:	f7f4 f89e 	bl	80091ac <mg_log_prefix>
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	69bb      	ldr	r3, [r7, #24]
 8015078:	68db      	ldr	r3, [r3, #12]
 801507a:	461c      	mov	r4, r3
 801507c:	7dfb      	ldrb	r3, [r7, #23]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d001      	beq.n	8015086 <mg_tls_send+0xea>
 8015082:	2354      	movs	r3, #84	@ 0x54
 8015084:	e000      	b.n	8015088 <mg_tls_send+0xec>
 8015086:	2374      	movs	r3, #116	@ 0x74
 8015088:	68fa      	ldr	r2, [r7, #12]
 801508a:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 801508e:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8015092:	b2d2      	uxtb	r2, r2
 8015094:	2a00      	cmp	r2, #0
 8015096:	d001      	beq.n	801509c <mg_tls_send+0x100>
 8015098:	2254      	movs	r2, #84	@ 0x54
 801509a:	e000      	b.n	801509e <mg_tls_send+0x102>
 801509c:	2274      	movs	r2, #116	@ 0x74
 801509e:	9202      	str	r2, [sp, #8]
 80150a0:	9301      	str	r3, [sp, #4]
 80150a2:	69fb      	ldr	r3, [r7, #28]
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	4623      	mov	r3, r4
 80150a8:	4602      	mov	r2, r0
 80150aa:	480d      	ldr	r0, [pc, #52]	@ (80150e0 <mg_tls_send+0x144>)
 80150ac:	f7f4 f8ce 	bl	800924c <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 80150b0:	69fb      	ldr	r3, [r7, #28]
 80150b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80150b6:	d102      	bne.n	80150be <mg_tls_send+0x122>
 80150b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150bc:	e006      	b.n	80150cc <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 80150be:	7dfb      	ldrb	r3, [r7, #23]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d002      	beq.n	80150ca <mg_tls_send+0x12e>
 80150c4:	f06f 0301 	mvn.w	r3, #1
 80150c8:	e000      	b.n	80150cc <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 80150ca:	687b      	ldr	r3, [r7, #4]
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3724      	adds	r7, #36	@ 0x24
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd90      	pop	{r4, r7, pc}
 80150d4:	20000254 	.word	0x20000254
 80150d8:	08022aac 	.word	0x08022aac
 80150dc:	0801f338 	.word	0x0801f338
 80150e0:	08021a00 	.word	0x08021a00

080150e4 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b088      	sub	sp, #32
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
  int r = 0;
 80150f0:	2300      	movs	r3, #0
 80150f2:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80150fa:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f7fc fd9f 	bl	8011c40 <mg_tls_recv_record>
 8015102:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	da01      	bge.n	801510e <mg_tls_recv+0x2a>
    return r;
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	e03a      	b.n	8015184 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8015112:	69bb      	ldr	r3, [r7, #24]
 8015114:	695b      	ldr	r3, [r3, #20]
 8015116:	4413      	add	r3, r2
 8015118:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801511a:	69bb      	ldr	r3, [r7, #24]
 801511c:	7f1b      	ldrb	r3, [r3, #28]
 801511e:	2b17      	cmp	r3, #23
 8015120:	d008      	beq.n	8015134 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	2200      	movs	r2, #0
 8015126:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f7fc f91a 	bl	8011362 <mg_tls_drop_record>
    return MG_IO_WAIT;
 801512e:	f06f 0301 	mvn.w	r3, #1
 8015132:	e027      	b.n	8015184 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d002      	beq.n	8015140 <mg_tls_recv+0x5c>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d101      	bne.n	8015144 <mg_tls_recv+0x60>
 8015140:	2300      	movs	r3, #0
 8015142:	e01f      	b.n	8015184 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8015144:	69bb      	ldr	r3, [r7, #24]
 8015146:	699b      	ldr	r3, [r3, #24]
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	4293      	cmp	r3, r2
 801514c:	bf28      	it	cs
 801514e:	4613      	movcs	r3, r2
 8015150:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 8015152:	693a      	ldr	r2, [r7, #16]
 8015154:	6979      	ldr	r1, [r7, #20]
 8015156:	68b8      	ldr	r0, [r7, #8]
 8015158:	f009 fa71 	bl	801e63e <memmove>
  tls->recv_offset += minlen;
 801515c:	69bb      	ldr	r3, [r7, #24]
 801515e:	695a      	ldr	r2, [r3, #20]
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	441a      	add	r2, r3
 8015164:	69bb      	ldr	r3, [r7, #24]
 8015166:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	699a      	ldr	r2, [r3, #24]
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	1ad2      	subs	r2, r2, r3
 8015170:	69bb      	ldr	r3, [r7, #24]
 8015172:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d102      	bne.n	8015182 <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f7fc f8f0 	bl	8011362 <mg_tls_drop_record>
  }
  return (long) minlen;
 8015182:	693b      	ldr	r3, [r7, #16]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3720      	adds	r7, #32
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}

0801518c <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801519a:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d002      	beq.n	80151a8 <mg_tls_pending+0x1c>
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	699b      	ldr	r3, [r3, #24]
 80151a6:	e000      	b.n	80151aa <mg_tls_pending+0x1e>
 80151a8:	2300      	movs	r3, #0
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3714      	adds	r7, #20
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr

080151b6 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 80151b6:	b480      	push	{r7}
 80151b8:	b083      	sub	sp, #12
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 80151be:	bf00      	nop
 80151c0:	370c      	adds	r7, #12
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr
	...

080151cc <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 80151cc:	b480      	push	{r7}
 80151ce:	b085      	sub	sp, #20
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
 80151d8:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	4a2b      	ldr	r2, [pc, #172]	@ (801528c <initialize_state+0xc0>)
 80151de:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	3304      	adds	r3, #4
 80151e4:	4a2a      	ldr	r2, [pc, #168]	@ (8015290 <initialize_state+0xc4>)
 80151e6:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	3308      	adds	r3, #8
 80151ec:	4a29      	ldr	r2, [pc, #164]	@ (8015294 <initialize_state+0xc8>)
 80151ee:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	330c      	adds	r3, #12
 80151f4:	4a28      	ldr	r2, [pc, #160]	@ (8015298 <initialize_state+0xcc>)
 80151f6:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	3310      	adds	r3, #16
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	6812      	ldr	r2, [r2, #0]
 8015200:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	3314      	adds	r3, #20
 8015206:	68ba      	ldr	r2, [r7, #8]
 8015208:	3204      	adds	r2, #4
 801520a:	6812      	ldr	r2, [r2, #0]
 801520c:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	3318      	adds	r3, #24
 8015212:	68ba      	ldr	r2, [r7, #8]
 8015214:	3208      	adds	r2, #8
 8015216:	6812      	ldr	r2, [r2, #0]
 8015218:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	331c      	adds	r3, #28
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	320c      	adds	r2, #12
 8015222:	6812      	ldr	r2, [r2, #0]
 8015224:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	3320      	adds	r3, #32
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	3210      	adds	r2, #16
 801522e:	6812      	ldr	r2, [r2, #0]
 8015230:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	3324      	adds	r3, #36	@ 0x24
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	3214      	adds	r2, #20
 801523a:	6812      	ldr	r2, [r2, #0]
 801523c:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	3328      	adds	r3, #40	@ 0x28
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	3218      	adds	r2, #24
 8015246:	6812      	ldr	r2, [r2, #0]
 8015248:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	332c      	adds	r3, #44	@ 0x2c
 801524e:	68ba      	ldr	r2, [r7, #8]
 8015250:	321c      	adds	r2, #28
 8015252:	6812      	ldr	r2, [r2, #0]
 8015254:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	3330      	adds	r3, #48	@ 0x30
 801525a:	683a      	ldr	r2, [r7, #0]
 801525c:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	3334      	adds	r3, #52	@ 0x34
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	6812      	ldr	r2, [r2, #0]
 8015266:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	3338      	adds	r3, #56	@ 0x38
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	3204      	adds	r2, #4
 8015270:	6812      	ldr	r2, [r2, #0]
 8015272:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	333c      	adds	r3, #60	@ 0x3c
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	3208      	adds	r2, #8
 801527c:	6812      	ldr	r2, [r2, #0]
 801527e:	601a      	str	r2, [r3, #0]
}
 8015280:	bf00      	nop
 8015282:	3714      	adds	r7, #20
 8015284:	46bd      	mov	sp, r7
 8015286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528a:	4770      	bx	lr
 801528c:	61707865 	.word	0x61707865
 8015290:	3320646e 	.word	0x3320646e
 8015294:	79622d32 	.word	0x79622d32
 8015298:	6b206574 	.word	0x6b206574

0801529c <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801529c:	b480      	push	{r7}
 801529e:	b095      	sub	sp, #84	@ 0x54
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	3304      	adds	r3, #4
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	3308      	adds	r3, #8
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	330c      	adds	r3, #12
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	3310      	adds	r3, #16
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	3314      	adds	r3, #20
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	3318      	adds	r3, #24
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	633b      	str	r3, [r7, #48]	@ 0x30
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	331c      	adds	r3, #28
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	3320      	adds	r3, #32
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	3324      	adds	r3, #36	@ 0x24
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3328      	adds	r3, #40	@ 0x28
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	623b      	str	r3, [r7, #32]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	332c      	adds	r3, #44	@ 0x2c
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	61fb      	str	r3, [r7, #28]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	3330      	adds	r3, #48	@ 0x30
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	61bb      	str	r3, [r7, #24]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	3334      	adds	r3, #52	@ 0x34
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	617b      	str	r3, [r7, #20]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	3338      	adds	r3, #56	@ 0x38
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	613b      	str	r3, [r7, #16]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	333c      	adds	r3, #60	@ 0x3c
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 8015324:	2300      	movs	r3, #0
 8015326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015328:	e182      	b.n	8015630 <core_block+0x394>
    __Q(0, 4, 8, 12);
 801532a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801532e:	4413      	add	r3, r2
 8015330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015332:	69ba      	ldr	r2, [r7, #24]
 8015334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015336:	4053      	eors	r3, r2
 8015338:	61bb      	str	r3, [r7, #24]
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8015340:	61bb      	str	r3, [r7, #24]
 8015342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	4413      	add	r3, r2
 8015348:	62bb      	str	r3, [r7, #40]	@ 0x28
 801534a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801534e:	4053      	eors	r3, r2
 8015350:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015354:	ea4f 5333 	mov.w	r3, r3, ror #20
 8015358:	63bb      	str	r3, [r7, #56]	@ 0x38
 801535a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801535e:	4413      	add	r3, r2
 8015360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015362:	69ba      	ldr	r2, [r7, #24]
 8015364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015366:	4053      	eors	r3, r2
 8015368:	61bb      	str	r3, [r7, #24]
 801536a:	69bb      	ldr	r3, [r7, #24]
 801536c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8015370:	61bb      	str	r3, [r7, #24]
 8015372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015374:	69bb      	ldr	r3, [r7, #24]
 8015376:	4413      	add	r3, r2
 8015378:	62bb      	str	r3, [r7, #40]	@ 0x28
 801537a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801537e:	4053      	eors	r3, r2
 8015380:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015384:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015388:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801538a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801538e:	4413      	add	r3, r2
 8015390:	647b      	str	r3, [r7, #68]	@ 0x44
 8015392:	697a      	ldr	r2, [r7, #20]
 8015394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015396:	4053      	eors	r3, r2
 8015398:	617b      	str	r3, [r7, #20]
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	ea4f 4333 	mov.w	r3, r3, ror #16
 80153a0:	617b      	str	r3, [r7, #20]
 80153a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	4413      	add	r3, r2
 80153a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80153aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80153ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ae:	4053      	eors	r3, r2
 80153b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80153b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153b4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80153b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80153ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80153bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153be:	4413      	add	r3, r2
 80153c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80153c2:	697a      	ldr	r2, [r7, #20]
 80153c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80153c6:	4053      	eors	r3, r2
 80153c8:	617b      	str	r3, [r7, #20]
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	ea4f 6333 	mov.w	r3, r3, ror #24
 80153d0:	617b      	str	r3, [r7, #20]
 80153d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	4413      	add	r3, r2
 80153d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80153da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80153dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153de:	4053      	eors	r3, r2
 80153e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80153e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153e4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80153e8:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 80153ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80153ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ee:	4413      	add	r3, r2
 80153f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80153f2:	693a      	ldr	r2, [r7, #16]
 80153f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153f6:	4053      	eors	r3, r2
 80153f8:	613b      	str	r3, [r7, #16]
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8015400:	613b      	str	r3, [r7, #16]
 8015402:	6a3a      	ldr	r2, [r7, #32]
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	4413      	add	r3, r2
 8015408:	623b      	str	r3, [r7, #32]
 801540a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801540c:	6a3b      	ldr	r3, [r7, #32]
 801540e:	4053      	eors	r3, r2
 8015410:	633b      	str	r3, [r7, #48]	@ 0x30
 8015412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015414:	ea4f 5333 	mov.w	r3, r3, ror #20
 8015418:	633b      	str	r3, [r7, #48]	@ 0x30
 801541a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801541e:	4413      	add	r3, r2
 8015420:	643b      	str	r3, [r7, #64]	@ 0x40
 8015422:	693a      	ldr	r2, [r7, #16]
 8015424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015426:	4053      	eors	r3, r2
 8015428:	613b      	str	r3, [r7, #16]
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8015430:	613b      	str	r3, [r7, #16]
 8015432:	6a3a      	ldr	r2, [r7, #32]
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	4413      	add	r3, r2
 8015438:	623b      	str	r3, [r7, #32]
 801543a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801543c:	6a3b      	ldr	r3, [r7, #32]
 801543e:	4053      	eors	r3, r2
 8015440:	633b      	str	r3, [r7, #48]	@ 0x30
 8015442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015444:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015448:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801544a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801544c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801544e:	4413      	add	r3, r2
 8015450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015456:	4053      	eors	r3, r2
 8015458:	60fb      	str	r3, [r7, #12]
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8015460:	60fb      	str	r3, [r7, #12]
 8015462:	69fa      	ldr	r2, [r7, #28]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	4413      	add	r3, r2
 8015468:	61fb      	str	r3, [r7, #28]
 801546a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	4053      	eors	r3, r2
 8015470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015474:	ea4f 5333 	mov.w	r3, r3, ror #20
 8015478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801547a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547e:	4413      	add	r3, r2
 8015480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015482:	68fa      	ldr	r2, [r7, #12]
 8015484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015486:	4053      	eors	r3, r2
 8015488:	60fb      	str	r3, [r7, #12]
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8015490:	60fb      	str	r3, [r7, #12]
 8015492:	69fa      	ldr	r2, [r7, #28]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	4413      	add	r3, r2
 8015498:	61fb      	str	r3, [r7, #28]
 801549a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	4053      	eors	r3, r2
 80154a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80154a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 80154aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80154ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154ae:	4413      	add	r3, r2
 80154b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80154b6:	4053      	eors	r3, r2
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80154c0:	60fb      	str	r3, [r7, #12]
 80154c2:	6a3a      	ldr	r2, [r7, #32]
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	623b      	str	r3, [r7, #32]
 80154ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80154cc:	6a3b      	ldr	r3, [r7, #32]
 80154ce:	4053      	eors	r3, r2
 80154d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80154d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154d4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80154d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80154da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80154dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154de:	4413      	add	r3, r2
 80154e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80154e2:	68fa      	ldr	r2, [r7, #12]
 80154e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80154e6:	4053      	eors	r3, r2
 80154e8:	60fb      	str	r3, [r7, #12]
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	ea4f 6333 	mov.w	r3, r3, ror #24
 80154f0:	60fb      	str	r3, [r7, #12]
 80154f2:	6a3a      	ldr	r2, [r7, #32]
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	4413      	add	r3, r2
 80154f8:	623b      	str	r3, [r7, #32]
 80154fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80154fc:	6a3b      	ldr	r3, [r7, #32]
 80154fe:	4053      	eors	r3, r2
 8015500:	637b      	str	r3, [r7, #52]	@ 0x34
 8015502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015504:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015508:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801550a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550e:	4413      	add	r3, r2
 8015510:	647b      	str	r3, [r7, #68]	@ 0x44
 8015512:	69ba      	ldr	r2, [r7, #24]
 8015514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015516:	4053      	eors	r3, r2
 8015518:	61bb      	str	r3, [r7, #24]
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8015520:	61bb      	str	r3, [r7, #24]
 8015522:	69fa      	ldr	r2, [r7, #28]
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	4413      	add	r3, r2
 8015528:	61fb      	str	r3, [r7, #28]
 801552a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	4053      	eors	r3, r2
 8015530:	633b      	str	r3, [r7, #48]	@ 0x30
 8015532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015534:	ea4f 5333 	mov.w	r3, r3, ror #20
 8015538:	633b      	str	r3, [r7, #48]	@ 0x30
 801553a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553e:	4413      	add	r3, r2
 8015540:	647b      	str	r3, [r7, #68]	@ 0x44
 8015542:	69ba      	ldr	r2, [r7, #24]
 8015544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015546:	4053      	eors	r3, r2
 8015548:	61bb      	str	r3, [r7, #24]
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8015550:	61bb      	str	r3, [r7, #24]
 8015552:	69fa      	ldr	r2, [r7, #28]
 8015554:	69bb      	ldr	r3, [r7, #24]
 8015556:	4413      	add	r3, r2
 8015558:	61fb      	str	r3, [r7, #28]
 801555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	4053      	eors	r3, r2
 8015560:	633b      	str	r3, [r7, #48]	@ 0x30
 8015562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015564:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015568:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801556a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801556e:	4413      	add	r3, r2
 8015570:	643b      	str	r3, [r7, #64]	@ 0x40
 8015572:	697a      	ldr	r2, [r7, #20]
 8015574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015576:	4053      	eors	r3, r2
 8015578:	617b      	str	r3, [r7, #20]
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8015580:	617b      	str	r3, [r7, #20]
 8015582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	4413      	add	r3, r2
 8015588:	62bb      	str	r3, [r7, #40]	@ 0x28
 801558a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801558e:	4053      	eors	r3, r2
 8015590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015594:	ea4f 5333 	mov.w	r3, r3, ror #20
 8015598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801559a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559e:	4413      	add	r3, r2
 80155a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80155a2:	697a      	ldr	r2, [r7, #20]
 80155a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155a6:	4053      	eors	r3, r2
 80155a8:	617b      	str	r3, [r7, #20]
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	ea4f 6333 	mov.w	r3, r3, ror #24
 80155b0:	617b      	str	r3, [r7, #20]
 80155b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	4413      	add	r3, r2
 80155b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80155ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155be:	4053      	eors	r3, r2
 80155c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80155c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80155c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 80155ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80155cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155ce:	4413      	add	r3, r2
 80155d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155d2:	693a      	ldr	r2, [r7, #16]
 80155d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155d6:	4053      	eors	r3, r2
 80155d8:	613b      	str	r3, [r7, #16]
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	ea4f 4333 	mov.w	r3, r3, ror #16
 80155e0:	613b      	str	r3, [r7, #16]
 80155e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	4413      	add	r3, r2
 80155e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80155ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ee:	4053      	eors	r3, r2
 80155f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80155f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155f4:	ea4f 5333 	mov.w	r3, r3, ror #20
 80155f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80155fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80155fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155fe:	4413      	add	r3, r2
 8015600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015602:	693a      	ldr	r2, [r7, #16]
 8015604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015606:	4053      	eors	r3, r2
 8015608:	613b      	str	r3, [r7, #16]
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	ea4f 6333 	mov.w	r3, r3, ror #24
 8015610:	613b      	str	r3, [r7, #16]
 8015612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	4413      	add	r3, r2
 8015618:	627b      	str	r3, [r7, #36]	@ 0x24
 801561a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801561e:	4053      	eors	r3, r2
 8015620:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015624:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015628:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801562a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801562c:	3301      	adds	r3, #1
 801562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015632:	2b09      	cmp	r3, #9
 8015634:	f77f ae79 	ble.w	801532a <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681a      	ldr	r2, [r3, #0]
 801563c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801563e:	441a      	add	r2, r3
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	601a      	str	r2, [r3, #0]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	3304      	adds	r3, #4
 8015648:	6819      	ldr	r1, [r3, #0]
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	3304      	adds	r3, #4
 801564e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015650:	440a      	add	r2, r1
 8015652:	601a      	str	r2, [r3, #0]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	3308      	adds	r3, #8
 8015658:	6819      	ldr	r1, [r3, #0]
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	3308      	adds	r3, #8
 801565e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015660:	440a      	add	r2, r1
 8015662:	601a      	str	r2, [r3, #0]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	330c      	adds	r3, #12
 8015668:	6819      	ldr	r1, [r3, #0]
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	330c      	adds	r3, #12
 801566e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015670:	440a      	add	r2, r1
 8015672:	601a      	str	r2, [r3, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	3310      	adds	r3, #16
 8015678:	6819      	ldr	r1, [r3, #0]
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	3310      	adds	r3, #16
 801567e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015680:	440a      	add	r2, r1
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	3314      	adds	r3, #20
 8015688:	6819      	ldr	r1, [r3, #0]
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	3314      	adds	r3, #20
 801568e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015690:	440a      	add	r2, r1
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3318      	adds	r3, #24
 8015698:	6819      	ldr	r1, [r3, #0]
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	3318      	adds	r3, #24
 801569e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156a0:	440a      	add	r2, r1
 80156a2:	601a      	str	r2, [r3, #0]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	331c      	adds	r3, #28
 80156a8:	6819      	ldr	r1, [r3, #0]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	331c      	adds	r3, #28
 80156ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156b0:	440a      	add	r2, r1
 80156b2:	601a      	str	r2, [r3, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	3320      	adds	r3, #32
 80156b8:	6819      	ldr	r1, [r3, #0]
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	3320      	adds	r3, #32
 80156be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156c0:	440a      	add	r2, r1
 80156c2:	601a      	str	r2, [r3, #0]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	3324      	adds	r3, #36	@ 0x24
 80156c8:	6819      	ldr	r1, [r3, #0]
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	3324      	adds	r3, #36	@ 0x24
 80156ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156d0:	440a      	add	r2, r1
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	3328      	adds	r3, #40	@ 0x28
 80156d8:	6819      	ldr	r1, [r3, #0]
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	3328      	adds	r3, #40	@ 0x28
 80156de:	6a3a      	ldr	r2, [r7, #32]
 80156e0:	440a      	add	r2, r1
 80156e2:	601a      	str	r2, [r3, #0]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	332c      	adds	r3, #44	@ 0x2c
 80156e8:	6819      	ldr	r1, [r3, #0]
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	332c      	adds	r3, #44	@ 0x2c
 80156ee:	69fa      	ldr	r2, [r7, #28]
 80156f0:	440a      	add	r2, r1
 80156f2:	601a      	str	r2, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	3330      	adds	r3, #48	@ 0x30
 80156f8:	6819      	ldr	r1, [r3, #0]
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	3330      	adds	r3, #48	@ 0x30
 80156fe:	69ba      	ldr	r2, [r7, #24]
 8015700:	440a      	add	r2, r1
 8015702:	601a      	str	r2, [r3, #0]
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	3334      	adds	r3, #52	@ 0x34
 8015708:	6819      	ldr	r1, [r3, #0]
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	3334      	adds	r3, #52	@ 0x34
 801570e:	697a      	ldr	r2, [r7, #20]
 8015710:	440a      	add	r2, r1
 8015712:	601a      	str	r2, [r3, #0]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	3338      	adds	r3, #56	@ 0x38
 8015718:	6819      	ldr	r1, [r3, #0]
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	3338      	adds	r3, #56	@ 0x38
 801571e:	693a      	ldr	r2, [r7, #16]
 8015720:	440a      	add	r2, r1
 8015722:	601a      	str	r2, [r3, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	333c      	adds	r3, #60	@ 0x3c
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	333c      	adds	r3, #60	@ 0x3c
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	440a      	add	r2, r1
 8015732:	601a      	str	r2, [r3, #0]
}
 8015734:	bf00      	nop
 8015736:	3754      	adds	r7, #84	@ 0x54
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8015740:	b480      	push	{r7}
 8015742:	b089      	sub	sp, #36	@ 0x24
 8015744:	af00      	add	r7, sp, #0
 8015746:	60f8      	str	r0, [r7, #12]
 8015748:	60b9      	str	r1, [r7, #8]
 801574a:	607a      	str	r2, [r7, #4]
 801574c:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	089b      	lsrs	r3, r3, #2
 8015752:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8015754:	2300      	movs	r3, #0
 8015756:	61fb      	str	r3, [r7, #28]
 8015758:	e016      	b.n	8015788 <xor_block+0x48>
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	009b      	lsls	r3, r3, #2
 801575e:	68ba      	ldr	r2, [r7, #8]
 8015760:	4413      	add	r3, r2
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	617b      	str	r3, [r7, #20]
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	4413      	add	r3, r2
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	4053      	eors	r3, r2
 8015774:	617b      	str	r3, [r7, #20]
 8015776:	69fb      	ldr	r3, [r7, #28]
 8015778:	009b      	lsls	r3, r3, #2
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	4413      	add	r3, r2
 801577e:	697a      	ldr	r2, [r7, #20]
 8015780:	601a      	str	r2, [r3, #0]
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	3301      	adds	r3, #1
 8015786:	61fb      	str	r3, [r7, #28]
 8015788:	69fa      	ldr	r2, [r7, #28]
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	429a      	cmp	r2, r3
 801578e:	d3e4      	bcc.n	801575a <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	68fa      	ldr	r2, [r7, #12]
 8015796:	4413      	add	r3, r2
 8015798:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	68ba      	ldr	r2, [r7, #8]
 80157a0:	4413      	add	r3, r2
 80157a2:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	687a      	ldr	r2, [r7, #4]
 80157aa:	4413      	add	r3, r2
 80157ac:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	f003 0303 	and.w	r3, r3, #3
 80157b4:	2b03      	cmp	r3, #3
 80157b6:	d026      	beq.n	8015806 <xor_block+0xc6>
 80157b8:	2b03      	cmp	r3, #3
 80157ba:	d846      	bhi.n	801584a <xor_block+0x10a>
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d002      	beq.n	80157c6 <xor_block+0x86>
 80157c0:	2b02      	cmp	r3, #2
 80157c2:	d00a      	beq.n	80157da <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 80157c4:	e041      	b.n	801584a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	781a      	ldrb	r2, [r3, #0]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	4053      	eors	r3, r2
 80157d2:	b2da      	uxtb	r2, r3
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	701a      	strb	r2, [r3, #0]
      break;
 80157d8:	e037      	b.n	801584a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	781a      	ldrb	r2, [r3, #0]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	4053      	eors	r3, r2
 80157e6:	b2da      	uxtb	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	3301      	adds	r3, #1
 80157f0:	7819      	ldrb	r1, [r3, #0]
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	0a1b      	lsrs	r3, r3, #8
 80157f8:	b2da      	uxtb	r2, r3
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	3301      	adds	r3, #1
 80157fe:	404a      	eors	r2, r1
 8015800:	b2d2      	uxtb	r2, r2
 8015802:	701a      	strb	r2, [r3, #0]
      break;
 8015804:	e021      	b.n	801584a <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	781a      	ldrb	r2, [r3, #0]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	b2db      	uxtb	r3, r3
 8015810:	4053      	eors	r3, r2
 8015812:	b2da      	uxtb	r2, r3
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	3301      	adds	r3, #1
 801581c:	7819      	ldrb	r1, [r3, #0]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	0a1b      	lsrs	r3, r3, #8
 8015824:	b2da      	uxtb	r2, r3
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	3301      	adds	r3, #1
 801582a:	404a      	eors	r2, r1
 801582c:	b2d2      	uxtb	r2, r2
 801582e:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	3302      	adds	r3, #2
 8015834:	7819      	ldrb	r1, [r3, #0]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	0c1b      	lsrs	r3, r3, #16
 801583c:	b2da      	uxtb	r2, r3
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	3302      	adds	r3, #2
 8015842:	404a      	eors	r2, r1
 8015844:	b2d2      	uxtb	r2, r2
 8015846:	701a      	strb	r2, [r3, #0]
      break;
 8015848:	bf00      	nop
}
 801584a:	bf00      	nop
 801584c:	3724      	adds	r7, #36	@ 0x24
 801584e:	46bd      	mov	sp, r7
 8015850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015854:	4770      	bx	lr

08015856 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 8015856:	b580      	push	{r7, lr}
 8015858:	b0aa      	sub	sp, #168	@ 0xa8
 801585a:	af00      	add	r7, sp, #0
 801585c:	60f8      	str	r0, [r7, #12]
 801585e:	60b9      	str	r1, [r7, #8]
 8015860:	607a      	str	r2, [r7, #4]
 8015862:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	099b      	lsrs	r3, r3, #6
 8015868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801586c:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8015870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015874:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8015878:	6839      	ldr	r1, [r7, #0]
 801587a:	f7ff fca7 	bl	80151cc <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801587e:	2300      	movs	r3, #0
 8015880:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015884:	e03c      	b.n	8015900 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 8015886:	f107 0218 	add.w	r2, r7, #24
 801588a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801588e:	4611      	mov	r1, r2
 8015890:	4618      	mov	r0, r3
 8015892:	f7ff fd03 	bl	801529c <core_block>
    increment_counter(state);
 8015896:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801589a:	3301      	adds	r3, #1
 801589c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 80158a0:	2300      	movs	r3, #0
 80158a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80158a6:	e01c      	b.n	80158e2 <chacha20_xor_stream+0x8c>
 80158a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	68ba      	ldr	r2, [r7, #8]
 80158b0:	4413      	add	r3, r2
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	617b      	str	r3, [r7, #20]
 80158b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80158ba:	009b      	lsls	r3, r3, #2
 80158bc:	f107 0218 	add.w	r2, r7, #24
 80158c0:	4413      	add	r3, r2
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	4053      	eors	r3, r2
 80158c8:	617b      	str	r3, [r7, #20]
 80158ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80158ce:	009b      	lsls	r3, r3, #2
 80158d0:	68fa      	ldr	r2, [r7, #12]
 80158d2:	4413      	add	r3, r2
 80158d4:	697a      	ldr	r2, [r7, #20]
 80158d6:	601a      	str	r2, [r3, #0]
 80158d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80158dc:	3301      	adds	r3, #1
 80158de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80158e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80158e6:	2b0f      	cmp	r3, #15
 80158e8:	d9de      	bls.n	80158a8 <chacha20_xor_stream+0x52>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	3340      	adds	r3, #64	@ 0x40
 80158ee:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	3340      	adds	r3, #64	@ 0x40
 80158f4:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 80158f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80158fa:	3301      	adds	r3, #1
 80158fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015900:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8015904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015908:	429a      	cmp	r2, r3
 801590a:	d3bc      	bcc.n	8015886 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015912:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 8015916:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00f      	beq.n	801593e <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801591e:	f107 0218 	add.w	r2, r7, #24
 8015922:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8015926:	4611      	mov	r1, r2
 8015928:	4618      	mov	r0, r3
 801592a:	f7ff fcb7 	bl	801529c <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801592e:	f107 0218 	add.w	r2, r7, #24
 8015932:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015936:	68b9      	ldr	r1, [r7, #8]
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f7ff ff01 	bl	8015740 <xor_block>
  }
}
 801593e:	bf00      	nop
 8015940:	37a8      	adds	r7, #168	@ 0xa8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}

08015946 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 8015946:	b580      	push	{r7, lr}
 8015948:	b0a4      	sub	sp, #144	@ 0x90
 801594a:	af00      	add	r7, sp, #0
 801594c:	60f8      	str	r0, [r7, #12]
 801594e:	60b9      	str	r1, [r7, #8]
 8015950:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 8015952:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8015956:	2300      	movs	r3, #0
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	f7ff fc36 	bl	80151cc <initialize_state>
  core_block(state, result);
 8015960:	f107 0210 	add.w	r2, r7, #16
 8015964:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015968:	4611      	mov	r1, r2
 801596a:	4618      	mov	r0, r3
 801596c:	f7ff fc96 	bl	801529c <core_block>
  serialize(poly_key, result);
 8015970:	f107 0310 	add.w	r3, r7, #16
 8015974:	2220      	movs	r2, #32
 8015976:	4619      	mov	r1, r3
 8015978:	68f8      	ldr	r0, [r7, #12]
 801597a:	f008 ffb0 	bl	801e8de <memcpy>
  (void) i;
}
 801597e:	bf00      	nop
 8015980:	3790      	adds	r7, #144	@ 0x90
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 8015986:	b480      	push	{r7}
 8015988:	b083      	sub	sp, #12
 801598a:	af00      	add	r7, sp, #0
 801598c:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	3301      	adds	r3, #1
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801599c:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	3302      	adds	r3, #2
 80159a2:	781b      	ldrb	r3, [r3, #0]
 80159a4:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 80159a6:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	3303      	adds	r3, #3
 80159ac:	781b      	ldrb	r3, [r3, #0]
 80159ae:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 80159b0:	4313      	orrs	r3, r2
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 80159be:	b480      	push	{r7}
 80159c0:	b083      	sub	sp, #12
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
 80159c6:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	b2da      	uxtb	r2, r3
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	0a1a      	lsrs	r2, r3, #8
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	3301      	adds	r3, #1
 80159d8:	b2d2      	uxtb	r2, r2
 80159da:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	0c1a      	lsrs	r2, r3, #16
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	3302      	adds	r3, #2
 80159e4:	b2d2      	uxtb	r2, r2
 80159e6:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	0e1a      	lsrs	r2, r3, #24
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	3303      	adds	r3, #3
 80159f0:	b2d2      	uxtb	r2, r2
 80159f2:	701a      	strb	r2, [r3, #0]
}
 80159f4:	bf00      	nop
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
 8015a08:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 8015a0e:	6838      	ldr	r0, [r7, #0]
 8015a10:	f7ff ffb9 	bl	8015986 <U8TO32>
 8015a14:	4603      	mov	r3, r0
 8015a16:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 8015a1e:	683b      	ldr	r3, [r7, #0]
 8015a20:	3303      	adds	r3, #3
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7ff ffaf 	bl	8015986 <U8TO32>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	089a      	lsrs	r2, r3, #2
 8015a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8015aec <poly1305_init+0xec>)
 8015a2e:	4013      	ands	r3, r2
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	3306      	adds	r3, #6
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7ff ffa4 	bl	8015986 <U8TO32>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	091a      	lsrs	r2, r3, #4
 8015a42:	4b2b      	ldr	r3, [pc, #172]	@ (8015af0 <poly1305_init+0xf0>)
 8015a44:	4013      	ands	r3, r2
 8015a46:	68fa      	ldr	r2, [r7, #12]
 8015a48:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	3309      	adds	r3, #9
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7ff ff99 	bl	8015986 <U8TO32>
 8015a54:	4603      	mov	r3, r0
 8015a56:	099a      	lsrs	r2, r3, #6
 8015a58:	4b26      	ldr	r3, [pc, #152]	@ (8015af4 <poly1305_init+0xf4>)
 8015a5a:	4013      	ands	r3, r2
 8015a5c:	68fa      	ldr	r2, [r7, #12]
 8015a5e:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	330c      	adds	r3, #12
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7ff ff8e 	bl	8015986 <U8TO32>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	0a1b      	lsrs	r3, r3, #8
 8015a6e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2200      	movs	r2, #0
 8015a86:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2200      	movs	r2, #0
 8015a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	3310      	adds	r3, #16
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7ff ff74 	bl	8015986 <U8TO32>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	3314      	adds	r3, #20
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7ff ff6c 	bl	8015986 <U8TO32>
 8015aae:	4602      	mov	r2, r0
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	3318      	adds	r3, #24
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7ff ff64 	bl	8015986 <U8TO32>
 8015abe:	4602      	mov	r2, r0
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	331c      	adds	r3, #28
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7ff ff5c 	bl	8015986 <U8TO32>
 8015ace:	4602      	mov	r2, r0
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2200      	movs	r2, #0
 8015ade:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8015ae2:	bf00      	nop
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	03ffff03 	.word	0x03ffff03
 8015af0:	03ffc0ff 	.word	0x03ffc0ff
 8015af4:	03f03fff 	.word	0x03f03fff

08015af8 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 8015af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015afc:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8015b06:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8015b0a:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 8015b0e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b12:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d001      	beq.n	8015b1e <poly1305_blocks+0x26>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	e001      	b.n	8015b22 <poly1305_blocks+0x2a>
 8015b1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8015b22:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8015b26:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8015b30:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 8015b3a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8015b44:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 8015b4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b52:	691b      	ldr	r3, [r3, #16]
 8015b54:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8015b58:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4413      	add	r3, r2
 8015b62:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8015b66:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8015b6a:	4613      	mov	r3, r2
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	4413      	add	r3, r2
 8015b70:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8015b74:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8015b78:	4613      	mov	r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8015b82:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8015b86:	4613      	mov	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	4413      	add	r3, r2
 8015b8c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8015b90:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b94:	695b      	ldr	r3, [r3, #20]
 8015b96:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 8015b9a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015b9e:	699b      	ldr	r3, [r3, #24]
 8015ba0:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 8015ba4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015ba8:	69db      	ldr	r3, [r3, #28]
 8015baa:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 8015bae:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015bb2:	6a1b      	ldr	r3, [r3, #32]
 8015bb4:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 8015bb8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8015bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bbe:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 8015bc2:	f000 be78 	b.w	80168b6 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 8015bc6:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8015bca:	f7ff fedc 	bl	8015986 <U8TO32>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8015bd4:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8015bd8:	4413      	add	r3, r2
 8015bda:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 8015bde:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8015be2:	3303      	adds	r3, #3
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7ff fece 	bl	8015986 <U8TO32>
 8015bea:	4603      	mov	r3, r0
 8015bec:	089b      	lsrs	r3, r3, #2
 8015bee:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8015bf2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8015bf6:	4413      	add	r3, r2
 8015bf8:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 8015bfc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8015c00:	3306      	adds	r3, #6
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff febf 	bl	8015986 <U8TO32>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	091b      	lsrs	r3, r3, #4
 8015c0c:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8015c10:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8015c14:	4413      	add	r3, r2
 8015c16:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 8015c1a:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8015c1e:	3309      	adds	r3, #9
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7ff feb0 	bl	8015986 <U8TO32>
 8015c26:	4603      	mov	r3, r0
 8015c28:	099b      	lsrs	r3, r3, #6
 8015c2a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8015c2e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015c32:	4413      	add	r3, r2
 8015c34:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8015c38:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8015c3c:	330c      	adds	r3, #12
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7ff fea1 	bl	8015986 <U8TO32>
 8015c44:	4603      	mov	r3, r0
 8015c46:	0a1a      	lsrs	r2, r3, #8
 8015c48:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8015c4c:	431a      	orrs	r2, r3
 8015c4e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015c52:	4413      	add	r3, r2
 8015c54:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8015c58:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8015c62:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8015c66:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8015c70:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8015c74:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8015c78:	460b      	mov	r3, r1
 8015c7a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8015c7e:	fb02 f203 	mul.w	r2, r2, r3
 8015c82:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8015c86:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 8015c8a:	4601      	mov	r1, r0
 8015c8c:	fb01 f303 	mul.w	r3, r1, r3
 8015c90:	4413      	add	r3, r2
 8015c92:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8015c96:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 8015c9a:	fba2 1201 	umull	r1, r2, r2, r1
 8015c9e:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 8015ca2:	460a      	mov	r2, r1
 8015ca4:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 8015ca8:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8015cac:	4413      	add	r3, r2
 8015cae:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8015cb2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8015cbc:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8015cc0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8015cca:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8015cce:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 8015cd2:	460b      	mov	r3, r1
 8015cd4:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 8015cd8:	fb02 f203 	mul.w	r2, r2, r3
 8015cdc:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8015ce0:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 8015ce4:	4601      	mov	r1, r0
 8015ce6:	fb01 f303 	mul.w	r3, r1, r3
 8015cea:	4413      	add	r3, r2
 8015cec:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 8015cf0:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 8015cf4:	fba2 1201 	umull	r1, r2, r2, r1
 8015cf8:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8015cfc:	460a      	mov	r2, r1
 8015cfe:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8015d02:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8015d06:	4413      	add	r3, r2
 8015d08:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8015d0c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8015d10:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8015d14:	4602      	mov	r2, r0
 8015d16:	189b      	adds	r3, r3, r2
 8015d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015d1c:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8015d20:	460a      	mov	r2, r1
 8015d22:	4153      	adcs	r3, r2
 8015d24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8015d28:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8015d32:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8015d36:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8015d40:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8015d44:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8015d48:	460b      	mov	r3, r1
 8015d4a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8015d4e:	fb02 f203 	mul.w	r2, r2, r3
 8015d52:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8015d56:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 8015d5a:	4601      	mov	r1, r0
 8015d5c:	fb01 f303 	mul.w	r3, r1, r3
 8015d60:	4413      	add	r3, r2
 8015d62:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8015d66:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 8015d6a:	fba2 1201 	umull	r1, r2, r2, r1
 8015d6e:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8015d72:	460a      	mov	r2, r1
 8015d74:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8015d78:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8015d7c:	4413      	add	r3, r2
 8015d7e:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8015d82:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8015d86:	2200      	movs	r2, #0
 8015d88:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8015d8c:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8015d90:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8015d94:	2200      	movs	r2, #0
 8015d96:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8015d9a:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 8015d9e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8015da2:	460b      	mov	r3, r1
 8015da4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8015da8:	fb02 f203 	mul.w	r2, r2, r3
 8015dac:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8015db0:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 8015db4:	4601      	mov	r1, r0
 8015db6:	fb01 f303 	mul.w	r3, r1, r3
 8015dba:	4413      	add	r3, r2
 8015dbc:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8015dc0:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 8015dc4:	fba2 1201 	umull	r1, r2, r2, r1
 8015dc8:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 8015dcc:	460a      	mov	r2, r1
 8015dce:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 8015dd2:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 8015dd6:	4413      	add	r3, r2
 8015dd8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8015ddc:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8015de0:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 8015de4:	4602      	mov	r2, r0
 8015de6:	189b      	adds	r3, r3, r2
 8015de8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015dea:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8015dee:	460a      	mov	r2, r1
 8015df0:	4153      	adcs	r3, r2
 8015df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015df8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	189b      	adds	r3, r3, r2
 8015e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015e08:	460a      	mov	r2, r1
 8015e0a:	4153      	adcs	r3, r2
 8015e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8015e10:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015e14:	2200      	movs	r2, #0
 8015e16:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8015e1a:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8015e1e:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8015e22:	2200      	movs	r2, #0
 8015e24:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8015e28:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8015e2c:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8015e30:	460b      	mov	r3, r1
 8015e32:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8015e36:	fb02 f203 	mul.w	r2, r2, r3
 8015e3a:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8015e3e:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 8015e42:	4601      	mov	r1, r0
 8015e44:	fb01 f303 	mul.w	r3, r1, r3
 8015e48:	4413      	add	r3, r2
 8015e4a:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8015e4e:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8015e52:	fba2 1201 	umull	r1, r2, r2, r1
 8015e56:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8015e5a:	460a      	mov	r2, r1
 8015e5c:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8015e60:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8015e64:	4413      	add	r3, r2
 8015e66:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8015e6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8015e6e:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8015e72:	4602      	mov	r2, r0
 8015e74:	189b      	adds	r3, r3, r2
 8015e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8015e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015e7c:	460a      	mov	r2, r1
 8015e7e:	4153      	adcs	r3, r2
 8015e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8015e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015e86:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8015e8a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8015e8e:	2200      	movs	r2, #0
 8015e90:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8015e94:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8015e98:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8015ea2:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8015ea6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8015eaa:	460b      	mov	r3, r1
 8015eac:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8015eb0:	fb02 f203 	mul.w	r2, r2, r3
 8015eb4:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8015eb8:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 8015ebc:	4601      	mov	r1, r0
 8015ebe:	fb01 f303 	mul.w	r3, r1, r3
 8015ec2:	4413      	add	r3, r2
 8015ec4:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8015ec8:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8015ecc:	fba2 1201 	umull	r1, r2, r2, r1
 8015ed0:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8015ed4:	460a      	mov	r2, r1
 8015ed6:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 8015eda:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8015ede:	4413      	add	r3, r2
 8015ee0:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8015ee4:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8015ee8:	2200      	movs	r2, #0
 8015eea:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8015eee:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8015ef2:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8015efc:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8015f00:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8015f04:	460b      	mov	r3, r1
 8015f06:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8015f0a:	fb02 f203 	mul.w	r2, r2, r3
 8015f0e:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8015f12:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 8015f16:	4601      	mov	r1, r0
 8015f18:	fb01 f303 	mul.w	r3, r1, r3
 8015f1c:	4413      	add	r3, r2
 8015f1e:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8015f22:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8015f26:	fba2 1201 	umull	r1, r2, r2, r1
 8015f2a:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8015f2e:	460a      	mov	r2, r1
 8015f30:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8015f34:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8015f38:	4413      	add	r3, r2
 8015f3a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8015f3e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8015f42:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8015f46:	4602      	mov	r2, r0
 8015f48:	189b      	adds	r3, r3, r2
 8015f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015f4e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8015f52:	460a      	mov	r2, r1
 8015f54:	4153      	adcs	r3, r2
 8015f56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8015f5a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8015f5e:	2200      	movs	r2, #0
 8015f60:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8015f64:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8015f68:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8015f72:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8015f76:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8015f80:	fb02 f203 	mul.w	r2, r2, r3
 8015f84:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8015f88:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 8015f8c:	4601      	mov	r1, r0
 8015f8e:	fb01 f303 	mul.w	r3, r1, r3
 8015f92:	4413      	add	r3, r2
 8015f94:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8015f98:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8015f9c:	fba2 1201 	umull	r1, r2, r2, r1
 8015fa0:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8015fa4:	460a      	mov	r2, r1
 8015fa6:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 8015faa:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8015fae:	4413      	add	r3, r2
 8015fb0:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8015fb4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8015fb8:	2200      	movs	r2, #0
 8015fba:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8015fbe:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8015fc2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8015fcc:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8015fd0:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8015fda:	fb02 f203 	mul.w	r2, r2, r3
 8015fde:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8015fe2:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 8015fe6:	4601      	mov	r1, r0
 8015fe8:	fb01 f303 	mul.w	r3, r1, r3
 8015fec:	4413      	add	r3, r2
 8015fee:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8015ff2:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8015ff6:	fba2 1201 	umull	r1, r2, r2, r1
 8015ffa:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8015ffe:	460a      	mov	r2, r1
 8016000:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 8016004:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8016008:	4413      	add	r3, r2
 801600a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801600e:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8016012:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8016016:	4602      	mov	r2, r0
 8016018:	189b      	adds	r3, r3, r2
 801601a:	663b      	str	r3, [r7, #96]	@ 0x60
 801601c:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8016020:	460a      	mov	r2, r1
 8016022:	4153      	adcs	r3, r2
 8016024:	667b      	str	r3, [r7, #100]	@ 0x64
 8016026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801602a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801602e:	4602      	mov	r2, r0
 8016030:	189b      	adds	r3, r3, r2
 8016032:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8016036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801603a:	460a      	mov	r2, r1
 801603c:	4153      	adcs	r3, r2
 801603e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8016042:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8016046:	2200      	movs	r2, #0
 8016048:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801604c:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8016050:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8016054:	2200      	movs	r2, #0
 8016056:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801605a:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801605e:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8016062:	460b      	mov	r3, r1
 8016064:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8016068:	fb02 f203 	mul.w	r2, r2, r3
 801606c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8016070:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 8016074:	4601      	mov	r1, r0
 8016076:	fb01 f303 	mul.w	r3, r1, r3
 801607a:	4413      	add	r3, r2
 801607c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8016080:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8016084:	fba2 1201 	umull	r1, r2, r2, r1
 8016088:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801608c:	460a      	mov	r2, r1
 801608e:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8016092:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8016096:	4413      	add	r3, r2
 8016098:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801609c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80160a0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80160a4:	4602      	mov	r2, r0
 80160a6:	189b      	adds	r3, r3, r2
 80160a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80160aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80160ae:	460a      	mov	r2, r1
 80160b0:	4153      	adcs	r3, r2
 80160b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80160b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80160b8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80160bc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80160c0:	2200      	movs	r2, #0
 80160c2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80160c6:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 80160ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80160ce:	2200      	movs	r2, #0
 80160d0:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80160d4:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 80160d8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 80160dc:	460b      	mov	r3, r1
 80160de:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 80160e2:	fb02 f203 	mul.w	r2, r2, r3
 80160e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80160ea:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 80160ee:	4601      	mov	r1, r0
 80160f0:	fb01 f303 	mul.w	r3, r1, r3
 80160f4:	4413      	add	r3, r2
 80160f6:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80160fa:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 80160fe:	fba2 1201 	umull	r1, r2, r2, r1
 8016102:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8016106:	460a      	mov	r2, r1
 8016108:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801610c:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8016110:	4413      	add	r3, r2
 8016112:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8016116:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801611a:	2200      	movs	r2, #0
 801611c:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8016120:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8016124:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8016128:	2200      	movs	r2, #0
 801612a:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801612e:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8016132:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8016136:	460b      	mov	r3, r1
 8016138:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801613c:	fb02 f203 	mul.w	r2, r2, r3
 8016140:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8016144:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8016148:	4601      	mov	r1, r0
 801614a:	fb01 f303 	mul.w	r3, r1, r3
 801614e:	4413      	add	r3, r2
 8016150:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8016154:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8016158:	fba2 1201 	umull	r1, r2, r2, r1
 801615c:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8016160:	460a      	mov	r2, r1
 8016162:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8016166:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801616a:	4413      	add	r3, r2
 801616c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8016170:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8016174:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8016178:	4602      	mov	r2, r0
 801617a:	189b      	adds	r3, r3, r2
 801617c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016180:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8016184:	460a      	mov	r2, r1
 8016186:	4153      	adcs	r3, r2
 8016188:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801618c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8016190:	2200      	movs	r2, #0
 8016192:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8016196:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801619a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801619e:	2200      	movs	r2, #0
 80161a0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80161a4:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 80161a8:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80161ac:	460b      	mov	r3, r1
 80161ae:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 80161b2:	fb02 f203 	mul.w	r2, r2, r3
 80161b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80161ba:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 80161be:	4601      	mov	r1, r0
 80161c0:	fb01 f303 	mul.w	r3, r1, r3
 80161c4:	4413      	add	r3, r2
 80161c6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 80161ca:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 80161ce:	fba2 1201 	umull	r1, r2, r2, r1
 80161d2:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80161d6:	460a      	mov	r2, r1
 80161d8:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 80161dc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 80161e0:	4413      	add	r3, r2
 80161e2:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80161e6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80161ea:	2200      	movs	r2, #0
 80161ec:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80161f0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80161f4:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80161f8:	2200      	movs	r2, #0
 80161fa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80161fe:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8016202:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8016206:	460b      	mov	r3, r1
 8016208:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801620c:	fb02 f203 	mul.w	r2, r2, r3
 8016210:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8016214:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8016218:	4601      	mov	r1, r0
 801621a:	fb01 f303 	mul.w	r3, r1, r3
 801621e:	4413      	add	r3, r2
 8016220:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8016224:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8016228:	fba2 1201 	umull	r1, r2, r2, r1
 801622c:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8016230:	460a      	mov	r2, r1
 8016232:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8016236:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801623a:	4413      	add	r3, r2
 801623c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8016240:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8016244:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8016248:	4602      	mov	r2, r0
 801624a:	189b      	adds	r3, r3, r2
 801624c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801624e:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8016252:	460a      	mov	r2, r1
 8016254:	4153      	adcs	r3, r2
 8016256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016258:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801625c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8016260:	4602      	mov	r2, r0
 8016262:	189b      	adds	r3, r3, r2
 8016264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801626c:	460a      	mov	r2, r1
 801626e:	4153      	adcs	r3, r2
 8016270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8016274:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8016278:	2200      	movs	r2, #0
 801627a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801627e:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8016282:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8016286:	2200      	movs	r2, #0
 8016288:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801628c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8016290:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8016294:	460b      	mov	r3, r1
 8016296:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801629a:	fb02 f203 	mul.w	r2, r2, r3
 801629e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80162a2:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 80162a6:	4601      	mov	r1, r0
 80162a8:	fb01 f303 	mul.w	r3, r1, r3
 80162ac:	4413      	add	r3, r2
 80162ae:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80162b2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 80162b6:	fba2 1201 	umull	r1, r2, r2, r1
 80162ba:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80162be:	460a      	mov	r2, r1
 80162c0:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 80162c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80162c8:	4413      	add	r3, r2
 80162ca:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 80162ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80162d2:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 80162d6:	4602      	mov	r2, r0
 80162d8:	189b      	adds	r3, r3, r2
 80162da:	633b      	str	r3, [r7, #48]	@ 0x30
 80162dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80162e0:	460a      	mov	r2, r1
 80162e2:	4153      	adcs	r3, r2
 80162e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80162e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80162ea:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 80162ee:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80162f2:	2200      	movs	r2, #0
 80162f4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80162f8:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 80162fc:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8016300:	2200      	movs	r2, #0
 8016302:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8016306:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801630a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801630e:	460b      	mov	r3, r1
 8016310:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8016314:	fb02 f203 	mul.w	r2, r2, r3
 8016318:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801631c:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8016320:	4601      	mov	r1, r0
 8016322:	fb01 f303 	mul.w	r3, r1, r3
 8016326:	4413      	add	r3, r2
 8016328:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801632c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8016330:	fba2 1201 	umull	r1, r2, r2, r1
 8016334:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8016338:	460a      	mov	r2, r1
 801633a:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801633e:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8016342:	4413      	add	r3, r2
 8016344:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8016348:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801634c:	2200      	movs	r2, #0
 801634e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8016352:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8016356:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801635a:	2200      	movs	r2, #0
 801635c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8016360:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8016364:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8016368:	460b      	mov	r3, r1
 801636a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801636e:	fb02 f203 	mul.w	r2, r2, r3
 8016372:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8016376:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801637a:	4601      	mov	r1, r0
 801637c:	fb01 f303 	mul.w	r3, r1, r3
 8016380:	4413      	add	r3, r2
 8016382:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8016386:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801638a:	fba2 1201 	umull	r1, r2, r2, r1
 801638e:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8016392:	460a      	mov	r2, r1
 8016394:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8016398:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801639c:	4413      	add	r3, r2
 801639e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80163a2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80163a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80163aa:	4602      	mov	r2, r0
 80163ac:	189b      	adds	r3, r3, r2
 80163ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80163b2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80163b6:	460a      	mov	r2, r1
 80163b8:	4153      	adcs	r3, r2
 80163ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 80163be:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80163c2:	2200      	movs	r2, #0
 80163c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80163c8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80163cc:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80163d0:	2200      	movs	r2, #0
 80163d2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80163d6:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80163da:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 80163de:	460b      	mov	r3, r1
 80163e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80163e4:	fb02 f203 	mul.w	r2, r2, r3
 80163e8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80163ec:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 80163f0:	4601      	mov	r1, r0
 80163f2:	fb01 f303 	mul.w	r3, r1, r3
 80163f6:	4413      	add	r3, r2
 80163f8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80163fc:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8016400:	fba2 ab01 	umull	sl, fp, r2, r1
 8016404:	445b      	add	r3, fp
 8016406:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8016408:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801640c:	2200      	movs	r2, #0
 801640e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8016412:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8016416:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801641a:	2200      	movs	r2, #0
 801641c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8016420:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8016424:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8016428:	460b      	mov	r3, r1
 801642a:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801642e:	fb02 f203 	mul.w	r2, r2, r3
 8016432:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8016436:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801643a:	4601      	mov	r1, r0
 801643c:	fb01 f303 	mul.w	r3, r1, r3
 8016440:	4413      	add	r3, r2
 8016442:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8016446:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801644a:	fba2 1201 	umull	r1, r2, r2, r1
 801644e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8016452:	460a      	mov	r2, r1
 8016454:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8016458:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801645c:	4413      	add	r3, r2
 801645e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8016462:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8016466:	460b      	mov	r3, r1
 8016468:	eb1a 0303 	adds.w	r3, sl, r3
 801646c:	653b      	str	r3, [r7, #80]	@ 0x50
 801646e:	4613      	mov	r3, r2
 8016470:	eb4b 0303 	adc.w	r3, fp, r3
 8016474:	657b      	str	r3, [r7, #84]	@ 0x54
 8016476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801647a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801647e:	4602      	mov	r2, r0
 8016480:	189b      	adds	r3, r3, r2
 8016482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801648a:	460a      	mov	r2, r1
 801648c:	4153      	adcs	r3, r2
 801648e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8016492:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8016496:	2200      	movs	r2, #0
 8016498:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801649c:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80164a0:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80164a4:	2200      	movs	r2, #0
 80164a6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80164aa:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 80164ae:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80164b2:	460b      	mov	r3, r1
 80164b4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80164b8:	fb02 f203 	mul.w	r2, r2, r3
 80164bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80164c0:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 80164c4:	4601      	mov	r1, r0
 80164c6:	fb01 f303 	mul.w	r3, r1, r3
 80164ca:	4413      	add	r3, r2
 80164cc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80164d0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80164d4:	fba2 1201 	umull	r1, r2, r2, r1
 80164d8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80164dc:	460a      	mov	r2, r1
 80164de:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80164e2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80164e6:	4413      	add	r3, r2
 80164e8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 80164ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80164f0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 80164f4:	4602      	mov	r2, r0
 80164f6:	189b      	adds	r3, r3, r2
 80164f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80164fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80164fe:	460a      	mov	r2, r1
 8016500:	4153      	adcs	r3, r2
 8016502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8016508:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801650c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8016510:	2200      	movs	r2, #0
 8016512:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8016516:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801651a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801651e:	2200      	movs	r2, #0
 8016520:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8016524:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8016528:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801652c:	460b      	mov	r3, r1
 801652e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8016532:	fb02 f203 	mul.w	r2, r2, r3
 8016536:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801653a:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801653e:	4601      	mov	r1, r0
 8016540:	fb01 f303 	mul.w	r3, r1, r3
 8016544:	4413      	add	r3, r2
 8016546:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801654a:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801654e:	fba2 8901 	umull	r8, r9, r2, r1
 8016552:	444b      	add	r3, r9
 8016554:	4699      	mov	r9, r3
 8016556:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801655a:	2200      	movs	r2, #0
 801655c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8016560:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8016564:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8016568:	2200      	movs	r2, #0
 801656a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801656e:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8016572:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8016576:	460b      	mov	r3, r1
 8016578:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801657c:	fb02 f203 	mul.w	r2, r2, r3
 8016580:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8016584:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 8016588:	4601      	mov	r1, r0
 801658a:	fb01 f303 	mul.w	r3, r1, r3
 801658e:	4413      	add	r3, r2
 8016590:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8016594:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8016598:	fba2 1201 	umull	r1, r2, r2, r1
 801659c:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80165a0:	460a      	mov	r2, r1
 80165a2:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 80165a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80165aa:	4413      	add	r3, r2
 80165ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80165b0:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80165b4:	460b      	mov	r3, r1
 80165b6:	eb18 0303 	adds.w	r3, r8, r3
 80165ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80165be:	4613      	mov	r3, r2
 80165c0:	eb49 0303 	adc.w	r3, r9, r3
 80165c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 80165c8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80165cc:	2200      	movs	r2, #0
 80165ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80165d2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80165d6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80165da:	2200      	movs	r2, #0
 80165dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80165e0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 80165e4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80165e8:	460b      	mov	r3, r1
 80165ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80165ee:	fb02 f203 	mul.w	r2, r2, r3
 80165f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165f6:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 80165fa:	4601      	mov	r1, r0
 80165fc:	fb01 f303 	mul.w	r3, r1, r3
 8016600:	4413      	add	r3, r2
 8016602:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016606:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801660a:	fba2 4501 	umull	r4, r5, r2, r1
 801660e:	442b      	add	r3, r5
 8016610:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 8016612:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8016616:	2200      	movs	r2, #0
 8016618:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801661c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8016620:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8016624:	2200      	movs	r2, #0
 8016626:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801662a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801662e:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8016632:	460b      	mov	r3, r1
 8016634:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8016638:	fb02 f203 	mul.w	r2, r2, r3
 801663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016640:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 8016644:	4601      	mov	r1, r0
 8016646:	fb01 f303 	mul.w	r3, r1, r3
 801664a:	4413      	add	r3, r2
 801664c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8016650:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8016654:	fba2 1201 	umull	r1, r2, r2, r1
 8016658:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801665c:	460a      	mov	r2, r1
 801665e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8016662:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8016666:	4413      	add	r3, r2
 8016668:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801666c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8016670:	460b      	mov	r3, r1
 8016672:	18e3      	adds	r3, r4, r3
 8016674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016676:	4613      	mov	r3, r2
 8016678:	eb45 0303 	adc.w	r3, r5, r3
 801667c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801667e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016682:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8016686:	4602      	mov	r2, r0
 8016688:	189b      	adds	r3, r3, r2
 801668a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801668e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016692:	460a      	mov	r2, r1
 8016694:	4153      	adcs	r3, r2
 8016696:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801669a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801669e:	2200      	movs	r2, #0
 80166a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80166a4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80166a8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80166ac:	2200      	movs	r2, #0
 80166ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80166b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80166b6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 80166ba:	460b      	mov	r3, r1
 80166bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80166c0:	fb02 f203 	mul.w	r2, r2, r3
 80166c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80166c8:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 80166cc:	4601      	mov	r1, r0
 80166ce:	fb01 f303 	mul.w	r3, r1, r3
 80166d2:	4413      	add	r3, r2
 80166d4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80166d8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80166dc:	fba2 1201 	umull	r1, r2, r2, r1
 80166e0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80166e4:	460a      	mov	r2, r1
 80166e6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80166ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80166ee:	4413      	add	r3, r2
 80166f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 80166f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80166f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80166fc:	4602      	mov	r2, r0
 80166fe:	189b      	adds	r3, r3, r2
 8016700:	623b      	str	r3, [r7, #32]
 8016702:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016706:	460a      	mov	r2, r1
 8016708:	4153      	adcs	r3, r2
 801670a:	627b      	str	r3, [r7, #36]	@ 0x24
 801670c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016710:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 8016714:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8016718:	f04f 0000 	mov.w	r0, #0
 801671c:	f04f 0100 	mov.w	r1, #0
 8016720:	0e90      	lsrs	r0, r2, #26
 8016722:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8016726:	0e99      	lsrs	r1, r3, #26
 8016728:	4603      	mov	r3, r0
 801672a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801672e:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8016732:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016736:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801673a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801673e:	2200      	movs	r2, #0
 8016740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016744:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016748:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801674c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8016750:	1851      	adds	r1, r2, r1
 8016752:	61b9      	str	r1, [r7, #24]
 8016754:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8016758:	414b      	adcs	r3, r1
 801675a:	61fb      	str	r3, [r7, #28]
 801675c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016760:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 8016764:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8016768:	f04f 0000 	mov.w	r0, #0
 801676c:	f04f 0100 	mov.w	r1, #0
 8016770:	0e90      	lsrs	r0, r2, #26
 8016772:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8016776:	0e99      	lsrs	r1, r3, #26
 8016778:	4603      	mov	r3, r0
 801677a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801677e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8016782:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016786:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801678a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801678e:	2200      	movs	r2, #0
 8016790:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016794:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8016798:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801679c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80167a0:	1851      	adds	r1, r2, r1
 80167a2:	6139      	str	r1, [r7, #16]
 80167a4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80167a8:	414b      	adcs	r3, r1
 80167aa:	617b      	str	r3, [r7, #20]
 80167ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80167b0:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 80167b4:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 80167b8:	f04f 0000 	mov.w	r0, #0
 80167bc:	f04f 0100 	mov.w	r1, #0
 80167c0:	0e90      	lsrs	r0, r2, #26
 80167c2:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 80167c6:	0e99      	lsrs	r1, r3, #26
 80167c8:	4603      	mov	r3, r0
 80167ca:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 80167ce:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80167d2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80167d6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 80167da:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80167de:	2200      	movs	r2, #0
 80167e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80167e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80167e4:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 80167e8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80167ea:	1851      	adds	r1, r2, r1
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80167f0:	414b      	adcs	r3, r1
 80167f2:	60fb      	str	r3, [r7, #12]
 80167f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80167f8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 80167fc:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8016800:	f04f 0000 	mov.w	r0, #0
 8016804:	f04f 0100 	mov.w	r1, #0
 8016808:	0e90      	lsrs	r0, r2, #26
 801680a:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801680e:	0e99      	lsrs	r1, r3, #26
 8016810:	4603      	mov	r3, r0
 8016812:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 8016816:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801681a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801681e:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 8016822:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8016826:	2200      	movs	r2, #0
 8016828:	673b      	str	r3, [r7, #112]	@ 0x70
 801682a:	677a      	str	r2, [r7, #116]	@ 0x74
 801682c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8016830:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8016832:	1851      	adds	r1, r2, r1
 8016834:	6039      	str	r1, [r7, #0]
 8016836:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8016838:	414b      	adcs	r3, r1
 801683a:	607b      	str	r3, [r7, #4]
 801683c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016840:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 8016844:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8016848:	f04f 0000 	mov.w	r0, #0
 801684c:	f04f 0100 	mov.w	r1, #0
 8016850:	0e90      	lsrs	r0, r2, #26
 8016852:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 8016856:	0e99      	lsrs	r1, r3, #26
 8016858:	4603      	mov	r3, r0
 801685a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801685e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8016862:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016866:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801686a:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801686e:	4613      	mov	r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	441a      	add	r2, r3
 8016874:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8016878:	4413      	add	r3, r2
 801687a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801687e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8016882:	0e9b      	lsrs	r3, r3, #26
 8016884:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 8016888:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801688c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016890:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 8016894:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8016898:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801689c:	4413      	add	r3, r2
 801689e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 80168a2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80168a6:	3310      	adds	r3, #16
 80168a8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 80168ac:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80168b0:	3b10      	subs	r3, #16
 80168b2:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 80168b6:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 80168ba:	2b0f      	cmp	r3, #15
 80168bc:	f63f a983 	bhi.w	8015bc6 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 80168c0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80168c4:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80168c8:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 80168ca:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80168ce:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80168d2:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 80168d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80168d8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80168dc:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 80168de:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80168e2:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80168e6:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 80168e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80168ec:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80168f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80168f2:	bf00      	nop
 80168f4:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 80168f8:	46bd      	mov	sp, r7
 80168fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080168fe <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 80168fe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016902:	b0aa      	sub	sp, #168	@ 0xa8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6678      	str	r0, [r7, #100]	@ 0x64
 8016908:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801690a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801690c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 8016910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016916:	2b00      	cmp	r3, #0
 8016918:	d030      	beq.n	801697c <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801691a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 8016924:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8016928:	1c53      	adds	r3, r2, #1
 801692a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016932:	441a      	add	r2, r3
 8016934:	2301      	movs	r3, #1
 8016936:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801693a:	e00d      	b.n	8016958 <poly1305_finish+0x5a>
 801693c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8016940:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016944:	4413      	add	r3, r2
 8016946:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801694a:	2300      	movs	r3, #0
 801694c:	7013      	strb	r3, [r2, #0]
 801694e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016952:	3301      	adds	r3, #1
 8016954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801695c:	2b0f      	cmp	r3, #15
 801695e:	d9ed      	bls.n	801693c <poly1305_finish+0x3e>
    st->final = 1;
 8016960:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8016964:	2301      	movs	r3, #1
 8016966:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801696a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801696e:	333c      	adds	r3, #60	@ 0x3c
 8016970:	2210      	movs	r2, #16
 8016972:	4619      	mov	r1, r3
 8016974:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8016978:	f7ff f8be 	bl	8015af8 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801697c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 8016986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801698a:	699b      	ldr	r3, [r3, #24]
 801698c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 8016990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016994:	69db      	ldr	r3, [r3, #28]
 8016996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801699a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801699e:	6a1b      	ldr	r3, [r3, #32]
 80169a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 80169a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80169a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 80169ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80169b2:	0e9b      	lsrs	r3, r3, #26
 80169b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 80169b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80169bc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80169c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 80169c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80169c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80169cc:	4413      	add	r3, r2
 80169ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 80169d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80169d6:	0e9b      	lsrs	r3, r3, #26
 80169d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 80169dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80169e0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80169e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 80169e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80169ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80169f0:	4413      	add	r3, r2
 80169f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 80169f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80169fa:	0e9b      	lsrs	r3, r3, #26
 80169fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 8016a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016a04:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016a08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 8016a0c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a14:	4413      	add	r3, r2
 8016a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 8016a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016a1e:	0e9b      	lsrs	r3, r3, #26
 8016a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 8016a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016a28:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016a2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 8016a30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8016a34:	4613      	mov	r3, r2
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	441a      	add	r2, r3
 8016a3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016a3e:	4413      	add	r3, r2
 8016a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 8016a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016a48:	0e9b      	lsrs	r3, r3, #26
 8016a4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 8016a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016a52:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 8016a5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a62:	4413      	add	r3, r2
 8016a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 8016a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016a6c:	3305      	adds	r3, #5
 8016a6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 8016a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016a76:	0e9b      	lsrs	r3, r3, #26
 8016a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 8016a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016a80:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 8016a88:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a90:	4413      	add	r3, r2
 8016a92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 8016a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016a9a:	0e9b      	lsrs	r3, r3, #26
 8016a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 8016aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016aa4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 8016aac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016ab4:	4413      	add	r3, r2
 8016ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 8016ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016aba:	0e9b      	lsrs	r3, r3, #26
 8016abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 8016ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ac2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 8016ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8016acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016ad0:	4413      	add	r3, r2
 8016ad2:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 8016ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ad6:	0e9b      	lsrs	r3, r3, #26
 8016ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 8016adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016ade:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8016ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 8016ae4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016aec:	4413      	add	r3, r2
 8016aee:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 8016af2:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 8016af4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016af6:	0fdb      	lsrs	r3, r3, #31
 8016af8:	3b01      	subs	r3, #1
 8016afa:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 8016afc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016b00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b02:	4013      	ands	r3, r2
 8016b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 8016b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b0e:	4013      	ands	r3, r2
 8016b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 8016b14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b18:	4013      	ands	r3, r2
 8016b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 8016b1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8016b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b20:	4013      	ands	r3, r2
 8016b22:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 8016b24:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b28:	4013      	ands	r3, r2
 8016b2a:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 8016b2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b2e:	43db      	mvns	r3, r3
 8016b30:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 8016b32:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b38:	401a      	ands	r2, r3
 8016b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016b3e:	4313      	orrs	r3, r2
 8016b40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 8016b44:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016b48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b4a:	401a      	ands	r2, r3
 8016b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016b50:	4313      	orrs	r3, r2
 8016b52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 8016b56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b5c:	401a      	ands	r2, r3
 8016b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016b60:	4313      	orrs	r3, r2
 8016b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 8016b66:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8016b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b6c:	401a      	ands	r2, r3
 8016b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b70:	4313      	orrs	r3, r2
 8016b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 8016b76:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016b7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016b7c:	401a      	ands	r2, r3
 8016b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016b80:	4313      	orrs	r3, r2
 8016b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 8016b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016b8a:	069a      	lsls	r2, r3, #26
 8016b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016b90:	4313      	orrs	r3, r2
 8016b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 8016b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016b9a:	099a      	lsrs	r2, r3, #6
 8016b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016ba0:	051b      	lsls	r3, r3, #20
 8016ba2:	4313      	orrs	r3, r2
 8016ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 8016ba8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016bac:	0b1a      	lsrs	r2, r3, #12
 8016bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016bb2:	039b      	lsls	r3, r3, #14
 8016bb4:	4313      	orrs	r3, r2
 8016bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 8016bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016bbe:	0c9a      	lsrs	r2, r3, #18
 8016bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016bc4:	021b      	lsls	r3, r3, #8
 8016bc6:	4313      	orrs	r3, r2
 8016bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 8016bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8016bd4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8016bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016bdc:	2200      	movs	r2, #0
 8016bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016be0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016be4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8016be8:	4602      	mov	r2, r0
 8016bea:	189b      	adds	r3, r3, r2
 8016bec:	61bb      	str	r3, [r7, #24]
 8016bee:	460b      	mov	r3, r1
 8016bf0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016bf2:	eb42 0303 	adc.w	r3, r2, r3
 8016bf6:	61fb      	str	r3, [r7, #28]
 8016bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016bfc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 8016c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 8016c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8016c0e:	657a      	str	r2, [r7, #84]	@ 0x54
 8016c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c16:	2200      	movs	r2, #0
 8016c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8016c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8016c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8016c22:	4602      	mov	r2, r0
 8016c24:	189c      	adds	r4, r3, r2
 8016c26:	460b      	mov	r3, r1
 8016c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016c2a:	eb42 0303 	adc.w	r3, r2, r3
 8016c2e:	461d      	mov	r5, r3
 8016c30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8016c34:	f04f 0000 	mov.w	r0, #0
 8016c38:	f04f 0100 	mov.w	r1, #0
 8016c3c:	0018      	movs	r0, r3
 8016c3e:	2100      	movs	r1, #0
 8016c40:	1823      	adds	r3, r4, r0
 8016c42:	613b      	str	r3, [r7, #16]
 8016c44:	eb45 0301 	adc.w	r3, r5, r1
 8016c48:	617b      	str	r3, [r7, #20]
 8016c4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016c4e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 8016c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 8016c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8016c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c68:	2200      	movs	r2, #0
 8016c6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8016c6c:	637a      	str	r2, [r7, #52]	@ 0x34
 8016c6e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8016c72:	4623      	mov	r3, r4
 8016c74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8016c78:	4602      	mov	r2, r0
 8016c7a:	eb13 0a02 	adds.w	sl, r3, r2
 8016c7e:	462b      	mov	r3, r5
 8016c80:	460a      	mov	r2, r1
 8016c82:	eb43 0b02 	adc.w	fp, r3, r2
 8016c86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8016c8a:	f04f 0200 	mov.w	r2, #0
 8016c8e:	f04f 0300 	mov.w	r3, #0
 8016c92:	000a      	movs	r2, r1
 8016c94:	2300      	movs	r3, #0
 8016c96:	eb1a 0102 	adds.w	r1, sl, r2
 8016c9a:	60b9      	str	r1, [r7, #8]
 8016c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8016ca0:	60fb      	str	r3, [r7, #12]
 8016ca2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016ca6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 8016caa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016cac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 8016cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016cb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8016cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	623b      	str	r3, [r7, #32]
 8016cc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8016cc6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8016cca:	4623      	mov	r3, r4
 8016ccc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8016cd0:	4602      	mov	r2, r0
 8016cd2:	eb13 0802 	adds.w	r8, r3, r2
 8016cd6:	462b      	mov	r3, r5
 8016cd8:	460a      	mov	r2, r1
 8016cda:	eb43 0902 	adc.w	r9, r3, r2
 8016cde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8016ce2:	f04f 0200 	mov.w	r2, #0
 8016ce6:	f04f 0300 	mov.w	r3, #0
 8016cea:	000a      	movs	r2, r1
 8016cec:	2300      	movs	r3, #0
 8016cee:	eb18 0102 	adds.w	r1, r8, r2
 8016cf2:	6039      	str	r1, [r7, #0]
 8016cf4:	eb49 0303 	adc.w	r3, r9, r3
 8016cf8:	607b      	str	r3, [r7, #4]
 8016cfa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016cfe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 8016d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 8016d08:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8016d0c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016d0e:	f7fe fe56 	bl	80159be <U32TO8>
  U32TO8(mac + 4, h1);
 8016d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d14:	3304      	adds	r3, #4
 8016d16:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7fe fe4f 	bl	80159be <U32TO8>
  U32TO8(mac + 8, h2);
 8016d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d22:	3308      	adds	r3, #8
 8016d24:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7fe fe48 	bl	80159be <U32TO8>
  U32TO8(mac + 12, h3);
 8016d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016d30:	330c      	adds	r3, #12
 8016d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7fe fe41 	bl	80159be <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 8016d3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d40:	2200      	movs	r2, #0
 8016d42:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8016d44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d48:	2200      	movs	r2, #0
 8016d4a:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8016d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d50:	2200      	movs	r2, #0
 8016d52:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8016d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d58:	2200      	movs	r2, #0
 8016d5a:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8016d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d60:	2200      	movs	r2, #0
 8016d62:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 8016d64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d68:	2200      	movs	r2, #0
 8016d6a:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 8016d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d70:	2200      	movs	r2, #0
 8016d72:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 8016d74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d78:	2200      	movs	r2, #0
 8016d7a:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 8016d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d80:	2200      	movs	r2, #0
 8016d82:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 8016d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d88:	2200      	movs	r2, #0
 8016d8a:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 8016d8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d90:	2200      	movs	r2, #0
 8016d92:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 8016d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d98:	2200      	movs	r2, #0
 8016d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 8016d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016da0:	2200      	movs	r2, #0
 8016da2:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 8016da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016da8:	2200      	movs	r2, #0
 8016daa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8016dac:	bf00      	nop
 8016dae:	37a8      	adds	r7, #168	@ 0xa8
 8016db0:	46bd      	mov	sp, r7
 8016db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016db6 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b088      	sub	sp, #32
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	60f8      	str	r0, [r7, #12]
 8016dbe:	60b9      	str	r1, [r7, #8]
 8016dc0:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 8016dc6:	697b      	ldr	r3, [r7, #20]
 8016dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d03d      	beq.n	8016e4a <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dd2:	f1c3 0310 	rsb	r3, r3, #16
 8016dd6:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 8016dd8:	69ba      	ldr	r2, [r7, #24]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d901      	bls.n	8016de4 <poly1305_update+0x2e>
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 8016de4:	2300      	movs	r3, #0
 8016de6:	61fb      	str	r3, [r7, #28]
 8016de8:	e00f      	b.n	8016e0a <poly1305_update+0x54>
 8016dea:	68ba      	ldr	r2, [r7, #8]
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	441a      	add	r2, r3
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016df4:	69fb      	ldr	r3, [r7, #28]
 8016df6:	440b      	add	r3, r1
 8016df8:	7811      	ldrb	r1, [r2, #0]
 8016dfa:	697a      	ldr	r2, [r7, #20]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	460a      	mov	r2, r1
 8016e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016e04:	69fb      	ldr	r3, [r7, #28]
 8016e06:	3301      	adds	r3, #1
 8016e08:	61fb      	str	r3, [r7, #28]
 8016e0a:	69fa      	ldr	r2, [r7, #28]
 8016e0c:	69bb      	ldr	r3, [r7, #24]
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d3eb      	bcc.n	8016dea <poly1305_update+0x34>
    bytes -= want;
 8016e12:	687a      	ldr	r2, [r7, #4]
 8016e14:	69bb      	ldr	r3, [r7, #24]
 8016e16:	1ad3      	subs	r3, r2, r3
 8016e18:	607b      	str	r3, [r7, #4]
    m += want;
 8016e1a:	68ba      	ldr	r2, [r7, #8]
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	4413      	add	r3, r2
 8016e20:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016e26:	69bb      	ldr	r3, [r7, #24]
 8016e28:	441a      	add	r2, r3
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e32:	2b0f      	cmp	r3, #15
 8016e34:	d93e      	bls.n	8016eb4 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	333c      	adds	r3, #60	@ 0x3c
 8016e3a:	2210      	movs	r2, #16
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	6978      	ldr	r0, [r7, #20]
 8016e40:	f7fe fe5a 	bl	8015af8 <poly1305_blocks>
    st->leftover = 0;
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	2200      	movs	r2, #0
 8016e48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2b0f      	cmp	r3, #15
 8016e4e:	d910      	bls.n	8016e72 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f023 030f 	bic.w	r3, r3, #15
 8016e56:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 8016e58:	693a      	ldr	r2, [r7, #16]
 8016e5a:	68b9      	ldr	r1, [r7, #8]
 8016e5c:	6978      	ldr	r0, [r7, #20]
 8016e5e:	f7fe fe4b 	bl	8015af8 <poly1305_blocks>
    m += want;
 8016e62:	68ba      	ldr	r2, [r7, #8]
 8016e64:	693b      	ldr	r3, [r7, #16]
 8016e66:	4413      	add	r3, r2
 8016e68:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 8016e6a:	687a      	ldr	r2, [r7, #4]
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d01e      	beq.n	8016eb6 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 8016e78:	2300      	movs	r3, #0
 8016e7a:	61fb      	str	r3, [r7, #28]
 8016e7c:	e00f      	b.n	8016e9e <poly1305_update+0xe8>
 8016e7e:	68ba      	ldr	r2, [r7, #8]
 8016e80:	69fb      	ldr	r3, [r7, #28]
 8016e82:	441a      	add	r2, r3
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016e88:	69fb      	ldr	r3, [r7, #28]
 8016e8a:	440b      	add	r3, r1
 8016e8c:	7811      	ldrb	r1, [r2, #0]
 8016e8e:	697a      	ldr	r2, [r7, #20]
 8016e90:	4413      	add	r3, r2
 8016e92:	460a      	mov	r2, r1
 8016e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016e98:	69fb      	ldr	r3, [r7, #28]
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	61fb      	str	r3, [r7, #28]
 8016e9e:	69fa      	ldr	r2, [r7, #28]
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d3eb      	bcc.n	8016e7e <poly1305_update+0xc8>
    st->leftover += bytes;
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	441a      	add	r2, r3
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	639a      	str	r2, [r3, #56]	@ 0x38
 8016eb2:	e000      	b.n	8016eb6 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 8016eb4:	bf00      	nop
  }
}
 8016eb6:	3720      	adds	r7, #32
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b084      	sub	sp, #16
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 8016ec6:	683b      	ldr	r3, [r7, #0]
 8016ec8:	f003 030f 	and.w	r3, r3, #15
 8016ecc:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d007      	beq.n	8016ee4 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	f1c3 0310 	rsb	r3, r3, #16
 8016eda:	461a      	mov	r2, r3
 8016edc:	4903      	ldr	r1, [pc, #12]	@ (8016eec <pad_if_needed+0x30>)
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f7ff ff69 	bl	8016db6 <poly1305_update>
  }
}
 8016ee4:	bf00      	nop
 8016ee6:	3710      	adds	r7, #16
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	20000658 	.word	0x20000658

08016ef0 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b086      	sub	sp, #24
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 8016efc:	783b      	ldrb	r3, [r7, #0]
 8016efe:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 8016f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f04:	f04f 0200 	mov.w	r2, #0
 8016f08:	f04f 0300 	mov.w	r3, #0
 8016f0c:	0a02      	lsrs	r2, r0, #8
 8016f0e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8016f12:	0a0b      	lsrs	r3, r1, #8
 8016f14:	b2d3      	uxtb	r3, r2
 8016f16:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 8016f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f1c:	f04f 0200 	mov.w	r2, #0
 8016f20:	f04f 0300 	mov.w	r3, #0
 8016f24:	0c02      	lsrs	r2, r0, #16
 8016f26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016f2a:	0c0b      	lsrs	r3, r1, #16
 8016f2c:	b2d3      	uxtb	r3, r2
 8016f2e:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 8016f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f34:	f04f 0200 	mov.w	r2, #0
 8016f38:	f04f 0300 	mov.w	r3, #0
 8016f3c:	0e02      	lsrs	r2, r0, #24
 8016f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016f42:	0e0b      	lsrs	r3, r1, #24
 8016f44:	b2d3      	uxtb	r3, r2
 8016f46:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 8016f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f4c:	f04f 0200 	mov.w	r2, #0
 8016f50:	f04f 0300 	mov.w	r3, #0
 8016f54:	000a      	movs	r2, r1
 8016f56:	2300      	movs	r3, #0
 8016f58:	b2d3      	uxtb	r3, r2
 8016f5a:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 8016f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f60:	f04f 0200 	mov.w	r2, #0
 8016f64:	f04f 0300 	mov.w	r3, #0
 8016f68:	0a0a      	lsrs	r2, r1, #8
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	b2d3      	uxtb	r3, r2
 8016f6e:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 8016f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f74:	f04f 0200 	mov.w	r2, #0
 8016f78:	f04f 0300 	mov.w	r3, #0
 8016f7c:	0c0a      	lsrs	r2, r1, #16
 8016f7e:	2300      	movs	r3, #0
 8016f80:	b2d3      	uxtb	r3, r2
 8016f82:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 8016f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016f88:	f04f 0200 	mov.w	r2, #0
 8016f8c:	f04f 0300 	mov.w	r3, #0
 8016f90:	0e0a      	lsrs	r2, r1, #24
 8016f92:	2300      	movs	r3, #0
 8016f94:	b2d3      	uxtb	r3, r2
 8016f96:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 8016f98:	f107 0310 	add.w	r3, r7, #16
 8016f9c:	2208      	movs	r2, #8
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	68f8      	ldr	r0, [r7, #12]
 8016fa2:	f7ff ff08 	bl	8016db6 <poly1305_update>
}
 8016fa6:	bf00      	nop
 8016fa8:	3718      	adds	r7, #24
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}

08016fae <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 8016fae:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016fb2:	b0b0      	sub	sp, #192	@ 0xc0
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	607a      	str	r2, [r7, #4]
 8016fbc:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 8016fbe:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8016fc2:	2220      	movs	r2, #32
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	f007 fb53 	bl	801e672 <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 8016fcc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8016fd0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8016fd4:	6839      	ldr	r1, [r7, #0]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7fe fcb5 	bl	8015946 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 8016fdc:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8016fe0:	f107 0314 	add.w	r3, r7, #20
 8016fe4:	4611      	mov	r1, r2
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7fe fd0a 	bl	8015a00 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 8016fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d013      	beq.n	801701c <poly1305_calculate_mac+0x6e>
 8016ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d00f      	beq.n	801701c <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 8016ffc:	f107 0314 	add.w	r3, r7, #20
 8017000:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017004:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8017008:	4618      	mov	r0, r3
 801700a:	f7ff fed4 	bl	8016db6 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801700e:	f107 0314 	add.w	r3, r7, #20
 8017012:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8017016:	4618      	mov	r0, r3
 8017018:	f7ff ff50 	bl	8016ebc <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801701c:	f107 0314 	add.w	r3, r7, #20
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	68b9      	ldr	r1, [r7, #8]
 8017024:	4618      	mov	r0, r3
 8017026:	f7ff fec6 	bl	8016db6 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801702a:	f107 0314 	add.w	r3, r7, #20
 801702e:	6879      	ldr	r1, [r7, #4]
 8017030:	4618      	mov	r0, r3
 8017032:	f7ff ff43 	bl	8016ebc <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 8017036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801703a:	2200      	movs	r2, #0
 801703c:	4698      	mov	r8, r3
 801703e:	4691      	mov	r9, r2
 8017040:	f107 0114 	add.w	r1, r7, #20
 8017044:	4642      	mov	r2, r8
 8017046:	464b      	mov	r3, r9
 8017048:	4608      	mov	r0, r1
 801704a:	f7ff ff51 	bl	8016ef0 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2200      	movs	r2, #0
 8017052:	461c      	mov	r4, r3
 8017054:	4615      	mov	r5, r2
 8017056:	f107 0114 	add.w	r1, r7, #20
 801705a:	4622      	mov	r2, r4
 801705c:	462b      	mov	r3, r5
 801705e:	4608      	mov	r0, r1
 8017060:	f7ff ff46 	bl	8016ef0 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 8017064:	f107 0314 	add.w	r3, r7, #20
 8017068:	68f9      	ldr	r1, [r7, #12]
 801706a:	4618      	mov	r0, r3
 801706c:	f7ff fc47 	bl	80168fe <poly1305_finish>
}
 8017070:	bf00      	nop
 8017072:	37c0      	adds	r7, #192	@ 0xc0
 8017074:	46bd      	mov	sp, r7
 8017076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801707a <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801707a:	b580      	push	{r7, lr}
 801707c:	b08a      	sub	sp, #40	@ 0x28
 801707e:	af04      	add	r7, sp, #16
 8017080:	60f8      	str	r0, [r7, #12]
 8017082:	60b9      	str	r1, [r7, #8]
 8017084:	607a      	str	r2, [r7, #4]
 8017086:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 8017088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801708a:	3310      	adds	r3, #16
 801708c:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801708e:	68fa      	ldr	r2, [r7, #12]
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	4413      	add	r3, r2
 8017094:	461a      	mov	r2, r3
 8017096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017098:	429a      	cmp	r2, r3
 801709a:	d909      	bls.n	80170b0 <mg_chacha20_poly1305_encrypt+0x36>
 801709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a0:	4413      	add	r3, r2
 80170a2:	461a      	mov	r2, r3
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d902      	bls.n	80170b0 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 80170aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80170ae:	e018      	b.n	80170e2 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 80170b0:	2301      	movs	r3, #1
 80170b2:	9301      	str	r3, [sp, #4]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	9300      	str	r3, [sp, #0]
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80170bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7fe fbc9 	bl	8015856 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 80170c4:	68fa      	ldr	r2, [r7, #12]
 80170c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170c8:	18d0      	adds	r0, r2, r3
 80170ca:	6a3b      	ldr	r3, [r7, #32]
 80170cc:	9302      	str	r3, [sp, #8]
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	9301      	str	r3, [sp, #4]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	9300      	str	r3, [sp, #0]
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80170da:	68f9      	ldr	r1, [r7, #12]
 80170dc:	f7ff ff67 	bl	8016fae <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 80170e0:	697b      	ldr	r3, [r7, #20]
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3718      	adds	r7, #24
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 80170ea:	b580      	push	{r7, lr}
 80170ec:	b088      	sub	sp, #32
 80170ee:	af02      	add	r7, sp, #8
 80170f0:	60f8      	str	r0, [r7, #12]
 80170f2:	60b9      	str	r1, [r7, #8]
 80170f4:	607a      	str	r2, [r7, #4]
 80170f6:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 80170f8:	6a3b      	ldr	r3, [r7, #32]
 80170fa:	3b10      	subs	r3, #16
 80170fc:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 80170fe:	683a      	ldr	r2, [r7, #0]
 8017100:	6a3b      	ldr	r3, [r7, #32]
 8017102:	4413      	add	r3, r2
 8017104:	461a      	mov	r2, r3
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	429a      	cmp	r2, r3
 801710a:	d909      	bls.n	8017120 <mg_chacha20_poly1305_decrypt+0x36>
 801710c:	68fa      	ldr	r2, [r7, #12]
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	4413      	add	r3, r2
 8017112:	461a      	mov	r2, r3
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	429a      	cmp	r2, r3
 8017118:	d902      	bls.n	8017120 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801711a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801711e:	e00a      	b.n	8017136 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 8017120:	2301      	movs	r3, #1
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	9300      	str	r3, [sp, #0]
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	697a      	ldr	r2, [r7, #20]
 801712c:	6839      	ldr	r1, [r7, #0]
 801712e:	68f8      	ldr	r0, [r7, #12]
 8017130:	f7fe fb91 	bl	8015856 <chacha20_xor_stream>
  return actual_size;
 8017134:	697b      	ldr	r3, [r7, #20]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3718      	adds	r7, #24
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801713e:	b580      	push	{r7, lr}
 8017140:	b082      	sub	sp, #8
 8017142:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 8017144:	2138      	movs	r1, #56	@ 0x38
 8017146:	2001      	movs	r0, #1
 8017148:	f006 ffbe 	bl	801e0c8 <calloc>
 801714c:	4603      	mov	r3, r0
 801714e:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 8017150:	2102      	movs	r1, #2
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fefe 	bl	8017f54 <alloc>
 8017158:	4602      	mov	r2, r0
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	689b      	ldr	r3, [r3, #8]
 8017162:	68db      	ldr	r3, [r3, #12]
 8017164:	2200      	movs	r2, #0
 8017166:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	3304      	adds	r3, #4
 8017170:	2201      	movs	r2, #1
 8017172:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	689b      	ldr	r3, [r3, #8]
 8017178:	4618      	mov	r0, r3
 801717a:	f000 f81d 	bl	80171b8 <bi_permanent>
  return ctx;
 801717e:	687b      	ldr	r3, [r7, #4]
}
 8017180:	4618      	mov	r0, r3
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}

08017188 <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 8017188:	b480      	push	{r7}
 801718a:	b083      	sub	sp, #12
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	689b      	ldr	r3, [r3, #8]
 8017194:	4a07      	ldr	r2, [pc, #28]	@ (80171b4 <bi_copy+0x2c>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d004      	beq.n	80171a4 <bi_copy+0x1c>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	689b      	ldr	r3, [r3, #8]
 801719e:	1c5a      	adds	r2, r3, #1
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	609a      	str	r2, [r3, #8]
  return bi;
 80171a4:	687b      	ldr	r3, [r7, #4]
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	370c      	adds	r7, #12
 80171aa:	46bd      	mov	sp, r7
 80171ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b0:	4770      	bx	lr
 80171b2:	bf00      	nop
 80171b4:	7fff55aa 	.word	0x7fff55aa

080171b8 <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	689b      	ldr	r3, [r3, #8]
 80171c4:	2b01      	cmp	r3, #1
 80171c6:	d001      	beq.n	80171cc <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 80171c8:	f006 ff54 	bl	801e074 <abort>
  }

  bi->refs = PERMANENT;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	4a03      	ldr	r2, [pc, #12]	@ (80171dc <bi_permanent+0x24>)
 80171d0:	609a      	str	r2, [r3, #8]
}
 80171d2:	bf00      	nop
 80171d4:	3708      	adds	r7, #8
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	bf00      	nop
 80171dc:	7fff55aa 	.word	0x7fff55aa

080171e0 <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	689b      	ldr	r3, [r3, #8]
 80171ec:	4a05      	ldr	r2, [pc, #20]	@ (8017204 <bi_depermanent+0x24>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d001      	beq.n	80171f6 <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 80171f2:	f006 ff3f 	bl	801e074 <abort>
  }

  bi->refs = 1;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2201      	movs	r2, #1
 80171fa:	609a      	str	r2, [r3, #8]
}
 80171fc:	bf00      	nop
 80171fe:	3708      	adds	r7, #8
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}
 8017204:	7fff55aa 	.word	0x7fff55aa

08017208 <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 8017208:	b580      	push	{r7, lr}
 801720a:	b082      	sub	sp, #8
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	689b      	ldr	r3, [r3, #8]
 8017216:	4a14      	ldr	r2, [pc, #80]	@ (8017268 <bi_free+0x60>)
 8017218:	4293      	cmp	r3, r2
 801721a:	d01f      	beq.n	801725c <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	689b      	ldr	r3, [r3, #8]
 8017220:	1e5a      	subs	r2, r3, #1
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	609a      	str	r2, [r3, #8]
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	689b      	ldr	r3, [r3, #8]
 801722a:	2b00      	cmp	r3, #0
 801722c:	dc18      	bgt.n	8017260 <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	685a      	ldr	r2, [r3, #4]
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017240:	1c5a      	adds	r2, r3, #1
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801724a:	1e5a      	subs	r2, r3, #1
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017254:	2b00      	cmp	r3, #0
 8017256:	da04      	bge.n	8017262 <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 8017258:	f006 ff0c 	bl	801e074 <abort>
    return;
 801725c:	bf00      	nop
 801725e:	e000      	b.n	8017262 <bi_free+0x5a>
    return;
 8017260:	bf00      	nop
  }
}
 8017262:	3708      	adds	r7, #8
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	7fff55aa 	.word	0x7fff55aa

0801726c <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 8017276:	2101      	movs	r1, #1
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f000 fe6b 	bl	8017f54 <alloc>
 801727e:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	68db      	ldr	r3, [r3, #12]
 8017284:	683a      	ldr	r2, [r7, #0]
 8017286:	601a      	str	r2, [r3, #0]
  return biR;
 8017288:	68fb      	ldr	r3, [r7, #12]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3710      	adds	r7, #16
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}

08017292 <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 8017292:	b580      	push	{r7, lr}
 8017294:	b084      	sub	sp, #16
 8017296:	af00      	add	r7, sp, #0
 8017298:	6078      	str	r0, [r7, #4]
 801729a:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172a2:	4619      	mov	r1, r3
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f000 fe55 	bl	8017f54 <alloc>
 80172aa:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	68d8      	ldr	r0, [r3, #12]
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	68d9      	ldr	r1, [r3, #12]
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172ba:	009b      	lsls	r3, r3, #2
 80172bc:	461a      	mov	r2, r3
 80172be:	f007 fb0e 	bl	801e8de <memcpy>
  return biR;
 80172c2:	68fb      	ldr	r3, [r7, #12]
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	3710      	adds	r7, #16
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b08c      	sub	sp, #48	@ 0x30
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 80172d8:	2300      	movs	r3, #0
 80172da:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80172e8:	4293      	cmp	r3, r2
 80172ea:	bfb8      	it	lt
 80172ec:	4613      	movlt	r3, r2
 80172ee:	b21b      	sxth	r3, r3
 80172f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 80172f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172f4:	3301      	adds	r3, #1
 80172f6:	4619      	mov	r1, r3
 80172f8:	68b8      	ldr	r0, [r7, #8]
 80172fa:	f000 fdcf 	bl	8017e9c <more_comps>
  more_comps(bib, n);
 80172fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f000 fdcb 	bl	8017e9c <more_comps>
  pa = bia->comps;
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	68db      	ldr	r3, [r3, #12]
 801730a:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 8017312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	6a3b      	ldr	r3, [r7, #32]
 8017318:	1d19      	adds	r1, r3, #4
 801731a:	6239      	str	r1, [r7, #32]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	4413      	add	r3, r2
 8017320:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 8017322:	69fa      	ldr	r2, [r7, #28]
 8017324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017326:	4413      	add	r3, r2
 8017328:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	69fa      	ldr	r2, [r7, #28]
 8017330:	429a      	cmp	r2, r3
 8017332:	bf34      	ite	cc
 8017334:	2301      	movcc	r3, #1
 8017336:	2300      	movcs	r3, #0
 8017338:	b2db      	uxtb	r3, r3
 801733a:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801733c:	69ba      	ldr	r2, [r7, #24]
 801733e:	69fb      	ldr	r3, [r7, #28]
 8017340:	429a      	cmp	r2, r3
 8017342:	bf34      	ite	cc
 8017344:	2301      	movcc	r3, #1
 8017346:	2300      	movcs	r3, #0
 8017348:	b2db      	uxtb	r3, r3
 801734a:	461a      	mov	r2, r3
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	4313      	orrs	r3, r2
 8017350:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 8017352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017354:	1d1a      	adds	r2, r3, #4
 8017356:	627a      	str	r2, [r7, #36]	@ 0x24
 8017358:	69ba      	ldr	r2, [r7, #24]
 801735a:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801735c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801735e:	3b01      	subs	r3, #1
 8017360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017364:	2b00      	cmp	r3, #0
 8017366:	d1d4      	bne.n	8017312 <bi_add+0x46>

  *pa = carry; /* do overflow */
 8017368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801736a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801736c:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801736e:	6879      	ldr	r1, [r7, #4]
 8017370:	68f8      	ldr	r0, [r7, #12]
 8017372:	f7ff ff49 	bl	8017208 <bi_free>
  return trim(bia);
 8017376:	68b8      	ldr	r0, [r7, #8]
 8017378:	f000 fe9d 	bl	80180b6 <trim>
 801737c:	4603      	mov	r3, r0
}
 801737e:	4618      	mov	r0, r3
 8017380:	3730      	adds	r7, #48	@ 0x30
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}

08017386 <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 8017386:	b580      	push	{r7, lr}
 8017388:	b08c      	sub	sp, #48	@ 0x30
 801738a:	af00      	add	r7, sp, #0
 801738c:	60f8      	str	r0, [r7, #12]
 801738e:	60b9      	str	r1, [r7, #8]
 8017390:	607a      	str	r2, [r7, #4]
 8017392:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801739a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801739c:	2300      	movs	r3, #0
 801739e:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 80173a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f000 fd7a 	bl	8017e9c <more_comps>
  pa = bia->comps;
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	68db      	ldr	r3, [r3, #12]
 80173ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	68db      	ldr	r3, [r3, #12]
 80173b2:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 80173b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ba:	1d19      	adds	r1, r3, #4
 80173bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	1ad3      	subs	r3, r2, r3
 80173c2:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 80173c4:	69fa      	ldr	r2, [r7, #28]
 80173c6:	6a3b      	ldr	r3, [r7, #32]
 80173c8:	1ad3      	subs	r3, r2, r3
 80173ca:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 80173cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	69fa      	ldr	r2, [r7, #28]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	bf8c      	ite	hi
 80173d6:	2301      	movhi	r3, #1
 80173d8:	2300      	movls	r3, #0
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 80173de:	69ba      	ldr	r2, [r7, #24]
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	bf8c      	ite	hi
 80173e6:	2301      	movhi	r3, #1
 80173e8:	2300      	movls	r3, #0
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	461a      	mov	r2, r3
 80173ee:	697b      	ldr	r3, [r7, #20]
 80173f0:	4313      	orrs	r3, r2
 80173f2:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 80173f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173f6:	1d1a      	adds	r2, r3, #4
 80173f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80173fa:	69ba      	ldr	r2, [r7, #24]
 80173fc:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 80173fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017400:	3b01      	subs	r3, #1
 8017402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017406:	2b00      	cmp	r3, #0
 8017408:	d1d4      	bne.n	80173b4 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d002      	beq.n	8017416 <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 8017410:	6a3a      	ldr	r2, [r7, #32]
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f000 fe4d 	bl	80180b6 <trim>
 801741c:	4603      	mov	r3, r0
 801741e:	4619      	mov	r1, r3
 8017420:	68f8      	ldr	r0, [r7, #12]
 8017422:	f7ff fef1 	bl	8017208 <bi_free>
  return trim(bia);
 8017426:	68b8      	ldr	r0, [r7, #8]
 8017428:	f000 fe45 	bl	80180b6 <trim>
 801742c:	4603      	mov	r3, r0
}
 801742e:	4618      	mov	r0, r3
 8017430:	3730      	adds	r7, #48	@ 0x30
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}

08017436 <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 8017436:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801743a:	b094      	sub	sp, #80	@ 0x50
 801743c:	af00      	add	r7, sp, #0
 801743e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8017440:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017442:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 8017444:	2300      	movs	r3, #0
 8017446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801744a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801744e:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 8017450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017452:	3301      	adds	r3, #1
 8017454:	4619      	mov	r1, r3
 8017456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017458:	f000 fd7c 	bl	8017f54 <alloc>
 801745c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801745e:	2300      	movs	r3, #0
 8017460:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 8017462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017464:	68db      	ldr	r3, [r3, #12]
 8017466:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 8017468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801746a:	68db      	ldr	r3, [r3, #12]
 801746c:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801746e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017470:	3301      	adds	r3, #1
 8017472:	009b      	lsls	r3, r3, #2
 8017474:	461a      	mov	r2, r3
 8017476:	2100      	movs	r1, #0
 8017478:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801747a:	f007 f8fa 	bl	801e672 <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801747e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	2200      	movs	r2, #0
 8017484:	61bb      	str	r3, [r7, #24]
 8017486:	61fa      	str	r2, [r7, #28]
 8017488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801748a:	009a      	lsls	r2, r3, #2
 801748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801748e:	4413      	add	r3, r2
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	2200      	movs	r2, #0
 8017494:	613b      	str	r3, [r7, #16]
 8017496:	617a      	str	r2, [r7, #20]
 8017498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801749a:	2200      	movs	r2, #0
 801749c:	469a      	mov	sl, r3
 801749e:	4693      	mov	fp, r2
 80174a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80174a4:	460b      	mov	r3, r1
 80174a6:	fb0a f203 	mul.w	r2, sl, r3
 80174aa:	4603      	mov	r3, r0
 80174ac:	fb03 f30b 	mul.w	r3, r3, fp
 80174b0:	4413      	add	r3, r2
 80174b2:	4602      	mov	r2, r0
 80174b4:	fba2 450a 	umull	r4, r5, r2, sl
 80174b8:	442b      	add	r3, r5
 80174ba:	461d      	mov	r5, r3
 80174bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80174c0:	460b      	mov	r3, r1
 80174c2:	eb13 0804 	adds.w	r8, r3, r4
 80174c6:	4613      	mov	r3, r2
 80174c8:	eb43 0905 	adc.w	r9, r3, r5
 80174cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174ce:	2200      	movs	r2, #0
 80174d0:	60bb      	str	r3, [r7, #8]
 80174d2:	60fa      	str	r2, [r7, #12]
 80174d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80174d8:	460b      	mov	r3, r1
 80174da:	eb18 0303 	adds.w	r3, r8, r3
 80174de:	603b      	str	r3, [r7, #0]
 80174e0:	4613      	mov	r3, r2
 80174e2:	eb49 0303 	adc.w	r3, r9, r3
 80174e6:	607b      	str	r3, [r7, #4]
 80174e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 80174f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80174f2:	1d13      	adds	r3, r2, #4
 80174f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80174f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174f8:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 80174fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80174fe:	f04f 0000 	mov.w	r0, #0
 8017502:	f04f 0100 	mov.w	r1, #0
 8017506:	0018      	movs	r0, r3
 8017508:	2100      	movs	r1, #0
 801750a:	4603      	mov	r3, r0
 801750c:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801750e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017510:	3301      	adds	r3, #1
 8017512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017514:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017518:	429a      	cmp	r2, r3
 801751a:	dbb0      	blt.n	801747e <bi_int_multiply+0x48>

  *r = carry;
 801751c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801751e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017520:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 8017522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017524:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017526:	f7ff fe6f 	bl	8017208 <bi_free>
  return trim(biR);
 801752a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801752c:	f000 fdc3 	bl	80180b6 <trim>
 8017530:	4603      	mov	r3, r0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3750      	adds	r7, #80	@ 0x50
 8017536:	46bd      	mov	sp, r7
 8017538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801753c <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801753c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017540:	b0a0      	sub	sp, #128	@ 0x80
 8017542:	af00      	add	r7, sp, #0
 8017544:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8017548:	647a      	str	r2, [r7, #68]	@ 0x44
 801754a:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801754c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801754e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017552:	673b      	str	r3, [r7, #112]	@ 0x70
 8017554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801755a:	461a      	mov	r2, r3
 801755c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801755e:	1ad3      	subs	r3, r2, r3
 8017560:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 8017562:	2300      	movs	r3, #0
 8017564:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017568:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801756c:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801756e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017570:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017574:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 8017578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801757a:	2b00      	cmp	r3, #0
 801757c:	d00c      	beq.n	8017598 <bi_divide+0x5c>
 801757e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8017580:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017582:	f000 fc36 	bl	8017df2 <bi_compare>
 8017586:	4603      	mov	r3, r0
 8017588:	2b00      	cmp	r3, #0
 801758a:	dd05      	ble.n	8017598 <bi_divide+0x5c>
    bi_free(ctx, v);
 801758c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801758e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017590:	f7ff fe3a 	bl	8017208 <bi_free>
    return u;
 8017594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017596:	e1fe      	b.n	8017996 <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 8017598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801759a:	3301      	adds	r3, #1
 801759c:	4619      	mov	r1, r3
 801759e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80175a0:	f000 fcd8 	bl	8017f54 <alloc>
 80175a4:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 80175a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80175a8:	3301      	adds	r3, #1
 80175aa:	4619      	mov	r1, r3
 80175ac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80175ae:	f000 fcd1 	bl	8017f54 <alloc>
 80175b2:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 80175b4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80175b6:	f000 fd7e 	bl	80180b6 <trim>
 80175ba:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 80175bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175be:	68d9      	ldr	r1, [r3, #12]
 80175c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80175c6:	461a      	mov	r2, r3
 80175c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80175cc:	4413      	add	r3, r2
 80175ce:	009b      	lsls	r3, r3, #2
 80175d0:	440b      	add	r3, r1
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	3301      	adds	r3, #1
 80175d6:	2200      	movs	r2, #0
 80175d8:	461c      	mov	r4, r3
 80175da:	4615      	mov	r5, r2
 80175dc:	4622      	mov	r2, r4
 80175de:	462b      	mov	r3, r5
 80175e0:	f04f 0000 	mov.w	r0, #0
 80175e4:	f04f 0101 	mov.w	r1, #1
 80175e8:	f7e8 fe92 	bl	8000310 <__aeabi_uldivmod>
 80175ec:	4602      	mov	r2, r0
 80175ee:	460b      	mov	r3, r1
 80175f0:	4613      	mov	r3, r2
 80175f2:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 80175f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80175f6:	68d8      	ldr	r0, [r3, #12]
 80175f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80175fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	461a      	mov	r2, r3
 8017602:	2100      	movs	r1, #0
 8017604:	f007 f835 	bl	801e672 <memset>

  /* normalise */
  if (d > 1) {
 8017608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801760a:	2b01      	cmp	r3, #1
 801760c:	d916      	bls.n	801763c <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801760e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017610:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8017612:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017614:	f7ff ff0f 	bl	8017436 <bi_int_multiply>
 8017618:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801761a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801761c:	2b00      	cmp	r3, #0
 801761e:	d007      	beq.n	8017630 <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 8017620:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8017624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017626:	3306      	adds	r3, #6
 8017628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801762c:	647b      	str	r3, [r7, #68]	@ 0x44
 801762e:	e005      	b.n	801763c <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 8017630:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017632:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017634:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017636:	f7ff fefe 	bl	8017436 <bi_int_multiply>
 801763a:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801763c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801763e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017642:	461a      	mov	r2, r3
 8017644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017646:	4293      	cmp	r3, r2
 8017648:	d105      	bne.n	8017656 <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801764a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801764c:	3301      	adds	r3, #1
 801764e:	4619      	mov	r1, r3
 8017650:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017652:	f000 fc23 	bl	8017e9c <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 8017656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017658:	68d8      	ldr	r0, [r3, #12]
 801765a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801765c:	68d9      	ldr	r1, [r3, #12]
 801765e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017664:	461a      	mov	r2, r3
 8017666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017668:	1ad3      	subs	r3, r2, r3
 801766a:	1e5a      	subs	r2, r3, #1
 801766c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801766e:	1ad3      	subs	r3, r2, r3
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 8017674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017676:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	461a      	mov	r2, r3
 801767c:	f007 f92f 	bl	801e8de <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 8017680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017682:	68d9      	ldr	r1, [r3, #12]
 8017684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017686:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801768a:	461a      	mov	r2, r3
 801768c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017690:	4413      	add	r3, r2
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	440b      	add	r3, r1
 8017696:	6818      	ldr	r0, [r3, #0]
 8017698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801769a:	68d9      	ldr	r1, [r3, #12]
 801769c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801769e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80176a2:	461a      	mov	r2, r3
 80176a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80176a8:	4413      	add	r3, r2
 80176aa:	009b      	lsls	r3, r3, #2
 80176ac:	440b      	add	r3, r1
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	4298      	cmp	r0, r3
 80176b2:	d103      	bne.n	80176bc <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 80176b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80176ba:	e0c2      	b.n	8017842 <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 80176bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80176be:	68d9      	ldr	r1, [r3, #12]
 80176c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80176c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80176c6:	461a      	mov	r2, r3
 80176c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80176cc:	4413      	add	r3, r2
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	440b      	add	r3, r1
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	2200      	movs	r2, #0
 80176d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80176d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80176da:	f04f 0000 	mov.w	r0, #0
 80176de:	f04f 0100 	mov.w	r1, #0
 80176e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176e4:	0019      	movs	r1, r3
 80176e6:	2000      	movs	r0, #0
 80176e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80176ea:	68dc      	ldr	r4, [r3, #12]
 80176ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80176ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80176f2:	461a      	mov	r2, r3
 80176f4:	4baa      	ldr	r3, [pc, #680]	@ (80179a0 <bi_divide+0x464>)
 80176f6:	4413      	add	r3, r2
 80176f8:	009b      	lsls	r3, r3, #2
 80176fa:	4423      	add	r3, r4
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	2200      	movs	r2, #0
 8017700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017704:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8017708:	4623      	mov	r3, r4
 801770a:	18c3      	adds	r3, r0, r3
 801770c:	623b      	str	r3, [r7, #32]
 801770e:	462b      	mov	r3, r5
 8017710:	eb41 0303 	adc.w	r3, r1, r3
 8017714:	627b      	str	r3, [r7, #36]	@ 0x24
 8017716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017718:	68d9      	ldr	r1, [r3, #12]
 801771a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801771c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017720:	461a      	mov	r2, r3
 8017722:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017726:	4413      	add	r3, r2
 8017728:	009b      	lsls	r3, r3, #2
 801772a:	440b      	add	r3, r1
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	2200      	movs	r2, #0
 8017730:	61bb      	str	r3, [r7, #24]
 8017732:	61fa      	str	r2, [r7, #28]
 8017734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017738:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801773c:	f7e8 fde8 	bl	8000310 <__aeabi_uldivmod>
 8017740:	4602      	mov	r2, r0
 8017742:	460b      	mov	r3, r1
 8017744:	4613      	mov	r3, r2
 8017746:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 8017748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801774a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801774e:	2b01      	cmp	r3, #1
 8017750:	dd77      	ble.n	8017842 <bi_divide+0x306>
 8017752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017754:	68d9      	ldr	r1, [r3, #12]
 8017756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017758:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801775c:	461a      	mov	r2, r3
 801775e:	4b90      	ldr	r3, [pc, #576]	@ (80179a0 <bi_divide+0x464>)
 8017760:	4413      	add	r3, r2
 8017762:	009b      	lsls	r3, r3, #2
 8017764:	440b      	add	r3, r1
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d06a      	beq.n	8017842 <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801776c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801776e:	68d9      	ldr	r1, [r3, #12]
 8017770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017772:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017776:	461a      	mov	r2, r3
 8017778:	4b89      	ldr	r3, [pc, #548]	@ (80179a0 <bi_divide+0x464>)
 801777a:	4413      	add	r3, r2
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	440b      	add	r3, r1
 8017780:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 8017782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017784:	68d9      	ldr	r1, [r3, #12]
 8017786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017788:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801778c:	461a      	mov	r2, r3
 801778e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017792:	4413      	add	r3, r2
 8017794:	009b      	lsls	r3, r3, #2
 8017796:	440b      	add	r3, r1
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801779c:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 80177a0:	1ac3      	subs	r3, r0, r3
 80177a2:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 80177a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177a6:	68d9      	ldr	r1, [r3, #12]
 80177a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80177ae:	461a      	mov	r2, r3
 80177b0:	4b7b      	ldr	r3, [pc, #492]	@ (80179a0 <bi_divide+0x464>)
 80177b2:	4413      	add	r3, r2
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	440b      	add	r3, r1
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	2200      	movs	r2, #0
 80177bc:	613b      	str	r3, [r7, #16]
 80177be:	617a      	str	r2, [r7, #20]
 80177c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80177c2:	2200      	movs	r2, #0
 80177c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80177c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80177c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80177cc:	462b      	mov	r3, r5
 80177ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80177d2:	4602      	mov	r2, r0
 80177d4:	fb02 f203 	mul.w	r2, r2, r3
 80177d8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80177dc:	460b      	mov	r3, r1
 80177de:	4621      	mov	r1, r4
 80177e0:	fb01 f303 	mul.w	r3, r1, r3
 80177e4:	4413      	add	r3, r2
 80177e6:	4622      	mov	r2, r4
 80177e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80177ea:	fba2 8901 	umull	r8, r9, r2, r1
 80177ee:	444b      	add	r3, r9
 80177f0:	4699      	mov	r9, r3
 80177f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177f4:	2200      	movs	r2, #0
 80177f6:	60bb      	str	r3, [r7, #8]
 80177f8:	60fa      	str	r2, [r7, #12]
 80177fa:	f04f 0000 	mov.w	r0, #0
 80177fe:	f04f 0100 	mov.w	r1, #0
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	0019      	movs	r1, r3
 8017806:	2000      	movs	r0, #0
 8017808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801780a:	68dc      	ldr	r4, [r3, #12]
 801780c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801780e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017812:	461a      	mov	r2, r3
 8017814:	4b63      	ldr	r3, [pc, #396]	@ (80179a4 <bi_divide+0x468>)
 8017816:	4413      	add	r3, r2
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	4423      	add	r3, r4
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2200      	movs	r2, #0
 8017820:	603b      	str	r3, [r7, #0]
 8017822:	607a      	str	r2, [r7, #4]
 8017824:	e9d7 4500 	ldrd	r4, r5, [r7]
 8017828:	4623      	mov	r3, r4
 801782a:	eb10 0a03 	adds.w	sl, r0, r3
 801782e:	462b      	mov	r3, r5
 8017830:	eb41 0b03 	adc.w	fp, r1, r3
 8017834:	45c2      	cmp	sl, r8
 8017836:	eb7b 0309 	sbcs.w	r3, fp, r9
 801783a:	d202      	bcs.n	8017842 <bi_divide+0x306>
          q_dash--;
 801783c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801783e:	3b01      	subs	r3, #1
 8017840:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 8017842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017844:	2b00      	cmp	r3, #0
 8017846:	d057      	beq.n	80178f8 <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 8017848:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801784a:	f7ff fc9d 	bl	8017188 <bi_copy>
 801784e:	4603      	mov	r3, r0
 8017850:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8017852:	4619      	mov	r1, r3
 8017854:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017856:	f7ff fdee 	bl	8017436 <bi_int_multiply>
 801785a:	4602      	mov	r2, r0
 801785c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017860:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8017862:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017864:	f7ff fd8f 	bl	8017386 <bi_subtract>
 8017868:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801786a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801786c:	3301      	adds	r3, #1
 801786e:	4619      	mov	r1, r3
 8017870:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8017872:	f000 fb13 	bl	8017e9c <more_comps>

      Q(j) = q_dash;
 8017876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017878:	68d9      	ldr	r1, [r3, #12]
 801787a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801787c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017880:	461a      	mov	r2, r3
 8017882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	461a      	mov	r2, r3
 8017888:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801788c:	4413      	add	r3, r2
 801788e:	009b      	lsls	r3, r3, #2
 8017890:	18ca      	adds	r2, r1, r3
 8017892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017894:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 8017896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017898:	2b00      	cmp	r3, #0
 801789a:	d03d      	beq.n	8017918 <bi_divide+0x3dc>
        Q(j)--;
 801789c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801789e:	68d9      	ldr	r1, [r3, #12]
 80178a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80178a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80178a6:	461a      	mov	r2, r3
 80178a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80178aa:	1ad3      	subs	r3, r2, r3
 80178ac:	461a      	mov	r2, r3
 80178ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80178b2:	4413      	add	r3, r2
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	18ca      	adds	r2, r1, r3
 80178b8:	6813      	ldr	r3, [r2, #0]
 80178ba:	3b01      	subs	r3, #1
 80178bc:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 80178be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80178c0:	f7ff fc62 	bl	8017188 <bi_copy>
 80178c4:	4603      	mov	r3, r0
 80178c6:	461a      	mov	r2, r3
 80178c8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80178ca:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80178cc:	f7ff fcfe 	bl	80172cc <bi_add>
 80178d0:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 80178d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80178d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80178d8:	b29b      	uxth	r3, r3
 80178da:	3b01      	subs	r3, #1
 80178dc:	b29b      	uxth	r3, r3
 80178de:	b21b      	sxth	r3, r3
 80178e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80178e2:	8093      	strh	r3, [r2, #4]
        v->size--;
 80178e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80178e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	3b01      	subs	r3, #1
 80178ee:	b29b      	uxth	r3, r3
 80178f0:	b21b      	sxth	r3, r3
 80178f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80178f4:	8093      	strh	r3, [r2, #4]
 80178f6:	e00f      	b.n	8017918 <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 80178f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80178fa:	68d9      	ldr	r1, [r3, #12]
 80178fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80178fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017902:	461a      	mov	r2, r3
 8017904:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017906:	1ad3      	subs	r3, r2, r3
 8017908:	461a      	mov	r2, r3
 801790a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801790e:	4413      	add	r3, r2
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	18ca      	adds	r2, r1, r3
 8017914:	2300      	movs	r3, #0
 8017916:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 8017918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801791a:	68d9      	ldr	r1, [r3, #12]
 801791c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801791e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017922:	461a      	mov	r2, r3
 8017924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017926:	1ad3      	subs	r3, r2, r3
 8017928:	1e5a      	subs	r2, r3, #1
 801792a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801792c:	1ad3      	subs	r3, r2, r3
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	18c8      	adds	r0, r1, r3
 8017932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017934:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 8017936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017938:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	461a      	mov	r2, r3
 801793e:	f006 ffce 	bl	801e8de <memcpy>
  } while (++j <= m);
 8017942:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017944:	3301      	adds	r3, #1
 8017946:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017948:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801794a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801794c:	429a      	cmp	r2, r3
 801794e:	f77f ae82 	ble.w	8017656 <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 8017952:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8017954:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017956:	f7ff fc57 	bl	8017208 <bi_free>
  bi_free(ctx, v);
 801795a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801795c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801795e:	f7ff fc53 	bl	8017208 <bi_free>

  if (is_mod) /* get the remainder */
 8017962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017964:	2b00      	cmp	r3, #0
 8017966:	d00e      	beq.n	8017986 <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 8017968:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801796a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801796c:	f7ff fc4c 	bl	8017208 <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 8017970:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017972:	f000 fba0 	bl	80180b6 <trim>
 8017976:	4603      	mov	r3, r0
 8017978:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801797a:	4619      	mov	r1, r3
 801797c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801797e:	f000 f813 	bl	80179a8 <bi_int_divide>
 8017982:	4603      	mov	r3, r0
 8017984:	e007      	b.n	8017996 <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 8017986:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8017988:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801798a:	f7ff fc3d 	bl	8017208 <bi_free>
    return trim(quotient);
 801798e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8017990:	f000 fb91 	bl	80180b6 <trim>
 8017994:	4603      	mov	r3, r0
  }
}
 8017996:	4618      	mov	r0, r3
 8017998:	3780      	adds	r7, #128	@ 0x80
 801799a:	46bd      	mov	sp, r7
 801799c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80179a0:	3ffffffe 	.word	0x3ffffffe
 80179a4:	3ffffffd 	.word	0x3ffffffd

080179a8 <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 80179a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80179ac:	b08a      	sub	sp, #40	@ 0x28
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6178      	str	r0, [r7, #20]
 80179b2:	6139      	str	r1, [r7, #16]
 80179b4:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80179bc:	3b01      	subs	r3, #1
 80179be:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 80179c0:	f04f 0200 	mov.w	r2, #0
 80179c4:	f04f 0300 	mov.w	r3, #0
 80179c8:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 80179cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80179d0:	f04f 0200 	mov.w	r2, #0
 80179d4:	f04f 0300 	mov.w	r3, #0
 80179d8:	0003      	movs	r3, r0
 80179da:	2200      	movs	r2, #0
 80179dc:	6939      	ldr	r1, [r7, #16]
 80179de:	68c8      	ldr	r0, [r1, #12]
 80179e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80179e2:	0089      	lsls	r1, r1, #2
 80179e4:	4401      	add	r1, r0
 80179e6:	6809      	ldr	r1, [r1, #0]
 80179e8:	2000      	movs	r0, #0
 80179ea:	460c      	mov	r4, r1
 80179ec:	4605      	mov	r5, r0
 80179ee:	eb12 0804 	adds.w	r8, r2, r4
 80179f2:	eb43 0905 	adc.w	r9, r3, r5
 80179f6:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	2200      	movs	r2, #0
 80179fe:	603b      	str	r3, [r7, #0]
 8017a00:	607a      	str	r2, [r7, #4]
 8017a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a0a:	f7e8 fc81 	bl	8000310 <__aeabi_uldivmod>
 8017a0e:	4602      	mov	r2, r0
 8017a10:	460b      	mov	r3, r1
 8017a12:	4610      	mov	r0, r2
 8017a14:	4619      	mov	r1, r3
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	68da      	ldr	r2, [r3, #12]
 8017a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a1c:	009b      	lsls	r3, r3, #2
 8017a1e:	4413      	add	r3, r2
 8017a20:	4602      	mov	r2, r0
 8017a22:	601a      	str	r2, [r3, #0]
    r %= denom;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	2200      	movs	r2, #0
 8017a28:	469a      	mov	sl, r3
 8017a2a:	4693      	mov	fp, r2
 8017a2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8017a30:	4652      	mov	r2, sl
 8017a32:	465b      	mov	r3, fp
 8017a34:	f7e8 fc6c 	bl	8000310 <__aeabi_uldivmod>
 8017a38:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 8017a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dac1      	bge.n	80179cc <bi_int_divide+0x24>

  return trim(biR);
 8017a48:	6938      	ldr	r0, [r7, #16]
 8017a4a:	f000 fb34 	bl	80180b6 <trim>
 8017a4e:	4603      	mov	r3, r0
}
 8017a50:	4618      	mov	r0, r3
 8017a52:	3728      	adds	r7, #40	@ 0x28
 8017a54:	46bd      	mov	sp, r7
 8017a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017a5a <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 8017a5a:	b580      	push	{r7, lr}
 8017a5c:	b088      	sub	sp, #32
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	60f8      	str	r0, [r7, #12]
 8017a62:	60b9      	str	r1, [r7, #8]
 8017a64:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	3303      	adds	r3, #3
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	da00      	bge.n	8017a70 <bi_import+0x16>
 8017a6e:	3303      	adds	r3, #3
 8017a70:	109b      	asrs	r3, r3, #2
 8017a72:	4619      	mov	r1, r3
 8017a74:	68f8      	ldr	r0, [r7, #12]
 8017a76:	f000 fa6d 	bl	8017f54 <alloc>
 8017a7a:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	61bb      	str	r3, [r7, #24]
 8017a80:	2300      	movs	r3, #0
 8017a82:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	68d8      	ldr	r0, [r3, #12]
 8017a88:	693b      	ldr	r3, [r7, #16]
 8017a8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017a8e:	009b      	lsls	r3, r3, #2
 8017a90:	461a      	mov	r2, r3
 8017a92:	2100      	movs	r1, #0
 8017a94:	f006 fded 	bl	801e672 <memset>

  for (i = size - 1; i >= 0; i--) {
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3b01      	subs	r3, #1
 8017a9c:	61fb      	str	r3, [r7, #28]
 8017a9e:	e022      	b.n	8017ae6 <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	68da      	ldr	r2, [r3, #12]
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	009b      	lsls	r3, r3, #2
 8017aa8:	4413      	add	r3, r2
 8017aaa:	6819      	ldr	r1, [r3, #0]
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	68ba      	ldr	r2, [r7, #8]
 8017ab0:	4413      	add	r3, r2
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	461a      	mov	r2, r3
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	00db      	lsls	r3, r3, #3
 8017aba:	409a      	lsls	r2, r3
 8017abc:	693b      	ldr	r3, [r7, #16]
 8017abe:	68d8      	ldr	r0, [r3, #12]
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	009b      	lsls	r3, r3, #2
 8017ac4:	4403      	add	r3, r0
 8017ac6:	440a      	add	r2, r1
 8017ac8:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 8017aca:	69bb      	ldr	r3, [r7, #24]
 8017acc:	3301      	adds	r3, #1
 8017ace:	61bb      	str	r3, [r7, #24]
 8017ad0:	69bb      	ldr	r3, [r7, #24]
 8017ad2:	2b04      	cmp	r3, #4
 8017ad4:	d104      	bne.n	8017ae0 <bi_import+0x86>
      j = 0;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	61bb      	str	r3, [r7, #24]
      offset++;
 8017ada:	697b      	ldr	r3, [r7, #20]
 8017adc:	3301      	adds	r3, #1
 8017ade:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 8017ae0:	69fb      	ldr	r3, [r7, #28]
 8017ae2:	3b01      	subs	r3, #1
 8017ae4:	61fb      	str	r3, [r7, #28]
 8017ae6:	69fb      	ldr	r3, [r7, #28]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	dad9      	bge.n	8017aa0 <bi_import+0x46>
    }
  }

  return trim(biR);
 8017aec:	6938      	ldr	r0, [r7, #16]
 8017aee:	f000 fae2 	bl	80180b6 <trim>
 8017af2:	4603      	mov	r3, r0
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3720      	adds	r7, #32
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b08a      	sub	sp, #40	@ 0x28
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	60f8      	str	r0, [r7, #12]
 8017b04:	60b9      	str	r1, [r7, #8]
 8017b06:	607a      	str	r2, [r7, #4]
 8017b08:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	3b01      	subs	r3, #1
 8017b0e:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	461a      	mov	r2, r3
 8017b14:	2100      	movs	r1, #0
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f006 fdab 	bl	801e672 <memset>

  for (i = 0; i < x->size; i++) {
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b20:	e02b      	b.n	8017b7a <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 8017b22:	2300      	movs	r3, #0
 8017b24:	623b      	str	r3, [r7, #32]
 8017b26:	e022      	b.n	8017b6e <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	00db      	lsls	r3, r3, #3
 8017b2c:	22ff      	movs	r2, #255	@ 0xff
 8017b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8017b32:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	68da      	ldr	r2, [r3, #12]
 8017b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b3a:	009b      	lsls	r3, r3, #2
 8017b3c:	4413      	add	r3, r2
 8017b3e:	681a      	ldr	r2, [r3, #0]
 8017b40:	69bb      	ldr	r3, [r7, #24]
 8017b42:	4013      	ands	r3, r2
 8017b44:	461a      	mov	r2, r3
 8017b46:	6a3b      	ldr	r3, [r7, #32]
 8017b48:	00db      	lsls	r3, r3, #3
 8017b4a:	fa42 f303 	asr.w	r3, r2, r3
 8017b4e:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 8017b50:	69fb      	ldr	r3, [r7, #28]
 8017b52:	1e5a      	subs	r2, r3, #1
 8017b54:	61fa      	str	r2, [r7, #28]
 8017b56:	461a      	mov	r2, r3
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	4413      	add	r3, r2
 8017b5c:	697a      	ldr	r2, [r7, #20]
 8017b5e:	b2d2      	uxtb	r2, r2
 8017b60:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 8017b62:	69fb      	ldr	r3, [r7, #28]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	db10      	blt.n	8017b8a <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 8017b68:	6a3b      	ldr	r3, [r7, #32]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	623b      	str	r3, [r7, #32]
 8017b6e:	6a3b      	ldr	r3, [r7, #32]
 8017b70:	2b03      	cmp	r3, #3
 8017b72:	ddd9      	ble.n	8017b28 <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 8017b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b76:	3301      	adds	r3, #1
 8017b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017b80:	461a      	mov	r2, r3
 8017b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b84:	4293      	cmp	r3, r2
 8017b86:	dbcc      	blt.n	8017b22 <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 8017b88:	e000      	b.n	8017b8c <bi_export+0x90>
        goto buf_done;
 8017b8a:	bf00      	nop

  bi_free(ctx, x);
 8017b8c:	68b9      	ldr	r1, [r7, #8]
 8017b8e:	68f8      	ldr	r0, [r7, #12]
 8017b90:	f7ff fb3a 	bl	8017208 <bi_free>
}
 8017b94:	bf00      	nop
 8017b96:	3728      	adds	r7, #40	@ 0x28
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 8017b9c:	b5b0      	push	{r4, r5, r7, lr}
 8017b9e:	b086      	sub	sp, #24
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 8017ba8:	68bb      	ldr	r3, [r7, #8]
 8017baa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017bae:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 8017bb0:	68bb      	ldr	r3, [r7, #8]
 8017bb2:	68da      	ldr	r2, [r3, #12]
 8017bb4:	6979      	ldr	r1, [r7, #20]
 8017bb6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017bba:	440b      	add	r3, r1
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	4413      	add	r3, r2
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	461c      	mov	r4, r3
 8017bc8:	4615      	mov	r5, r2
 8017bca:	4622      	mov	r2, r4
 8017bcc:	462b      	mov	r3, r5
 8017bce:	f04f 0000 	mov.w	r0, #0
 8017bd2:	f04f 0101 	mov.w	r1, #1
 8017bd6:	f7e8 fb9b 	bl	8000310 <__aeabi_uldivmod>
 8017bda:	4602      	mov	r2, r0
 8017bdc:	460b      	mov	r3, r1
 8017bde:	4613      	mov	r3, r2
 8017be0:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 8017be2:	68fa      	ldr	r2, [r7, #12]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3302      	adds	r3, #2
 8017be8:	009b      	lsls	r3, r3, #2
 8017bea:	4413      	add	r3, r2
 8017bec:	68ba      	ldr	r2, [r7, #8]
 8017bee:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 8017bf0:	68fa      	ldr	r2, [r7, #12]
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	3302      	adds	r3, #2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	4413      	add	r3, r2
 8017bfa:	685b      	ldr	r3, [r3, #4]
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7ff fadb 	bl	80171b8 <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 8017c02:	693a      	ldr	r2, [r7, #16]
 8017c04:	68b9      	ldr	r1, [r7, #8]
 8017c06:	68f8      	ldr	r0, [r7, #12]
 8017c08:	f7ff fc15 	bl	8017436 <bi_int_multiply>
 8017c0c:	4601      	mov	r1, r0
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	3206      	adds	r2, #6
 8017c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	3206      	adds	r2, #6
 8017c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7ff fac8 	bl	80171b8 <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 8017c28:	bf00      	nop
 8017c2a:	3718      	adds	r7, #24
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bdb0      	pop	{r4, r5, r7, pc}

08017c30 <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 8017c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c34:	b098      	sub	sp, #96	@ 0x60
 8017c36:	af00      	add	r7, sp, #0
 8017c38:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8017c3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8017c3e:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 8017c40:	2300      	movs	r3, #0
 8017c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 8017c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 8017c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 8017c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c58:	4413      	add	r3, r2
 8017c5a:	4619      	mov	r1, r3
 8017c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017c5e:	f000 f979 	bl	8017f54 <alloc>
 8017c62:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 8017c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 8017c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c6c:	68db      	ldr	r3, [r3, #12]
 8017c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 8017c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c72:	68db      	ldr	r3, [r3, #12]
 8017c74:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 8017c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c78:	68d8      	ldr	r0, [r3, #12]
 8017c7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c7e:	4413      	add	r3, r2
 8017c80:	009b      	lsls	r3, r3, #2
 8017c82:	461a      	mov	r2, r3
 8017c84:	2100      	movs	r1, #0
 8017c86:	f006 fcf4 	bl	801e672 <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 8017c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017c90:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 8017c92:	2300      	movs	r3, #0
 8017c94:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 8017c96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d014      	beq.n	8017cc8 <regular_multiply+0x98>
 8017c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ca4:	1ad3      	subs	r3, r2, r3
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	dd0e      	ble.n	8017cc8 <regular_multiply+0x98>
 8017caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	da09      	bge.n	8017cc8 <regular_multiply+0x98>
      r_index = outer_partial - 1;
 8017cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017cb8:	3b01      	subs	r3, #1
 8017cba:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 8017cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017cc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017cc2:	1ad3      	subs	r3, r2, r3
 8017cc4:	3b01      	subs	r3, #1
 8017cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 8017cc8:	6a3b      	ldr	r3, [r7, #32]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d003      	beq.n	8017cd6 <regular_multiply+0xa6>
 8017cce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017cd0:	6a3b      	ldr	r3, [r7, #32]
 8017cd2:	429a      	cmp	r2, r3
 8017cd4:	da5a      	bge.n	8017d8c <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 8017cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cd8:	009a      	lsls	r2, r3, #2
 8017cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017cdc:	4413      	add	r3, r2
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	61bb      	str	r3, [r7, #24]
 8017ce4:	61fa      	str	r2, [r7, #28]
 8017ce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017ce8:	009a      	lsls	r2, r3, #2
 8017cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cec:	4413      	add	r3, r2
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	469a      	mov	sl, r3
 8017cf4:	4693      	mov	fp, r2
 8017cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017cf8:	009a      	lsls	r2, r3, #2
 8017cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017cfc:	4413      	add	r3, r2
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2200      	movs	r2, #0
 8017d02:	613b      	str	r3, [r7, #16]
 8017d04:	617a      	str	r2, [r7, #20]
 8017d06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	fb03 f20b 	mul.w	r2, r3, fp
 8017d10:	460b      	mov	r3, r1
 8017d12:	fb0a f303 	mul.w	r3, sl, r3
 8017d16:	4413      	add	r3, r2
 8017d18:	4602      	mov	r2, r0
 8017d1a:	fbaa 4502 	umull	r4, r5, sl, r2
 8017d1e:	442b      	add	r3, r5
 8017d20:	461d      	mov	r5, r3
 8017d22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8017d26:	460b      	mov	r3, r1
 8017d28:	eb13 0804 	adds.w	r8, r3, r4
 8017d2c:	4613      	mov	r3, r2
 8017d2e:	eb43 0905 	adc.w	r9, r3, r5
 8017d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d34:	2200      	movs	r2, #0
 8017d36:	60bb      	str	r3, [r7, #8]
 8017d38:	60fa      	str	r2, [r7, #12]
 8017d3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8017d3e:	460b      	mov	r3, r1
 8017d40:	eb18 0303 	adds.w	r3, r8, r3
 8017d44:	603b      	str	r3, [r7, #0]
 8017d46:	4613      	mov	r3, r2
 8017d48:	eb49 0303 	adc.w	r3, r9, r3
 8017d4c:	607b      	str	r3, [r7, #4]
 8017d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017d52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 8017d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017d58:	1c53      	adds	r3, r2, #1
 8017d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	009a      	lsls	r2, r3, #2
 8017d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017d62:	441a      	add	r2, r3
 8017d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d66:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 8017d68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8017d6c:	f04f 0000 	mov.w	r0, #0
 8017d70:	f04f 0100 	mov.w	r1, #0
 8017d74:	0018      	movs	r0, r3
 8017d76:	2100      	movs	r1, #0
 8017d78:	4603      	mov	r3, r0
 8017d7a:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 8017d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017d7e:	3301      	adds	r3, #1
 8017d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017d82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d86:	429a      	cmp	r2, r3
 8017d88:	db9e      	blt.n	8017cc8 <regular_multiply+0x98>
 8017d8a:	e000      	b.n	8017d8e <regular_multiply+0x15e>
        break;
 8017d8c:	bf00      	nop

    sr[r_index] = carry;
 8017d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d90:	009a      	lsls	r2, r3, #2
 8017d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017d94:	441a      	add	r2, r3
 8017d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d98:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 8017d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017da0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017da4:	429a      	cmp	r2, r3
 8017da6:	f6ff af70 	blt.w	8017c8a <regular_multiply+0x5a>

  bi_free(ctx, bia);
 8017daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017dac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017dae:	f7ff fa2b 	bl	8017208 <bi_free>
  bi_free(ctx, bib);
 8017db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017db4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017db6:	f7ff fa27 	bl	8017208 <bi_free>
  return trim(biR);
 8017dba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017dbc:	f000 f97b 	bl	80180b6 <trim>
 8017dc0:	4603      	mov	r3, r0
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3760      	adds	r7, #96	@ 0x60
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08017dcc <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b086      	sub	sp, #24
 8017dd0:	af02      	add	r7, sp, #8
 8017dd2:	60f8      	str	r0, [r7, #12]
 8017dd4:	60b9      	str	r1, [r7, #8]
 8017dd6:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 8017dd8:	2300      	movs	r3, #0
 8017dda:	9300      	str	r3, [sp, #0]
 8017ddc:	2300      	movs	r3, #0
 8017dde:	687a      	ldr	r2, [r7, #4]
 8017de0:	68b9      	ldr	r1, [r7, #8]
 8017de2:	68f8      	ldr	r0, [r7, #12]
 8017de4:	f7ff ff24 	bl	8017c30 <regular_multiply>
 8017de8:	4603      	mov	r3, r0
#endif
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3710      	adds	r7, #16
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}

08017df2 <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 8017df2:	b480      	push	{r7}
 8017df4:	b087      	sub	sp, #28
 8017df6:	af00      	add	r7, sp, #0
 8017df8:	6078      	str	r0, [r7, #4]
 8017dfa:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	dd02      	ble.n	8017e12 <bi_compare+0x20>
    r = 1;
 8017e0c:	2301      	movs	r3, #1
 8017e0e:	617b      	str	r3, [r7, #20]
 8017e10:	e03d      	b.n	8017e8e <bi_compare+0x9c>
  else if (bia->size < bib->size)
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	da03      	bge.n	8017e2a <bi_compare+0x38>
    r = -1;
 8017e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017e26:	617b      	str	r3, [r7, #20]
 8017e28:	e031      	b.n	8017e8e <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	68db      	ldr	r3, [r3, #12]
 8017e2e:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 8017e36:	2300      	movs	r3, #0
 8017e38:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017e40:	3b01      	subs	r3, #1
 8017e42:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 8017e44:	693b      	ldr	r3, [r7, #16]
 8017e46:	009b      	lsls	r3, r3, #2
 8017e48:	68fa      	ldr	r2, [r7, #12]
 8017e4a:	4413      	add	r3, r2
 8017e4c:	681a      	ldr	r2, [r3, #0]
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	009b      	lsls	r3, r3, #2
 8017e52:	68b9      	ldr	r1, [r7, #8]
 8017e54:	440b      	add	r3, r1
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d902      	bls.n	8017e62 <bi_compare+0x70>
        r = 1;
 8017e5c:	2301      	movs	r3, #1
 8017e5e:	617b      	str	r3, [r7, #20]
        break;
 8017e60:	e015      	b.n	8017e8e <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	68fa      	ldr	r2, [r7, #12]
 8017e68:	4413      	add	r3, r2
 8017e6a:	681a      	ldr	r2, [r3, #0]
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	009b      	lsls	r3, r3, #2
 8017e70:	68b9      	ldr	r1, [r7, #8]
 8017e72:	440b      	add	r3, r1
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d203      	bcs.n	8017e82 <bi_compare+0x90>
        r = -1;
 8017e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017e7e:	617b      	str	r3, [r7, #20]
        break;
 8017e80:	e005      	b.n	8017e8e <bi_compare+0x9c>
      }
    } while (--i >= 0);
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	3b01      	subs	r3, #1
 8017e86:	613b      	str	r3, [r7, #16]
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	dada      	bge.n	8017e44 <bi_compare+0x52>
  }

  return r;
 8017e8e:	697b      	ldr	r3, [r7, #20]
}
 8017e90:	4618      	mov	r0, r3
 8017e92:	371c      	adds	r7, #28
 8017e94:	46bd      	mov	sp, r7
 8017e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9a:	4770      	bx	lr

08017e9c <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b084      	sub	sp, #16
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017eac:	461a      	mov	r2, r3
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	4293      	cmp	r3, r2
 8017eb2:	dd2e      	ble.n	8017f12 <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017eba:	005b      	lsls	r3, r3, #1
 8017ebc:	683a      	ldr	r2, [r7, #0]
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	bfb8      	it	lt
 8017ec2:	4613      	movlt	r3, r2
 8017ec4:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	009b      	lsls	r3, r3, #2
 8017eca:	4619      	mov	r1, r3
 8017ecc:	2001      	movs	r0, #1
 8017ece:	f006 f8fb 	bl	801e0c8 <calloc>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 8017ed6:	68bb      	ldr	r3, [r7, #8]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d00e      	beq.n	8017efa <more_comps+0x5e>
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	dd09      	ble.n	8017efa <more_comps+0x5e>
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	68d9      	ldr	r1, [r3, #12]
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017ef0:	009b      	lsls	r3, r3, #2
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	68b8      	ldr	r0, [r7, #8]
 8017ef6:	f006 fcf2 	bl	801e8de <memcpy>
    free(bi->comps);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	68db      	ldr	r3, [r3, #12]
 8017efe:	4618      	mov	r0, r3
 8017f00:	f006 f906 	bl	801e110 <free>
    bi->max_comps = (short) max;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	b21a      	sxth	r2, r3
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	68ba      	ldr	r2, [r7, #8]
 8017f10:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f18:	461a      	mov	r2, r3
 8017f1a:	683b      	ldr	r3, [r7, #0]
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	dd11      	ble.n	8017f44 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	68da      	ldr	r2, [r3, #12]
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f2a:	009b      	lsls	r3, r3, #2
 8017f2c:	18d0      	adds	r0, r2, r3
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f34:	461a      	mov	r2, r3
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	1a9b      	subs	r3, r3, r2
 8017f3a:	009b      	lsls	r3, r3, #2
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	2100      	movs	r1, #0
 8017f40:	f006 fb97 	bl	801e672 <memset>
  }

  bi->size = (short) n;
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	b21a      	sxth	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	809a      	strh	r2, [r3, #4]
}
 8017f4c:	bf00      	nop
 8017f4e:	3710      	adds	r7, #16
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b084      	sub	sp, #16
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d016      	beq.n	8017f94 <alloc+0x40>
    biR = ctx->free_list;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	685b      	ldr	r3, [r3, #4]
 8017f6a:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	681a      	ldr	r2, [r3, #0]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017f78:	1e5a      	subs	r2, r3, #1
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	689b      	ldr	r3, [r3, #8]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d001      	beq.n	8017f8a <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 8017f86:	f006 f875 	bl	801e074 <abort>
    }

    more_comps(biR, size);
 8017f8a:	6839      	ldr	r1, [r7, #0]
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f7ff ff85 	bl	8017e9c <more_comps>
 8017f92:	e013      	b.n	8017fbc <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 8017f94:	2110      	movs	r1, #16
 8017f96:	2001      	movs	r0, #1
 8017f98:	f006 f896 	bl	801e0c8 <calloc>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	009b      	lsls	r3, r3, #2
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	2001      	movs	r0, #1
 8017fa8:	f006 f88e 	bl	801e0c8 <calloc>
 8017fac:	4603      	mov	r3, r0
 8017fae:	461a      	mov	r2, r3
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	b21a      	sxth	r2, r3
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	b21a      	sxth	r2, r3
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017fd4:	1c5a      	adds	r2, r3, #1
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 8017fda:	68fb      	ldr	r3, [r7, #12]
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3710      	adds	r7, #16
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 8017fe4:	b480      	push	{r7}
 8017fe6:	b087      	sub	sp, #28
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 8017fec:	231f      	movs	r3, #31
 8017fee:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 8017ff0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8017ff4:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	68da      	ldr	r2, [r3, #12]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018000:	4619      	mov	r1, r3
 8018002:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8018006:	440b      	add	r3, r1
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	4413      	add	r3, r2
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 8018010:	68fa      	ldr	r2, [r7, #12]
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	4013      	ands	r3, r2
 8018016:	2b00      	cmp	r3, #0
 8018018:	d007      	beq.n	801802a <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018020:	3b01      	subs	r3, #1
 8018022:	015a      	lsls	r2, r3, #5
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	4413      	add	r3, r2
 8018028:	e009      	b.n	801803e <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801802a:	693b      	ldr	r3, [r7, #16]
 801802c:	085b      	lsrs	r3, r3, #1
 801802e:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	1e5a      	subs	r2, r3, #1
 8018034:	617a      	str	r2, [r7, #20]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d1ea      	bne.n	8018010 <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801803a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801803e:	4618      	mov	r0, r3
 8018040:	371c      	adds	r7, #28
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr

0801804a <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801804a:	b480      	push	{r7}
 801804c:	b087      	sub	sp, #28
 801804e:	af00      	add	r7, sp, #0
 8018050:	6078      	str	r0, [r7, #4]
 8018052:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	68da      	ldr	r2, [r3, #12]
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	da00      	bge.n	8018060 <exp_bit_is_one+0x16>
 801805e:	331f      	adds	r3, #31
 8018060:	115b      	asrs	r3, r3, #5
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	4413      	add	r3, r2
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	425a      	negs	r2, r3
 801806e:	f003 031f 	and.w	r3, r3, #31
 8018072:	f002 021f 	and.w	r2, r2, #31
 8018076:	bf58      	it	pl
 8018078:	4253      	negpl	r3, r2
 801807a:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801807c:	2301      	movs	r3, #1
 801807e:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 8018080:	2300      	movs	r3, #0
 8018082:	613b      	str	r3, [r7, #16]
 8018084:	e005      	b.n	8018092 <exp_bit_is_one+0x48>
    shift <<= 1;
 8018086:	697b      	ldr	r3, [r7, #20]
 8018088:	005b      	lsls	r3, r3, #1
 801808a:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	3301      	adds	r3, #1
 8018090:	613b      	str	r3, [r7, #16]
 8018092:	693a      	ldr	r2, [r7, #16]
 8018094:	68bb      	ldr	r3, [r7, #8]
 8018096:	429a      	cmp	r2, r3
 8018098:	dbf5      	blt.n	8018086 <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801809a:	68fa      	ldr	r2, [r7, #12]
 801809c:	697b      	ldr	r3, [r7, #20]
 801809e:	4013      	ands	r3, r2
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	bf14      	ite	ne
 80180a4:	2301      	movne	r3, #1
 80180a6:	2300      	moveq	r3, #0
 80180a8:	b2db      	uxtb	r3, r3
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	371c      	adds	r7, #28
 80180ae:	46bd      	mov	sp, r7
 80180b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b4:	4770      	bx	lr

080180b6 <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 80180b6:	b480      	push	{r7}
 80180b8:	b083      	sub	sp, #12
 80180ba:	af00      	add	r7, sp, #0
 80180bc:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 80180be:	e008      	b.n	80180d2 <trim+0x1c>
    bi->size--;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	3b01      	subs	r3, #1
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	b21a      	sxth	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	68da      	ldr	r2, [r3, #12]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180dc:	4619      	mov	r1, r3
 80180de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80180e2:	440b      	add	r3, r1
 80180e4:	009b      	lsls	r3, r3, #2
 80180e6:	4413      	add	r3, r2
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d104      	bne.n	80180f8 <trim+0x42>
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	dce3      	bgt.n	80180c0 <trim+0xa>
  }

  return bi;
 80180f8:	687b      	ldr	r3, [r7, #4]
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	370c      	adds	r7, #12
 80180fe:	46bd      	mov	sp, r7
 8018100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018104:	4770      	bx	lr

08018106 <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 8018106:	b590      	push	{r4, r7, lr}
 8018108:	b08b      	sub	sp, #44	@ 0x2c
 801810a:	af00      	add	r7, sp, #0
 801810c:	60f8      	str	r0, [r7, #12]
 801810e:	60b9      	str	r1, [r7, #8]
 8018110:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f7ff ff66 	bl	8017fe4 <find_max_exp_index>
 8018118:	6278      	str	r0, [r7, #36]	@ 0x24
 801811a:	2301      	movs	r3, #1
 801811c:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801811e:	2101      	movs	r1, #1
 8018120:	68f8      	ldr	r0, [r7, #12]
 8018122:	f7ff f8a3 	bl	801726c <int_to_bi>
 8018126:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 8018128:	2104      	movs	r1, #4
 801812a:	2001      	movs	r0, #1
 801812c:	f005 ffcc 	bl	801e0c8 <calloc>
 8018130:	4603      	mov	r3, r0
 8018132:	461a      	mov	r2, r3
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801813c:	68b9      	ldr	r1, [r7, #8]
 801813e:	68f8      	ldr	r0, [r7, #12]
 8018140:	f7ff f8a7 	bl	8017292 <bi_clone>
 8018144:	4603      	mov	r3, r0
 8018146:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	2201      	movs	r2, #1
 801814c:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	4618      	mov	r0, r3
 8018156:	f7ff f82f 	bl	80171b8 <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801815a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f7ff ff74 	bl	801804a <exp_bit_is_one>
 8018162:	4603      	mov	r3, r0
 8018164:	2b00      	cmp	r3, #0
 8018166:	d06c      	beq.n	8018242 <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 8018168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	1ad3      	subs	r3, r2, r3
 801816e:	3301      	adds	r3, #1
 8018170:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 8018172:	2300      	movs	r3, #0
 8018174:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 8018176:	69bb      	ldr	r3, [r7, #24]
 8018178:	2b00      	cmp	r3, #0
 801817a:	da05      	bge.n	8018188 <bi_mod_power+0x82>
        l = 0;
 801817c:	2300      	movs	r3, #0
 801817e:	61bb      	str	r3, [r7, #24]
 8018180:	e009      	b.n	8018196 <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	3301      	adds	r3, #1
 8018186:	61bb      	str	r3, [r7, #24]
 8018188:	69b9      	ldr	r1, [r7, #24]
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f7ff ff5d 	bl	801804a <exp_bit_is_one>
 8018190:	4603      	mov	r3, r0
 8018192:	2b00      	cmp	r3, #0
 8018194:	d0f5      	beq.n	8018182 <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 8018196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018198:	623b      	str	r3, [r7, #32]
 801819a:	e02a      	b.n	80181f2 <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801819c:	69f8      	ldr	r0, [r7, #28]
 801819e:	f7fe fff3 	bl	8017188 <bi_copy>
 80181a2:	4603      	mov	r3, r0
 80181a4:	69fa      	ldr	r2, [r7, #28]
 80181a6:	4619      	mov	r1, r3
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	f7ff fe0f 	bl	8017dcc <bi_multiply>
 80181ae:	4601      	mov	r1, r0
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80181b6:	68fa      	ldr	r2, [r7, #12]
 80181b8:	3302      	adds	r3, #2
 80181ba:	009b      	lsls	r3, r3, #2
 80181bc:	4413      	add	r3, r2
 80181be:	685a      	ldr	r2, [r3, #4]
 80181c0:	2301      	movs	r3, #1
 80181c2:	68f8      	ldr	r0, [r7, #12]
 80181c4:	f7ff f9ba 	bl	801753c <bi_divide>
 80181c8:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 80181ca:	6a39      	ldr	r1, [r7, #32]
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f7ff ff3c 	bl	801804a <exp_bit_is_one>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d002      	beq.n	80181de <bi_mod_power+0xd8>
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	3301      	adds	r3, #1
 80181dc:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 80181de:	6a3a      	ldr	r2, [r7, #32]
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d002      	beq.n	80181ec <bi_mod_power+0xe6>
 80181e6:	697b      	ldr	r3, [r7, #20]
 80181e8:	005b      	lsls	r3, r3, #1
 80181ea:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 80181ec:	6a3b      	ldr	r3, [r7, #32]
 80181ee:	3b01      	subs	r3, #1
 80181f0:	623b      	str	r3, [r7, #32]
 80181f2:	6a3a      	ldr	r2, [r7, #32]
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	429a      	cmp	r2, r3
 80181f8:	dad0      	bge.n	801819c <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 80181fa:	697b      	ldr	r3, [r7, #20]
 80181fc:	3b01      	subs	r3, #1
 80181fe:	2b00      	cmp	r3, #0
 8018200:	da00      	bge.n	8018204 <bi_mod_power+0xfe>
 8018202:	3301      	adds	r3, #1
 8018204:	105b      	asrs	r3, r3, #1
 8018206:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801820c:	697b      	ldr	r3, [r7, #20]
 801820e:	009b      	lsls	r3, r3, #2
 8018210:	4413      	add	r3, r2
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	461a      	mov	r2, r3
 8018216:	69f9      	ldr	r1, [r7, #28]
 8018218:	68f8      	ldr	r0, [r7, #12]
 801821a:	f7ff fdd7 	bl	8017dcc <bi_multiply>
 801821e:	4601      	mov	r1, r0
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018226:	68fa      	ldr	r2, [r7, #12]
 8018228:	3302      	adds	r3, #2
 801822a:	009b      	lsls	r3, r3, #2
 801822c:	4413      	add	r3, r2
 801822e:	685a      	ldr	r2, [r3, #4]
 8018230:	2301      	movs	r3, #1
 8018232:	68f8      	ldr	r0, [r7, #12]
 8018234:	f7ff f982 	bl	801753c <bi_divide>
 8018238:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	3b01      	subs	r3, #1
 801823e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018240:	e019      	b.n	8018276 <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 8018242:	69f8      	ldr	r0, [r7, #28]
 8018244:	f7fe ffa0 	bl	8017188 <bi_copy>
 8018248:	4603      	mov	r3, r0
 801824a:	69fa      	ldr	r2, [r7, #28]
 801824c:	4619      	mov	r1, r3
 801824e:	68f8      	ldr	r0, [r7, #12]
 8018250:	f7ff fdbc 	bl	8017dcc <bi_multiply>
 8018254:	4601      	mov	r1, r0
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801825c:	68fa      	ldr	r2, [r7, #12]
 801825e:	3302      	adds	r3, #2
 8018260:	009b      	lsls	r3, r3, #2
 8018262:	4413      	add	r3, r2
 8018264:	685a      	ldr	r2, [r3, #4]
 8018266:	2301      	movs	r3, #1
 8018268:	68f8      	ldr	r0, [r7, #12]
 801826a:	f7ff f967 	bl	801753c <bi_divide>
 801826e:	61f8      	str	r0, [r7, #28]
      i--;
 8018270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018272:	3b01      	subs	r3, #1
 8018274:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 8018276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018278:	2b00      	cmp	r3, #0
 801827a:	f6bf af6e 	bge.w	801815a <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801827e:	2300      	movs	r3, #0
 8018280:	627b      	str	r3, [r7, #36]	@ 0x24
 8018282:	e015      	b.n	80182b0 <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801828a:	009b      	lsls	r3, r3, #2
 801828c:	4413      	add	r3, r2
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	4618      	mov	r0, r3
 8018292:	f7fe ffa5 	bl	80171e0 <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801829c:	009b      	lsls	r3, r3, #2
 801829e:	4413      	add	r3, r2
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	4619      	mov	r1, r3
 80182a4:	68f8      	ldr	r0, [r7, #12]
 80182a6:	f7fe ffaf 	bl	8017208 <bi_free>
  for (i = 0; i < ctx->window; i++) {
 80182aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182ac:	3301      	adds	r3, #1
 80182ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80182b6:	429a      	cmp	r2, r3
 80182b8:	dbe4      	blt.n	8018284 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182be:	4618      	mov	r0, r3
 80182c0:	f005 ff26 	bl	801e110 <free>
  bi_free(ctx, bi);
 80182c4:	68b9      	ldr	r1, [r7, #8]
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f7fe ff9e 	bl	8017208 <bi_free>
  bi_free(ctx, biexp);
 80182cc:	6879      	ldr	r1, [r7, #4]
 80182ce:	68f8      	ldr	r0, [r7, #12]
 80182d0:	f7fe ff9a 	bl	8017208 <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 80182d4:	69fb      	ldr	r3, [r7, #28]
#endif
}
 80182d6:	4618      	mov	r0, r3
 80182d8:	372c      	adds	r7, #44	@ 0x2c
 80182da:	46bd      	mov	sp, r7
 80182dc:	bd90      	pop	{r4, r7, pc}

080182de <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 80182de:	b580      	push	{r7, lr}
 80182e0:	b08a      	sub	sp, #40	@ 0x28
 80182e2:	af00      	add	r7, sp, #0
 80182e4:	60f8      	str	r0, [r7, #12]
 80182e6:	60b9      	str	r1, [r7, #8]
 80182e8:	607a      	str	r2, [r7, #4]
 80182ea:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 80182ec:	f7fe ff27 	bl	801713e <bi_initialize>
 80182f0:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	461a      	mov	r2, r3
 80182f6:	68f9      	ldr	r1, [r7, #12]
 80182f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80182fa:	f7ff fbae 	bl	8017a5a <bi_import>
 80182fe:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	461a      	mov	r2, r3
 8018304:	6879      	ldr	r1, [r7, #4]
 8018306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018308:	f7ff fba7 	bl	8017a5a <bi_import>
 801830c:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801830e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018310:	461a      	mov	r2, r3
 8018312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018314:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018316:	f7ff fba0 	bl	8017a5a <bi_import>
 801831a:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801831c:	2200      	movs	r2, #0
 801831e:	6a39      	ldr	r1, [r7, #32]
 8018320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018322:	f7ff fc3b 	bl	8017b9c <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 8018326:	69fa      	ldr	r2, [r7, #28]
 8018328:	69b9      	ldr	r1, [r7, #24]
 801832a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801832c:	f7ff feeb 	bl	8018106 <bi_mod_power>
 8018330:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 8018332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018336:	6979      	ldr	r1, [r7, #20]
 8018338:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801833a:	f7ff fbdf 	bl	8017afc <bi_export>
	bi_free(bi_ctx, n);
 801833e:	6a39      	ldr	r1, [r7, #32]
 8018340:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018342:	f7fe ff61 	bl	8017208 <bi_free>
	bi_free(bi_ctx, e);
 8018346:	69f9      	ldr	r1, [r7, #28]
 8018348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801834a:	f7fe ff5d 	bl	8017208 <bi_free>
	bi_free(bi_ctx, h);
 801834e:	69b9      	ldr	r1, [r7, #24]
 8018350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018352:	f7fe ff59 	bl	8017208 <bi_free>
	bi_free(bi_ctx, m1);
 8018356:	6979      	ldr	r1, [r7, #20]
 8018358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801835a:	f7fe ff55 	bl	8017208 <bi_free>
	return 0;
 801835e:	2300      	movs	r3, #0
}
 8018360:	4618      	mov	r0, r3
 8018362:	3728      	adds	r7, #40	@ 0x28
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}

08018368 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 8018368:	b480      	push	{r7}
 801836a:	b085      	sub	sp, #20
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
 8018370:	460b      	mov	r3, r1
 8018372:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8018374:	2300      	movs	r3, #0
 8018376:	73fb      	strb	r3, [r7, #15]
 8018378:	e00a      	b.n	8018390 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801837a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801837e:	009b      	lsls	r3, r3, #2
 8018380:	687a      	ldr	r2, [r7, #4]
 8018382:	4413      	add	r3, r2
 8018384:	2200      	movs	r2, #0
 8018386:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8018388:	7bfb      	ldrb	r3, [r7, #15]
 801838a:	3301      	adds	r3, #1
 801838c:	b2db      	uxtb	r3, r3
 801838e:	73fb      	strb	r3, [r7, #15]
 8018390:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018398:	429a      	cmp	r2, r3
 801839a:	dbee      	blt.n	801837a <mg_uecc_vli_clear+0x12>
  }
}
 801839c:	bf00      	nop
 801839e:	bf00      	nop
 80183a0:	3714      	adds	r7, #20
 80183a2:	46bd      	mov	sp, r7
 80183a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a8:	4770      	bx	lr

080183aa <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 80183aa:	b480      	push	{r7}
 80183ac:	b085      	sub	sp, #20
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	460b      	mov	r3, r1
 80183b4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80183ba:	2300      	movs	r3, #0
 80183bc:	72fb      	strb	r3, [r7, #11]
 80183be:	e00c      	b.n	80183da <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 80183c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80183c4:	009b      	lsls	r3, r3, #2
 80183c6:	687a      	ldr	r2, [r7, #4]
 80183c8:	4413      	add	r3, r2
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	4313      	orrs	r3, r2
 80183d0:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 80183d2:	7afb      	ldrb	r3, [r7, #11]
 80183d4:	3301      	adds	r3, #1
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	72fb      	strb	r3, [r7, #11]
 80183da:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80183de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	dbec      	blt.n	80183c0 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	bf0c      	ite	eq
 80183ec:	2301      	moveq	r3, #1
 80183ee:	2300      	movne	r3, #0
 80183f0:	b2db      	uxtb	r3, r3
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3714      	adds	r7, #20
 80183f6:	46bd      	mov	sp, r7
 80183f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fc:	4770      	bx	lr

080183fe <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 80183fe:	b480      	push	{r7}
 8018400:	b083      	sub	sp, #12
 8018402:	af00      	add	r7, sp, #0
 8018404:	6078      	str	r0, [r7, #4]
 8018406:	460b      	mov	r3, r1
 8018408:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801840a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801840e:	115b      	asrs	r3, r3, #5
 8018410:	b21b      	sxth	r3, r3
 8018412:	009b      	lsls	r3, r3, #2
 8018414:	687a      	ldr	r2, [r7, #4]
 8018416:	4413      	add	r3, r2
 8018418:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801841a:	887b      	ldrh	r3, [r7, #2]
 801841c:	f003 031f 	and.w	r3, r3, #31
 8018420:	2101      	movs	r1, #1
 8018422:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 8018426:	4013      	ands	r3, r2
}
 8018428:	4618      	mov	r0, r3
 801842a:	370c      	adds	r7, #12
 801842c:	46bd      	mov	sp, r7
 801842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018432:	4770      	bx	lr

08018434 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 8018434:	b480      	push	{r7}
 8018436:	b085      	sub	sp, #20
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
 801843c:	460b      	mov	r3, r1
 801843e:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 8018440:	78fb      	ldrb	r3, [r7, #3]
 8018442:	3b01      	subs	r3, #1
 8018444:	b2db      	uxtb	r3, r3
 8018446:	73fb      	strb	r3, [r7, #15]
 8018448:	e003      	b.n	8018452 <vli_numDigits+0x1e>
 801844a:	7bfb      	ldrb	r3, [r7, #15]
 801844c:	3b01      	subs	r3, #1
 801844e:	b2db      	uxtb	r3, r3
 8018450:	73fb      	strb	r3, [r7, #15]
 8018452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018456:	2b00      	cmp	r3, #0
 8018458:	db07      	blt.n	801846a <vli_numDigits+0x36>
 801845a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801845e:	009b      	lsls	r3, r3, #2
 8018460:	687a      	ldr	r2, [r7, #4]
 8018462:	4413      	add	r3, r2
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d0ef      	beq.n	801844a <vli_numDigits+0x16>
  }

  return (i + 1);
 801846a:	7bfb      	ldrb	r3, [r7, #15]
 801846c:	3301      	adds	r3, #1
 801846e:	b2db      	uxtb	r3, r3
 8018470:	b25b      	sxtb	r3, r3
}
 8018472:	4618      	mov	r0, r3
 8018474:	3714      	adds	r7, #20
 8018476:	46bd      	mov	sp, r7
 8018478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847c:	4770      	bx	lr

0801847e <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801847e:	b580      	push	{r7, lr}
 8018480:	b086      	sub	sp, #24
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
 8018486:	460b      	mov	r3, r1
 8018488:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801848a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801848e:	4619      	mov	r1, r3
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7ff ffcf 	bl	8018434 <vli_numDigits>
 8018496:	4603      	mov	r3, r0
 8018498:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d101      	bne.n	80184a6 <mg_uecc_vli_numBits+0x28>
    return 0;
 80184a2:	2300      	movs	r3, #0
 80184a4:	e020      	b.n	80184e8 <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 80184a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80184aa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80184ae:	4413      	add	r3, r2
 80184b0:	009b      	lsls	r3, r3, #2
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	4413      	add	r3, r2
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80184ba:	2300      	movs	r3, #0
 80184bc:	617b      	str	r3, [r7, #20]
 80184be:	e005      	b.n	80184cc <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	085b      	lsrs	r3, r3, #1
 80184c4:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	3301      	adds	r3, #1
 80184ca:	617b      	str	r3, [r7, #20]
 80184cc:	693b      	ldr	r3, [r7, #16]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1f6      	bne.n	80184c0 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80184d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184d6:	3b01      	subs	r3, #1
 80184d8:	b29b      	uxth	r3, r3
 80184da:	015b      	lsls	r3, r3, #5
 80184dc:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 80184e2:	4413      	add	r3, r2
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	b21b      	sxth	r3, r3
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3718      	adds	r7, #24
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 80184f0:	b480      	push	{r7}
 80184f2:	b087      	sub	sp, #28
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	60f8      	str	r0, [r7, #12]
 80184f8:	60b9      	str	r1, [r7, #8]
 80184fa:	4613      	mov	r3, r2
 80184fc:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80184fe:	2300      	movs	r3, #0
 8018500:	75fb      	strb	r3, [r7, #23]
 8018502:	e00f      	b.n	8018524 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 8018504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	68ba      	ldr	r2, [r7, #8]
 801850c:	441a      	add	r2, r3
 801850e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018512:	009b      	lsls	r3, r3, #2
 8018514:	68f9      	ldr	r1, [r7, #12]
 8018516:	440b      	add	r3, r1
 8018518:	6812      	ldr	r2, [r2, #0]
 801851a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801851c:	7dfb      	ldrb	r3, [r7, #23]
 801851e:	3301      	adds	r3, #1
 8018520:	b2db      	uxtb	r3, r3
 8018522:	75fb      	strb	r3, [r7, #23]
 8018524:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8018528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801852c:	429a      	cmp	r2, r3
 801852e:	dbe9      	blt.n	8018504 <mg_uecc_vli_set+0x14>
  }
}
 8018530:	bf00      	nop
 8018532:	bf00      	nop
 8018534:	371c      	adds	r7, #28
 8018536:	46bd      	mov	sp, r7
 8018538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853c:	4770      	bx	lr

0801853e <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801853e:	b480      	push	{r7}
 8018540:	b087      	sub	sp, #28
 8018542:	af00      	add	r7, sp, #0
 8018544:	60f8      	str	r0, [r7, #12]
 8018546:	60b9      	str	r1, [r7, #8]
 8018548:	4613      	mov	r3, r2
 801854a:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801854c:	79fb      	ldrb	r3, [r7, #7]
 801854e:	3b01      	subs	r3, #1
 8018550:	b2db      	uxtb	r3, r3
 8018552:	75fb      	strb	r3, [r7, #23]
 8018554:	e024      	b.n	80185a0 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 8018556:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801855a:	009b      	lsls	r3, r3, #2
 801855c:	68fa      	ldr	r2, [r7, #12]
 801855e:	4413      	add	r3, r2
 8018560:	681a      	ldr	r2, [r3, #0]
 8018562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018566:	009b      	lsls	r3, r3, #2
 8018568:	68b9      	ldr	r1, [r7, #8]
 801856a:	440b      	add	r3, r1
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	429a      	cmp	r2, r3
 8018570:	d901      	bls.n	8018576 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 8018572:	2301      	movs	r3, #1
 8018574:	e019      	b.n	80185aa <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 8018576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	68fa      	ldr	r2, [r7, #12]
 801857e:	4413      	add	r3, r2
 8018580:	681a      	ldr	r2, [r3, #0]
 8018582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	68b9      	ldr	r1, [r7, #8]
 801858a:	440b      	add	r3, r1
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	429a      	cmp	r2, r3
 8018590:	d202      	bcs.n	8018598 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 8018592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018596:	e008      	b.n	80185aa <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 8018598:	7dfb      	ldrb	r3, [r7, #23]
 801859a:	3b01      	subs	r3, #1
 801859c:	b2db      	uxtb	r3, r3
 801859e:	75fb      	strb	r3, [r7, #23]
 80185a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	dad6      	bge.n	8018556 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 80185a8:	2300      	movs	r3, #0
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	371c      	adds	r7, #28
 80185ae:	46bd      	mov	sp, r7
 80185b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b4:	4770      	bx	lr

080185b6 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 80185b6:	b480      	push	{r7}
 80185b8:	b087      	sub	sp, #28
 80185ba:	af00      	add	r7, sp, #0
 80185bc:	60f8      	str	r0, [r7, #12]
 80185be:	60b9      	str	r1, [r7, #8]
 80185c0:	4613      	mov	r3, r2
 80185c2:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 80185c4:	2300      	movs	r3, #0
 80185c6:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 80185c8:	79fb      	ldrb	r3, [r7, #7]
 80185ca:	3b01      	subs	r3, #1
 80185cc:	b2db      	uxtb	r3, r3
 80185ce:	74fb      	strb	r3, [r7, #19]
 80185d0:	e013      	b.n	80185fa <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 80185d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185d6:	009b      	lsls	r3, r3, #2
 80185d8:	68fa      	ldr	r2, [r7, #12]
 80185da:	4413      	add	r3, r2
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185e2:	009b      	lsls	r3, r3, #2
 80185e4:	68b9      	ldr	r1, [r7, #8]
 80185e6:	440b      	add	r3, r1
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	4053      	eors	r3, r2
 80185ec:	697a      	ldr	r2, [r7, #20]
 80185ee:	4313      	orrs	r3, r2
 80185f0:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 80185f2:	7cfb      	ldrb	r3, [r7, #19]
 80185f4:	3b01      	subs	r3, #1
 80185f6:	b2db      	uxtb	r3, r3
 80185f8:	74fb      	strb	r3, [r7, #19]
 80185fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	dae7      	bge.n	80185d2 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	2b00      	cmp	r3, #0
 8018606:	bf0c      	ite	eq
 8018608:	2301      	moveq	r3, #1
 801860a:	2300      	movne	r3, #0
 801860c:	b2db      	uxtb	r3, r3
}
 801860e:	4618      	mov	r0, r3
 8018610:	371c      	adds	r7, #28
 8018612:	46bd      	mov	sp, r7
 8018614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018618:	4770      	bx	lr

0801861a <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801861a:	b580      	push	{r7, lr}
 801861c:	b08e      	sub	sp, #56	@ 0x38
 801861e:	af00      	add	r7, sp, #0
 8018620:	60f8      	str	r0, [r7, #12]
 8018622:	60b9      	str	r1, [r7, #8]
 8018624:	4613      	mov	r3, r2
 8018626:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 8018628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801862c:	f107 0010 	add.w	r0, r7, #16
 8018630:	68ba      	ldr	r2, [r7, #8]
 8018632:	68f9      	ldr	r1, [r7, #12]
 8018634:	f000 f896 	bl	8018764 <mg_uecc_vli_sub>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2301      	movne	r3, #1
 8018640:	2300      	moveq	r3, #0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 8018646:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801864a:	f107 0310 	add.w	r3, r7, #16
 801864e:	4611      	mov	r1, r2
 8018650:	4618      	mov	r0, r3
 8018652:	f7ff feaa 	bl	80183aa <mg_uecc_vli_isZero>
 8018656:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 8018658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801865a:	2b00      	cmp	r3, #0
 801865c:	bf0c      	ite	eq
 801865e:	2301      	moveq	r3, #1
 8018660:	2300      	movne	r3, #0
 8018662:	b2db      	uxtb	r3, r3
 8018664:	461a      	mov	r2, r3
 8018666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018668:	b2db      	uxtb	r3, r3
 801866a:	005b      	lsls	r3, r3, #1
 801866c:	b2db      	uxtb	r3, r3
 801866e:	1ad3      	subs	r3, r2, r3
 8018670:	b2db      	uxtb	r3, r3
 8018672:	b25b      	sxtb	r3, r3
}
 8018674:	4618      	mov	r0, r3
 8018676:	3738      	adds	r7, #56	@ 0x38
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801867c:	b480      	push	{r7}
 801867e:	b087      	sub	sp, #28
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	460b      	mov	r3, r1
 8018686:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801868c:	2300      	movs	r3, #0
 801868e:	617b      	str	r3, [r7, #20]

  vli += num_words;
 8018690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	687a      	ldr	r2, [r7, #4]
 8018698:	4413      	add	r3, r2
 801869a:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801869c:	e00b      	b.n	80186b6 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	085a      	lsrs	r2, r3, #1
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	431a      	orrs	r2, r3
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	07db      	lsls	r3, r3, #31
 80186b4:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	1f1a      	subs	r2, r3, #4
 80186ba:	607a      	str	r2, [r7, #4]
 80186bc:	693a      	ldr	r2, [r7, #16]
 80186be:	429a      	cmp	r2, r3
 80186c0:	d3ed      	bcc.n	801869e <mg_uecc_vli_rshift1+0x22>
  }
}
 80186c2:	bf00      	nop
 80186c4:	bf00      	nop
 80186c6:	371c      	adds	r7, #28
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 80186d0:	b480      	push	{r7}
 80186d2:	b089      	sub	sp, #36	@ 0x24
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	607a      	str	r2, [r7, #4]
 80186dc:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 80186e2:	2300      	movs	r3, #0
 80186e4:	76fb      	strb	r3, [r7, #27]
 80186e6:	e030      	b.n	801874a <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 80186e8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80186ec:	009b      	lsls	r3, r3, #2
 80186ee:	68ba      	ldr	r2, [r7, #8]
 80186f0:	4413      	add	r3, r2
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80186f8:	009b      	lsls	r3, r3, #2
 80186fa:	6879      	ldr	r1, [r7, #4]
 80186fc:	440b      	add	r3, r1
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	4413      	add	r3, r2
 8018702:	69fa      	ldr	r2, [r7, #28]
 8018704:	4413      	add	r3, r2
 8018706:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 8018708:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	68ba      	ldr	r2, [r7, #8]
 8018710:	4413      	add	r3, r2
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	697a      	ldr	r2, [r7, #20]
 8018716:	429a      	cmp	r2, r3
 8018718:	d00c      	beq.n	8018734 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801871a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	68ba      	ldr	r2, [r7, #8]
 8018722:	4413      	add	r3, r2
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	697a      	ldr	r2, [r7, #20]
 8018728:	429a      	cmp	r2, r3
 801872a:	bf34      	ite	cc
 801872c:	2301      	movcc	r3, #1
 801872e:	2300      	movcs	r3, #0
 8018730:	b2db      	uxtb	r3, r3
 8018732:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 8018734:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018738:	009b      	lsls	r3, r3, #2
 801873a:	68fa      	ldr	r2, [r7, #12]
 801873c:	4413      	add	r3, r2
 801873e:	697a      	ldr	r2, [r7, #20]
 8018740:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 8018742:	7efb      	ldrb	r3, [r7, #27]
 8018744:	3301      	adds	r3, #1
 8018746:	b2db      	uxtb	r3, r3
 8018748:	76fb      	strb	r3, [r7, #27]
 801874a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801874e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018752:	429a      	cmp	r2, r3
 8018754:	dbc8      	blt.n	80186e8 <mg_uecc_vli_add+0x18>
  }
  return carry;
 8018756:	69fb      	ldr	r3, [r7, #28]
}
 8018758:	4618      	mov	r0, r3
 801875a:	3724      	adds	r7, #36	@ 0x24
 801875c:	46bd      	mov	sp, r7
 801875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018762:	4770      	bx	lr

08018764 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 8018764:	b480      	push	{r7}
 8018766:	b089      	sub	sp, #36	@ 0x24
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
 8018770:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 8018772:	2300      	movs	r3, #0
 8018774:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 8018776:	2300      	movs	r3, #0
 8018778:	76fb      	strb	r3, [r7, #27]
 801877a:	e030      	b.n	80187de <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801877c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018780:	009b      	lsls	r3, r3, #2
 8018782:	68ba      	ldr	r2, [r7, #8]
 8018784:	4413      	add	r3, r2
 8018786:	681a      	ldr	r2, [r3, #0]
 8018788:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801878c:	009b      	lsls	r3, r3, #2
 801878e:	6879      	ldr	r1, [r7, #4]
 8018790:	440b      	add	r3, r1
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	1ad2      	subs	r2, r2, r3
 8018796:	69fb      	ldr	r3, [r7, #28]
 8018798:	1ad3      	subs	r3, r2, r3
 801879a:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801879c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187a0:	009b      	lsls	r3, r3, #2
 80187a2:	68ba      	ldr	r2, [r7, #8]
 80187a4:	4413      	add	r3, r2
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	697a      	ldr	r2, [r7, #20]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d00c      	beq.n	80187c8 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 80187ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	68ba      	ldr	r2, [r7, #8]
 80187b6:	4413      	add	r3, r2
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	697a      	ldr	r2, [r7, #20]
 80187bc:	429a      	cmp	r2, r3
 80187be:	bf8c      	ite	hi
 80187c0:	2301      	movhi	r3, #1
 80187c2:	2300      	movls	r3, #0
 80187c4:	b2db      	uxtb	r3, r3
 80187c6:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 80187c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80187cc:	009b      	lsls	r3, r3, #2
 80187ce:	68fa      	ldr	r2, [r7, #12]
 80187d0:	4413      	add	r3, r2
 80187d2:	697a      	ldr	r2, [r7, #20]
 80187d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 80187d6:	7efb      	ldrb	r3, [r7, #27]
 80187d8:	3301      	adds	r3, #1
 80187da:	b2db      	uxtb	r3, r3
 80187dc:	76fb      	strb	r3, [r7, #27]
 80187de:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80187e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80187e6:	429a      	cmp	r2, r3
 80187e8:	dbc8      	blt.n	801877c <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 80187ea:	69fb      	ldr	r3, [r7, #28]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3724      	adds	r7, #36	@ 0x24
 80187f0:	46bd      	mov	sp, r7
 80187f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f6:	4770      	bx	lr

080187f8 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 80187f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80187fc:	b091      	sub	sp, #68	@ 0x44
 80187fe:	af00      	add	r7, sp, #0
 8018800:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8018802:	62b9      	str	r1, [r7, #40]	@ 0x28
 8018804:	627a      	str	r2, [r7, #36]	@ 0x24
 8018806:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 8018808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801880a:	2200      	movs	r2, #0
 801880c:	4698      	mov	r8, r3
 801880e:	4691      	mov	r9, r2
 8018810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018812:	2200      	movs	r2, #0
 8018814:	469a      	mov	sl, r3
 8018816:	4693      	mov	fp, r2
 8018818:	fb0a f209 	mul.w	r2, sl, r9
 801881c:	fb08 f30b 	mul.w	r3, r8, fp
 8018820:	4413      	add	r3, r2
 8018822:	fba8 450a 	umull	r4, r5, r8, sl
 8018826:	442b      	add	r3, r5
 8018828:	461d      	mov	r5, r3
 801882a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801882e:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 8018832:	6a3b      	ldr	r3, [r7, #32]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	2200      	movs	r2, #0
 8018838:	61bb      	str	r3, [r7, #24]
 801883a:	61fa      	str	r2, [r7, #28]
 801883c:	f04f 0200 	mov.w	r2, #0
 8018840:	f04f 0300 	mov.w	r3, #0
 8018844:	69b9      	ldr	r1, [r7, #24]
 8018846:	000b      	movs	r3, r1
 8018848:	2200      	movs	r2, #0
 801884a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801884c:	6809      	ldr	r1, [r1, #0]
 801884e:	2000      	movs	r0, #0
 8018850:	6139      	str	r1, [r7, #16]
 8018852:	6178      	str	r0, [r7, #20]
 8018854:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8018858:	4621      	mov	r1, r4
 801885a:	4311      	orrs	r1, r2
 801885c:	60b9      	str	r1, [r7, #8]
 801885e:	4629      	mov	r1, r5
 8018860:	4319      	orrs	r1, r3
 8018862:	60f9      	str	r1, [r7, #12]
 8018864:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8018868:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801886c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8018870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8018874:	1884      	adds	r4, r0, r2
 8018876:	603c      	str	r4, [r7, #0]
 8018878:	eb41 0303 	adc.w	r3, r1, r3
 801887c:	607b      	str	r3, [r7, #4]
 801887e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8018882:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 8018886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018888:	681c      	ldr	r4, [r3, #0]
 801888a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801888e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8018892:	4290      	cmp	r0, r2
 8018894:	eb71 0303 	sbcs.w	r3, r1, r3
 8018898:	bf34      	ite	cc
 801889a:	2301      	movcc	r3, #1
 801889c:	2300      	movcs	r3, #0
 801889e:	b2db      	uxtb	r3, r3
 80188a0:	18e2      	adds	r2, r4, r3
 80188a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80188a4:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 80188a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80188aa:	f04f 0200 	mov.w	r2, #0
 80188ae:	f04f 0300 	mov.w	r3, #0
 80188b2:	000a      	movs	r2, r1
 80188b4:	2300      	movs	r3, #0
 80188b6:	6a3b      	ldr	r3, [r7, #32]
 80188b8:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 80188ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188be:	601a      	str	r2, [r3, #0]
#endif
}
 80188c0:	bf00      	nop
 80188c2:	3744      	adds	r7, #68	@ 0x44
 80188c4:	46bd      	mov	sp, r7
 80188c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80188ca:	4770      	bx	lr

080188cc <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 80188cc:	b590      	push	{r4, r7, lr}
 80188ce:	b08b      	sub	sp, #44	@ 0x2c
 80188d0:	af02      	add	r7, sp, #8
 80188d2:	60f8      	str	r0, [r7, #12]
 80188d4:	60b9      	str	r1, [r7, #8]
 80188d6:	607a      	str	r2, [r7, #4]
 80188d8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 80188da:	2300      	movs	r3, #0
 80188dc:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 80188de:	2300      	movs	r3, #0
 80188e0:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 80188e2:	2300      	movs	r3, #0
 80188e4:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 80188e6:	2300      	movs	r3, #0
 80188e8:	77bb      	strb	r3, [r7, #30]
 80188ea:	e036      	b.n	801895a <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 80188ec:	2300      	movs	r3, #0
 80188ee:	77fb      	strb	r3, [r7, #31]
 80188f0:	e01c      	b.n	801892c <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 80188f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80188f6:	009b      	lsls	r3, r3, #2
 80188f8:	68ba      	ldr	r2, [r7, #8]
 80188fa:	4413      	add	r3, r2
 80188fc:	6818      	ldr	r0, [r3, #0]
 80188fe:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8018902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018906:	1ad3      	subs	r3, r2, r3
 8018908:	009b      	lsls	r3, r3, #2
 801890a:	687a      	ldr	r2, [r7, #4]
 801890c:	4413      	add	r3, r2
 801890e:	6819      	ldr	r1, [r3, #0]
 8018910:	f107 0414 	add.w	r4, r7, #20
 8018914:	f107 0218 	add.w	r2, r7, #24
 8018918:	f107 0310 	add.w	r3, r7, #16
 801891c:	9300      	str	r3, [sp, #0]
 801891e:	4623      	mov	r3, r4
 8018920:	f7ff ff6a 	bl	80187f8 <muladd>
    for (i = 0; i <= k; ++i) {
 8018924:	7ffb      	ldrb	r3, [r7, #31]
 8018926:	3301      	adds	r3, #1
 8018928:	b2db      	uxtb	r3, r3
 801892a:	77fb      	strb	r3, [r7, #31]
 801892c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8018930:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018934:	429a      	cmp	r2, r3
 8018936:	dddc      	ble.n	80188f2 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 8018938:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801893c:	009b      	lsls	r3, r3, #2
 801893e:	68fa      	ldr	r2, [r7, #12]
 8018940:	4413      	add	r3, r2
 8018942:	69ba      	ldr	r2, [r7, #24]
 8018944:	601a      	str	r2, [r3, #0]
    r0 = r1;
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801894a:	693b      	ldr	r3, [r7, #16]
 801894c:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801894e:	2300      	movs	r3, #0
 8018950:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 8018952:	7fbb      	ldrb	r3, [r7, #30]
 8018954:	3301      	adds	r3, #1
 8018956:	b2db      	uxtb	r3, r3
 8018958:	77bb      	strb	r3, [r7, #30]
 801895a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801895e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018962:	429a      	cmp	r2, r3
 8018964:	dbc2      	blt.n	80188ec <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 8018966:	78fb      	ldrb	r3, [r7, #3]
 8018968:	77bb      	strb	r3, [r7, #30]
 801896a:	e03b      	b.n	80189e4 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801896c:	7fba      	ldrb	r2, [r7, #30]
 801896e:	78fb      	ldrb	r3, [r7, #3]
 8018970:	1ad3      	subs	r3, r2, r3
 8018972:	b2db      	uxtb	r3, r3
 8018974:	3301      	adds	r3, #1
 8018976:	b2db      	uxtb	r3, r3
 8018978:	77fb      	strb	r3, [r7, #31]
 801897a:	e01c      	b.n	80189b6 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801897c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	68ba      	ldr	r2, [r7, #8]
 8018984:	4413      	add	r3, r2
 8018986:	6818      	ldr	r0, [r3, #0]
 8018988:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801898c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018990:	1ad3      	subs	r3, r2, r3
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	4413      	add	r3, r2
 8018998:	6819      	ldr	r1, [r3, #0]
 801899a:	f107 0414 	add.w	r4, r7, #20
 801899e:	f107 0218 	add.w	r2, r7, #24
 80189a2:	f107 0310 	add.w	r3, r7, #16
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	4623      	mov	r3, r4
 80189aa:	f7ff ff25 	bl	80187f8 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 80189ae:	7ffb      	ldrb	r3, [r7, #31]
 80189b0:	3301      	adds	r3, #1
 80189b2:	b2db      	uxtb	r3, r3
 80189b4:	77fb      	strb	r3, [r7, #31]
 80189b6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80189ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189be:	429a      	cmp	r2, r3
 80189c0:	dbdc      	blt.n	801897c <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 80189c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80189c6:	009b      	lsls	r3, r3, #2
 80189c8:	68fa      	ldr	r2, [r7, #12]
 80189ca:	4413      	add	r3, r2
 80189cc:	69ba      	ldr	r2, [r7, #24]
 80189ce:	601a      	str	r2, [r3, #0]
    r0 = r1;
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	617b      	str	r3, [r7, #20]
    r2 = 0;
 80189d8:	2300      	movs	r3, #0
 80189da:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 80189dc:	7fbb      	ldrb	r3, [r7, #30]
 80189de:	3301      	adds	r3, #1
 80189e0:	b2db      	uxtb	r3, r3
 80189e2:	77bb      	strb	r3, [r7, #30]
 80189e4:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80189e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189ec:	005b      	lsls	r3, r3, #1
 80189ee:	3b01      	subs	r3, #1
 80189f0:	429a      	cmp	r2, r3
 80189f2:	dbbb      	blt.n	801896c <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 80189f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80189f8:	00db      	lsls	r3, r3, #3
 80189fa:	3b04      	subs	r3, #4
 80189fc:	68fa      	ldr	r2, [r7, #12]
 80189fe:	4413      	add	r3, r2
 8018a00:	69ba      	ldr	r2, [r7, #24]
 8018a02:	601a      	str	r2, [r3, #0]
}
 8018a04:	bf00      	nop
 8018a06:	3724      	adds	r7, #36	@ 0x24
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	bd90      	pop	{r4, r7, pc}

08018a0c <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b086      	sub	sp, #24
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	60f8      	str	r0, [r7, #12]
 8018a14:	60b9      	str	r1, [r7, #8]
 8018a16:	607a      	str	r2, [r7, #4]
 8018a18:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 8018a1a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018a1e:	687a      	ldr	r2, [r7, #4]
 8018a20:	68b9      	ldr	r1, [r7, #8]
 8018a22:	68f8      	ldr	r0, [r7, #12]
 8018a24:	f7ff fe54 	bl	80186d0 <mg_uecc_vli_add>
 8018a28:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 8018a2a:	697b      	ldr	r3, [r7, #20]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d109      	bne.n	8018a44 <mg_uecc_vli_modAdd+0x38>
 8018a30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018a34:	461a      	mov	r2, r3
 8018a36:	68f9      	ldr	r1, [r7, #12]
 8018a38:	6838      	ldr	r0, [r7, #0]
 8018a3a:	f7ff fd80 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 8018a3e:	4603      	mov	r3, r0
 8018a40:	2b01      	cmp	r3, #1
 8018a42:	d006      	beq.n	8018a52 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 8018a44:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018a48:	683a      	ldr	r2, [r7, #0]
 8018a4a:	68f9      	ldr	r1, [r7, #12]
 8018a4c:	68f8      	ldr	r0, [r7, #12]
 8018a4e:	f7ff fe89 	bl	8018764 <mg_uecc_vli_sub>
  }
}
 8018a52:	bf00      	nop
 8018a54:	3718      	adds	r7, #24
 8018a56:	46bd      	mov	sp, r7
 8018a58:	bd80      	pop	{r7, pc}

08018a5a <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8018a5a:	b580      	push	{r7, lr}
 8018a5c:	b086      	sub	sp, #24
 8018a5e:	af00      	add	r7, sp, #0
 8018a60:	60f8      	str	r0, [r7, #12]
 8018a62:	60b9      	str	r1, [r7, #8]
 8018a64:	607a      	str	r2, [r7, #4]
 8018a66:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 8018a68:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	68b9      	ldr	r1, [r7, #8]
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f7ff fe77 	bl	8018764 <mg_uecc_vli_sub>
 8018a76:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 8018a78:	697b      	ldr	r3, [r7, #20]
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d006      	beq.n	8018a8c <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 8018a7e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8018a82:	683a      	ldr	r2, [r7, #0]
 8018a84:	68f9      	ldr	r1, [r7, #12]
 8018a86:	68f8      	ldr	r0, [r7, #12]
 8018a88:	f7ff fe22 	bl	80186d0 <mg_uecc_vli_add>
  }
}
 8018a8c:	bf00      	nop
 8018a8e:	3718      	adds	r7, #24
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 8018a94:	b590      	push	{r4, r7, lr}
 8018a96:	b0ad      	sub	sp, #180	@ 0xb4
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]
 8018aa0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 8018aa2:	f107 0318 	add.w	r3, r7, #24
 8018aa6:	613b      	str	r3, [r7, #16]
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8018aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	019b      	lsls	r3, r3, #6
 8018ab4:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 8018ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018aba:	4619      	mov	r1, r3
 8018abc:	6878      	ldr	r0, [r7, #4]
 8018abe:	f7ff fcde 	bl	801847e <mg_uecc_vli_numBits>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 8018ac6:	1ae3      	subs	r3, r4, r3
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 8018ace:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	da00      	bge.n	8018ad8 <mg_uecc_vli_mmod+0x44>
 8018ad6:	331f      	adds	r3, #31
 8018ad8:	115b      	asrs	r3, r3, #5
 8018ada:	b21b      	sxth	r3, r3
 8018adc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 8018ae0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8018ae4:	425a      	negs	r2, r3
 8018ae6:	f003 031f 	and.w	r3, r3, #31
 8018aea:	f002 021f 	and.w	r2, r2, #31
 8018aee:	bf58      	it	pl
 8018af0:	4253      	negpl	r3, r2
 8018af2:	b21b      	sxth	r3, r3
 8018af4:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 8018af8:	2300      	movs	r3, #0
 8018afa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 8018afe:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8018b02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8018b06:	4611      	mov	r1, r2
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7ff fc2d 	bl	8018368 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 8018b0e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	dd34      	ble.n	8018b80 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8018b16:	2300      	movs	r3, #0
 8018b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018b1c:	e029      	b.n	8018b72 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8018b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018b22:	009b      	lsls	r3, r3, #2
 8018b24:	687a      	ldr	r2, [r7, #4]
 8018b26:	4413      	add	r3, r2
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8018b2e:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8018b32:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 8018b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018b3a:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 8018b3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8018b40:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	33b0      	adds	r3, #176	@ 0xb0
 8018b46:	443b      	add	r3, r7
 8018b48:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 8018b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018b50:	009b      	lsls	r3, r3, #2
 8018b52:	687a      	ldr	r2, [r7, #4]
 8018b54:	4413      	add	r3, r2
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8018b5c:	f1c3 0320 	rsb	r3, r3, #32
 8018b60:	fa22 f303 	lsr.w	r3, r2, r3
 8018b64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 8018b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018b6c:	3301      	adds	r3, #1
 8018b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d3cf      	bcc.n	8018b1e <mg_uecc_vli_mmod+0x8a>
 8018b7e:	e00b      	b.n	8018b98 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 8018b80:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018b8a:	4413      	add	r3, r2
 8018b8c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018b90:	6879      	ldr	r1, [r7, #4]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7ff fcac 	bl	80184f0 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 8018b98:	2301      	movs	r3, #1
 8018b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018b9e:	e09f      	b.n	8018ce0 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8018bac:	e053      	b.n	8018c56 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 8018bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018bb2:	009b      	lsls	r3, r3, #2
 8018bb4:	33b0      	adds	r3, #176	@ 0xb0
 8018bb6:	443b      	add	r3, r7
 8018bb8:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8018bbc:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	4413      	add	r3, r2
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	33b0      	adds	r3, #176	@ 0xb0
 8018bce:	443b      	add	r3, r7
 8018bd0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8018bd4:	1ad2      	subs	r2, r2, r3
 8018bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018bda:	1ad3      	subs	r3, r2, r3
 8018bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 8018be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	33b0      	adds	r3, #176	@ 0xb0
 8018be8:	443b      	add	r3, r7
 8018bea:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8018bee:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8018bf2:	009b      	lsls	r3, r3, #2
 8018bf4:	4413      	add	r3, r2
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d014      	beq.n	8018c2a <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 8018c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	33b0      	adds	r3, #176	@ 0xb0
 8018c08:	443b      	add	r3, r7
 8018c0a:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8018c0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8018c12:	009b      	lsls	r3, r3, #2
 8018c14:	4413      	add	r3, r2
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	bf8c      	ite	hi
 8018c20:	2301      	movhi	r3, #1
 8018c22:	2300      	movls	r3, #0
 8018c24:	b2db      	uxtb	r3, r3
 8018c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 8018c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018c2e:	f1c3 0301 	rsb	r3, r3, #1
 8018c32:	009b      	lsls	r3, r3, #2
 8018c34:	33b0      	adds	r3, #176	@ 0xb0
 8018c36:	443b      	add	r3, r7
 8018c38:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 8018c3c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	4413      	add	r3, r2
 8018c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8018c48:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 8018c4a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8018c4e:	3301      	adds	r3, #1
 8018c50:	b2db      	uxtb	r3, r3
 8018c52:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8018c56:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 8018c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c5e:	005b      	lsls	r3, r3, #1
 8018c60:	429a      	cmp	r2, r3
 8018c62:	dba4      	blt.n	8018bae <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 8018c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8018c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	bf0c      	ite	eq
 8018c70:	2301      	moveq	r3, #1
 8018c72:	2300      	movne	r3, #0
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 8018c7a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018c7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8018c82:	4611      	mov	r1, r2
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7ff fcf9 	bl	801867c <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8018c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	33b0      	adds	r3, #176	@ 0xb0
 8018c94:	443b      	add	r3, r7
 8018c96:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8018c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c9e:	009b      	lsls	r3, r3, #2
 8018ca0:	33b0      	adds	r3, #176	@ 0xb0
 8018ca2:	443b      	add	r3, r7
 8018ca4:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 8018ca8:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 8018caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cae:	3b01      	subs	r3, #1
 8018cb0:	430a      	orrs	r2, r1
 8018cb2:	009b      	lsls	r3, r3, #2
 8018cb4:	33b0      	adds	r3, #176	@ 0xb0
 8018cb6:	443b      	add	r3, r7
 8018cb8:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 8018cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018cc0:	009b      	lsls	r3, r3, #2
 8018cc2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018cc6:	4413      	add	r3, r2
 8018cc8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018ccc:	4611      	mov	r1, r2
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f7ff fcd4 	bl	801867c <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 8018cd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 8018ce0:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	f6bf af5b 	bge.w	8018ba0 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 8018cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018cee:	009b      	lsls	r3, r3, #2
 8018cf0:	33b0      	adds	r3, #176	@ 0xb0
 8018cf2:	443b      	add	r3, r7
 8018cf4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8018cf8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018cfc:	4619      	mov	r1, r3
 8018cfe:	68f8      	ldr	r0, [r7, #12]
 8018d00:	f7ff fbf6 	bl	80184f0 <mg_uecc_vli_set>
}
 8018d04:	bf00      	nop
 8018d06:	37b4      	adds	r7, #180	@ 0xb4
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	bd90      	pop	{r4, r7, pc}

08018d0c <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b094      	sub	sp, #80	@ 0x50
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	60b9      	str	r1, [r7, #8]
 8018d16:	607a      	str	r2, [r7, #4]
 8018d18:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 8018d1a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8018d1e:	f107 0010 	add.w	r0, r7, #16
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	68b9      	ldr	r1, [r7, #8]
 8018d26:	f7ff fdd1 	bl	80188cc <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 8018d2a:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 8018d2e:	f107 0110 	add.w	r1, r7, #16
 8018d32:	683a      	ldr	r2, [r7, #0]
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	f7ff fead 	bl	8018a94 <mg_uecc_vli_mmod>
}
 8018d3a:	bf00      	nop
 8018d3c:	3750      	adds	r7, #80	@ 0x50
 8018d3e:	46bd      	mov	sp, r7
 8018d40:	bd80      	pop	{r7, pc}

08018d42 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 8018d42:	b580      	push	{r7, lr}
 8018d44:	b094      	sub	sp, #80	@ 0x50
 8018d46:	af00      	add	r7, sp, #0
 8018d48:	60f8      	str	r0, [r7, #12]
 8018d4a:	60b9      	str	r1, [r7, #8]
 8018d4c:	607a      	str	r2, [r7, #4]
 8018d4e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	f993 3000 	ldrsb.w	r3, [r3]
 8018d56:	f107 0010 	add.w	r0, r7, #16
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	68b9      	ldr	r1, [r7, #8]
 8018d5e:	f7ff fdb5 	bl	80188cc <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018d68:	f107 0210 	add.w	r2, r7, #16
 8018d6c:	4611      	mov	r1, r2
 8018d6e:	68f8      	ldr	r0, [r7, #12]
 8018d70:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 8018d72:	bf00      	nop
 8018d74:	3750      	adds	r7, #80	@ 0x50
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b084      	sub	sp, #16
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	60f8      	str	r0, [r7, #12]
 8018d82:	60b9      	str	r1, [r7, #8]
 8018d84:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	68ba      	ldr	r2, [r7, #8]
 8018d8a:	68b9      	ldr	r1, [r7, #8]
 8018d8c:	68f8      	ldr	r0, [r7, #12]
 8018d8e:	f7ff ffd8 	bl	8018d42 <mg_uecc_vli_modMult_fast>
}
 8018d92:	bf00      	nop
 8018d94:	3710      	adds	r7, #16
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}

08018d9a <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 8018d9a:	b580      	push	{r7, lr}
 8018d9c:	b086      	sub	sp, #24
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	60f8      	str	r0, [r7, #12]
 8018da2:	60b9      	str	r1, [r7, #8]
 8018da4:	4613      	mov	r3, r2
 8018da6:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 8018da8:	2300      	movs	r3, #0
 8018daa:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	f003 0301 	and.w	r3, r3, #1
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d007      	beq.n	8018dc8 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 8018db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dbc:	68ba      	ldr	r2, [r7, #8]
 8018dbe:	68f9      	ldr	r1, [r7, #12]
 8018dc0:	68f8      	ldr	r0, [r7, #12]
 8018dc2:	f7ff fc85 	bl	80186d0 <mg_uecc_vli_add>
 8018dc6:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 8018dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018dcc:	4619      	mov	r1, r3
 8018dce:	68f8      	ldr	r0, [r7, #12]
 8018dd0:	f7ff fc54 	bl	801867c <mg_uecc_vli_rshift1>
  if (carry) {
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d013      	beq.n	8018e02 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 8018dda:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018dde:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8018de2:	4413      	add	r3, r2
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	68fa      	ldr	r2, [r7, #12]
 8018de8:	4413      	add	r3, r2
 8018dea:	681a      	ldr	r2, [r3, #0]
 8018dec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018df0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8018df4:	440b      	add	r3, r1
 8018df6:	009b      	lsls	r3, r3, #2
 8018df8:	68f9      	ldr	r1, [r7, #12]
 8018dfa:	440b      	add	r3, r1
 8018dfc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8018e00:	601a      	str	r2, [r3, #0]
  }
}
 8018e02:	bf00      	nop
 8018e04:	3718      	adds	r7, #24
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd80      	pop	{r7, pc}

08018e0a <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 8018e0a:	b580      	push	{r7, lr}
 8018e0c:	b0a6      	sub	sp, #152	@ 0x98
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	60f8      	str	r0, [r7, #12]
 8018e12:	60b9      	str	r1, [r7, #8]
 8018e14:	607a      	str	r2, [r7, #4]
 8018e16:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 8018e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e1c:	4619      	mov	r1, r3
 8018e1e:	68b8      	ldr	r0, [r7, #8]
 8018e20:	f7ff fac3 	bl	80183aa <mg_uecc_vli_isZero>
 8018e24:	4603      	mov	r3, r0
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d006      	beq.n	8018e38 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 8018e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e2e:	4619      	mov	r1, r3
 8018e30:	68f8      	ldr	r0, [r7, #12]
 8018e32:	f7ff fa99 	bl	8018368 <mg_uecc_vli_clear>
 8018e36:	e0de      	b.n	8018ff6 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 8018e38:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8018e40:	68b9      	ldr	r1, [r7, #8]
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7ff fb54 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 8018e48:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8018e50:	6879      	ldr	r1, [r7, #4]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7ff fb4c 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 8018e58:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018e60:	4611      	mov	r1, r2
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7ff fa80 	bl	8018368 <mg_uecc_vli_clear>
  u[0] = 1;
 8018e68:	2301      	movs	r3, #1
 8018e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 8018e6c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e70:	f107 0314 	add.w	r3, r7, #20
 8018e74:	4611      	mov	r1, r2
 8018e76:	4618      	mov	r0, r3
 8018e78:	f7ff fa76 	bl	8018368 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8018e7c:	e0a2      	b.n	8018fc4 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 8018e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018e80:	f003 0301 	and.w	r3, r3, #1
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d110      	bne.n	8018eaa <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 8018e88:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e8c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8018e90:	4611      	mov	r1, r2
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7ff fbf2 	bl	801867c <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 8018e98:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018e9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018ea0:	6879      	ldr	r1, [r7, #4]
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7ff ff79 	bl	8018d9a <vli_modInv_update>
 8018ea8:	e08c      	b.n	8018fc4 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 8018eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018eac:	f003 0301 	and.w	r3, r3, #1
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d110      	bne.n	8018ed6 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 8018eb4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8018ebc:	4611      	mov	r1, r2
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7ff fbdc 	bl	801867c <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 8018ec4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018ec8:	f107 0314 	add.w	r3, r7, #20
 8018ecc:	6879      	ldr	r1, [r7, #4]
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7ff ff63 	bl	8018d9a <vli_modInv_update>
 8018ed4:	e076      	b.n	8018fc4 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 8018ed6:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	dd39      	ble.n	8018f52 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 8018ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ee2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8018ee6:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8018eea:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8018eee:	f7ff fc39 	bl	8018764 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 8018ef2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018ef6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8018efa:	4611      	mov	r1, r2
 8018efc:	4618      	mov	r0, r3
 8018efe:	f7ff fbbd 	bl	801867c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 8018f02:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018f06:	f107 0114 	add.w	r1, r7, #20
 8018f0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7ff fb15 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	da08      	bge.n	8018f2c <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 8018f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f1e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018f22:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8018f26:	687a      	ldr	r2, [r7, #4]
 8018f28:	f7ff fbd2 	bl	80186d0 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 8018f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f30:	f107 0214 	add.w	r2, r7, #20
 8018f34:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018f38:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8018f3c:	f7ff fc12 	bl	8018764 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 8018f40:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018f44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018f48:	6879      	ldr	r1, [r7, #4]
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f7ff ff25 	bl	8018d9a <vli_modInv_update>
 8018f50:	e038      	b.n	8018fc4 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 8018f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f56:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8018f5a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8018f5e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8018f62:	f7ff fbff 	bl	8018764 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 8018f66:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018f6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8018f6e:	4611      	mov	r1, r2
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7ff fb83 	bl	801867c <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 8018f76:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018f7a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8018f7e:	f107 0314 	add.w	r3, r7, #20
 8018f82:	4618      	mov	r0, r3
 8018f84:	f7ff fadb 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 8018f88:	4603      	mov	r3, r0
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	da08      	bge.n	8018fa0 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 8018f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f92:	f107 0114 	add.w	r1, r7, #20
 8018f96:	f107 0014 	add.w	r0, r7, #20
 8018f9a:	687a      	ldr	r2, [r7, #4]
 8018f9c:	f7ff fb98 	bl	80186d0 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 8018fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fa4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8018fa8:	f107 0114 	add.w	r1, r7, #20
 8018fac:	f107 0014 	add.w	r0, r7, #20
 8018fb0:	f7ff fbd8 	bl	8018764 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 8018fb4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018fb8:	f107 0314 	add.w	r3, r7, #20
 8018fbc:	6879      	ldr	r1, [r7, #4]
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7ff feeb 	bl	8018d9a <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 8018fc4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018fc8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8018fcc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f7ff fab4 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8018fdc:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	f47f af4c 	bne.w	8018e7e <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 8018fe6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8018fea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018fee:	4619      	mov	r1, r3
 8018ff0:	68f8      	ldr	r0, [r7, #12]
 8018ff2:	f7ff fa7d 	bl	80184f0 <mg_uecc_vli_set>
}
 8018ff6:	3798      	adds	r7, #152	@ 0x98
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}

08018ffc <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b098      	sub	sp, #96	@ 0x60
 8019000:	af02      	add	r7, sp, #8
 8019002:	60f8      	str	r0, [r7, #12]
 8019004:	60b9      	str	r1, [r7, #8]
 8019006:	607a      	str	r2, [r7, #4]
 8019008:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	781b      	ldrb	r3, [r3, #0]
 801900e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 8019012:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019016:	4619      	mov	r1, r3
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f7ff f9c6 	bl	80183aa <mg_uecc_vli_isZero>
 801901e:	4603      	mov	r3, r0
 8019020:	2b00      	cmp	r3, #0
 8019022:	f040 80e6 	bne.w	80191f2 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 8019026:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801902a:	683a      	ldr	r2, [r7, #0]
 801902c:	68b9      	ldr	r1, [r7, #8]
 801902e:	4618      	mov	r0, r3
 8019030:	f7ff fea3 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 8019034:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019038:	f107 0010 	add.w	r0, r7, #16
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	68f9      	ldr	r1, [r7, #12]
 8019040:	f7ff fe7f 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 8019044:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8019048:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801904c:	683a      	ldr	r2, [r7, #0]
 801904e:	4618      	mov	r0, r3
 8019050:	f7ff fe93 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 8019054:	683b      	ldr	r3, [r7, #0]
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	68b9      	ldr	r1, [r7, #8]
 801905a:	68b8      	ldr	r0, [r7, #8]
 801905c:	f7ff fe71 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 8019060:	683a      	ldr	r2, [r7, #0]
 8019062:	6879      	ldr	r1, [r7, #4]
 8019064:	6878      	ldr	r0, [r7, #4]
 8019066:	f7ff fe88 	bl	8018d7a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	1d1a      	adds	r2, r3, #4
 801906e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019072:	9300      	str	r3, [sp, #0]
 8019074:	4613      	mov	r3, r2
 8019076:	687a      	ldr	r2, [r7, #4]
 8019078:	68f9      	ldr	r1, [r7, #12]
 801907a:	68f8      	ldr	r0, [r7, #12]
 801907c:	f7ff fcc6 	bl	8018a0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	1d1a      	adds	r2, r3, #4
 8019084:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019088:	9300      	str	r3, [sp, #0]
 801908a:	4613      	mov	r3, r2
 801908c:	687a      	ldr	r2, [r7, #4]
 801908e:	6879      	ldr	r1, [r7, #4]
 8019090:	6878      	ldr	r0, [r7, #4]
 8019092:	f7ff fcbb 	bl	8018a0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	1d1a      	adds	r2, r3, #4
 801909a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801909e:	9300      	str	r3, [sp, #0]
 80190a0:	4613      	mov	r3, r2
 80190a2:	687a      	ldr	r2, [r7, #4]
 80190a4:	68f9      	ldr	r1, [r7, #12]
 80190a6:	6878      	ldr	r0, [r7, #4]
 80190a8:	f7ff fcd7 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	687a      	ldr	r2, [r7, #4]
 80190b0:	68f9      	ldr	r1, [r7, #12]
 80190b2:	68f8      	ldr	r0, [r7, #12]
 80190b4:	f7ff fe45 	bl	8018d42 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	1d1a      	adds	r2, r3, #4
 80190bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80190c0:	9300      	str	r3, [sp, #0]
 80190c2:	4613      	mov	r3, r2
 80190c4:	68fa      	ldr	r2, [r7, #12]
 80190c6:	68f9      	ldr	r1, [r7, #12]
 80190c8:	6878      	ldr	r0, [r7, #4]
 80190ca:	f7ff fc9f 	bl	8018a0c <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 80190ce:	683b      	ldr	r3, [r7, #0]
 80190d0:	1d1a      	adds	r2, r3, #4
 80190d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80190d6:	9300      	str	r3, [sp, #0]
 80190d8:	4613      	mov	r3, r2
 80190da:	687a      	ldr	r2, [r7, #4]
 80190dc:	68f9      	ldr	r1, [r7, #12]
 80190de:	68f8      	ldr	r0, [r7, #12]
 80190e0:	f7ff fc94 	bl	8018a0c <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 80190e4:	2100      	movs	r1, #0
 80190e6:	68f8      	ldr	r0, [r7, #12]
 80190e8:	f7ff f989 	bl	80183fe <mg_uecc_vli_testBit>
 80190ec:	4603      	mov	r3, r0
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d024      	beq.n	801913c <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 80190f2:	683b      	ldr	r3, [r7, #0]
 80190f4:	1d1a      	adds	r2, r3, #4
 80190f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80190fa:	68f9      	ldr	r1, [r7, #12]
 80190fc:	68f8      	ldr	r0, [r7, #12]
 80190fe:	f7ff fae7 	bl	80186d0 <mg_uecc_vli_add>
 8019102:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 8019104:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019108:	4619      	mov	r1, r3
 801910a:	68f8      	ldr	r0, [r7, #12]
 801910c:	f7ff fab6 	bl	801867c <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 8019110:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 8019114:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8019118:	4413      	add	r3, r2
 801911a:	009b      	lsls	r3, r3, #2
 801911c:	68fa      	ldr	r2, [r7, #12]
 801911e:	4413      	add	r3, r2
 8019120:	6819      	ldr	r1, [r3, #0]
 8019122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019124:	07da      	lsls	r2, r3, #31
 8019126:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801912a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801912e:	4403      	add	r3, r0
 8019130:	009b      	lsls	r3, r3, #2
 8019132:	68f8      	ldr	r0, [r7, #12]
 8019134:	4403      	add	r3, r0
 8019136:	430a      	orrs	r2, r1
 8019138:	601a      	str	r2, [r3, #0]
 801913a:	e005      	b.n	8019148 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801913c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019140:	4619      	mov	r1, r3
 8019142:	68f8      	ldr	r0, [r7, #12]
 8019144:	f7ff fa9a 	bl	801867c <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 8019148:	683a      	ldr	r2, [r7, #0]
 801914a:	68f9      	ldr	r1, [r7, #12]
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7ff fe14 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	1d19      	adds	r1, r3, #4
 8019156:	f107 0210 	add.w	r2, r7, #16
 801915a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	460b      	mov	r3, r1
 8019162:	6879      	ldr	r1, [r7, #4]
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f7ff fc78 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801916a:	683b      	ldr	r3, [r7, #0]
 801916c:	1d19      	adds	r1, r3, #4
 801916e:	f107 0210 	add.w	r2, r7, #16
 8019172:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019176:	9300      	str	r3, [sp, #0]
 8019178:	460b      	mov	r3, r1
 801917a:	6879      	ldr	r1, [r7, #4]
 801917c:	6878      	ldr	r0, [r7, #4]
 801917e:	f7ff fc6c 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 8019182:	683b      	ldr	r3, [r7, #0]
 8019184:	1d1a      	adds	r2, r3, #4
 8019186:	f107 0110 	add.w	r1, r7, #16
 801918a:	f107 0010 	add.w	r0, r7, #16
 801918e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8019192:	9300      	str	r3, [sp, #0]
 8019194:	4613      	mov	r3, r2
 8019196:	687a      	ldr	r2, [r7, #4]
 8019198:	f7ff fc5f 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801919c:	f107 0210 	add.w	r2, r7, #16
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	68f9      	ldr	r1, [r7, #12]
 80191a4:	68f8      	ldr	r0, [r7, #12]
 80191a6:	f7ff fdcc 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	1d19      	adds	r1, r3, #4
 80191ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80191b2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80191b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80191ba:	9300      	str	r3, [sp, #0]
 80191bc:	460b      	mov	r3, r1
 80191be:	68f9      	ldr	r1, [r7, #12]
 80191c0:	f7ff fc4b 	bl	8018a5a <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 80191c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80191c8:	461a      	mov	r2, r3
 80191ca:	6879      	ldr	r1, [r7, #4]
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	f7ff f98f 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 80191d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80191d6:	461a      	mov	r2, r3
 80191d8:	68b9      	ldr	r1, [r7, #8]
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f7ff f988 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 80191e0:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 80191e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80191e8:	4619      	mov	r1, r3
 80191ea:	68b8      	ldr	r0, [r7, #8]
 80191ec:	f7ff f980 	bl	80184f0 <mg_uecc_vli_set>
 80191f0:	e000      	b.n	80191f4 <double_jacobian_default+0x1f8>
    return;
 80191f2:	bf00      	nop
}
 80191f4:	3758      	adds	r7, #88	@ 0x58
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}

080191fa <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 80191fa:	b580      	push	{r7, lr}
 80191fc:	b090      	sub	sp, #64	@ 0x40
 80191fe:	af02      	add	r7, sp, #8
 8019200:	60f8      	str	r0, [r7, #12]
 8019202:	60b9      	str	r1, [r7, #8]
 8019204:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 8019206:	f107 0314 	add.w	r3, r7, #20
 801920a:	2220      	movs	r2, #32
 801920c:	2100      	movs	r1, #0
 801920e:	4618      	mov	r0, r3
 8019210:	f005 fa2f 	bl	801e672 <memset>
 8019214:	2303      	movs	r3, #3
 8019216:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 8019220:	687a      	ldr	r2, [r7, #4]
 8019222:	68b9      	ldr	r1, [r7, #8]
 8019224:	68f8      	ldr	r0, [r7, #12]
 8019226:	f7ff fda8 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	1d19      	adds	r1, r3, #4
 801922e:	f107 0214 	add.w	r2, r7, #20
 8019232:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	460b      	mov	r3, r1
 801923a:	68f9      	ldr	r1, [r7, #12]
 801923c:	68f8      	ldr	r0, [r7, #12]
 801923e:	f7ff fc0c 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	68ba      	ldr	r2, [r7, #8]
 8019246:	68f9      	ldr	r1, [r7, #12]
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	f7ff fd7a 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	1d19      	adds	r1, r3, #4
 8019258:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	460b      	mov	r3, r1
 8019260:	68f9      	ldr	r1, [r7, #12]
 8019262:	68f8      	ldr	r0, [r7, #12]
 8019264:	f7ff fbd2 	bl	8018a0c <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 8019268:	bf00      	nop
 801926a:	3738      	adds	r7, #56	@ 0x38
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}

08019270 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 8019270:	b580      	push	{r7, lr}
 8019272:	b094      	sub	sp, #80	@ 0x50
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801927a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801927e:	2220      	movs	r2, #32
 8019280:	2100      	movs	r1, #0
 8019282:	4618      	mov	r0, r3
 8019284:	f005 f9f5 	bl	801e672 <memset>
 8019288:	2301      	movs	r3, #1
 801928a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801928c:	f107 030c 	add.w	r3, r7, #12
 8019290:	2220      	movs	r2, #32
 8019292:	2100      	movs	r1, #0
 8019294:	4618      	mov	r0, r3
 8019296:	f005 f9ec 	bl	801e672 <memset>
 801929a:	2301      	movs	r3, #1
 801929c:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	781b      	ldrb	r3, [r3, #0]
 80192a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 80192a6:	683b      	ldr	r3, [r7, #0]
 80192a8:	1d19      	adds	r1, r3, #4
 80192aa:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80192ae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80192b2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80192b6:	f7ff fa0b 	bl	80186d0 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 80192ba:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 80192be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80192c2:	4611      	mov	r1, r2
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7ff f8da 	bl	801847e <mg_uecc_vli_numBits>
 80192ca:	4603      	mov	r3, r0
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	3b01      	subs	r3, #1
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80192d6:	e020      	b.n	801931a <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 80192d8:	f107 010c 	add.w	r1, r7, #12
 80192dc:	f107 030c 	add.w	r3, r7, #12
 80192e0:	683a      	ldr	r2, [r7, #0]
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7ff fd49 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 80192e8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 80192ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80192f0:	4611      	mov	r1, r2
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7ff f883 	bl	80183fe <mg_uecc_vli_testBit>
 80192f8:	4603      	mov	r3, r0
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d007      	beq.n	801930e <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 80192fe:	f107 010c 	add.w	r1, r7, #12
 8019302:	f107 000c 	add.w	r0, r7, #12
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	687a      	ldr	r2, [r7, #4]
 801930a:	f7ff fd1a 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801930e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019312:	3b01      	subs	r3, #1
 8019314:	b29b      	uxth	r3, r3
 8019316:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801931a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801931e:	2b01      	cmp	r3, #1
 8019320:	dcda      	bgt.n	80192d8 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 8019322:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8019326:	f107 030c 	add.w	r3, r7, #12
 801932a:	4619      	mov	r1, r3
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f7ff f8df 	bl	80184f0 <mg_uecc_vli_set>
}
 8019332:	bf00      	nop
 8019334:	3750      	adds	r7, #80	@ 0x50
 8019336:	46bd      	mov	sp, r7
 8019338:	bd80      	pop	{r7, pc}
	...

0801933c <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801933c:	b480      	push	{r7}
 801933e:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 8019340:	4b02      	ldr	r3, [pc, #8]	@ (801934c <mg_uecc_secp256r1+0x10>)
}
 8019342:	4618      	mov	r0, r3
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr
 801934c:	08022748 	.word	0x08022748

08019350 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 8019350:	b580      	push	{r7, lr}
 8019352:	b08c      	sub	sp, #48	@ 0x30
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801935a:	2208      	movs	r2, #8
 801935c:	6839      	ldr	r1, [r7, #0]
 801935e:	6878      	ldr	r0, [r7, #4]
 8019360:	f7ff f8c6 	bl	80184f0 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 8019364:	2300      	movs	r3, #0
 8019366:	617b      	str	r3, [r7, #20]
 8019368:	697b      	ldr	r3, [r7, #20]
 801936a:	613b      	str	r3, [r7, #16]
 801936c:	693b      	ldr	r3, [r7, #16]
 801936e:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019374:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801937a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801937c:	683b      	ldr	r3, [r7, #0]
 801937e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019380:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019386:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8019388:	683b      	ldr	r3, [r7, #0]
 801938a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801938c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801938e:	f107 020c 	add.w	r2, r7, #12
 8019392:	f107 010c 	add.w	r1, r7, #12
 8019396:	f107 000c 	add.w	r0, r7, #12
 801939a:	2308      	movs	r3, #8
 801939c:	f7ff f998 	bl	80186d0 <mg_uecc_vli_add>
 80193a0:	4603      	mov	r3, r0
 80193a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80193a4:	f107 020c 	add.w	r2, r7, #12
 80193a8:	2308      	movs	r3, #8
 80193aa:	6879      	ldr	r1, [r7, #4]
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	f7ff f98f 	bl	80186d0 <mg_uecc_vli_add>
 80193b2:	4603      	mov	r3, r0
 80193b4:	461a      	mov	r2, r3
 80193b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193b8:	4413      	add	r3, r2
 80193ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80193c0:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80193c6:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193cc:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80193d2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 80193d4:	2300      	movs	r3, #0
 80193d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 80193d8:	f107 020c 	add.w	r2, r7, #12
 80193dc:	f107 010c 	add.w	r1, r7, #12
 80193e0:	f107 000c 	add.w	r0, r7, #12
 80193e4:	2308      	movs	r3, #8
 80193e6:	f7ff f973 	bl	80186d0 <mg_uecc_vli_add>
 80193ea:	4603      	mov	r3, r0
 80193ec:	461a      	mov	r2, r3
 80193ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193f0:	4413      	add	r3, r2
 80193f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 80193f4:	f107 020c 	add.w	r2, r7, #12
 80193f8:	2308      	movs	r3, #8
 80193fa:	6879      	ldr	r1, [r7, #4]
 80193fc:	6878      	ldr	r0, [r7, #4]
 80193fe:	f7ff f967 	bl	80186d0 <mg_uecc_vli_add>
 8019402:	4603      	mov	r3, r0
 8019404:	461a      	mov	r2, r3
 8019406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019408:	4413      	add	r3, r2
 801940a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	6a1b      	ldr	r3, [r3, #32]
 8019410:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 8019412:	683b      	ldr	r3, [r7, #0]
 8019414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019416:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801941c:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801941e:	2300      	movs	r3, #0
 8019420:	623b      	str	r3, [r7, #32]
 8019422:	6a3b      	ldr	r3, [r7, #32]
 8019424:	61fb      	str	r3, [r7, #28]
 8019426:	69fb      	ldr	r3, [r7, #28]
 8019428:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801942a:	683b      	ldr	r3, [r7, #0]
 801942c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801942e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019434:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 8019436:	f107 020c 	add.w	r2, r7, #12
 801943a:	2308      	movs	r3, #8
 801943c:	6879      	ldr	r1, [r7, #4]
 801943e:	6878      	ldr	r0, [r7, #4]
 8019440:	f7ff f946 	bl	80186d0 <mg_uecc_vli_add>
 8019444:	4603      	mov	r3, r0
 8019446:	461a      	mov	r2, r3
 8019448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801944a:	4413      	add	r3, r2
 801944c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019452:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019458:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801945e:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019464:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801946a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019470:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 8019472:	683b      	ldr	r3, [r7, #0]
 8019474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019476:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	6a1b      	ldr	r3, [r3, #32]
 801947c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801947e:	f107 020c 	add.w	r2, r7, #12
 8019482:	2308      	movs	r3, #8
 8019484:	6879      	ldr	r1, [r7, #4]
 8019486:	6878      	ldr	r0, [r7, #4]
 8019488:	f7ff f922 	bl	80186d0 <mg_uecc_vli_add>
 801948c:	4603      	mov	r3, r0
 801948e:	461a      	mov	r2, r3
 8019490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019492:	4413      	add	r3, r2
 8019494:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 8019496:	683b      	ldr	r3, [r7, #0]
 8019498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801949a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80194a0:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80194a6:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 80194a8:	2300      	movs	r3, #0
 80194aa:	623b      	str	r3, [r7, #32]
 80194ac:	6a3b      	ldr	r3, [r7, #32]
 80194ae:	61fb      	str	r3, [r7, #28]
 80194b0:	69fb      	ldr	r3, [r7, #28]
 80194b2:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	6a1b      	ldr	r3, [r3, #32]
 80194b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 80194ba:	683b      	ldr	r3, [r7, #0]
 80194bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194be:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 80194c0:	f107 020c 	add.w	r2, r7, #12
 80194c4:	2308      	movs	r3, #8
 80194c6:	6879      	ldr	r1, [r7, #4]
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f7ff f94b 	bl	8018764 <mg_uecc_vli_sub>
 80194ce:	4603      	mov	r3, r0
 80194d0:	461a      	mov	r2, r3
 80194d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194d4:	1a9b      	subs	r3, r3, r2
 80194d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 80194d8:	683b      	ldr	r3, [r7, #0]
 80194da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80194dc:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80194e2:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194e8:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 80194ea:	683b      	ldr	r3, [r7, #0]
 80194ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80194ee:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 80194f0:	2300      	movs	r3, #0
 80194f2:	623b      	str	r3, [r7, #32]
 80194f4:	6a3b      	ldr	r3, [r7, #32]
 80194f6:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 80194f8:	683b      	ldr	r3, [r7, #0]
 80194fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 80194fe:	683b      	ldr	r3, [r7, #0]
 8019500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019502:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 8019504:	f107 020c 	add.w	r2, r7, #12
 8019508:	2308      	movs	r3, #8
 801950a:	6879      	ldr	r1, [r7, #4]
 801950c:	6878      	ldr	r0, [r7, #4]
 801950e:	f7ff f929 	bl	8018764 <mg_uecc_vli_sub>
 8019512:	4603      	mov	r3, r0
 8019514:	461a      	mov	r2, r3
 8019516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019518:	1a9b      	subs	r3, r3, r2
 801951a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019520:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 8019522:	683b      	ldr	r3, [r7, #0]
 8019524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019526:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801952c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801952e:	683b      	ldr	r3, [r7, #0]
 8019530:	6a1b      	ldr	r3, [r3, #32]
 8019532:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019538:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801953e:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019548:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801954a:	f107 020c 	add.w	r2, r7, #12
 801954e:	2308      	movs	r3, #8
 8019550:	6879      	ldr	r1, [r7, #4]
 8019552:	6878      	ldr	r0, [r7, #4]
 8019554:	f7ff f906 	bl	8018764 <mg_uecc_vli_sub>
 8019558:	4603      	mov	r3, r0
 801955a:	461a      	mov	r2, r3
 801955c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801955e:	1a9b      	subs	r3, r3, r2
 8019560:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019566:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 8019568:	683b      	ldr	r3, [r7, #0]
 801956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801956c:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801956e:	2300      	movs	r3, #0
 8019570:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019576:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 8019578:	683b      	ldr	r3, [r7, #0]
 801957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801957c:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019582:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 8019584:	2300      	movs	r3, #0
 8019586:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 8019588:	683b      	ldr	r3, [r7, #0]
 801958a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801958c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801958e:	f107 020c 	add.w	r2, r7, #12
 8019592:	2308      	movs	r3, #8
 8019594:	6879      	ldr	r1, [r7, #4]
 8019596:	6878      	ldr	r0, [r7, #4]
 8019598:	f7ff f8e4 	bl	8018764 <mg_uecc_vli_sub>
 801959c:	4603      	mov	r3, r0
 801959e:	461a      	mov	r2, r3
 80195a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195a2:	1a9b      	subs	r3, r3, r2
 80195a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 80195a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	da19      	bge.n	80195e0 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 80195ac:	2308      	movs	r3, #8
 80195ae:	4a14      	ldr	r2, [pc, #80]	@ (8019600 <vli_mmod_fast_secp256r1+0x2b0>)
 80195b0:	6879      	ldr	r1, [r7, #4]
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	f7ff f88c 	bl	80186d0 <mg_uecc_vli_add>
 80195b8:	4603      	mov	r3, r0
 80195ba:	461a      	mov	r2, r3
 80195bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195be:	4413      	add	r3, r2
 80195c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 80195c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	dbf1      	blt.n	80195ac <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 80195c8:	e015      	b.n	80195f6 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 80195ca:	2308      	movs	r3, #8
 80195cc:	4a0c      	ldr	r2, [pc, #48]	@ (8019600 <vli_mmod_fast_secp256r1+0x2b0>)
 80195ce:	6879      	ldr	r1, [r7, #4]
 80195d0:	6878      	ldr	r0, [r7, #4]
 80195d2:	f7ff f8c7 	bl	8018764 <mg_uecc_vli_sub>
 80195d6:	4603      	mov	r3, r0
 80195d8:	461a      	mov	r2, r3
 80195da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195dc:	1a9b      	subs	r3, r3, r2
 80195de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 80195e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d1f1      	bne.n	80195ca <vli_mmod_fast_secp256r1+0x27a>
 80195e6:	2208      	movs	r2, #8
 80195e8:	6879      	ldr	r1, [r7, #4]
 80195ea:	4805      	ldr	r0, [pc, #20]	@ (8019600 <vli_mmod_fast_secp256r1+0x2b0>)
 80195ec:	f7fe ffa7 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 80195f0:	4603      	mov	r3, r0
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d1e9      	bne.n	80195ca <vli_mmod_fast_secp256r1+0x27a>
}
 80195f6:	bf00      	nop
 80195f8:	3730      	adds	r7, #48	@ 0x30
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bd80      	pop	{r7, pc}
 80195fe:	bf00      	nop
 8019600:	0802274c 	.word	0x0802274c

08019604 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 8019604:	b580      	push	{r7, lr}
 8019606:	b08c      	sub	sp, #48	@ 0x30
 8019608:	af00      	add	r7, sp, #0
 801960a:	60f8      	str	r0, [r7, #12]
 801960c:	60b9      	str	r1, [r7, #8]
 801960e:	607a      	str	r2, [r7, #4]
 8019610:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 8019612:	f107 0310 	add.w	r3, r7, #16
 8019616:	683a      	ldr	r2, [r7, #0]
 8019618:	6879      	ldr	r1, [r7, #4]
 801961a:	4618      	mov	r0, r3
 801961c:	f7ff fbad 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 8019620:	f107 0210 	add.w	r2, r7, #16
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	68f9      	ldr	r1, [r7, #12]
 8019628:	68f8      	ldr	r0, [r7, #12]
 801962a:	f7ff fb8a 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801962e:	f107 0110 	add.w	r1, r7, #16
 8019632:	f107 0010 	add.w	r0, r7, #16
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	687a      	ldr	r2, [r7, #4]
 801963a:	f7ff fb82 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801963e:	f107 0210 	add.w	r2, r7, #16
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	68b9      	ldr	r1, [r7, #8]
 8019646:	68b8      	ldr	r0, [r7, #8]
 8019648:	f7ff fb7b 	bl	8018d42 <mg_uecc_vli_modMult_fast>
}
 801964c:	bf00      	nop
 801964e:	3730      	adds	r7, #48	@ 0x30
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}

08019654 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 8019654:	b590      	push	{r4, r7, lr}
 8019656:	b08f      	sub	sp, #60	@ 0x3c
 8019658:	af00      	add	r7, sp, #0
 801965a:	60f8      	str	r0, [r7, #12]
 801965c:	60b9      	str	r1, [r7, #8]
 801965e:	607a      	str	r2, [r7, #4]
 8019660:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8019662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801966a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801966c:	2b00      	cmp	r3, #0
 801966e:	d008      	beq.n	8019682 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 8019670:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8019674:	f107 0314 	add.w	r3, r7, #20
 8019678:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801967a:	4618      	mov	r0, r3
 801967c:	f7fe ff38 	bl	80184f0 <mg_uecc_vli_set>
 8019680:	e009      	b.n	8019696 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 8019682:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8019686:	f107 0314 	add.w	r3, r7, #20
 801968a:	4611      	mov	r1, r2
 801968c:	4618      	mov	r0, r3
 801968e:	f7fe fe6b 	bl	8018368 <mg_uecc_vli_clear>
    z[0] = 1;
 8019692:	2301      	movs	r3, #1
 8019694:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 8019696:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801969a:	461a      	mov	r2, r3
 801969c:	68f9      	ldr	r1, [r7, #12]
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f7fe ff26 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 80196a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80196a8:	461a      	mov	r2, r3
 80196aa:	68b9      	ldr	r1, [r7, #8]
 80196ac:	6838      	ldr	r0, [r7, #0]
 80196ae:	f7fe ff1f 	bl	80184f0 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 80196b2:	f107 0214 	add.w	r2, r7, #20
 80196b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196b8:	68b9      	ldr	r1, [r7, #8]
 80196ba:	68f8      	ldr	r0, [r7, #12]
 80196bc:	f7ff ffa2 	bl	8019604 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 80196c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196c2:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80196c6:	f107 0214 	add.w	r2, r7, #20
 80196ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196cc:	68b9      	ldr	r1, [r7, #8]
 80196ce:	68f8      	ldr	r0, [r7, #12]
 80196d0:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 80196d2:	f107 0214 	add.w	r2, r7, #20
 80196d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196d8:	6839      	ldr	r1, [r7, #0]
 80196da:	6878      	ldr	r0, [r7, #4]
 80196dc:	f7ff ff92 	bl	8019604 <apply_z>
}
 80196e0:	bf00      	nop
 80196e2:	373c      	adds	r7, #60	@ 0x3c
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd90      	pop	{r4, r7, pc}

080196e8 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 80196e8:	b580      	push	{r7, lr}
 80196ea:	b090      	sub	sp, #64	@ 0x40
 80196ec:	af02      	add	r7, sp, #8
 80196ee:	60f8      	str	r0, [r7, #12]
 80196f0:	60b9      	str	r1, [r7, #8]
 80196f2:	607a      	str	r2, [r7, #4]
 80196f4:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 80196f6:	f107 0314 	add.w	r3, r7, #20
 80196fa:	2220      	movs	r2, #32
 80196fc:	2100      	movs	r1, #0
 80196fe:	4618      	mov	r0, r3
 8019700:	f004 ffb7 	bl	801e672 <memset>
  wordcount_t num_words = curve->num_words;
 8019704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801970c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801970e:	1d1a      	adds	r2, r3, #4
 8019710:	f107 0014 	add.w	r0, r7, #20
 8019714:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019718:	9300      	str	r3, [sp, #0]
 801971a:	4613      	mov	r3, r2
 801971c:	68fa      	ldr	r2, [r7, #12]
 801971e:	6879      	ldr	r1, [r7, #4]
 8019720:	f7ff f99b 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 8019724:	f107 0114 	add.w	r1, r7, #20
 8019728:	f107 0314 	add.w	r3, r7, #20
 801972c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801972e:	4618      	mov	r0, r3
 8019730:	f7ff fb23 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 8019734:	f107 0214 	add.w	r2, r7, #20
 8019738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801973a:	68f9      	ldr	r1, [r7, #12]
 801973c:	68f8      	ldr	r0, [r7, #12]
 801973e:	f7ff fb00 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 8019742:	f107 0214 	add.w	r2, r7, #20
 8019746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019748:	6879      	ldr	r1, [r7, #4]
 801974a:	6878      	ldr	r0, [r7, #4]
 801974c:	f7ff faf9 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 8019750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019752:	1d1a      	adds	r2, r3, #4
 8019754:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019758:	9300      	str	r3, [sp, #0]
 801975a:	4613      	mov	r3, r2
 801975c:	68ba      	ldr	r2, [r7, #8]
 801975e:	6839      	ldr	r1, [r7, #0]
 8019760:	6838      	ldr	r0, [r7, #0]
 8019762:	f7ff f97a 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 8019766:	f107 0314 	add.w	r3, r7, #20
 801976a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801976c:	6839      	ldr	r1, [r7, #0]
 801976e:	4618      	mov	r0, r3
 8019770:	f7ff fb03 	bl	8018d7a <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 8019774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019776:	1d1a      	adds	r2, r3, #4
 8019778:	f107 0114 	add.w	r1, r7, #20
 801977c:	f107 0014 	add.w	r0, r7, #20
 8019780:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8019784:	9300      	str	r3, [sp, #0]
 8019786:	4613      	mov	r3, r2
 8019788:	68fa      	ldr	r2, [r7, #12]
 801978a:	f7ff f966 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801978e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019790:	1d1a      	adds	r2, r3, #4
 8019792:	f107 0114 	add.w	r1, r7, #20
 8019796:	f107 0014 	add.w	r0, r7, #20
 801979a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801979e:	9300      	str	r3, [sp, #0]
 80197a0:	4613      	mov	r3, r2
 80197a2:	687a      	ldr	r2, [r7, #4]
 80197a4:	f7ff f959 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 80197a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197aa:	1d1a      	adds	r2, r3, #4
 80197ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80197b0:	9300      	str	r3, [sp, #0]
 80197b2:	4613      	mov	r3, r2
 80197b4:	68fa      	ldr	r2, [r7, #12]
 80197b6:	6879      	ldr	r1, [r7, #4]
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f7ff f94e 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 80197be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197c0:	687a      	ldr	r2, [r7, #4]
 80197c2:	68b9      	ldr	r1, [r7, #8]
 80197c4:	68b8      	ldr	r0, [r7, #8]
 80197c6:	f7ff fabc 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 80197ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197cc:	1d19      	adds	r1, r3, #4
 80197ce:	f107 0214 	add.w	r2, r7, #20
 80197d2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80197d6:	9300      	str	r3, [sp, #0]
 80197d8:	460b      	mov	r3, r1
 80197da:	68f9      	ldr	r1, [r7, #12]
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f7ff f93c 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 80197e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197e4:	687a      	ldr	r2, [r7, #4]
 80197e6:	6839      	ldr	r1, [r7, #0]
 80197e8:	6838      	ldr	r0, [r7, #0]
 80197ea:	f7ff faaa 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 80197ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197f0:	1d1a      	adds	r2, r3, #4
 80197f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	4613      	mov	r3, r2
 80197fa:	68ba      	ldr	r2, [r7, #8]
 80197fc:	6839      	ldr	r1, [r7, #0]
 80197fe:	6838      	ldr	r0, [r7, #0]
 8019800:	f7ff f92b 	bl	8018a5a <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 8019804:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 8019808:	f107 0314 	add.w	r3, r7, #20
 801980c:	4619      	mov	r1, r3
 801980e:	6878      	ldr	r0, [r7, #4]
 8019810:	f7fe fe6e 	bl	80184f0 <mg_uecc_vli_set>
}
 8019814:	bf00      	nop
 8019816:	3738      	adds	r7, #56	@ 0x38
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}

0801981c <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801981c:	b590      	push	{r4, r7, lr}
 801981e:	b0a1      	sub	sp, #132	@ 0x84
 8019820:	af02      	add	r7, sp, #8
 8019822:	60f8      	str	r0, [r7, #12]
 8019824:	60b9      	str	r1, [r7, #8]
 8019826:	607a      	str	r2, [r7, #4]
 8019828:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801982a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801982e:	2220      	movs	r2, #32
 8019830:	2100      	movs	r1, #0
 8019832:	4618      	mov	r0, r3
 8019834:	f004 ff1d 	bl	801e672 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 8019838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801983c:	781b      	ldrb	r3, [r3, #0]
 801983e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 8019842:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019846:	1d1a      	adds	r2, r3, #4
 8019848:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801984c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8019850:	9300      	str	r3, [sp, #0]
 8019852:	4613      	mov	r3, r2
 8019854:	68fa      	ldr	r2, [r7, #12]
 8019856:	6879      	ldr	r1, [r7, #4]
 8019858:	f7ff f8ff 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801985c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8019860:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8019864:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8019868:	4618      	mov	r0, r3
 801986a:	f7ff fa86 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801986e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8019872:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019876:	68f9      	ldr	r1, [r7, #12]
 8019878:	68f8      	ldr	r0, [r7, #12]
 801987a:	f7ff fa62 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801987e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8019882:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019886:	6879      	ldr	r1, [r7, #4]
 8019888:	6878      	ldr	r0, [r7, #4]
 801988a:	f7ff fa5a 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801988e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019892:	1d1a      	adds	r2, r3, #4
 8019894:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8019898:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801989c:	9300      	str	r3, [sp, #0]
 801989e:	4613      	mov	r3, r2
 80198a0:	68ba      	ldr	r2, [r7, #8]
 80198a2:	6839      	ldr	r1, [r7, #0]
 80198a4:	f7ff f8b2 	bl	8018a0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 80198a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80198ac:	1d1a      	adds	r2, r3, #4
 80198ae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80198b2:	9300      	str	r3, [sp, #0]
 80198b4:	4613      	mov	r3, r2
 80198b6:	68ba      	ldr	r2, [r7, #8]
 80198b8:	6839      	ldr	r1, [r7, #0]
 80198ba:	6838      	ldr	r0, [r7, #0]
 80198bc:	f7ff f8cd 	bl	8018a5a <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 80198c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80198c4:	1d1a      	adds	r2, r3, #4
 80198c6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80198ca:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80198ce:	9300      	str	r3, [sp, #0]
 80198d0:	4613      	mov	r3, r2
 80198d2:	68fa      	ldr	r2, [r7, #12]
 80198d4:	6879      	ldr	r1, [r7, #4]
 80198d6:	f7ff f8c0 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 80198da:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80198de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80198e2:	68b9      	ldr	r1, [r7, #8]
 80198e4:	68b8      	ldr	r0, [r7, #8]
 80198e6:	f7ff fa2c 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 80198ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80198ee:	1d1a      	adds	r2, r3, #4
 80198f0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80198f4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80198f8:	9300      	str	r3, [sp, #0]
 80198fa:	4613      	mov	r3, r2
 80198fc:	687a      	ldr	r2, [r7, #4]
 80198fe:	68f9      	ldr	r1, [r7, #12]
 8019900:	f7ff f884 	bl	8018a0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 8019904:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8019908:	6839      	ldr	r1, [r7, #0]
 801990a:	6878      	ldr	r0, [r7, #4]
 801990c:	f7ff fa35 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 8019910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019914:	1d19      	adds	r1, r3, #4
 8019916:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801991a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801991e:	9300      	str	r3, [sp, #0]
 8019920:	460b      	mov	r3, r1
 8019922:	6879      	ldr	r1, [r7, #4]
 8019924:	6878      	ldr	r0, [r7, #4]
 8019926:	f7ff f898 	bl	8018a5a <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801992a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801992e:	1d1a      	adds	r2, r3, #4
 8019930:	f107 0014 	add.w	r0, r7, #20
 8019934:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8019938:	9300      	str	r3, [sp, #0]
 801993a:	4613      	mov	r3, r2
 801993c:	687a      	ldr	r2, [r7, #4]
 801993e:	68f9      	ldr	r1, [r7, #12]
 8019940:	f7ff f88b 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 8019944:	f107 0214 	add.w	r2, r7, #20
 8019948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801994c:	6839      	ldr	r1, [r7, #0]
 801994e:	6838      	ldr	r0, [r7, #0]
 8019950:	f7ff f9f7 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 8019954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019958:	1d1a      	adds	r2, r3, #4
 801995a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801995e:	9300      	str	r3, [sp, #0]
 8019960:	4613      	mov	r3, r2
 8019962:	68ba      	ldr	r2, [r7, #8]
 8019964:	6839      	ldr	r1, [r7, #0]
 8019966:	6838      	ldr	r0, [r7, #0]
 8019968:	f7ff f877 	bl	8018a5a <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801996c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8019970:	f107 0314 	add.w	r3, r7, #20
 8019974:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8019978:	4618      	mov	r0, r3
 801997a:	f7ff f9fe 	bl	8018d7a <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801997e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8019982:	1d1c      	adds	r4, r3, #4
 8019984:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019988:	f107 0114 	add.w	r1, r7, #20
 801998c:	f107 0014 	add.w	r0, r7, #20
 8019990:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8019994:	9300      	str	r3, [sp, #0]
 8019996:	4623      	mov	r3, r4
 8019998:	f7ff f85f 	bl	8018a5a <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801999c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80199a0:	1d1a      	adds	r2, r3, #4
 80199a2:	f107 0114 	add.w	r1, r7, #20
 80199a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80199aa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80199ae:	9300      	str	r3, [sp, #0]
 80199b0:	4613      	mov	r3, r2
 80199b2:	68fa      	ldr	r2, [r7, #12]
 80199b4:	f7ff f851 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 80199b8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80199bc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80199c0:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80199c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80199c8:	f7ff f9bb 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 80199cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80199d0:	1d1a      	adds	r2, r3, #4
 80199d2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80199d6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	4613      	mov	r3, r2
 80199de:	68ba      	ldr	r2, [r7, #8]
 80199e0:	68b8      	ldr	r0, [r7, #8]
 80199e2:	f7ff f83a 	bl	8018a5a <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 80199e6:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 80199ea:	f107 0314 	add.w	r3, r7, #20
 80199ee:	4619      	mov	r1, r3
 80199f0:	68f8      	ldr	r0, [r7, #12]
 80199f2:	f7fe fd7d 	bl	80184f0 <mg_uecc_vli_set>
}
 80199f6:	bf00      	nop
 80199f8:	377c      	adds	r7, #124	@ 0x7c
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd90      	pop	{r4, r7, pc}

080199fe <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 80199fe:	b590      	push	{r4, r7, lr}
 8019a00:	b0b1      	sub	sp, #196	@ 0xc4
 8019a02:	af02      	add	r7, sp, #8
 8019a04:	60f8      	str	r0, [r7, #12]
 8019a06:	60b9      	str	r1, [r7, #8]
 8019a08:	607a      	str	r2, [r7, #4]
 8019a0a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 8019a0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019a10:	781b      	ldrb	r3, [r3, #0]
 8019a12:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 8019a16:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8019a1a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019a1e:	3320      	adds	r3, #32
 8019a20:	68b9      	ldr	r1, [r7, #8]
 8019a22:	4618      	mov	r0, r3
 8019a24:	f7fe fd64 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 8019a28:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	68ba      	ldr	r2, [r7, #8]
 8019a30:	18d1      	adds	r1, r2, r3
 8019a32:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8019a36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019a3a:	3320      	adds	r3, #32
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f7fe fd57 	bl	80184f0 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 8019a42:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8019a46:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019a4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019a4e:	f103 0120 	add.w	r1, r3, #32
 8019a52:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019a56:	f103 0020 	add.w	r0, r3, #32
 8019a5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019a5e:	9301      	str	r3, [sp, #4]
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	9300      	str	r3, [sp, #0]
 8019a64:	4623      	mov	r3, r4
 8019a66:	f7ff fdf5 	bl	8019654 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 8019a6a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8019a6e:	3b02      	subs	r3, #2
 8019a70:	b29b      	uxth	r3, r3
 8019a72:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8019a76:	e059      	b.n	8019b2c <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 8019a78:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8019a7c:	4619      	mov	r1, r3
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f7fe fcbd 	bl	80183fe <mg_uecc_vli_testBit>
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	bf0c      	ite	eq
 8019a8a:	2301      	moveq	r3, #1
 8019a8c:	2300      	movne	r3, #0
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8019a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019a98:	f1c3 0301 	rsb	r3, r3, #1
 8019a9c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019aa0:	015b      	lsls	r3, r3, #5
 8019aa2:	18d0      	adds	r0, r2, r3
 8019aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019aa8:	f1c3 0301 	rsb	r3, r3, #1
 8019aac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019ab0:	015b      	lsls	r3, r3, #5
 8019ab2:	18d1      	adds	r1, r2, r3
 8019ab4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019abc:	015b      	lsls	r3, r3, #5
 8019abe:	18d4      	adds	r4, r2, r3
 8019ac0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019ac4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019ac8:	015b      	lsls	r3, r3, #5
 8019aca:	441a      	add	r2, r3
 8019acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019ad0:	9300      	str	r3, [sp, #0]
 8019ad2:	4613      	mov	r3, r2
 8019ad4:	4622      	mov	r2, r4
 8019ad6:	f7ff fea1 	bl	801981c <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8019ada:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019ade:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019ae2:	015b      	lsls	r3, r3, #5
 8019ae4:	18d0      	adds	r0, r2, r3
 8019ae6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019aea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019aee:	015b      	lsls	r3, r3, #5
 8019af0:	18d1      	adds	r1, r2, r3
 8019af2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019af6:	f1c3 0301 	rsb	r3, r3, #1
 8019afa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019afe:	015b      	lsls	r3, r3, #5
 8019b00:	18d4      	adds	r4, r2, r3
 8019b02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019b06:	f1c3 0301 	rsb	r3, r3, #1
 8019b0a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019b0e:	015b      	lsls	r3, r3, #5
 8019b10:	441a      	add	r2, r3
 8019b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019b16:	9300      	str	r3, [sp, #0]
 8019b18:	4613      	mov	r3, r2
 8019b1a:	4622      	mov	r2, r4
 8019b1c:	f7ff fde4 	bl	80196e8 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 8019b20:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8019b24:	3b01      	subs	r3, #1
 8019b26:	b29b      	uxth	r3, r3
 8019b28:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8019b2c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	dca1      	bgt.n	8019a78 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 8019b34:	2100      	movs	r1, #0
 8019b36:	6878      	ldr	r0, [r7, #4]
 8019b38:	f7fe fc61 	bl	80183fe <mg_uecc_vli_testBit>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	bf0c      	ite	eq
 8019b42:	2301      	moveq	r3, #1
 8019b44:	2300      	movne	r3, #0
 8019b46:	b2db      	uxtb	r3, r3
 8019b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 8019b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019b50:	f1c3 0301 	rsb	r3, r3, #1
 8019b54:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019b58:	015b      	lsls	r3, r3, #5
 8019b5a:	18d0      	adds	r0, r2, r3
 8019b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019b60:	f1c3 0301 	rsb	r3, r3, #1
 8019b64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019b68:	015b      	lsls	r3, r3, #5
 8019b6a:	18d1      	adds	r1, r2, r3
 8019b6c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019b70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019b74:	015b      	lsls	r3, r3, #5
 8019b76:	18d4      	adds	r4, r2, r3
 8019b78:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019b80:	015b      	lsls	r3, r3, #5
 8019b82:	441a      	add	r2, r3
 8019b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019b88:	9300      	str	r3, [sp, #0]
 8019b8a:	4613      	mov	r3, r2
 8019b8c:	4622      	mov	r2, r4
 8019b8e:	f7ff fe45 	bl	801981c <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 8019b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019b96:	1d1c      	adds	r4, r3, #4
 8019b98:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019b9c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019ba0:	f103 0120 	add.w	r1, r3, #32
 8019ba4:	f107 0010 	add.w	r0, r7, #16
 8019ba8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8019bac:	9300      	str	r3, [sp, #0]
 8019bae:	4623      	mov	r3, r4
 8019bb0:	f7fe ff53 	bl	8018a5a <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 8019bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019bb8:	f1c3 0301 	rsb	r3, r3, #1
 8019bbc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019bc0:	015b      	lsls	r3, r3, #5
 8019bc2:	441a      	add	r2, r3
 8019bc4:	f107 0110 	add.w	r1, r7, #16
 8019bc8:	f107 0010 	add.w	r0, r7, #16
 8019bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019bd0:	f7ff f8b7 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 8019bd4:	f107 0110 	add.w	r1, r7, #16
 8019bd8:	f107 0010 	add.w	r0, r7, #16
 8019bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019be0:	68ba      	ldr	r2, [r7, #8]
 8019be2:	f7ff f8ae 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 8019be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019bea:	1d1a      	adds	r2, r3, #4
 8019bec:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8019bf0:	f107 0110 	add.w	r1, r7, #16
 8019bf4:	f107 0010 	add.w	r0, r7, #16
 8019bf8:	f7ff f907 	bl	8018e0a <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 8019bfc:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8019c00:	009b      	lsls	r3, r3, #2
 8019c02:	68ba      	ldr	r2, [r7, #8]
 8019c04:	441a      	add	r2, r3
 8019c06:	f107 0110 	add.w	r1, r7, #16
 8019c0a:	f107 0010 	add.w	r0, r7, #16
 8019c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019c12:	f7ff f896 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 8019c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019c1a:	f1c3 0301 	rsb	r3, r3, #1
 8019c1e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019c22:	015b      	lsls	r3, r3, #5
 8019c24:	441a      	add	r2, r3
 8019c26:	f107 0110 	add.w	r1, r7, #16
 8019c2a:	f107 0010 	add.w	r0, r7, #16
 8019c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019c32:	f7ff f886 	bl	8018d42 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 8019c36:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019c3e:	015b      	lsls	r3, r3, #5
 8019c40:	18d0      	adds	r0, r2, r3
 8019c42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019c46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019c4a:	015b      	lsls	r3, r3, #5
 8019c4c:	18d1      	adds	r1, r2, r3
 8019c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019c52:	f1c3 0301 	rsb	r3, r3, #1
 8019c56:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8019c5a:	015b      	lsls	r3, r3, #5
 8019c5c:	18d4      	adds	r4, r2, r3
 8019c5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019c62:	f1c3 0301 	rsb	r3, r3, #1
 8019c66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019c6a:	015b      	lsls	r3, r3, #5
 8019c6c:	441a      	add	r2, r3
 8019c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019c72:	9300      	str	r3, [sp, #0]
 8019c74:	4613      	mov	r3, r2
 8019c76:	4622      	mov	r2, r4
 8019c78:	f7ff fd36 	bl	80196e8 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 8019c7c:	f107 0210 	add.w	r2, r7, #16
 8019c80:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8019c84:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8019c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019c8c:	f7ff fcba 	bl	8019604 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 8019c90:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8019c94:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8019c98:	4619      	mov	r1, r3
 8019c9a:	68f8      	ldr	r0, [r7, #12]
 8019c9c:	f7fe fc28 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 8019ca0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 8019ca4:	009b      	lsls	r3, r3, #2
 8019ca6:	68fa      	ldr	r2, [r7, #12]
 8019ca8:	4413      	add	r3, r2
 8019caa:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 8019cae:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7fe fc1c 	bl	80184f0 <mg_uecc_vli_set>
}
 8019cb8:	bf00      	nop
 8019cba:	37bc      	adds	r7, #188	@ 0xbc
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd90      	pop	{r4, r7, pc}

08019cc0 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b086      	sub	sp, #24
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	60f8      	str	r0, [r7, #12]
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	607a      	str	r2, [r7, #4]
 8019ccc:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019cd4:	331f      	adds	r3, #31
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	da00      	bge.n	8019cdc <regularize_k+0x1c>
 8019cda:	331f      	adds	r3, #31
 8019cdc:	115b      	asrs	r3, r3, #5
 8019cde:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	885b      	ldrh	r3, [r3, #2]
 8019ce4:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8019ce6:	683b      	ldr	r3, [r7, #0]
 8019ce8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8019cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019cf0:	68f9      	ldr	r1, [r7, #12]
 8019cf2:	68b8      	ldr	r0, [r7, #8]
 8019cf4:	f7fe fcec 	bl	80186d0 <mg_uecc_vli_add>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d10f      	bne.n	8019d1e <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8019cfe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d06:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	da0a      	bge.n	8019d22 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 8019d0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019d10:	4619      	mov	r1, r3
 8019d12:	68b8      	ldr	r0, [r7, #8]
 8019d14:	f7fe fb73 	bl	80183fe <mg_uecc_vli_testBit>
 8019d18:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d001      	beq.n	8019d22 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 8019d1e:	2301      	movs	r3, #1
 8019d20:	e000      	b.n	8019d24 <regularize_k+0x64>
 8019d22:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 8019d24:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8019d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d30:	68b9      	ldr	r1, [r7, #8]
 8019d32:	6878      	ldr	r0, [r7, #4]
 8019d34:	f7fe fccc 	bl	80186d0 <mg_uecc_vli_add>
  return carry;
 8019d38:	693b      	ldr	r3, [r7, #16]
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3718      	adds	r7, #24
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}
	...

08019d44 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b088      	sub	sp, #32
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	4613      	mov	r3, r2
 8019d50:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 8019d52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019d56:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 8019d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019d5c:	4619      	mov	r1, r3
 8019d5e:	68b8      	ldr	r0, [r7, #8]
 8019d60:	f7fe fb8d 	bl	801847e <mg_uecc_vli_numBits>
 8019d64:	4603      	mov	r3, r0
 8019d66:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 8019d68:	4b2a      	ldr	r3, [pc, #168]	@ (8019e14 <mg_uecc_generate_random_int+0xd0>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d101      	bne.n	8019d74 <mg_uecc_generate_random_int+0x30>
    return 0;
 8019d70:	2300      	movs	r3, #0
 8019d72:	e04b      	b.n	8019e0c <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8019d74:	2300      	movs	r3, #0
 8019d76:	61fb      	str	r3, [r7, #28]
 8019d78:	e044      	b.n	8019e04 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 8019d7a:	4b26      	ldr	r3, [pc, #152]	@ (8019e14 <mg_uecc_generate_random_int+0xd0>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 8019d7e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019d82:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 8019d84:	4611      	mov	r1, r2
 8019d86:	68f8      	ldr	r0, [r7, #12]
 8019d88:	4798      	blx	r3
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <mg_uecc_generate_random_int+0x50>
      return 0;
 8019d90:	2300      	movs	r3, #0
 8019d92:	e03b      	b.n	8019e0c <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 8019d94:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019d98:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8019d9c:	4413      	add	r3, r2
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	68fa      	ldr	r2, [r7, #12]
 8019da2:	4413      	add	r3, r2
 8019da4:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 8019da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	015b      	lsls	r3, r3, #5
 8019dae:	b29a      	uxth	r2, r3
 8019db0:	8afb      	ldrh	r3, [r7, #22]
 8019db2:	1ad3      	subs	r3, r2, r3
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	b21b      	sxth	r3, r3
 8019db8:	461a      	mov	r2, r3
 8019dba:	69bb      	ldr	r3, [r7, #24]
 8019dbc:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 8019dc0:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8019dc4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8019dc8:	4403      	add	r3, r0
 8019dca:	009b      	lsls	r3, r3, #2
 8019dcc:	68f8      	ldr	r0, [r7, #12]
 8019dce:	4403      	add	r3, r0
 8019dd0:	400a      	ands	r2, r1
 8019dd2:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8019dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019dd8:	4619      	mov	r1, r3
 8019dda:	68f8      	ldr	r0, [r7, #12]
 8019ddc:	f7fe fae5 	bl	80183aa <mg_uecc_vli_isZero>
 8019de0:	4603      	mov	r3, r0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10b      	bne.n	8019dfe <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 8019de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019dea:	461a      	mov	r2, r3
 8019dec:	68f9      	ldr	r1, [r7, #12]
 8019dee:	68b8      	ldr	r0, [r7, #8]
 8019df0:	f7fe fc13 	bl	801861a <mg_uecc_vli_cmp>
 8019df4:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d101      	bne.n	8019dfe <mg_uecc_generate_random_int+0xba>
      return 1;
 8019dfa:	2301      	movs	r3, #1
 8019dfc:	e006      	b.n	8019e0c <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 8019dfe:	69fb      	ldr	r3, [r7, #28]
 8019e00:	3301      	adds	r3, #1
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	69fb      	ldr	r3, [r7, #28]
 8019e06:	2b3f      	cmp	r3, #63	@ 0x3f
 8019e08:	d9b7      	bls.n	8019d7a <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 8019e0a:	2300      	movs	r3, #0
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3720      	adds	r7, #32
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	20000668 	.word	0x20000668

08019e18 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 8019e18:	b480      	push	{r7}
 8019e1a:	b087      	sub	sp, #28
 8019e1c:	af00      	add	r7, sp, #0
 8019e1e:	60f8      	str	r0, [r7, #12]
 8019e20:	60b9      	str	r1, [r7, #8]
 8019e22:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 8019e24:	2300      	movs	r3, #0
 8019e26:	617b      	str	r3, [r7, #20]
 8019e28:	e018      	b.n	8019e5c <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	1e5a      	subs	r2, r3, #1
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	1ad3      	subs	r3, r2, r3
 8019e32:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	f023 0303 	bic.w	r3, r3, #3
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	4413      	add	r3, r2
 8019e3e:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 8019e40:	693b      	ldr	r3, [r7, #16]
 8019e42:	f003 0303 	and.w	r3, r3, #3
 8019e46:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 8019e48:	fa22 f103 	lsr.w	r1, r2, r3
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	68fa      	ldr	r2, [r7, #12]
 8019e50:	4413      	add	r3, r2
 8019e52:	b2ca      	uxtb	r2, r1
 8019e54:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	3301      	adds	r3, #1
 8019e5a:	617b      	str	r3, [r7, #20]
 8019e5c:	697a      	ldr	r2, [r7, #20]
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	429a      	cmp	r2, r3
 8019e62:	dbe2      	blt.n	8019e2a <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 8019e64:	bf00      	nop
 8019e66:	bf00      	nop
 8019e68:	371c      	adds	r7, #28
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e70:	4770      	bx	lr

08019e72 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b086      	sub	sp, #24
 8019e76:	af00      	add	r7, sp, #0
 8019e78:	60f8      	str	r0, [r7, #12]
 8019e7a:	60b9      	str	r1, [r7, #8]
 8019e7c:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	3303      	adds	r3, #3
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	da00      	bge.n	8019e88 <mg_uecc_vli_bytesToNative+0x16>
 8019e86:	3303      	adds	r3, #3
 8019e88:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 8019e8a:	b25b      	sxtb	r3, r3
 8019e8c:	4619      	mov	r1, r3
 8019e8e:	68f8      	ldr	r0, [r7, #12]
 8019e90:	f7fe fa6a 	bl	8018368 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 8019e94:	2300      	movs	r3, #0
 8019e96:	617b      	str	r3, [r7, #20]
 8019e98:	e01e      	b.n	8019ed8 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	1e5a      	subs	r2, r3, #1
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	1ad3      	subs	r3, r2, r3
 8019ea2:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8019ea4:	693b      	ldr	r3, [r7, #16]
 8019ea6:	f023 0303 	bic.w	r3, r3, #3
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	4413      	add	r3, r2
 8019eae:	6819      	ldr	r1, [r3, #0]
 8019eb0:	697b      	ldr	r3, [r7, #20]
 8019eb2:	68ba      	ldr	r2, [r7, #8]
 8019eb4:	4413      	add	r3, r2
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 8019eba:	693b      	ldr	r3, [r7, #16]
 8019ebc:	f003 0303 	and.w	r3, r3, #3
 8019ec0:	00db      	lsls	r3, r3, #3
 8019ec2:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 8019ec4:	693b      	ldr	r3, [r7, #16]
 8019ec6:	f023 0303 	bic.w	r3, r3, #3
 8019eca:	68f8      	ldr	r0, [r7, #12]
 8019ecc:	4403      	add	r3, r0
 8019ece:	430a      	orrs	r2, r1
 8019ed0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 8019ed2:	697b      	ldr	r3, [r7, #20]
 8019ed4:	3301      	adds	r3, #1
 8019ed6:	617b      	str	r3, [r7, #20]
 8019ed8:	697a      	ldr	r2, [r7, #20]
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	429a      	cmp	r2, r3
 8019ede:	dbdc      	blt.n	8019e9a <mg_uecc_vli_bytesToNative+0x28>
  }
}
 8019ee0:	bf00      	nop
 8019ee2:	bf00      	nop
 8019ee4:	3718      	adds	r7, #24
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	bd80      	pop	{r7, pc}

08019eea <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 8019eea:	b580      	push	{r7, lr}
 8019eec:	b08a      	sub	sp, #40	@ 0x28
 8019eee:	af00      	add	r7, sp, #0
 8019ef0:	60f8      	str	r0, [r7, #12]
 8019ef2:	60b9      	str	r1, [r7, #8]
 8019ef4:	607a      	str	r2, [r7, #4]
 8019ef6:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 8019ef8:	683b      	ldr	r3, [r7, #0]
 8019efa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019efe:	3307      	adds	r3, #7
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	da00      	bge.n	8019f06 <bits2int+0x1c>
 8019f04:	3307      	adds	r3, #7
 8019f06:	10db      	asrs	r3, r3, #3
 8019f08:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f10:	331f      	adds	r3, #31
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	da00      	bge.n	8019f18 <bits2int+0x2e>
 8019f16:	331f      	adds	r3, #31
 8019f18:	115b      	asrs	r3, r3, #5
 8019f1a:	b25b      	sxtb	r3, r3
 8019f1c:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 8019f1e:	687a      	ldr	r2, [r7, #4]
 8019f20:	69fb      	ldr	r3, [r7, #28]
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d901      	bls.n	8019f2a <bits2int+0x40>
    bits_size = num_n_bytes;
 8019f26:	69fb      	ldr	r3, [r7, #28]
 8019f28:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 8019f2a:	69bb      	ldr	r3, [r7, #24]
 8019f2c:	b25b      	sxtb	r3, r3
 8019f2e:	4619      	mov	r1, r3
 8019f30:	68f8      	ldr	r0, [r7, #12]
 8019f32:	f7fe fa19 	bl	8018368 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	461a      	mov	r2, r3
 8019f3a:	68b9      	ldr	r1, [r7, #8]
 8019f3c:	68f8      	ldr	r0, [r7, #12]
 8019f3e:	f7ff ff98 	bl	8019e72 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	00db      	lsls	r3, r3, #3
 8019f46:	683a      	ldr	r2, [r7, #0]
 8019f48:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019f4c:	4293      	cmp	r3, r2
 8019f4e:	d93a      	bls.n	8019fc6 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	00db      	lsls	r3, r3, #3
 8019f54:	683a      	ldr	r2, [r7, #0]
 8019f56:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019f5a:	1a9b      	subs	r3, r3, r2
 8019f5c:	617b      	str	r3, [r7, #20]
  carry = 0;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 8019f62:	69bb      	ldr	r3, [r7, #24]
 8019f64:	009b      	lsls	r3, r3, #2
 8019f66:	68fa      	ldr	r2, [r7, #12]
 8019f68:	4413      	add	r3, r2
 8019f6a:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 8019f6c:	e010      	b.n	8019f90 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 8019f6e:	6a3b      	ldr	r3, [r7, #32]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 8019f74:	693a      	ldr	r2, [r7, #16]
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	40da      	lsrs	r2, r3
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f7c:	431a      	orrs	r2, r3
 8019f7e:	6a3b      	ldr	r3, [r7, #32]
 8019f80:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	f1c3 0320 	rsb	r3, r3, #32
 8019f88:	693a      	ldr	r2, [r7, #16]
 8019f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8019f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 8019f90:	6a3b      	ldr	r3, [r7, #32]
 8019f92:	1f1a      	subs	r2, r3, #4
 8019f94:	623a      	str	r2, [r7, #32]
 8019f96:	68fa      	ldr	r2, [r7, #12]
 8019f98:	429a      	cmp	r2, r3
 8019f9a:	d3e8      	bcc.n	8019f6e <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	3324      	adds	r3, #36	@ 0x24
 8019fa0:	69ba      	ldr	r2, [r7, #24]
 8019fa2:	b252      	sxtb	r2, r2
 8019fa4:	68f9      	ldr	r1, [r7, #12]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7fe fac9 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 8019fac:	4603      	mov	r3, r0
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d00a      	beq.n	8019fc8 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 8019fb2:	683b      	ldr	r3, [r7, #0]
 8019fb4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8019fb8:	69bb      	ldr	r3, [r7, #24]
 8019fba:	b25b      	sxtb	r3, r3
 8019fbc:	68f9      	ldr	r1, [r7, #12]
 8019fbe:	68f8      	ldr	r0, [r7, #12]
 8019fc0:	f7fe fbd0 	bl	8018764 <mg_uecc_vli_sub>
 8019fc4:	e000      	b.n	8019fc8 <bits2int+0xde>
    return;
 8019fc6:	bf00      	nop
  }
}
 8019fc8:	3728      	adds	r7, #40	@ 0x28
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
	...

08019fd0 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 8019fd0:	b590      	push	{r4, r7, lr}
 8019fd2:	b0ad      	sub	sp, #180	@ 0xb4
 8019fd4:	af02      	add	r7, sp, #8
 8019fd6:	60f8      	str	r0, [r7, #12]
 8019fd8:	60b9      	str	r1, [r7, #8]
 8019fda:	607a      	str	r2, [r7, #4]
 8019fdc:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 8019fde:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8019fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8019fe4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8019fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 8019fea:	2300      	movs	r3, #0
 8019fec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 8019ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 8019ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8019ffe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a002:	331f      	adds	r3, #31
 801a004:	2b00      	cmp	r3, #0
 801a006:	da00      	bge.n	801a00a <mg_uecc_sign_with_k_internal+0x3a>
 801a008:	331f      	adds	r3, #31
 801a00a:	115b      	asrs	r3, r3, #5
 801a00c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 801a010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a014:	885b      	ldrh	r3, [r3, #2]
 801a016:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801a01a:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801a01e:	4619      	mov	r1, r3
 801a020:	6838      	ldr	r0, [r7, #0]
 801a022:	f7fe f9c2 	bl	80183aa <mg_uecc_vli_isZero>
 801a026:	4603      	mov	r3, r0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d10b      	bne.n	801a044 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801a02c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a030:	3324      	adds	r3, #36	@ 0x24
 801a032:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801a036:	6839      	ldr	r1, [r7, #0]
 801a038:	4618      	mov	r0, r3
 801a03a:	f7fe faee 	bl	801861a <mg_uecc_vli_cmp>
 801a03e:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 801a040:	2b01      	cmp	r3, #1
 801a042:	d001      	beq.n	801a048 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801a044:	2300      	movs	r3, #0
 801a046:	e128      	b.n	801a29a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 801a048:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801a04c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801a050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a054:	6838      	ldr	r0, [r7, #0]
 801a056:	f7ff fe33 	bl	8019cc0 <regularize_k>
 801a05a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801a05e:	4b91      	ldr	r3, [pc, #580]	@ (801a2a4 <mg_uecc_sign_with_k_internal+0x2d4>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d01c      	beq.n	801a0a0 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801a066:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a06a:	009b      	lsls	r3, r3, #2
 801a06c:	33a8      	adds	r3, #168	@ 0xa8
 801a06e:	443b      	add	r3, r7
 801a070:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801a074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a078:	3304      	adds	r3, #4
 801a07a:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801a07e:	4619      	mov	r1, r3
 801a080:	f7ff fe60 	bl	8019d44 <mg_uecc_generate_random_int>
 801a084:	4603      	mov	r3, r0
 801a086:	2b00      	cmp	r3, #0
 801a088:	d101      	bne.n	801a08e <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801a08a:	2300      	movs	r3, #0
 801a08c:	e105      	b.n	801a29a <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801a08e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a092:	009b      	lsls	r3, r3, #2
 801a094:	33a8      	adds	r3, #168	@ 0xa8
 801a096:	443b      	add	r3, r7
 801a098:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801a09c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801a0a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a0a4:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801a0a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	bf0c      	ite	eq
 801a0b0:	2301      	moveq	r3, #1
 801a0b2:	2300      	movne	r3, #0
 801a0b4:	b2db      	uxtb	r3, r3
 801a0b6:	009b      	lsls	r3, r3, #2
 801a0b8:	33a8      	adds	r3, #168	@ 0xa8
 801a0ba:	443b      	add	r3, r7
 801a0bc:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 801a0c0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801a0c8:	b21b      	sxth	r3, r3
 801a0ca:	f107 0014 	add.w	r0, r7, #20
 801a0ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801a0d2:	9201      	str	r2, [sp, #4]
 801a0d4:	9300      	str	r3, [sp, #0]
 801a0d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a0da:	4622      	mov	r2, r4
 801a0dc:	f7ff fc8f 	bl	80199fe <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 801a0e0:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801a0e4:	f107 0314 	add.w	r3, r7, #20
 801a0e8:	4611      	mov	r1, r2
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7fe f95d 	bl	80183aa <mg_uecc_vli_isZero>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d001      	beq.n	801a0fa <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	e0cf      	b.n	801a29a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 801a0fa:	4b6a      	ldr	r3, [pc, #424]	@ (801a2a4 <mg_uecc_sign_with_k_internal+0x2d4>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d10a      	bne.n	801a118 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801a102:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801a106:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801a10a:	4611      	mov	r1, r2
 801a10c:	4618      	mov	r0, r3
 801a10e:	f7fe f92b 	bl	8018368 <mg_uecc_vli_clear>
    tmp[0] = 1;
 801a112:	2301      	movs	r3, #1
 801a114:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a116:	e00f      	b.n	801a138 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 801a118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a11c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a120:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801a124:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801a128:	4618      	mov	r0, r3
 801a12a:	f7ff fe0b 	bl	8019d44 <mg_uecc_generate_random_int>
 801a12e:	4603      	mov	r3, r0
 801a130:	2b00      	cmp	r3, #0
 801a132:	d101      	bne.n	801a138 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801a134:	2300      	movs	r3, #0
 801a136:	e0b0      	b.n	801a29a <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 801a138:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a13c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a140:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801a144:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	460b      	mov	r3, r1
 801a14c:	6839      	ldr	r1, [r7, #0]
 801a14e:	6838      	ldr	r0, [r7, #0]
 801a150:	f7fe fddc 	bl	8018d0c <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801a154:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a158:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801a15c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a160:	6839      	ldr	r1, [r7, #0]
 801a162:	6838      	ldr	r0, [r7, #0]
 801a164:	f7fe fe51 	bl	8018e0a <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 801a168:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a16c:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a170:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801a174:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a178:	9300      	str	r3, [sp, #0]
 801a17a:	460b      	mov	r3, r1
 801a17c:	6839      	ldr	r1, [r7, #0]
 801a17e:	6838      	ldr	r0, [r7, #0]
 801a180:	f7fe fdc4 	bl	8018d0c <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801a184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a188:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a18c:	4619      	mov	r1, r3
 801a18e:	f107 0314 	add.w	r3, r7, #20
 801a192:	461a      	mov	r2, r3
 801a194:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801a198:	f7ff fe3e 	bl	8019e18 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801a19c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a1a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1a4:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	da00      	bge.n	801a1ac <mg_uecc_sign_with_k_internal+0x1dc>
 801a1aa:	3307      	adds	r3, #7
 801a1ac:	10db      	asrs	r3, r3, #3
 801a1ae:	461a      	mov	r2, r3
 801a1b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801a1b4:	68f9      	ldr	r1, [r7, #12]
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7ff fe5b 	bl	8019e72 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801a1bc:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a1c0:	3b01      	subs	r3, #1
 801a1c2:	009b      	lsls	r3, r3, #2
 801a1c4:	33a8      	adds	r3, #168	@ 0xa8
 801a1c6:	443b      	add	r3, r7
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801a1ce:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801a1d2:	f107 0114 	add.w	r1, r7, #20
 801a1d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7fe f988 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 801a1e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a1e4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801a1e8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801a1ec:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801a1f0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801a1f4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a1f8:	9300      	str	r3, [sp, #0]
 801a1fa:	4623      	mov	r3, r4
 801a1fc:	f7fe fd86 	bl	8018d0c <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 801a200:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801a204:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a208:	687a      	ldr	r2, [r7, #4]
 801a20a:	68b9      	ldr	r1, [r7, #8]
 801a20c:	f7ff fe6d 	bl	8019eea <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 801a210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a214:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801a218:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801a21c:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801a220:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801a224:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a228:	9300      	str	r3, [sp, #0]
 801a22a:	4623      	mov	r3, r4
 801a22c:	f7fe fbee 	bl	8018a0c <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 801a230:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a234:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801a238:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801a23c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801a240:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801a244:	9300      	str	r3, [sp, #0]
 801a246:	4613      	mov	r3, r2
 801a248:	683a      	ldr	r2, [r7, #0]
 801a24a:	f7fe fd5f 	bl	8018d0c <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801a24e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801a252:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a256:	4611      	mov	r1, r2
 801a258:	4618      	mov	r0, r3
 801a25a:	f7fe f910 	bl	801847e <mg_uecc_vli_numBits>
 801a25e:	4603      	mov	r3, r0
 801a260:	461a      	mov	r2, r3
 801a262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a266:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a26a:	00db      	lsls	r3, r3, #3
 801a26c:	429a      	cmp	r2, r3
 801a26e:	dd01      	ble.n	801a274 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 801a270:	2300      	movs	r3, #0
 801a272:	e012      	b.n	801a29a <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801a274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a27c:	461a      	mov	r2, r3
 801a27e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801a282:	1898      	adds	r0, r3, r2
 801a284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801a288:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a28c:	4619      	mov	r1, r3
 801a28e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801a292:	461a      	mov	r2, r3
 801a294:	f7ff fdc0 	bl	8019e18 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 801a298:	2301      	movs	r3, #1
}
 801a29a:	4618      	mov	r0, r3
 801a29c:	37ac      	adds	r7, #172	@ 0xac
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	bd90      	pop	{r4, r7, pc}
 801a2a2:	bf00      	nop
 801a2a4:	20000668 	.word	0x20000668

0801a2a8 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b084      	sub	sp, #16
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
 801a2b0:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	695a      	ldr	r2, [r3, #20]
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	691b      	ldr	r3, [r3, #16]
 801a2ba:	005b      	lsls	r3, r3, #1
 801a2bc:	4413      	add	r3, r2
 801a2be:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	60fb      	str	r3, [r7, #12]
 801a2c4:	e00d      	b.n	801a2e2 <HMAC_init+0x3a>
 801a2c6:	683a      	ldr	r2, [r7, #0]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	4413      	add	r3, r2
 801a2cc:	781a      	ldrb	r2, [r3, #0]
 801a2ce:	68b9      	ldr	r1, [r7, #8]
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	440b      	add	r3, r1
 801a2d4:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 801a2d8:	b2d2      	uxtb	r2, r2
 801a2da:	701a      	strb	r2, [r3, #0]
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	3301      	adds	r3, #1
 801a2e0:	60fb      	str	r3, [r7, #12]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	691b      	ldr	r3, [r3, #16]
 801a2e6:	68fa      	ldr	r2, [r7, #12]
 801a2e8:	429a      	cmp	r2, r3
 801a2ea:	d3ec      	bcc.n	801a2c6 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 801a2ec:	e007      	b.n	801a2fe <HMAC_init+0x56>
 801a2ee:	68ba      	ldr	r2, [r7, #8]
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	4413      	add	r3, r2
 801a2f4:	2236      	movs	r2, #54	@ 0x36
 801a2f6:	701a      	strb	r2, [r3, #0]
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	60fb      	str	r3, [r7, #12]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	68db      	ldr	r3, [r3, #12]
 801a302:	68fa      	ldr	r2, [r7, #12]
 801a304:	429a      	cmp	r2, r3
 801a306:	d3f2      	bcc.n	801a2ee <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	685b      	ldr	r3, [r3, #4]
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	68d2      	ldr	r2, [r2, #12]
 801a318:	68b9      	ldr	r1, [r7, #8]
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	4798      	blx	r3
}
 801a31e:	bf00      	nop
 801a320:	3710      	adds	r7, #16
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}

0801a326 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801a326:	b580      	push	{r7, lr}
 801a328:	b084      	sub	sp, #16
 801a32a:	af00      	add	r7, sp, #0
 801a32c:	60f8      	str	r0, [r7, #12]
 801a32e:	60b9      	str	r1, [r7, #8]
 801a330:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	685b      	ldr	r3, [r3, #4]
 801a336:	687a      	ldr	r2, [r7, #4]
 801a338:	68b9      	ldr	r1, [r7, #8]
 801a33a:	68f8      	ldr	r0, [r7, #12]
 801a33c:	4798      	blx	r3
}
 801a33e:	bf00      	nop
 801a340:	3710      	adds	r7, #16
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}

0801a346 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801a346:	b580      	push	{r7, lr}
 801a348:	b086      	sub	sp, #24
 801a34a:	af00      	add	r7, sp, #0
 801a34c:	60f8      	str	r0, [r7, #12]
 801a34e:	60b9      	str	r1, [r7, #8]
 801a350:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	695a      	ldr	r2, [r3, #20]
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	691b      	ldr	r3, [r3, #16]
 801a35a:	005b      	lsls	r3, r3, #1
 801a35c:	4413      	add	r3, r2
 801a35e:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 801a360:	2300      	movs	r3, #0
 801a362:	617b      	str	r3, [r7, #20]
 801a364:	e00d      	b.n	801a382 <HMAC_finish+0x3c>
 801a366:	68ba      	ldr	r2, [r7, #8]
 801a368:	697b      	ldr	r3, [r7, #20]
 801a36a:	4413      	add	r3, r2
 801a36c:	781a      	ldrb	r2, [r3, #0]
 801a36e:	6939      	ldr	r1, [r7, #16]
 801a370:	697b      	ldr	r3, [r7, #20]
 801a372:	440b      	add	r3, r1
 801a374:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 801a378:	b2d2      	uxtb	r2, r2
 801a37a:	701a      	strb	r2, [r3, #0]
 801a37c:	697b      	ldr	r3, [r7, #20]
 801a37e:	3301      	adds	r3, #1
 801a380:	617b      	str	r3, [r7, #20]
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	691b      	ldr	r3, [r3, #16]
 801a386:	697a      	ldr	r2, [r7, #20]
 801a388:	429a      	cmp	r2, r3
 801a38a:	d3ec      	bcc.n	801a366 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801a38c:	e007      	b.n	801a39e <HMAC_finish+0x58>
 801a38e:	693a      	ldr	r2, [r7, #16]
 801a390:	697b      	ldr	r3, [r7, #20]
 801a392:	4413      	add	r3, r2
 801a394:	225c      	movs	r2, #92	@ 0x5c
 801a396:	701a      	strb	r2, [r3, #0]
 801a398:	697b      	ldr	r3, [r7, #20]
 801a39a:	3301      	adds	r3, #1
 801a39c:	617b      	str	r3, [r7, #20]
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	68db      	ldr	r3, [r3, #12]
 801a3a2:	697a      	ldr	r2, [r7, #20]
 801a3a4:	429a      	cmp	r2, r3
 801a3a6:	d3f2      	bcc.n	801a38e <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	6879      	ldr	r1, [r7, #4]
 801a3ae:	68f8      	ldr	r0, [r7, #12]
 801a3b0:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	68f8      	ldr	r0, [r7, #12]
 801a3b8:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	685b      	ldr	r3, [r3, #4]
 801a3be:	68fa      	ldr	r2, [r7, #12]
 801a3c0:	68d2      	ldr	r2, [r2, #12]
 801a3c2:	6939      	ldr	r1, [r7, #16]
 801a3c4:	68f8      	ldr	r0, [r7, #12]
 801a3c6:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 801a3c8:	68fb      	ldr	r3, [r7, #12]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	68fa      	ldr	r2, [r7, #12]
 801a3ce:	6912      	ldr	r2, [r2, #16]
 801a3d0:	6879      	ldr	r1, [r7, #4]
 801a3d2:	68f8      	ldr	r0, [r7, #12]
 801a3d4:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	689b      	ldr	r3, [r3, #8]
 801a3da:	6879      	ldr	r1, [r7, #4]
 801a3dc:	68f8      	ldr	r0, [r7, #12]
 801a3de:	4798      	blx	r3
}
 801a3e0:	bf00      	nop
 801a3e2:	3718      	adds	r7, #24
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	bd80      	pop	{r7, pc}

0801a3e8 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b084      	sub	sp, #16
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801a3f4:	68b9      	ldr	r1, [r7, #8]
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f7ff ff56 	bl	801a2a8 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	691b      	ldr	r3, [r3, #16]
 801a400:	461a      	mov	r2, r3
 801a402:	6879      	ldr	r1, [r7, #4]
 801a404:	68f8      	ldr	r0, [r7, #12]
 801a406:	f7ff ff8e 	bl	801a326 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801a40a:	687a      	ldr	r2, [r7, #4]
 801a40c:	68b9      	ldr	r1, [r7, #8]
 801a40e:	68f8      	ldr	r0, [r7, #12]
 801a410:	f7ff ff99 	bl	801a346 <HMAC_finish>
}
 801a414:	bf00      	nop
 801a416:	3710      	adds	r7, #16
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b096      	sub	sp, #88	@ 0x58
 801a420:	af02      	add	r7, sp, #8
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	607a      	str	r2, [r7, #4]
 801a428:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801a42a:	683b      	ldr	r3, [r7, #0]
 801a42c:	695b      	ldr	r3, [r3, #20]
 801a42e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	691b      	ldr	r3, [r3, #16]
 801a434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a436:	4413      	add	r3, r2
 801a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801a43a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a43c:	785b      	ldrb	r3, [r3, #1]
 801a43e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801a442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a448:	331f      	adds	r3, #31
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	da00      	bge.n	801a450 <mg_uecc_sign_deterministic+0x34>
 801a44e:	331f      	adds	r3, #31
 801a450:	115b      	asrs	r3, r3, #5
 801a452:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801a456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a458:	885b      	ldrh	r3, [r3, #2]
 801a45a:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801a45c:	2300      	movs	r3, #0
 801a45e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a460:	e00c      	b.n	801a47c <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801a462:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a466:	4413      	add	r3, r2
 801a468:	2201      	movs	r2, #1
 801a46a:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801a46c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a46e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a470:	4413      	add	r3, r2
 801a472:	2200      	movs	r2, #0
 801a474:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801a476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a478:	3301      	adds	r3, #1
 801a47a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	691b      	ldr	r3, [r3, #16]
 801a480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a482:	429a      	cmp	r2, r3
 801a484:	d3ed      	bcc.n	801a462 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801a486:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a488:	6838      	ldr	r0, [r7, #0]
 801a48a:	f7ff ff0d 	bl	801a2a8 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	691b      	ldr	r3, [r3, #16]
 801a492:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a494:	4413      	add	r3, r2
 801a496:	2200      	movs	r2, #0
 801a498:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801a49a:	683b      	ldr	r3, [r7, #0]
 801a49c:	691b      	ldr	r3, [r3, #16]
 801a49e:	3301      	adds	r3, #1
 801a4a0:	461a      	mov	r2, r3
 801a4a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a4a4:	6838      	ldr	r0, [r7, #0]
 801a4a6:	f7ff ff3e 	bl	801a326 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801a4aa:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801a4ae:	461a      	mov	r2, r3
 801a4b0:	68f9      	ldr	r1, [r7, #12]
 801a4b2:	6838      	ldr	r0, [r7, #0]
 801a4b4:	f7ff ff37 	bl	801a326 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801a4b8:	687a      	ldr	r2, [r7, #4]
 801a4ba:	68b9      	ldr	r1, [r7, #8]
 801a4bc:	6838      	ldr	r0, [r7, #0]
 801a4be:	f7ff ff32 	bl	801a326 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801a4c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a4c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a4c6:	6838      	ldr	r0, [r7, #0]
 801a4c8:	f7ff ff3d 	bl	801a346 <HMAC_finish>

  update_V(hash_context, K, V);
 801a4cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a4d0:	6838      	ldr	r0, [r7, #0]
 801a4d2:	f7ff ff89 	bl	801a3e8 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801a4d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a4d8:	6838      	ldr	r0, [r7, #0]
 801a4da:	f7ff fee5 	bl	801a2a8 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 801a4de:	683b      	ldr	r3, [r7, #0]
 801a4e0:	691b      	ldr	r3, [r3, #16]
 801a4e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a4e4:	4413      	add	r3, r2
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801a4ea:	683b      	ldr	r3, [r7, #0]
 801a4ec:	691b      	ldr	r3, [r3, #16]
 801a4ee:	3301      	adds	r3, #1
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a4f4:	6838      	ldr	r0, [r7, #0]
 801a4f6:	f7ff ff16 	bl	801a326 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801a4fa:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801a4fe:	461a      	mov	r2, r3
 801a500:	68f9      	ldr	r1, [r7, #12]
 801a502:	6838      	ldr	r0, [r7, #0]
 801a504:	f7ff ff0f 	bl	801a326 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801a508:	687a      	ldr	r2, [r7, #4]
 801a50a:	68b9      	ldr	r1, [r7, #8]
 801a50c:	6838      	ldr	r0, [r7, #0]
 801a50e:	f7ff ff0a 	bl	801a326 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801a512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a516:	6838      	ldr	r0, [r7, #0]
 801a518:	f7ff ff15 	bl	801a346 <HMAC_finish>

  update_V(hash_context, K, V);
 801a51c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a51e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a520:	6838      	ldr	r0, [r7, #0]
 801a522:	f7ff ff61 	bl	801a3e8 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801a526:	2300      	movs	r3, #0
 801a528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a52a:	e084      	b.n	801a636 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801a52c:	f107 0310 	add.w	r3, r7, #16
 801a530:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801a532:	2300      	movs	r3, #0
 801a534:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 801a538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a53a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a53c:	6838      	ldr	r0, [r7, #0]
 801a53e:	f7ff ff53 	bl	801a3e8 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801a542:	2300      	movs	r3, #0
 801a544:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a546:	e017      	b.n	801a578 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 801a548:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a54c:	441a      	add	r2, r3
 801a54e:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801a552:	b2cb      	uxtb	r3, r1
 801a554:	3301      	adds	r3, #1
 801a556:	b2db      	uxtb	r3, r3
 801a558:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a55e:	440b      	add	r3, r1
 801a560:	7812      	ldrb	r2, [r2, #0]
 801a562:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801a564:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 801a568:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801a56c:	009b      	lsls	r3, r3, #2
 801a56e:	429a      	cmp	r2, r3
 801a570:	da08      	bge.n	801a584 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801a572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a574:	3301      	adds	r3, #1
 801a576:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a578:	683b      	ldr	r3, [r7, #0]
 801a57a:	691b      	ldr	r3, [r3, #16]
 801a57c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a57e:	429a      	cmp	r2, r3
 801a580:	d3e2      	bcc.n	801a548 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801a582:	e7d9      	b.n	801a538 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801a584:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801a586:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801a58a:	015a      	lsls	r2, r3, #5
 801a58c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801a590:	429a      	cmp	r2, r3
 801a592:	dd20      	ble.n	801a5d6 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801a594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a598:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801a59a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801a59e:	3b01      	subs	r3, #1
 801a5a0:	009b      	lsls	r3, r3, #2
 801a5a2:	3350      	adds	r3, #80	@ 0x50
 801a5a4:	443b      	add	r3, r7
 801a5a6:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 801a5aa:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801a5ae:	b29b      	uxth	r3, r3
 801a5b0:	015b      	lsls	r3, r3, #5
 801a5b2:	b29a      	uxth	r2, r3
 801a5b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a5b6:	1ad3      	subs	r3, r2, r3
 801a5b8:	b29b      	uxth	r3, r3
 801a5ba:	b21b      	sxth	r3, r3
 801a5bc:	461a      	mov	r2, r3
          mask >>
 801a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5c0:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 801a5c4:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801a5c8:	3b01      	subs	r3, #1
 801a5ca:	400a      	ands	r2, r1
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	3350      	adds	r3, #80	@ 0x50
 801a5d0:	443b      	add	r3, r7
 801a5d2:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801a5d6:	f107 0210 	add.w	r2, r7, #16
 801a5da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a5dc:	9301      	str	r3, [sp, #4]
 801a5de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a5e0:	9300      	str	r3, [sp, #0]
 801a5e2:	4613      	mov	r3, r2
 801a5e4:	687a      	ldr	r2, [r7, #4]
 801a5e6:	68b9      	ldr	r1, [r7, #8]
 801a5e8:	68f8      	ldr	r0, [r7, #12]
 801a5ea:	f7ff fcf1 	bl	8019fd0 <mg_uecc_sign_with_k_internal>
 801a5ee:	4603      	mov	r3, r0
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d001      	beq.n	801a5f8 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801a5f4:	2301      	movs	r3, #1
 801a5f6:	e023      	b.n	801a640 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 801a5f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a5fa:	6838      	ldr	r0, [r7, #0]
 801a5fc:	f7ff fe54 	bl	801a2a8 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	691b      	ldr	r3, [r3, #16]
 801a604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a606:	4413      	add	r3, r2
 801a608:	2200      	movs	r2, #0
 801a60a:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	691b      	ldr	r3, [r3, #16]
 801a610:	3301      	adds	r3, #1
 801a612:	461a      	mov	r2, r3
 801a614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a616:	6838      	ldr	r0, [r7, #0]
 801a618:	f7ff fe85 	bl	801a326 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801a61c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a61e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a620:	6838      	ldr	r0, [r7, #0]
 801a622:	f7ff fe90 	bl	801a346 <HMAC_finish>

    update_V(hash_context, K, V);
 801a626:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a62a:	6838      	ldr	r0, [r7, #0]
 801a62c:	f7ff fedc 	bl	801a3e8 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801a630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a632:	3301      	adds	r3, #1
 801a634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a638:	2b3f      	cmp	r3, #63	@ 0x3f
 801a63a:	f67f af77 	bls.w	801a52c <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801a63e:	2300      	movs	r3, #0
}
 801a640:	4618      	mov	r0, r3
 801a642:	3750      	adds	r7, #80	@ 0x50
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}

0801a648 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 801a648:	b480      	push	{r7}
 801a64a:	b083      	sub	sp, #12
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	4603      	mov	r3, r0
 801a650:	460a      	mov	r2, r1
 801a652:	80fb      	strh	r3, [r7, #6]
 801a654:	4613      	mov	r3, r2
 801a656:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 801a658:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801a65c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a660:	4293      	cmp	r3, r2
 801a662:	bfb8      	it	lt
 801a664:	4613      	movlt	r3, r2
 801a666:	b21b      	sxth	r3, r3
}
 801a668:	4618      	mov	r0, r3
 801a66a:	370c      	adds	r7, #12
 801a66c:	46bd      	mov	sp, r7
 801a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a672:	4770      	bx	lr

0801a674 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801a674:	b590      	push	{r4, r7, lr}
 801a676:	b0ff      	sub	sp, #508	@ 0x1fc
 801a678:	af02      	add	r7, sp, #8
 801a67a:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801a67e:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801a682:	6020      	str	r0, [r4, #0]
 801a684:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 801a688:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801a68c:	6001      	str	r1, [r0, #0]
 801a68e:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801a692:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801a696:	600a      	str	r2, [r1, #0]
 801a698:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801a69c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801a6a0:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801a6a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a6a6:	781b      	ldrb	r3, [r3, #0]
 801a6a8:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801a6ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a6b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a6b4:	331f      	adds	r3, #31
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	da00      	bge.n	801a6bc <mg_uecc_verify+0x48>
 801a6ba:	331f      	adds	r3, #31
 801a6bc:	115b      	asrs	r3, r3, #5
 801a6be:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 801a6c2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a6c6:	3b01      	subs	r3, #1
 801a6c8:	009b      	lsls	r3, r3, #2
 801a6ca:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801a6ce:	443b      	add	r3, r7
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801a6d6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a6da:	1e5a      	subs	r2, r3, #1
 801a6dc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a6e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801a6e4:	2100      	movs	r1, #0
 801a6e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801a6ea:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a6ee:	1e5a      	subs	r2, r3, #1
 801a6f0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a6f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801a6f8:	2100      	movs	r1, #0
 801a6fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801a6fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a702:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a706:	461a      	mov	r2, r3
 801a708:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a70c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801a710:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801a714:	6819      	ldr	r1, [r3, #0]
 801a716:	f7ff fbac 	bl	8019e72 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801a71a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a71e:	009b      	lsls	r3, r3, #2
 801a720:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801a724:	18d0      	adds	r0, r2, r3
 801a726:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a72a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a72e:	461a      	mov	r2, r3
 801a730:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a734:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801a73c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a740:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801a744:	461a      	mov	r2, r3
 801a746:	f7ff fb94 	bl	8019e72 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801a74a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a74e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a752:	461a      	mov	r2, r3
 801a754:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a758:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801a75c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801a760:	6819      	ldr	r1, [r3, #0]
 801a762:	f7ff fb86 	bl	8019e72 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801a766:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a76a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a76e:	461a      	mov	r2, r3
 801a770:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a774:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801a778:	681b      	ldr	r3, [r3, #0]
 801a77a:	1899      	adds	r1, r3, r2
 801a77c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a780:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a784:	461a      	mov	r2, r3
 801a786:	f107 0310 	add.w	r3, r7, #16
 801a78a:	4618      	mov	r0, r3
 801a78c:	f7ff fb71 	bl	8019e72 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 801a790:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a794:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a798:	4611      	mov	r1, r2
 801a79a:	4618      	mov	r0, r3
 801a79c:	f7fd fe05 	bl	80183aa <mg_uecc_vli_isZero>
 801a7a0:	4603      	mov	r3, r0
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d10a      	bne.n	801a7bc <mg_uecc_verify+0x148>
 801a7a6:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a7aa:	f107 0310 	add.w	r3, r7, #16
 801a7ae:	4611      	mov	r1, r2
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	f7fd fdfa 	bl	80183aa <mg_uecc_vli_isZero>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d001      	beq.n	801a7c0 <mg_uecc_verify+0x14c>
    return 0;
 801a7bc:	2300      	movs	r3, #0
 801a7be:	e220      	b.n	801ac02 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801a7c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a7c4:	3324      	adds	r3, #36	@ 0x24
 801a7c6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801a7ca:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	f7fd feb5 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 801a7d4:	4603      	mov	r3, r0
 801a7d6:	2b01      	cmp	r3, #1
 801a7d8:	d10c      	bne.n	801a7f4 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 801a7da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a7de:	3324      	adds	r3, #36	@ 0x24
 801a7e0:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801a7e4:	f107 0110 	add.w	r1, r7, #16
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7fd fea8 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 801a7ee:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801a7f0:	2b01      	cmp	r3, #1
 801a7f2:	d001      	beq.n	801a7f8 <mg_uecc_verify+0x184>
    return 0;
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	e204      	b.n	801ac02 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 801a7f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a7fc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801a800:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a804:	f107 0110 	add.w	r1, r7, #16
 801a808:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801a80c:	f7fe fafd 	bl	8018e0a <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 801a810:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a814:	3b01      	subs	r3, #1
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801a81c:	443b      	add	r3, r7
 801a81e:	2200      	movs	r2, #0
 801a820:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801a824:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a828:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 801a82c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a830:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801a834:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801a838:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a83c:	6812      	ldr	r2, [r2, #0]
 801a83e:	6809      	ldr	r1, [r1, #0]
 801a840:	f7ff fb53 	bl	8019eea <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801a844:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a848:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801a84c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801a850:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801a854:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801a858:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	4623      	mov	r3, r4
 801a860:	f7fe fa54 	bl	8018d0c <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801a864:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a868:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801a86c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801a870:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a874:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 801a878:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801a87c:	9300      	str	r3, [sp, #0]
 801a87e:	4623      	mov	r3, r4
 801a880:	f7fe fa44 	bl	8018d0c <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 801a884:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a888:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801a88c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801a890:	4618      	mov	r0, r3
 801a892:	f7fd fe2d 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 801a896:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a89a:	009b      	lsls	r3, r3, #2
 801a89c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801a8a0:	18d0      	adds	r0, r2, r3
 801a8a2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a8a6:	009b      	lsls	r3, r3, #2
 801a8a8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801a8ac:	4413      	add	r3, r2
 801a8ae:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a8b2:	4619      	mov	r1, r3
 801a8b4:	f7fd fe1c 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 801a8b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a8bc:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801a8c0:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a8c4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f7fd fe11 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 801a8ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a8d2:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801a8d6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a8da:	009b      	lsls	r3, r3, #2
 801a8dc:	18d1      	adds	r1, r2, r3
 801a8de:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801a8e2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7fd fe02 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 801a8ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a8f0:	1d1c      	adds	r4, r3, #4
 801a8f2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801a8f6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801a8fa:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801a8fe:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a902:	9300      	str	r3, [sp, #0]
 801a904:	4623      	mov	r3, r4
 801a906:	f7fe f8a8 	bl	8018a5a <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 801a90a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801a914:	18d4      	adds	r4, r2, r3
 801a916:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801a91a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801a91e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801a922:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a926:	9300      	str	r3, [sp, #0]
 801a928:	4623      	mov	r3, r4
 801a92a:	f7fe fedd 	bl	80196e8 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 801a92e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a932:	1d1a      	adds	r2, r3, #4
 801a934:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a938:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801a93c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801a940:	f7fe fa63 	bl	8018e0a <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 801a944:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801a94e:	18d1      	adds	r1, r2, r3
 801a950:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801a954:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 801a958:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a95c:	f7fe fe52 	bl	8019604 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 801a960:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a964:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801a968:	2200      	movs	r2, #0
 801a96a:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 801a96c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801a970:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801a974:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a978:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801a97c:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 801a97e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a982:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801a986:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801a98a:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 801a98c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801a990:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801a994:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801a998:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 801a99a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801a99e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801a9a2:	4611      	mov	r1, r2
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7fd fd6a 	bl	801847e <mg_uecc_vli_numBits>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	461c      	mov	r4, r3
 801a9ae:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801a9b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801a9b6:	4611      	mov	r1, r2
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7fd fd60 	bl	801847e <mg_uecc_vli_numBits>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f7ff fe40 	bl	801a648 <smax>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801a9ce:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801a9d2:	3b01      	subs	r3, #1
 801a9d4:	b29b      	uxth	r3, r3
 801a9d6:	b21a      	sxth	r2, r3
 801a9d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801a9dc:	4611      	mov	r1, r2
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7fd fd0d 	bl	80183fe <mg_uecc_vli_testBit>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	bf14      	ite	ne
 801a9ea:	2301      	movne	r3, #1
 801a9ec:	2300      	moveq	r3, #0
 801a9ee:	b2db      	uxtb	r3, r3
 801a9f0:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 801a9f2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801a9f6:	3b01      	subs	r3, #1
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	b21a      	sxth	r2, r3
 801a9fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801aa00:	4611      	mov	r1, r2
 801aa02:	4618      	mov	r0, r3
 801aa04:	f7fd fcfb 	bl	80183fe <mg_uecc_vli_testBit>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d001      	beq.n	801aa12 <mg_uecc_verify+0x39e>
 801aa0e:	2302      	movs	r3, #2
 801aa10:	e000      	b.n	801aa14 <mg_uecc_verify+0x3a0>
 801aa12:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801aa14:	ea43 0204 	orr.w	r2, r3, r4
  point =
 801aa18:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801aa1c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa24:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 801aa28:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801aa2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801aa30:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7fd fd5b 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 801aa3a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801aa3e:	009b      	lsls	r3, r3, #2
 801aa40:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801aa44:	18d1      	adds	r1, r2, r3
 801aa46:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801aa4a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7fd fd4e 	bl	80184f0 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 801aa54:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801aa58:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801aa5c:	4611      	mov	r1, r2
 801aa5e:	4618      	mov	r0, r3
 801aa60:	f7fd fc82 	bl	8018368 <mg_uecc_vli_clear>
  z[0] = 1;
 801aa64:	2301      	movs	r3, #1
 801aa66:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 801aa6a:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801aa6e:	3b02      	subs	r3, #2
 801aa70:	b29b      	uxth	r3, r3
 801aa72:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801aa76:	e087      	b.n	801ab88 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 801aa78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801aa7c:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801aa80:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801aa84:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801aa88:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801aa8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801aa90:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801aa92:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801aa96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801aa9a:	4611      	mov	r1, r2
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7fd fcae 	bl	80183fe <mg_uecc_vli_testBit>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	bf14      	ite	ne
 801aaa8:	2301      	movne	r3, #1
 801aaaa:	2300      	moveq	r3, #0
 801aaac:	b2db      	uxtb	r3, r3
 801aaae:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 801aab0:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801aab4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801aab8:	4611      	mov	r1, r2
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7fd fc9f 	bl	80183fe <mg_uecc_vli_testBit>
 801aac0:	4603      	mov	r3, r0
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d001      	beq.n	801aaca <mg_uecc_verify+0x456>
 801aac6:	2302      	movs	r3, #2
 801aac8:	e000      	b.n	801aacc <mg_uecc_verify+0x458>
 801aaca:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801aacc:	4323      	orrs	r3, r4
 801aace:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 801aad2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801aad6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801aada:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aae2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 801aae6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d046      	beq.n	801ab7c <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 801aaee:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801aaf2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801aaf6:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801aafa:	4618      	mov	r0, r3
 801aafc:	f7fd fcf8 	bl	80184f0 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 801ab00:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801ab04:	009b      	lsls	r3, r3, #2
 801ab06:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801ab0a:	18d1      	adds	r1, r2, r3
 801ab0c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801ab10:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801ab14:	4618      	mov	r0, r3
 801ab16:	f7fd fceb 	bl	80184f0 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 801ab1a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801ab1e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801ab22:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801ab26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ab2a:	f7fe fd6b 	bl	8019604 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 801ab2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ab32:	1d1c      	adds	r4, r3, #4
 801ab34:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801ab38:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801ab3c:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801ab40:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801ab44:	9300      	str	r3, [sp, #0]
 801ab46:	4623      	mov	r3, r4
 801ab48:	f7fd ff87 	bl	8018a5a <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 801ab4c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 801ab50:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801ab54:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801ab58:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801ab5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ab60:	9300      	str	r3, [sp, #0]
 801ab62:	4623      	mov	r3, r4
 801ab64:	f7fe fdc0 	bl	80196e8 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 801ab68:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801ab6c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801ab70:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801ab74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ab78:	f7fe f8e3 	bl	8018d42 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 801ab7c:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 801ab80:	3b01      	subs	r3, #1
 801ab82:	b29b      	uxth	r3, r3
 801ab84:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801ab88:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	f6bf af73 	bge.w	801aa78 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 801ab92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ab96:	1d1a      	adds	r2, r3, #4
 801ab98:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801ab9c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801aba0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801aba4:	f7fe f931 	bl	8018e0a <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 801aba8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801abac:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801abb0:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801abb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801abb8:	f7fe fd24 	bl	8019604 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 801abbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801abc0:	3324      	adds	r3, #36	@ 0x24
 801abc2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801abc6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801abca:	4618      	mov	r0, r3
 801abcc:	f7fd fcb7 	bl	801853e <mg_uecc_vli_cmp_unsafe>
 801abd0:	4603      	mov	r3, r0
 801abd2:	2b01      	cmp	r3, #1
 801abd4:	d00b      	beq.n	801abee <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 801abd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801abda:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801abde:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801abe2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801abe6:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801abea:	f7fd fdbb 	bl	8018764 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 801abee:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801abf2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801abf6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801abfa:	4618      	mov	r0, r3
 801abfc:	f7fd fcdb 	bl	80185b6 <mg_uecc_vli_equal>
 801ac00:	4603      	mov	r3, r0
}
 801ac02:	4618      	mov	r0, r3
 801ac04:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 801ac08:	46bd      	mov	sp, r7
 801ac0a:	bd90      	pop	{r4, r7, pc}

0801ac0c <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 801ac0c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ac10:	b08f      	sub	sp, #60	@ 0x3c
 801ac12:	af00      	add	r7, sp, #0
 801ac14:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ac16:	62b9      	str	r1, [r7, #40]	@ 0x28
 801ac18:	627a      	str	r2, [r7, #36]	@ 0x24
 801ac1a:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 801ac1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac1e:	2200      	movs	r2, #0
 801ac20:	469a      	mov	sl, r3
 801ac22:	4693      	mov	fp, r2
 801ac24:	6a3b      	ldr	r3, [r7, #32]
 801ac26:	2200      	movs	r2, #0
 801ac28:	61bb      	str	r3, [r7, #24]
 801ac2a:	61fa      	str	r2, [r7, #28]
 801ac2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ac30:	4603      	mov	r3, r0
 801ac32:	fb03 f20b 	mul.w	r2, r3, fp
 801ac36:	460b      	mov	r3, r1
 801ac38:	fb0a f303 	mul.w	r3, sl, r3
 801ac3c:	4413      	add	r3, r2
 801ac3e:	4602      	mov	r2, r0
 801ac40:	fbaa 4502 	umull	r4, r5, sl, r2
 801ac44:	442b      	add	r3, r5
 801ac46:	461d      	mov	r5, r3
 801ac48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	613b      	str	r3, [r7, #16]
 801ac4e:	617a      	str	r2, [r7, #20]
 801ac50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ac54:	460b      	mov	r3, r1
 801ac56:	eb14 0803 	adds.w	r8, r4, r3
 801ac5a:	4613      	mov	r3, r2
 801ac5c:	eb45 0903 	adc.w	r9, r5, r3
 801ac60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	2200      	movs	r2, #0
 801ac66:	60bb      	str	r3, [r7, #8]
 801ac68:	60fa      	str	r2, [r7, #12]
 801ac6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ac6e:	460b      	mov	r3, r1
 801ac70:	eb18 0303 	adds.w	r3, r8, r3
 801ac74:	603b      	str	r3, [r7, #0]
 801ac76:	4613      	mov	r3, r2
 801ac78:	eb49 0303 	adc.w	r3, r9, r3
 801ac7c:	607b      	str	r3, [r7, #4]
 801ac7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ac82:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 801ac86:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801ac8a:	f04f 0200 	mov.w	r2, #0
 801ac8e:	f04f 0300 	mov.w	r3, #0
 801ac92:	000a      	movs	r2, r1
 801ac94:	2300      	movs	r3, #0
 801ac96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac98:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 801ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	373c      	adds	r7, #60	@ 0x3c
 801aca0:	46bd      	mov	sp, r7
 801aca2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801aca6:	4770      	bx	lr

0801aca8 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 801aca8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801acac:	b08b      	sub	sp, #44	@ 0x2c
 801acae:	af00      	add	r7, sp, #0
 801acb0:	61f8      	str	r0, [r7, #28]
 801acb2:	61b9      	str	r1, [r7, #24]
 801acb4:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 801acb6:	69fb      	ldr	r3, [r7, #28]
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	2200      	movs	r2, #0
 801acbc:	60bb      	str	r3, [r7, #8]
 801acbe:	60fa      	str	r2, [r7, #12]
 801acc0:	69bb      	ldr	r3, [r7, #24]
 801acc2:	2200      	movs	r2, #0
 801acc4:	469a      	mov	sl, r3
 801acc6:	4693      	mov	fp, r2
 801acc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801accc:	460b      	mov	r3, r1
 801acce:	eb13 040a 	adds.w	r4, r3, sl
 801acd2:	4613      	mov	r3, r2
 801acd4:	eb43 050b 	adc.w	r5, r3, fp
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	2200      	movs	r2, #0
 801acdc:	4698      	mov	r8, r3
 801acde:	4691      	mov	r9, r2
 801ace0:	eb14 0308 	adds.w	r3, r4, r8
 801ace4:	603b      	str	r3, [r7, #0]
 801ace6:	eb45 0309 	adc.w	r3, r5, r9
 801acea:	607b      	str	r3, [r7, #4]
 801acec:	e9d7 3400 	ldrd	r3, r4, [r7]
 801acf0:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 801acf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801acf8:	f04f 0200 	mov.w	r2, #0
 801acfc:	f04f 0300 	mov.w	r3, #0
 801ad00:	000a      	movs	r2, r1
 801ad02:	2300      	movs	r3, #0
 801ad04:	69fb      	ldr	r3, [r7, #28]
 801ad06:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801ad08:	6a3b      	ldr	r3, [r7, #32]
}
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	372c      	adds	r7, #44	@ 0x2c
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801ad14:	4770      	bx	lr

0801ad16 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 801ad16:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801ad1a:	b085      	sub	sp, #20
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
 801ad20:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 801ad22:	6879      	ldr	r1, [r7, #4]
 801ad24:	6809      	ldr	r1, [r1, #0]
 801ad26:	2000      	movs	r0, #0
 801ad28:	460c      	mov	r4, r1
 801ad2a:	4605      	mov	r5, r0
 801ad2c:	6839      	ldr	r1, [r7, #0]
 801ad2e:	2000      	movs	r0, #0
 801ad30:	460a      	mov	r2, r1
 801ad32:	4603      	mov	r3, r0
 801ad34:	eb14 0802 	adds.w	r8, r4, r2
 801ad38:	eb45 0903 	adc.w	r9, r5, r3
 801ad3c:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 801ad40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ad44:	f04f 0200 	mov.w	r2, #0
 801ad48:	f04f 0300 	mov.w	r3, #0
 801ad4c:	000a      	movs	r2, r1
 801ad4e:	2300      	movs	r3, #0
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801ad54:	68bb      	ldr	r3, [r7, #8]
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	3714      	adds	r7, #20
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801ad60:	4770      	bx	lr

0801ad62 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 801ad62:	b590      	push	{r4, r7, lr}
 801ad64:	b085      	sub	sp, #20
 801ad66:	af00      	add	r7, sp, #0
 801ad68:	6078      	str	r0, [r7, #4]
 801ad6a:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	331c      	adds	r3, #28
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	0fda      	lsrs	r2, r3, #31
 801ad74:	683b      	ldr	r3, [r7, #0]
 801ad76:	005b      	lsls	r3, r3, #1
 801ad78:	4313      	orrs	r3, r2
 801ad7a:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	331c      	adds	r3, #28
 801ad80:	681a      	ldr	r2, [r3, #0]
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	331c      	adds	r3, #28
 801ad86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801ad8a:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 801ad8c:	683a      	ldr	r2, [r7, #0]
 801ad8e:	4613      	mov	r3, r2
 801ad90:	00db      	lsls	r3, r3, #3
 801ad92:	4413      	add	r3, r2
 801ad94:	005b      	lsls	r3, r3, #1
 801ad96:	4413      	add	r3, r2
 801ad98:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 801ad9a:	2300      	movs	r3, #0
 801ad9c:	60fb      	str	r3, [r7, #12]
 801ad9e:	e012      	b.n	801adc6 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	009b      	lsls	r3, r3, #2
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	4413      	add	r3, r2
 801ada8:	6819      	ldr	r1, [r3, #0]
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	687a      	ldr	r2, [r7, #4]
 801adb0:	18d4      	adds	r4, r2, r3
 801adb2:	f107 0308 	add.w	r3, r7, #8
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7ff ffad 	bl	801ad16 <adc0>
 801adbc:	4603      	mov	r3, r0
 801adbe:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	3301      	adds	r3, #1
 801adc4:	60fb      	str	r3, [r7, #12]
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	2b07      	cmp	r3, #7
 801adca:	d9e9      	bls.n	801ada0 <propagate+0x3e>
  }
}
 801adcc:	bf00      	nop
 801adce:	bf00      	nop
 801add0:	3714      	adds	r7, #20
 801add2:	46bd      	mov	sp, r7
 801add4:	bd90      	pop	{r4, r7, pc}

0801add6 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 801add6:	b590      	push	{r4, r7, lr}
 801add8:	b087      	sub	sp, #28
 801adda:	af00      	add	r7, sp, #0
 801addc:	60f8      	str	r0, [r7, #12]
 801adde:	60b9      	str	r1, [r7, #8]
 801ade0:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 801ade2:	2300      	movs	r3, #0
 801ade4:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 801ade6:	2300      	movs	r3, #0
 801ade8:	617b      	str	r3, [r7, #20]
 801adea:	e018      	b.n	801ae1e <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 801adec:	697b      	ldr	r3, [r7, #20]
 801adee:	009b      	lsls	r3, r3, #2
 801adf0:	68ba      	ldr	r2, [r7, #8]
 801adf2:	4413      	add	r3, r2
 801adf4:	6819      	ldr	r1, [r3, #0]
 801adf6:	697b      	ldr	r3, [r7, #20]
 801adf8:	009b      	lsls	r3, r3, #2
 801adfa:	687a      	ldr	r2, [r7, #4]
 801adfc:	4413      	add	r3, r2
 801adfe:	6818      	ldr	r0, [r3, #0]
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	009b      	lsls	r3, r3, #2
 801ae04:	68fa      	ldr	r2, [r7, #12]
 801ae06:	18d4      	adds	r4, r2, r3
 801ae08:	f107 0310 	add.w	r3, r7, #16
 801ae0c:	4602      	mov	r2, r0
 801ae0e:	4618      	mov	r0, r3
 801ae10:	f7ff ff4a 	bl	801aca8 <adc>
 801ae14:	4603      	mov	r3, r0
 801ae16:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ae18:	697b      	ldr	r3, [r7, #20]
 801ae1a:	3301      	adds	r3, #1
 801ae1c:	617b      	str	r3, [r7, #20]
 801ae1e:	697b      	ldr	r3, [r7, #20]
 801ae20:	2b07      	cmp	r3, #7
 801ae22:	d9e3      	bls.n	801adec <add+0x16>
  }
  propagate(out, carry);
 801ae24:	693b      	ldr	r3, [r7, #16]
 801ae26:	4619      	mov	r1, r3
 801ae28:	68f8      	ldr	r0, [r7, #12]
 801ae2a:	f7ff ff9a 	bl	801ad62 <propagate>
}
 801ae2e:	bf00      	nop
 801ae30:	371c      	adds	r7, #28
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd90      	pop	{r4, r7, pc}

0801ae36 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 801ae36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ae3a:	b08a      	sub	sp, #40	@ 0x28
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6178      	str	r0, [r7, #20]
 801ae40:	6139      	str	r1, [r7, #16]
 801ae42:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 801ae44:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 801ae48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ae4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801ae50:	2300      	movs	r3, #0
 801ae52:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae54:	e032      	b.n	801aebc <sub+0x86>
    carry = carry + a[i] - b[i];
 801ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae58:	009b      	lsls	r3, r3, #2
 801ae5a:	693a      	ldr	r2, [r7, #16]
 801ae5c:	4413      	add	r3, r2
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	2200      	movs	r2, #0
 801ae62:	4698      	mov	r8, r3
 801ae64:	4691      	mov	r9, r2
 801ae66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ae6a:	eb18 0402 	adds.w	r4, r8, r2
 801ae6e:	eb49 0503 	adc.w	r5, r9, r3
 801ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae74:	009b      	lsls	r3, r3, #2
 801ae76:	68fa      	ldr	r2, [r7, #12]
 801ae78:	4413      	add	r3, r2
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	469a      	mov	sl, r3
 801ae80:	4693      	mov	fp, r2
 801ae82:	ebb4 030a 	subs.w	r3, r4, sl
 801ae86:	603b      	str	r3, [r7, #0]
 801ae88:	eb65 030b 	sbc.w	r3, r5, fp
 801ae8c:	607b      	str	r3, [r7, #4]
 801ae8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ae92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 801ae96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae98:	009b      	lsls	r3, r3, #2
 801ae9a:	697a      	ldr	r2, [r7, #20]
 801ae9c:	4413      	add	r3, r2
 801ae9e:	69ba      	ldr	r2, [r7, #24]
 801aea0:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 801aea2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801aea6:	f04f 0200 	mov.w	r2, #0
 801aeaa:	f04f 0300 	mov.w	r3, #0
 801aeae:	000a      	movs	r2, r1
 801aeb0:	17cb      	asrs	r3, r1, #31
 801aeb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeb8:	3301      	adds	r3, #1
 801aeba:	627b      	str	r3, [r7, #36]	@ 0x24
 801aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aebe:	2b07      	cmp	r3, #7
 801aec0:	d9c9      	bls.n	801ae56 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 801aec2:	69bb      	ldr	r3, [r7, #24]
 801aec4:	3301      	adds	r3, #1
 801aec6:	4619      	mov	r1, r3
 801aec8:	6978      	ldr	r0, [r7, #20]
 801aeca:	f7ff ff4a 	bl	801ad62 <propagate>
}
 801aece:	bf00      	nop
 801aed0:	3728      	adds	r7, #40	@ 0x28
 801aed2:	46bd      	mov	sp, r7
 801aed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801aed8 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 801aed8:	b5b0      	push	{r4, r5, r7, lr}
 801aeda:	b09a      	sub	sp, #104	@ 0x68
 801aedc:	af00      	add	r7, sp, #0
 801aede:	60f8      	str	r0, [r7, #12]
 801aee0:	60b9      	str	r1, [r7, #8]
 801aee2:	607a      	str	r2, [r7, #4]
 801aee4:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 801aee6:	f107 031c 	add.w	r3, r7, #28
 801aeea:	2240      	movs	r2, #64	@ 0x40
 801aeec:	2100      	movs	r1, #0
 801aeee:	4618      	mov	r0, r3
 801aef0:	f003 fbbf 	bl	801e672 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 801aef4:	2300      	movs	r3, #0
 801aef6:	667b      	str	r3, [r7, #100]	@ 0x64
 801aef8:	e03a      	b.n	801af70 <mul+0x98>
    limb_t mand = b[i];
 801aefa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801aefc:	009b      	lsls	r3, r3, #2
 801aefe:	687a      	ldr	r2, [r7, #4]
 801af00:	4413      	add	r3, r2
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 801af06:	2300      	movs	r3, #0
 801af08:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 801af0a:	2300      	movs	r3, #0
 801af0c:	663b      	str	r3, [r7, #96]	@ 0x60
 801af0e:	e020      	b.n	801af52 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 801af10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af12:	009b      	lsls	r3, r3, #2
 801af14:	68ba      	ldr	r2, [r7, #8]
 801af16:	4413      	add	r3, r2
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 801af1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801af1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af20:	4413      	add	r3, r2
 801af22:	009b      	lsls	r3, r3, #2
 801af24:	3368      	adds	r3, #104	@ 0x68
 801af26:	443b      	add	r3, r7
 801af28:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801af2c:	697d      	ldr	r5, [r7, #20]
 801af2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801af30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af32:	18d4      	adds	r4, r2, r3
 801af34:	f107 0018 	add.w	r0, r7, #24
 801af38:	462b      	mov	r3, r5
 801af3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801af3c:	f7ff fe66 	bl	801ac0c <umaal>
 801af40:	4602      	mov	r2, r0
 801af42:	00a3      	lsls	r3, r4, #2
 801af44:	3368      	adds	r3, #104	@ 0x68
 801af46:	443b      	add	r3, r7
 801af48:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 801af4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af4e:	3301      	adds	r3, #1
 801af50:	663b      	str	r3, [r7, #96]	@ 0x60
 801af52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af54:	2b07      	cmp	r3, #7
 801af56:	d9db      	bls.n	801af10 <mul+0x38>
    }
    accum[i + j] = carry2;
 801af58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801af5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af5c:	4413      	add	r3, r2
 801af5e:	69ba      	ldr	r2, [r7, #24]
 801af60:	009b      	lsls	r3, r3, #2
 801af62:	3368      	adds	r3, #104	@ 0x68
 801af64:	443b      	add	r3, r7
 801af66:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 801af6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801af6c:	3301      	adds	r3, #1
 801af6e:	667b      	str	r3, [r7, #100]	@ 0x64
 801af70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801af72:	683b      	ldr	r3, [r7, #0]
 801af74:	429a      	cmp	r2, r3
 801af76:	d3c0      	bcc.n	801aefa <mul+0x22>
  }

  carry2 = 0;
 801af78:	2300      	movs	r3, #0
 801af7a:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 801af7c:	2300      	movs	r3, #0
 801af7e:	663b      	str	r3, [r7, #96]	@ 0x60
 801af80:	e01b      	b.n	801afba <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 801af82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af84:	009b      	lsls	r3, r3, #2
 801af86:	3368      	adds	r3, #104	@ 0x68
 801af88:	443b      	add	r3, r7
 801af8a:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801af8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af90:	3308      	adds	r3, #8
 801af92:	009b      	lsls	r3, r3, #2
 801af94:	3368      	adds	r3, #104	@ 0x68
 801af96:	443b      	add	r3, r7
 801af98:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801af9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801af9e:	009b      	lsls	r3, r3, #2
 801afa0:	68fa      	ldr	r2, [r7, #12]
 801afa2:	18d4      	adds	r4, r2, r3
 801afa4:	f107 0018 	add.w	r0, r7, #24
 801afa8:	462b      	mov	r3, r5
 801afaa:	2226      	movs	r2, #38	@ 0x26
 801afac:	f7ff fe2e 	bl	801ac0c <umaal>
 801afb0:	4603      	mov	r3, r0
 801afb2:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 801afb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801afb6:	3301      	adds	r3, #1
 801afb8:	663b      	str	r3, [r7, #96]	@ 0x60
 801afba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801afbc:	2b07      	cmp	r3, #7
 801afbe:	d9e0      	bls.n	801af82 <mul+0xaa>
  }
  propagate(out, carry2);
 801afc0:	69bb      	ldr	r3, [r7, #24]
 801afc2:	4619      	mov	r1, r3
 801afc4:	68f8      	ldr	r0, [r7, #12]
 801afc6:	f7ff fecc 	bl	801ad62 <propagate>
}
 801afca:	bf00      	nop
 801afcc:	3768      	adds	r7, #104	@ 0x68
 801afce:	46bd      	mov	sp, r7
 801afd0:	bdb0      	pop	{r4, r5, r7, pc}

0801afd2 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 801afd2:	b580      	push	{r7, lr}
 801afd4:	b082      	sub	sp, #8
 801afd6:	af00      	add	r7, sp, #0
 801afd8:	6078      	str	r0, [r7, #4]
 801afda:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 801afdc:	2308      	movs	r3, #8
 801afde:	683a      	ldr	r2, [r7, #0]
 801afe0:	6839      	ldr	r1, [r7, #0]
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	f7ff ff78 	bl	801aed8 <mul>
}
 801afe8:	bf00      	nop
 801afea:	3708      	adds	r7, #8
 801afec:	46bd      	mov	sp, r7
 801afee:	bd80      	pop	{r7, pc}

0801aff0 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b082      	sub	sp, #8
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
 801aff8:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 801affa:	2308      	movs	r3, #8
 801affc:	687a      	ldr	r2, [r7, #4]
 801affe:	6839      	ldr	r1, [r7, #0]
 801b000:	6878      	ldr	r0, [r7, #4]
 801b002:	f7ff ff69 	bl	801aed8 <mul>
}
 801b006:	bf00      	nop
 801b008:	3708      	adds	r7, #8
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}

0801b00e <sqr1>:
static void sqr1(mg_fe a) {
 801b00e:	b580      	push	{r7, lr}
 801b010:	b082      	sub	sp, #8
 801b012:	af00      	add	r7, sp, #0
 801b014:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 801b016:	6879      	ldr	r1, [r7, #4]
 801b018:	6878      	ldr	r0, [r7, #4]
 801b01a:	f7ff ffe9 	bl	801aff0 <mul1>
}
 801b01e:	bf00      	nop
 801b020:	3708      	adds	r7, #8
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}

0801b026 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 801b026:	b480      	push	{r7}
 801b028:	b087      	sub	sp, #28
 801b02a:	af00      	add	r7, sp, #0
 801b02c:	60f8      	str	r0, [r7, #12]
 801b02e:	60b9      	str	r1, [r7, #8]
 801b030:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 801b032:	2300      	movs	r3, #0
 801b034:	617b      	str	r3, [r7, #20]
 801b036:	e028      	b.n	801b08a <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	009b      	lsls	r3, r3, #2
 801b03c:	68fa      	ldr	r2, [r7, #12]
 801b03e:	4413      	add	r3, r2
 801b040:	681a      	ldr	r2, [r3, #0]
 801b042:	697b      	ldr	r3, [r7, #20]
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	68b9      	ldr	r1, [r7, #8]
 801b048:	440b      	add	r3, r1
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	4053      	eors	r3, r2
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	4013      	ands	r3, r2
 801b052:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 801b054:	697b      	ldr	r3, [r7, #20]
 801b056:	009b      	lsls	r3, r3, #2
 801b058:	68fa      	ldr	r2, [r7, #12]
 801b05a:	4413      	add	r3, r2
 801b05c:	6819      	ldr	r1, [r3, #0]
 801b05e:	697b      	ldr	r3, [r7, #20]
 801b060:	009b      	lsls	r3, r3, #2
 801b062:	68fa      	ldr	r2, [r7, #12]
 801b064:	4413      	add	r3, r2
 801b066:	693a      	ldr	r2, [r7, #16]
 801b068:	404a      	eors	r2, r1
 801b06a:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 801b06c:	697b      	ldr	r3, [r7, #20]
 801b06e:	009b      	lsls	r3, r3, #2
 801b070:	68ba      	ldr	r2, [r7, #8]
 801b072:	4413      	add	r3, r2
 801b074:	6819      	ldr	r1, [r3, #0]
 801b076:	697b      	ldr	r3, [r7, #20]
 801b078:	009b      	lsls	r3, r3, #2
 801b07a:	68ba      	ldr	r2, [r7, #8]
 801b07c:	4413      	add	r3, r2
 801b07e:	693a      	ldr	r2, [r7, #16]
 801b080:	404a      	eors	r2, r1
 801b082:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	3301      	adds	r3, #1
 801b088:	617b      	str	r3, [r7, #20]
 801b08a:	697b      	ldr	r3, [r7, #20]
 801b08c:	2b0f      	cmp	r3, #15
 801b08e:	d9d3      	bls.n	801b038 <condswap+0x12>
  }
}
 801b090:	bf00      	nop
 801b092:	bf00      	nop
 801b094:	371c      	adds	r7, #28
 801b096:	46bd      	mov	sp, r7
 801b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b09c:	4770      	bx	lr

0801b09e <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 801b09e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0a2:	b08b      	sub	sp, #44	@ 0x2c
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 801b0a8:	2313      	movs	r3, #19
 801b0aa:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0b0:	e012      	b.n	801b0d8 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 801b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0b4:	009b      	lsls	r3, r3, #2
 801b0b6:	68fa      	ldr	r2, [r7, #12]
 801b0b8:	4413      	add	r3, r2
 801b0ba:	6819      	ldr	r1, [r3, #0]
 801b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0be:	009b      	lsls	r3, r3, #2
 801b0c0:	68fa      	ldr	r2, [r7, #12]
 801b0c2:	18d6      	adds	r6, r2, r3
 801b0c4:	f107 0314 	add.w	r3, r7, #20
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7ff fe24 	bl	801ad16 <adc0>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 801b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0d4:	3301      	adds	r3, #1
 801b0d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0da:	2b07      	cmp	r3, #7
 801b0dc:	d9e9      	bls.n	801b0b2 <canon+0x14>
  }
  propagate(x, carry0);
 801b0de:	697b      	ldr	r3, [r7, #20]
 801b0e0:	4619      	mov	r1, r3
 801b0e2:	68f8      	ldr	r0, [r7, #12]
 801b0e4:	f7ff fe3d 	bl	801ad62 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 801b0e8:	f06f 0212 	mvn.w	r2, #18
 801b0ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b0f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0fc:	e02a      	b.n	801b154 <canon+0xb6>
    carry += x[i];
 801b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	68fa      	ldr	r2, [r7, #12]
 801b104:	4413      	add	r3, r2
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	2200      	movs	r2, #0
 801b10a:	4698      	mov	r8, r3
 801b10c:	4691      	mov	r9, r2
 801b10e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b112:	eb12 0108 	adds.w	r1, r2, r8
 801b116:	6039      	str	r1, [r7, #0]
 801b118:	eb43 0309 	adc.w	r3, r3, r9
 801b11c:	607b      	str	r3, [r7, #4]
 801b11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b122:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 801b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b128:	009b      	lsls	r3, r3, #2
 801b12a:	68fa      	ldr	r2, [r7, #12]
 801b12c:	4413      	add	r3, r2
 801b12e:	69ba      	ldr	r2, [r7, #24]
 801b130:	601a      	str	r2, [r3, #0]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	6a3a      	ldr	r2, [r7, #32]
 801b136:	4313      	orrs	r3, r2
 801b138:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 801b13a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b13e:	f04f 0200 	mov.w	r2, #0
 801b142:	f04f 0300 	mov.w	r3, #0
 801b146:	000a      	movs	r2, r1
 801b148:	17cb      	asrs	r3, r1, #31
 801b14a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b150:	3301      	adds	r3, #1
 801b152:	627b      	str	r3, [r7, #36]	@ 0x24
 801b154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b156:	2b07      	cmp	r3, #7
 801b158:	d9d1      	bls.n	801b0fe <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 801b15a:	6a3b      	ldr	r3, [r7, #32]
 801b15c:	2200      	movs	r2, #0
 801b15e:	461c      	mov	r4, r3
 801b160:	4615      	mov	r5, r2
 801b162:	f114 3aff 	adds.w	sl, r4, #4294967295	@ 0xffffffff
 801b166:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 801b16a:	f04f 0200 	mov.w	r2, #0
 801b16e:	f04f 0300 	mov.w	r3, #0
 801b172:	465a      	mov	r2, fp
 801b174:	2300      	movs	r3, #0
 801b176:	4613      	mov	r3, r2
}
 801b178:	4618      	mov	r0, r3
 801b17a:	372c      	adds	r7, #44	@ 0x2c
 801b17c:	46bd      	mov	sp, r7
 801b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b184 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 801b184:	b580      	push	{r7, lr}
 801b186:	b088      	sub	sp, #32
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	61fb      	str	r3, [r7, #28]
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	3320      	adds	r3, #32
 801b194:	61bb      	str	r3, [r7, #24]
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	3340      	adds	r3, #64	@ 0x40
 801b19a:	617b      	str	r3, [r7, #20]
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	3360      	adds	r3, #96	@ 0x60
 801b1a0:	613b      	str	r3, [r7, #16]
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	3380      	adds	r3, #128	@ 0x80
 801b1a6:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 801b1a8:	69ba      	ldr	r2, [r7, #24]
 801b1aa:	69f9      	ldr	r1, [r7, #28]
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	f7ff fe12 	bl	801add6 <add>
  sub(z2, x2, z2);                                 // z2 = B
 801b1b2:	69ba      	ldr	r2, [r7, #24]
 801b1b4:	69f9      	ldr	r1, [r7, #28]
 801b1b6:	69b8      	ldr	r0, [r7, #24]
 801b1b8:	f7ff fe3d 	bl	801ae36 <sub>
  add(x2, x3, z3);                                 // x2 = C
 801b1bc:	693a      	ldr	r2, [r7, #16]
 801b1be:	6979      	ldr	r1, [r7, #20]
 801b1c0:	69f8      	ldr	r0, [r7, #28]
 801b1c2:	f7ff fe08 	bl	801add6 <add>
  sub(z3, x3, z3);                                 // z3 = D
 801b1c6:	693a      	ldr	r2, [r7, #16]
 801b1c8:	6979      	ldr	r1, [r7, #20]
 801b1ca:	6938      	ldr	r0, [r7, #16]
 801b1cc:	f7ff fe33 	bl	801ae36 <sub>
  mul1(z3, t1);                                    // z3 = DA
 801b1d0:	68f9      	ldr	r1, [r7, #12]
 801b1d2:	6938      	ldr	r0, [r7, #16]
 801b1d4:	f7ff ff0c 	bl	801aff0 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 801b1d8:	69b9      	ldr	r1, [r7, #24]
 801b1da:	69f8      	ldr	r0, [r7, #28]
 801b1dc:	f7ff ff08 	bl	801aff0 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 801b1e0:	69fa      	ldr	r2, [r7, #28]
 801b1e2:	6939      	ldr	r1, [r7, #16]
 801b1e4:	6978      	ldr	r0, [r7, #20]
 801b1e6:	f7ff fdf6 	bl	801add6 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 801b1ea:	69fa      	ldr	r2, [r7, #28]
 801b1ec:	6939      	ldr	r1, [r7, #16]
 801b1ee:	6938      	ldr	r0, [r7, #16]
 801b1f0:	f7ff fe21 	bl	801ae36 <sub>
  sqr1(t1);                                        // t1 = AA
 801b1f4:	68f8      	ldr	r0, [r7, #12]
 801b1f6:	f7ff ff0a 	bl	801b00e <sqr1>
  sqr1(z2);                                        // z2 = BB
 801b1fa:	69b8      	ldr	r0, [r7, #24]
 801b1fc:	f7ff ff07 	bl	801b00e <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 801b200:	69ba      	ldr	r2, [r7, #24]
 801b202:	68f9      	ldr	r1, [r7, #12]
 801b204:	69f8      	ldr	r0, [r7, #28]
 801b206:	f7ff fe16 	bl	801ae36 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 801b20a:	2301      	movs	r3, #1
 801b20c:	4a06      	ldr	r2, [pc, #24]	@ (801b228 <ladder_part1+0xa4>)
 801b20e:	69f9      	ldr	r1, [r7, #28]
 801b210:	69b8      	ldr	r0, [r7, #24]
 801b212:	f7ff fe61 	bl	801aed8 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 801b216:	68fa      	ldr	r2, [r7, #12]
 801b218:	69b9      	ldr	r1, [r7, #24]
 801b21a:	69b8      	ldr	r0, [r7, #24]
 801b21c:	f7ff fddb 	bl	801add6 <add>
}
 801b220:	bf00      	nop
 801b222:	3720      	adds	r7, #32
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}
 801b228:	0802281c 	.word	0x0802281c

0801b22c <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b088      	sub	sp, #32
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	61fb      	str	r3, [r7, #28]
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	3320      	adds	r3, #32
 801b23e:	61bb      	str	r3, [r7, #24]
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	3340      	adds	r3, #64	@ 0x40
 801b244:	617b      	str	r3, [r7, #20]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	3360      	adds	r3, #96	@ 0x60
 801b24a:	613b      	str	r3, [r7, #16]
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	3380      	adds	r3, #128	@ 0x80
 801b250:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 801b252:	6938      	ldr	r0, [r7, #16]
 801b254:	f7ff fedb 	bl	801b00e <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 801b258:	6839      	ldr	r1, [r7, #0]
 801b25a:	6938      	ldr	r0, [r7, #16]
 801b25c:	f7ff fec8 	bl	801aff0 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 801b260:	6978      	ldr	r0, [r7, #20]
 801b262:	f7ff fed4 	bl	801b00e <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 801b266:	69f9      	ldr	r1, [r7, #28]
 801b268:	69b8      	ldr	r0, [r7, #24]
 801b26a:	f7ff fec1 	bl	801aff0 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 801b26e:	69fa      	ldr	r2, [r7, #28]
 801b270:	68f9      	ldr	r1, [r7, #12]
 801b272:	69f8      	ldr	r0, [r7, #28]
 801b274:	f7ff fddf 	bl	801ae36 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 801b278:	68f9      	ldr	r1, [r7, #12]
 801b27a:	69f8      	ldr	r0, [r7, #28]
 801b27c:	f7ff feb8 	bl	801aff0 <mul1>
}
 801b280:	bf00      	nop
 801b282:	3720      	adds	r7, #32
 801b284:	46bd      	mov	sp, r7
 801b286:	bd80      	pop	{r7, pc}

0801b288 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 801b288:	b580      	push	{r7, lr}
 801b28a:	b094      	sub	sp, #80	@ 0x50
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	60f8      	str	r0, [r7, #12]
 801b290:	60b9      	str	r1, [r7, #8]
 801b292:	607a      	str	r2, [r7, #4]
 801b294:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 801b296:	2300      	movs	r3, #0
 801b298:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	643b      	str	r3, [r7, #64]	@ 0x40
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	3340      	adds	r3, #64	@ 0x40
 801b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	3360      	adds	r3, #96	@ 0x60
 801b2a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 801b2aa:	2280      	movs	r2, #128	@ 0x80
 801b2ac:	2100      	movs	r1, #0
 801b2ae:	68f8      	ldr	r0, [r7, #12]
 801b2b0:	f003 f9df 	bl	801e672 <memset>
  x2[0] = z3[0] = 1;
 801b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2b6:	2201      	movs	r2, #1
 801b2b8:	601a      	str	r2, [r3, #0]
 801b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b2bc:	681a      	ldr	r2, [r3, #0]
 801b2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b2c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b2c6:	e031      	b.n	801b32c <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 801b2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2ca:	009b      	lsls	r3, r3, #2
 801b2cc:	3303      	adds	r3, #3
 801b2ce:	687a      	ldr	r2, [r7, #4]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	781b      	ldrb	r3, [r3, #0]
 801b2d4:	061a      	lsls	r2, r3, #24
 801b2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2d8:	009b      	lsls	r3, r3, #2
 801b2da:	3302      	adds	r3, #2
 801b2dc:	6879      	ldr	r1, [r7, #4]
 801b2de:	440b      	add	r3, r1
 801b2e0:	781b      	ldrb	r3, [r3, #0]
 801b2e2:	041b      	lsls	r3, r3, #16
 801b2e4:	431a      	orrs	r2, r3
 801b2e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2e8:	009b      	lsls	r3, r3, #2
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	6879      	ldr	r1, [r7, #4]
 801b2ee:	440b      	add	r3, r1
 801b2f0:	781b      	ldrb	r3, [r3, #0]
 801b2f2:	021b      	lsls	r3, r3, #8
 801b2f4:	4313      	orrs	r3, r2
 801b2f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b2f8:	0092      	lsls	r2, r2, #2
 801b2fa:	4611      	mov	r1, r2
 801b2fc:	687a      	ldr	r2, [r7, #4]
 801b2fe:	440a      	add	r2, r1
 801b300:	7812      	ldrb	r2, [r2, #0]
 801b302:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 801b304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b306:	009b      	lsls	r3, r3, #2
 801b308:	3350      	adds	r3, #80	@ 0x50
 801b30a:	443b      	add	r3, r7
 801b30c:	f843 2c3c 	str.w	r2, [r3, #-60]
 801b310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b312:	009b      	lsls	r3, r3, #2
 801b314:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b316:	441a      	add	r2, r3
 801b318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b31a:	009b      	lsls	r3, r3, #2
 801b31c:	3350      	adds	r3, #80	@ 0x50
 801b31e:	443b      	add	r3, r7
 801b320:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801b324:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 801b326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b328:	3301      	adds	r3, #1
 801b32a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b32c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b32e:	2b07      	cmp	r3, #7
 801b330:	ddca      	ble.n	801b2c8 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 801b332:	23ff      	movs	r3, #255	@ 0xff
 801b334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b336:	e049      	b.n	801b3cc <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 801b338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	da00      	bge.n	801b340 <x25519_core+0xb8>
 801b33e:	3307      	adds	r3, #7
 801b340:	10db      	asrs	r3, r3, #3
 801b342:	461a      	mov	r2, r3
 801b344:	68bb      	ldr	r3, [r7, #8]
 801b346:	4413      	add	r3, r2
 801b348:	781b      	ldrb	r3, [r3, #0]
 801b34a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d01a      	beq.n	801b38a <x25519_core+0x102>
      if (i / 8 == 0) {
 801b354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b356:	3307      	adds	r3, #7
 801b358:	2b0e      	cmp	r3, #14
 801b35a:	d806      	bhi.n	801b36a <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 801b35c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b360:	f023 0307 	bic.w	r3, r3, #7
 801b364:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801b368:	e00f      	b.n	801b38a <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 801b36a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b36c:	3bf8      	subs	r3, #248	@ 0xf8
 801b36e:	2b07      	cmp	r3, #7
 801b370:	d80b      	bhi.n	801b38a <x25519_core+0x102>
        bytei &= 0x7F;
 801b372:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b37a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 801b37e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b386:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 801b38a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801b38e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b390:	f003 0307 	and.w	r3, r3, #7
 801b394:	fa42 f303 	asr.w	r3, r2, r3
 801b398:	f003 0301 	and.w	r3, r3, #1
 801b39c:	425b      	negs	r3, r3
 801b39e:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 801b3a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b3a4:	4053      	eors	r3, r2
 801b3a6:	461a      	mov	r2, r3
 801b3a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b3aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801b3ac:	f7ff fe3b 	bl	801b026 <condswap>
    swap = doswap;
 801b3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b3b2:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 801b3b4:	68f8      	ldr	r0, [r7, #12]
 801b3b6:	f7ff fee5 	bl	801b184 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 801b3ba:	f107 0314 	add.w	r3, r7, #20
 801b3be:	4619      	mov	r1, r3
 801b3c0:	68f8      	ldr	r0, [r7, #12]
 801b3c2:	f7ff ff33 	bl	801b22c <ladder_part2>
  for (i = 255; i >= 0; i--) {
 801b3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3c8:	3b01      	subs	r3, #1
 801b3ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b3cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	dab2      	bge.n	801b338 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 801b3d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b3d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801b3d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801b3d8:	f7ff fe25 	bl	801b026 <condswap>
}
 801b3dc:	bf00      	nop
 801b3de:	3750      	adds	r7, #80	@ 0x50
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}

0801b3e4 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b0be      	sub	sp, #248	@ 0xf8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	60f8      	str	r0, [r7, #12]
 801b3ec:	60b9      	str	r1, [r7, #8]
 801b3ee:	607a      	str	r2, [r7, #4]
 801b3f0:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 801b3f2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	68b9      	ldr	r1, [r7, #8]
 801b3fc:	f7ff ff44 	bl	801b288 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 801b400:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 801b408:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b40c:	3320      	adds	r3, #32
 801b40e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 801b412:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b416:	3360      	adds	r3, #96	@ 0x60
 801b418:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 801b41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801b420:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 801b424:	2300      	movs	r3, #0
 801b426:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b42a:	e043      	b.n	801b4b4 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 801b42c:	4952      	ldr	r1, [pc, #328]	@ (801b578 <mg_tls_x25519+0x194>)
 801b42e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801b432:	4613      	mov	r3, r2
 801b434:	005b      	lsls	r3, r3, #1
 801b436:	4413      	add	r3, r2
 801b438:	440b      	add	r3, r1
 801b43a:	781b      	ldrb	r3, [r3, #0]
 801b43c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801b440:	015b      	lsls	r3, r3, #5
 801b442:	4413      	add	r3, r2
 801b444:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 801b448:	494b      	ldr	r1, [pc, #300]	@ (801b578 <mg_tls_x25519+0x194>)
 801b44a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801b44e:	4613      	mov	r3, r2
 801b450:	005b      	lsls	r3, r3, #1
 801b452:	4413      	add	r3, r2
 801b454:	440b      	add	r3, r1
 801b456:	3302      	adds	r3, #2
 801b458:	781b      	ldrb	r3, [r3, #0]
 801b45a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801b45e:	e00e      	b.n	801b47e <mg_tls_x25519+0x9a>
      sqr(a, prev);
 801b460:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801b464:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801b468:	f7ff fdb3 	bl	801afd2 <sqr>
      prev = a;
 801b46c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b470:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 801b474:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b478:	3b01      	subs	r3, #1
 801b47a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801b47e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801b482:	2b00      	cmp	r3, #0
 801b484:	dcec      	bgt.n	801b460 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 801b486:	493c      	ldr	r1, [pc, #240]	@ (801b578 <mg_tls_x25519+0x194>)
 801b488:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801b48c:	4613      	mov	r3, r2
 801b48e:	005b      	lsls	r3, r3, #1
 801b490:	4413      	add	r3, r2
 801b492:	440b      	add	r3, r1
 801b494:	3301      	adds	r3, #1
 801b496:	781b      	ldrb	r3, [r3, #0]
 801b498:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801b49c:	015b      	lsls	r3, r3, #5
 801b49e:	4413      	add	r3, r2
 801b4a0:	4619      	mov	r1, r3
 801b4a2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801b4a6:	f7ff fda3 	bl	801aff0 <mul1>
  for (i = 0; i < 13; i++) {
 801b4aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4ae:	3301      	adds	r3, #1
 801b4b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4b8:	2b0c      	cmp	r3, #12
 801b4ba:	ddb7      	ble.n	801b42c <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 801b4bc:	f107 0014 	add.w	r0, r7, #20
 801b4c0:	2308      	movs	r3, #8
 801b4c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801b4c6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 801b4ca:	f7ff fd05 	bl	801aed8 <mul>
  ret = (int) canon(out_limbs);
 801b4ce:	f107 0314 	add.w	r3, r7, #20
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	f7ff fde3 	bl	801b09e <canon>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d102      	bne.n	801b4ea <mg_tls_x25519+0x106>
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b4f0:	e038      	b.n	801b564 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 801b4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b4f6:	009b      	lsls	r3, r3, #2
 801b4f8:	33f8      	adds	r3, #248	@ 0xf8
 801b4fa:	443b      	add	r3, r7
 801b4fc:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 801b500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 801b504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b508:	009b      	lsls	r3, r3, #2
 801b50a:	461a      	mov	r2, r3
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	4413      	add	r3, r2
 801b510:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801b514:	b2d2      	uxtb	r2, r2
 801b516:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 801b518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b51c:	0a19      	lsrs	r1, r3, #8
 801b51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b522:	009b      	lsls	r3, r3, #2
 801b524:	3301      	adds	r3, #1
 801b526:	68fa      	ldr	r2, [r7, #12]
 801b528:	4413      	add	r3, r2
 801b52a:	b2ca      	uxtb	r2, r1
 801b52c:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 801b52e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b532:	0c19      	lsrs	r1, r3, #16
 801b534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b538:	009b      	lsls	r3, r3, #2
 801b53a:	3302      	adds	r3, #2
 801b53c:	68fa      	ldr	r2, [r7, #12]
 801b53e:	4413      	add	r3, r2
 801b540:	b2ca      	uxtb	r2, r1
 801b542:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 801b544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b548:	0e19      	lsrs	r1, r3, #24
 801b54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b54e:	009b      	lsls	r3, r3, #2
 801b550:	3303      	adds	r3, #3
 801b552:	68fa      	ldr	r2, [r7, #12]
 801b554:	4413      	add	r3, r2
 801b556:	b2ca      	uxtb	r2, r1
 801b558:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801b55a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b55e:	3301      	adds	r3, #1
 801b560:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801b568:	2b07      	cmp	r3, #7
 801b56a:	ddc2      	ble.n	801b4f2 <mg_tls_x25519+0x10e>
  }
  return ret;
 801b56c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 801b570:	4618      	mov	r0, r3
 801b572:	37f8      	adds	r7, #248	@ 0xf8
 801b574:	46bd      	mov	sp, r7
 801b576:	bd80      	pop	{r7, pc}
 801b578:	08022ab8 	.word	0x08022ab8

0801b57c <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b082      	sub	sp, #8
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801b584:	2204      	movs	r2, #4
 801b586:	491b      	ldr	r1, [pc, #108]	@ (801b5f4 <mg_url_is_ssl+0x78>)
 801b588:	6878      	ldr	r0, [r7, #4]
 801b58a:	f003 f887 	bl	801e69c <strncmp>
 801b58e:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801b590:	2b00      	cmp	r3, #0
 801b592:	d027      	beq.n	801b5e4 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801b594:	2206      	movs	r2, #6
 801b596:	4918      	ldr	r1, [pc, #96]	@ (801b5f8 <mg_url_is_ssl+0x7c>)
 801b598:	6878      	ldr	r0, [r7, #4]
 801b59a:	f003 f87f 	bl	801e69c <strncmp>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d01f      	beq.n	801b5e4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801b5a4:	2206      	movs	r2, #6
 801b5a6:	4915      	ldr	r1, [pc, #84]	@ (801b5fc <mg_url_is_ssl+0x80>)
 801b5a8:	6878      	ldr	r0, [r7, #4]
 801b5aa:	f003 f877 	bl	801e69c <strncmp>
 801b5ae:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d017      	beq.n	801b5e4 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801b5b4:	2204      	movs	r2, #4
 801b5b6:	4912      	ldr	r1, [pc, #72]	@ (801b600 <mg_url_is_ssl+0x84>)
 801b5b8:	6878      	ldr	r0, [r7, #4]
 801b5ba:	f003 f86f 	bl	801e69c <strncmp>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d00f      	beq.n	801b5e4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801b5c4:	2204      	movs	r2, #4
 801b5c6:	490f      	ldr	r1, [pc, #60]	@ (801b604 <mg_url_is_ssl+0x88>)
 801b5c8:	6878      	ldr	r0, [r7, #4]
 801b5ca:	f003 f867 	bl	801e69c <strncmp>
 801b5ce:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d007      	beq.n	801b5e4 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801b5d4:	2205      	movs	r2, #5
 801b5d6:	490c      	ldr	r1, [pc, #48]	@ (801b608 <mg_url_is_ssl+0x8c>)
 801b5d8:	6878      	ldr	r0, [r7, #4]
 801b5da:	f003 f85f 	bl	801e69c <strncmp>
 801b5de:	4603      	mov	r3, r0
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d101      	bne.n	801b5e8 <mg_url_is_ssl+0x6c>
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	e000      	b.n	801b5ea <mg_url_is_ssl+0x6e>
 801b5e8:	2300      	movs	r3, #0
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	3708      	adds	r7, #8
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bd80      	pop	{r7, pc}
 801b5f2:	bf00      	nop
 801b5f4:	08021a18 	.word	0x08021a18
 801b5f8:	08021a20 	.word	0x08021a20
 801b5fc:	08021a28 	.word	0x08021a28
 801b600:	08021a30 	.word	0x08021a30
 801b604:	08021a38 	.word	0x08021a38
 801b608:	08021a40 	.word	0x08021a40

0801b60c <urlparse>:

static struct url urlparse(const char *url) {
 801b60c:	b5b0      	push	{r4, r5, r7, lr}
 801b60e:	b08a      	sub	sp, #40	@ 0x28
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
 801b614:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801b616:	f107 0308 	add.w	r3, r7, #8
 801b61a:	221c      	movs	r2, #28
 801b61c:	2100      	movs	r1, #0
 801b61e:	4618      	mov	r0, r3
 801b620:	f003 f827 	bl	801e672 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801b624:	2300      	movs	r3, #0
 801b626:	627b      	str	r3, [r7, #36]	@ 0x24
 801b628:	e05b      	b.n	801b6e2 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801b62a:	683a      	ldr	r2, [r7, #0]
 801b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b62e:	4413      	add	r3, r2
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	2b2f      	cmp	r3, #47	@ 0x2f
 801b634:	d112      	bne.n	801b65c <urlparse+0x50>
 801b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d00f      	beq.n	801b65c <urlparse+0x50>
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d10c      	bne.n	801b65c <urlparse+0x50>
 801b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b644:	3b01      	subs	r3, #1
 801b646:	683a      	ldr	r2, [r7, #0]
 801b648:	4413      	add	r3, r2
 801b64a:	781b      	ldrb	r3, [r3, #0]
 801b64c:	2b2f      	cmp	r3, #47	@ 0x2f
 801b64e:	d105      	bne.n	801b65c <urlparse+0x50>
      u.host = i + 1;
 801b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b652:	3301      	adds	r3, #1
 801b654:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	61bb      	str	r3, [r7, #24]
 801b65a:	e03f      	b.n	801b6dc <urlparse+0xd0>
    } else if (url[i] == ']') {
 801b65c:	683a      	ldr	r2, [r7, #0]
 801b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b660:	4413      	add	r3, r2
 801b662:	781b      	ldrb	r3, [r3, #0]
 801b664:	2b5d      	cmp	r3, #93	@ 0x5d
 801b666:	d102      	bne.n	801b66e <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801b668:	2300      	movs	r3, #0
 801b66a:	61bb      	str	r3, [r7, #24]
 801b66c:	e036      	b.n	801b6dc <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801b66e:	683a      	ldr	r2, [r7, #0]
 801b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b672:	4413      	add	r3, r2
 801b674:	781b      	ldrb	r3, [r3, #0]
 801b676:	2b3a      	cmp	r3, #58	@ 0x3a
 801b678:	d109      	bne.n	801b68e <urlparse+0x82>
 801b67a:	69bb      	ldr	r3, [r7, #24]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d106      	bne.n	801b68e <urlparse+0x82>
 801b680:	69fb      	ldr	r3, [r7, #28]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d103      	bne.n	801b68e <urlparse+0x82>
      u.port = i + 1;
 801b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b688:	3301      	adds	r3, #1
 801b68a:	61bb      	str	r3, [r7, #24]
 801b68c:	e026      	b.n	801b6dc <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801b68e:	683a      	ldr	r2, [r7, #0]
 801b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b692:	4413      	add	r3, r2
 801b694:	781b      	ldrb	r3, [r3, #0]
 801b696:	2b40      	cmp	r3, #64	@ 0x40
 801b698:	d112      	bne.n	801b6c0 <urlparse+0xb4>
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d10f      	bne.n	801b6c0 <urlparse+0xb4>
 801b6a0:	693b      	ldr	r3, [r7, #16]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d10c      	bne.n	801b6c0 <urlparse+0xb4>
 801b6a6:	69fb      	ldr	r3, [r7, #28]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d109      	bne.n	801b6c0 <urlparse+0xb4>
      u.user = u.host;
 801b6ac:	697b      	ldr	r3, [r7, #20]
 801b6ae:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 801b6b0:	69bb      	ldr	r3, [r7, #24]
 801b6b2:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 801b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	61bb      	str	r3, [r7, #24]
 801b6be:	e00d      	b.n	801b6dc <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801b6c0:	683a      	ldr	r2, [r7, #0]
 801b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6c4:	4413      	add	r3, r2
 801b6c6:	781b      	ldrb	r3, [r3, #0]
 801b6c8:	2b2f      	cmp	r3, #47	@ 0x2f
 801b6ca:	d107      	bne.n	801b6dc <urlparse+0xd0>
 801b6cc:	697b      	ldr	r3, [r7, #20]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d004      	beq.n	801b6dc <urlparse+0xd0>
 801b6d2:	69fb      	ldr	r3, [r7, #28]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d101      	bne.n	801b6dc <urlparse+0xd0>
      u.uri = i;
 801b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6da:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6de:	3301      	adds	r3, #1
 801b6e0:	627b      	str	r3, [r7, #36]	@ 0x24
 801b6e2:	683a      	ldr	r2, [r7, #0]
 801b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6e6:	4413      	add	r3, r2
 801b6e8:	781b      	ldrb	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d19d      	bne.n	801b62a <urlparse+0x1e>
    }
  }
  u.end = i;
 801b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b6f0:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	461d      	mov	r5, r3
 801b6f6:	f107 0408 	add.w	r4, r7, #8
 801b6fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b6fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801b702:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	3728      	adds	r7, #40	@ 0x28
 801b70a:	46bd      	mov	sp, r7
 801b70c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b710 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 801b710:	b580      	push	{r7, lr}
 801b712:	b08a      	sub	sp, #40	@ 0x28
 801b714:	af00      	add	r7, sp, #0
 801b716:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801b718:	f107 0308 	add.w	r3, r7, #8
 801b71c:	6879      	ldr	r1, [r7, #4]
 801b71e:	4618      	mov	r0, r3
 801b720:	f7ff ff74 	bl	801b60c <urlparse>
  unsigned short port = 0;
 801b724:	2300      	movs	r3, #0
 801b726:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801b728:	2205      	movs	r2, #5
 801b72a:	4925      	ldr	r1, [pc, #148]	@ (801b7c0 <mg_url_port+0xb0>)
 801b72c:	6878      	ldr	r0, [r7, #4]
 801b72e:	f002 ffb5 	bl	801e69c <strncmp>
 801b732:	4603      	mov	r3, r0
 801b734:	2b00      	cmp	r3, #0
 801b736:	d007      	beq.n	801b748 <mg_url_port+0x38>
 801b738:	2203      	movs	r2, #3
 801b73a:	4922      	ldr	r1, [pc, #136]	@ (801b7c4 <mg_url_port+0xb4>)
 801b73c:	6878      	ldr	r0, [r7, #4]
 801b73e:	f002 ffad 	bl	801e69c <strncmp>
 801b742:	4603      	mov	r3, r0
 801b744:	2b00      	cmp	r3, #0
 801b746:	d101      	bne.n	801b74c <mg_url_port+0x3c>
 801b748:	2350      	movs	r3, #80	@ 0x50
 801b74a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 801b74c:	2204      	movs	r2, #4
 801b74e:	491e      	ldr	r1, [pc, #120]	@ (801b7c8 <mg_url_port+0xb8>)
 801b750:	6878      	ldr	r0, [r7, #4]
 801b752:	f002 ffa3 	bl	801e69c <strncmp>
 801b756:	4603      	mov	r3, r0
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d007      	beq.n	801b76c <mg_url_port+0x5c>
 801b75c:	2206      	movs	r2, #6
 801b75e:	491b      	ldr	r1, [pc, #108]	@ (801b7cc <mg_url_port+0xbc>)
 801b760:	6878      	ldr	r0, [r7, #4]
 801b762:	f002 ff9b 	bl	801e69c <strncmp>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d102      	bne.n	801b772 <mg_url_port+0x62>
    port = 443;
 801b76c:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801b770:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801b772:	2205      	movs	r2, #5
 801b774:	4916      	ldr	r1, [pc, #88]	@ (801b7d0 <mg_url_port+0xc0>)
 801b776:	6878      	ldr	r0, [r7, #4]
 801b778:	f002 ff90 	bl	801e69c <strncmp>
 801b77c:	4603      	mov	r3, r0
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d102      	bne.n	801b788 <mg_url_port+0x78>
 801b782:	f240 735b 	movw	r3, #1883	@ 0x75b
 801b786:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 801b788:	2206      	movs	r2, #6
 801b78a:	4912      	ldr	r1, [pc, #72]	@ (801b7d4 <mg_url_port+0xc4>)
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f002 ff85 	bl	801e69c <strncmp>
 801b792:	4603      	mov	r3, r0
 801b794:	2b00      	cmp	r3, #0
 801b796:	d102      	bne.n	801b79e <mg_url_port+0x8e>
 801b798:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 801b79c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801b79e:	69bb      	ldr	r3, [r7, #24]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d007      	beq.n	801b7b4 <mg_url_port+0xa4>
 801b7a4:	69bb      	ldr	r3, [r7, #24]
 801b7a6:	687a      	ldr	r2, [r7, #4]
 801b7a8:	4413      	add	r3, r2
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	f002 fc88 	bl	801e0c0 <atoi>
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 801b7b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	3728      	adds	r7, #40	@ 0x28
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	bd80      	pop	{r7, pc}
 801b7be:	bf00      	nop
 801b7c0:	08021a48 	.word	0x08021a48
 801b7c4:	08021a50 	.word	0x08021a50
 801b7c8:	08021a18 	.word	0x08021a18
 801b7cc:	08021a20 	.word	0x08021a20
 801b7d0:	08021a54 	.word	0x08021a54
 801b7d4:	08021a28 	.word	0x08021a28

0801b7d8 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 801b7d8:	b480      	push	{r7}
 801b7da:	b083      	sub	sp, #12
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	d00a      	beq.n	801b7fe <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 801b7e8:	e004      	b.n	801b7f4 <mg_bzero+0x1c>
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	1c5a      	adds	r2, r3, #1
 801b7ee:	607a      	str	r2, [r7, #4]
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	701a      	strb	r2, [r3, #0]
 801b7f4:	683b      	ldr	r3, [r7, #0]
 801b7f6:	1e5a      	subs	r2, r3, #1
 801b7f8:	603a      	str	r2, [r7, #0]
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d1f5      	bne.n	801b7ea <mg_bzero+0x12>
  }
}
 801b7fe:	bf00      	nop
 801b800:	370c      	adds	r7, #12
 801b802:	46bd      	mov	sp, r7
 801b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b808:	4770      	bx	lr
	...

0801b80c <mg_crc32>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 801b80c:	b480      	push	{r7}
 801b80e:	b087      	sub	sp, #28
 801b810:	af00      	add	r7, sp, #0
 801b812:	60f8      	str	r0, [r7, #12]
 801b814:	60b9      	str	r1, [r7, #8]
 801b816:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 801b818:	68fb      	ldr	r3, [r7, #12]
 801b81a:	43db      	mvns	r3, r3
 801b81c:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801b81e:	e01f      	b.n	801b860 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	1c5a      	adds	r2, r3, #1
 801b824:	60ba      	str	r2, [r7, #8]
 801b826:	781b      	ldrb	r3, [r3, #0]
 801b828:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 801b82a:	7dfa      	ldrb	r2, [r7, #23]
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	4053      	eors	r3, r2
 801b830:	f003 030f 	and.w	r3, r3, #15
 801b834:	4a11      	ldr	r2, [pc, #68]	@ (801b87c <mg_crc32+0x70>)
 801b836:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	091b      	lsrs	r3, r3, #4
 801b83e:	4053      	eors	r3, r2
 801b840:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 801b842:	7dfb      	ldrb	r3, [r7, #23]
 801b844:	091b      	lsrs	r3, r3, #4
 801b846:	b2db      	uxtb	r3, r3
 801b848:	461a      	mov	r2, r3
 801b84a:	68fb      	ldr	r3, [r7, #12]
 801b84c:	4053      	eors	r3, r2
 801b84e:	f003 030f 	and.w	r3, r3, #15
 801b852:	4a0a      	ldr	r2, [pc, #40]	@ (801b87c <mg_crc32+0x70>)
 801b854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	091b      	lsrs	r3, r3, #4
 801b85c:	4053      	eors	r3, r2
 801b85e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	1e5a      	subs	r2, r3, #1
 801b864:	607a      	str	r2, [r7, #4]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d1da      	bne.n	801b820 <mg_crc32+0x14>
  }
  return ~crc;
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	43db      	mvns	r3, r3
}
 801b86e:	4618      	mov	r0, r3
 801b870:	371c      	adds	r7, #28
 801b872:	46bd      	mov	sp, r7
 801b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b878:	4770      	bx	lr
 801b87a:	bf00      	nop
 801b87c:	08022ae0 	.word	0x08022ae0

0801b880 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 801b880:	b480      	push	{r7}
 801b882:	b085      	sub	sp, #20
 801b884:	af00      	add	r7, sp, #0
 801b886:	463b      	mov	r3, r7
 801b888:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 801b88c:	683b      	ldr	r3, [r7, #0]
 801b88e:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 801b894:	683b      	ldr	r3, [r7, #0]
 801b896:	781b      	ldrb	r3, [r3, #0]
 801b898:	2b2e      	cmp	r3, #46	@ 0x2e
 801b89a:	d123      	bne.n	801b8e4 <mg_path_is_sane+0x64>
 801b89c:	683b      	ldr	r3, [r7, #0]
 801b89e:	3301      	adds	r3, #1
 801b8a0:	781b      	ldrb	r3, [r3, #0]
 801b8a2:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8a4:	d11e      	bne.n	801b8e4 <mg_path_is_sane+0x64>
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	e024      	b.n	801b8f4 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	781b      	ldrb	r3, [r3, #0]
 801b8ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801b8b0:	d003      	beq.n	801b8ba <mg_path_is_sane+0x3a>
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	2b5c      	cmp	r3, #92	@ 0x5c
 801b8b8:	d10e      	bne.n	801b8d8 <mg_path_is_sane+0x58>
 801b8ba:	68bb      	ldr	r3, [r7, #8]
 801b8bc:	2b01      	cmp	r3, #1
 801b8be:	d90b      	bls.n	801b8d8 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	3301      	adds	r3, #1
 801b8c4:	781b      	ldrb	r3, [r3, #0]
 801b8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8c8:	d106      	bne.n	801b8d8 <mg_path_is_sane+0x58>
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	3302      	adds	r3, #2
 801b8ce:	781b      	ldrb	r3, [r3, #0]
 801b8d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801b8d2:	d101      	bne.n	801b8d8 <mg_path_is_sane+0x58>
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	e00d      	b.n	801b8f4 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	3301      	adds	r3, #1
 801b8dc:	60fb      	str	r3, [r7, #12]
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	3b01      	subs	r3, #1
 801b8e2:	60bb      	str	r3, [r7, #8]
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	781b      	ldrb	r3, [r3, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d002      	beq.n	801b8f2 <mg_path_is_sane+0x72>
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d1db      	bne.n	801b8aa <mg_path_is_sane+0x2a>
    }
  }
  return true;
 801b8f2:	2301      	movs	r3, #1
}
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	3714      	adds	r7, #20
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8fe:	4770      	bx	lr

0801b900 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 801b900:	b480      	push	{r7}
 801b902:	b083      	sub	sp, #12
 801b904:	af00      	add	r7, sp, #0
 801b906:	4603      	mov	r3, r0
 801b908:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 801b90a:	1dbb      	adds	r3, r7, #6
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	b21b      	sxth	r3, r3
 801b910:	021b      	lsls	r3, r3, #8
 801b912:	b21a      	sxth	r2, r3
 801b914:	1dbb      	adds	r3, r7, #6
 801b916:	3301      	adds	r3, #1
 801b918:	781b      	ldrb	r3, [r3, #0]
 801b91a:	b21b      	sxth	r3, r3
 801b91c:	4313      	orrs	r3, r2
 801b91e:	b21b      	sxth	r3, r3
 801b920:	b29b      	uxth	r3, r3
}
 801b922:	4618      	mov	r0, r3
 801b924:	370c      	adds	r7, #12
 801b926:	46bd      	mov	sp, r7
 801b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b92c:	4770      	bx	lr

0801b92e <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 801b92e:	b480      	push	{r7}
 801b930:	b083      	sub	sp, #12
 801b932:	af00      	add	r7, sp, #0
 801b934:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 801b936:	1d3b      	adds	r3, r7, #4
 801b938:	781b      	ldrb	r3, [r3, #0]
 801b93a:	061a      	lsls	r2, r3, #24
 801b93c:	1d3b      	adds	r3, r7, #4
 801b93e:	3301      	adds	r3, #1
 801b940:	781b      	ldrb	r3, [r3, #0]
 801b942:	041b      	lsls	r3, r3, #16
 801b944:	431a      	orrs	r2, r3
 801b946:	1d3b      	adds	r3, r7, #4
 801b948:	3302      	adds	r3, #2
 801b94a:	781b      	ldrb	r3, [r3, #0]
 801b94c:	021b      	lsls	r3, r3, #8
 801b94e:	431a      	orrs	r2, r3
 801b950:	1d3b      	adds	r3, r7, #4
 801b952:	3303      	adds	r3, #3
 801b954:	781b      	ldrb	r3, [r3, #0]
 801b956:	4313      	orrs	r3, r2
}
 801b958:	4618      	mov	r0, r3
 801b95a:	370c      	adds	r7, #12
 801b95c:	46bd      	mov	sp, r7
 801b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b962:	4770      	bx	lr

0801b964 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 801b964:	b580      	push	{r7, lr}
 801b966:	b0aa      	sub	sp, #168	@ 0xa8
 801b968:	af00      	add	r7, sp, #0
 801b96a:	60f8      	str	r0, [r7, #12]
 801b96c:	60b9      	str	r1, [r7, #8]
 801b96e:	607a      	str	r2, [r7, #4]
 801b970:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 801b972:	4b29      	ldr	r3, [pc, #164]	@ (801ba18 <ws_handshake+0xb4>)
 801b974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 801b978:	f107 0314 	add.w	r3, r7, #20
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7f3 f825 	bl	800e9cc <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	6819      	ldr	r1, [r3, #0]
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	685a      	ldr	r2, [r3, #4]
 801b98a:	f107 0314 	add.w	r3, r7, #20
 801b98e:	4618      	mov	r0, r3
 801b990:	f7f3 f846 	bl	800ea20 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 801b994:	f107 0314 	add.w	r3, r7, #20
 801b998:	2224      	movs	r2, #36	@ 0x24
 801b99a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7f3 f83e 	bl	800ea20 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 801b9a4:	f107 0214 	add.w	r2, r7, #20
 801b9a8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801b9ac:	4611      	mov	r1, r2
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7f3 f89c 	bl	800eaec <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 801b9b4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801b9b8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 801b9bc:	231e      	movs	r3, #30
 801b9be:	2114      	movs	r1, #20
 801b9c0:	f7e8 f930 	bl	8003c24 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801b9ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801b9ce:	4a13      	ldr	r2, [pc, #76]	@ (801ba1c <ws_handshake+0xb8>)
 801b9d0:	4813      	ldr	r0, [pc, #76]	@ (801ba20 <ws_handshake+0xbc>)
 801b9d2:	f7e8 ff2a 	bl	800482a <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d008      	beq.n	801b9ee <ws_handshake+0x8a>
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801b9e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801b9e6:	683a      	ldr	r2, [r7, #0]
 801b9e8:	480d      	ldr	r0, [pc, #52]	@ (801ba20 <ws_handshake+0xbc>)
 801b9ea:	f7e8 ff39 	bl	8004860 <mg_vxprintf>
  if (wsproto != NULL) {
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d008      	beq.n	801ba06 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801b9f4:	687b      	ldr	r3, [r7, #4]
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	461a      	mov	r2, r3
              wsproto->buf);
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801b9fe:	4909      	ldr	r1, [pc, #36]	@ (801ba24 <ws_handshake+0xc0>)
 801ba00:	68f8      	ldr	r0, [r7, #12]
 801ba02:	f7ed fd29 	bl	8009458 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 801ba06:	2202      	movs	r2, #2
 801ba08:	4907      	ldr	r1, [pc, #28]	@ (801ba28 <ws_handshake+0xc4>)
 801ba0a:	68f8      	ldr	r0, [r7, #12]
 801ba0c:	f7f1 f8cc 	bl	800cba8 <mg_send>
}
 801ba10:	bf00      	nop
 801ba12:	37a8      	adds	r7, #168	@ 0xa8
 801ba14:	46bd      	mov	sp, r7
 801ba16:	bd80      	pop	{r7, pc}
 801ba18:	08021a98 	.word	0x08021a98
 801ba1c:	08021ac0 	.word	0x08021ac0
 801ba20:	0800cd71 	.word	0x0800cd71
 801ba24:	08021b28 	.word	0x08021b28
 801ba28:	0801f614 	.word	0x0801f614

0801ba2c <be32>:

static uint32_t be32(const uint8_t *p) {
 801ba2c:	b480      	push	{r7}
 801ba2e:	b083      	sub	sp, #12
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	3303      	adds	r3, #3
 801ba38:	781b      	ldrb	r3, [r3, #0]
 801ba3a:	461a      	mov	r2, r3
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	3302      	adds	r3, #2
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	021b      	lsls	r3, r3, #8
 801ba44:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	3301      	adds	r3, #1
 801ba4a:	781b      	ldrb	r3, [r3, #0]
 801ba4c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801ba4e:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	781b      	ldrb	r3, [r3, #0]
 801ba54:	061b      	lsls	r3, r3, #24
 801ba56:	4313      	orrs	r3, r2
}
 801ba58:	4618      	mov	r0, r3
 801ba5a:	370c      	adds	r7, #12
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba62:	4770      	bx	lr

0801ba64 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 801ba64:	b5b0      	push	{r4, r5, r7, lr}
 801ba66:	b08a      	sub	sp, #40	@ 0x28
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	60f8      	str	r0, [r7, #12]
 801ba6c:	60b9      	str	r1, [r7, #8]
 801ba6e:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 801ba70:	2300      	movs	r3, #0
 801ba72:	61fb      	str	r3, [r7, #28]
 801ba74:	2300      	movs	r3, #0
 801ba76:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 801ba78:	220c      	movs	r2, #12
 801ba7a:	2100      	movs	r1, #0
 801ba7c:	6878      	ldr	r0, [r7, #4]
 801ba7e:	f002 fdf8 	bl	801e672 <memset>
  if (len >= 2) {
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	2b01      	cmp	r3, #1
 801ba86:	d953      	bls.n	801bb30 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	3301      	adds	r3, #1
 801ba8c:	781b      	ldrb	r3, [r3, #0]
 801ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba92:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	3301      	adds	r3, #1
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	b25b      	sxtb	r3, r3
 801ba9c:	115b      	asrs	r3, r3, #5
 801ba9e:	b25b      	sxtb	r3, r3
 801baa0:	f003 0304 	and.w	r3, r3, #4
 801baa4:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	781a      	ldrb	r2, [r3, #0]
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 801baae:	69fb      	ldr	r3, [r7, #28]
 801bab0:	2b7d      	cmp	r3, #125	@ 0x7d
 801bab2:	d80b      	bhi.n	801bacc <ws_process+0x68>
 801bab4:	68ba      	ldr	r2, [r7, #8]
 801bab6:	6a3b      	ldr	r3, [r7, #32]
 801bab8:	429a      	cmp	r2, r3
 801baba:	d307      	bcc.n	801bacc <ws_process+0x68>
      msg->data_len = n;
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	69fa      	ldr	r2, [r7, #28]
 801bac0:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 801bac2:	6a3b      	ldr	r3, [r7, #32]
 801bac4:	1c9a      	adds	r2, r3, #2
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	605a      	str	r2, [r3, #4]
 801baca:	e031      	b.n	801bb30 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 801bacc:	69fb      	ldr	r3, [r7, #28]
 801bace:	2b7e      	cmp	r3, #126	@ 0x7e
 801bad0:	d113      	bne.n	801bafa <ws_process+0x96>
 801bad2:	6a3b      	ldr	r3, [r7, #32]
 801bad4:	3304      	adds	r3, #4
 801bad6:	68ba      	ldr	r2, [r7, #8]
 801bad8:	429a      	cmp	r2, r3
 801bada:	d30e      	bcc.n	801bafa <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 801badc:	6a3b      	ldr	r3, [r7, #32]
 801bade:	1d1a      	adds	r2, r3, #4
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	3302      	adds	r3, #2
 801bae8:	781b      	ldrb	r3, [r3, #0]
 801baea:	021b      	lsls	r3, r3, #8
 801baec:	68fa      	ldr	r2, [r7, #12]
 801baee:	3203      	adds	r2, #3
 801baf0:	7812      	ldrb	r2, [r2, #0]
 801baf2:	431a      	orrs	r2, r3
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	609a      	str	r2, [r3, #8]
 801baf8:	e01a      	b.n	801bb30 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 801bafa:	6a3b      	ldr	r3, [r7, #32]
 801bafc:	330a      	adds	r3, #10
 801bafe:	68ba      	ldr	r2, [r7, #8]
 801bb00:	429a      	cmp	r2, r3
 801bb02:	d315      	bcc.n	801bb30 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 801bb04:	6a3b      	ldr	r3, [r7, #32]
 801bb06:	f103 020a 	add.w	r2, r3, #10
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	3302      	adds	r3, #2
 801bb12:	4618      	mov	r0, r3
 801bb14:	f7ff ff8a 	bl	801ba2c <be32>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	461c      	mov	r4, r3
 801bb1e:	4615      	mov	r5, r2
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	3306      	adds	r3, #6
 801bb24:	4618      	mov	r0, r3
 801bb26:	f7ff ff81 	bl	801ba2c <be32>
 801bb2a:	4602      	mov	r2, r0
      msg->data_len =
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	689b      	ldr	r3, [r3, #8]
 801bb34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bb38:	d901      	bls.n	801bb3e <ws_process+0xda>
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	e036      	b.n	801bbac <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	685a      	ldr	r2, [r3, #4]
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	689b      	ldr	r3, [r3, #8]
 801bb46:	4413      	add	r3, r2
 801bb48:	68ba      	ldr	r2, [r7, #8]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	d201      	bcs.n	801bb52 <ws_process+0xee>
 801bb4e:	2300      	movs	r3, #0
 801bb50:	e02c      	b.n	801bbac <ws_process+0x148>
  if (mask_len > 0) {
 801bb52:	6a3b      	ldr	r3, [r7, #32]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d024      	beq.n	801bba2 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	68fa      	ldr	r2, [r7, #12]
 801bb5e:	4413      	add	r3, r2
 801bb60:	61bb      	str	r3, [r7, #24]
 801bb62:	6a3b      	ldr	r3, [r7, #32]
 801bb64:	425b      	negs	r3, r3
 801bb66:	69ba      	ldr	r2, [r7, #24]
 801bb68:	4413      	add	r3, r2
 801bb6a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb70:	e012      	b.n	801bb98 <ws_process+0x134>
 801bb72:	69ba      	ldr	r2, [r7, #24]
 801bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb76:	4413      	add	r3, r2
 801bb78:	7819      	ldrb	r1, [r3, #0]
 801bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb7c:	f003 0303 	and.w	r3, r3, #3
 801bb80:	697a      	ldr	r2, [r7, #20]
 801bb82:	4413      	add	r3, r2
 801bb84:	781a      	ldrb	r2, [r3, #0]
 801bb86:	69b8      	ldr	r0, [r7, #24]
 801bb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb8a:	4403      	add	r3, r0
 801bb8c:	404a      	eors	r2, r1
 801bb8e:	b2d2      	uxtb	r2, r2
 801bb90:	701a      	strb	r2, [r3, #0]
 801bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb94:	3301      	adds	r3, #1
 801bb96:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	689b      	ldr	r3, [r3, #8]
 801bb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d3e7      	bcc.n	801bb72 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	685a      	ldr	r2, [r3, #4]
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	689b      	ldr	r3, [r3, #8]
 801bbaa:	4413      	add	r3, r2
}
 801bbac:	4618      	mov	r0, r3
 801bbae:	3728      	adds	r7, #40	@ 0x28
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	bdb0      	pop	{r4, r5, r7, pc}

0801bbb4 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 801bbb4:	b5b0      	push	{r4, r5, r7, lr}
 801bbb6:	b088      	sub	sp, #32
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	60f8      	str	r0, [r7, #12]
 801bbbc:	60b9      	str	r1, [r7, #8]
 801bbbe:	603b      	str	r3, [r7, #0]
 801bbc0:	4613      	mov	r3, r2
 801bbc2:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 801bbc8:	68bb      	ldr	r3, [r7, #8]
 801bbca:	b25b      	sxtb	r3, r3
 801bbcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bbd0:	b25b      	sxtb	r3, r3
 801bbd2:	b2da      	uxtb	r2, r3
 801bbd4:	683b      	ldr	r3, [r7, #0]
 801bbd6:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	2b7d      	cmp	r3, #125	@ 0x7d
 801bbdc:	d807      	bhi.n	801bbee <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	3301      	adds	r3, #1
 801bbe2:	68fa      	ldr	r2, [r7, #12]
 801bbe4:	b2d2      	uxtb	r2, r2
 801bbe6:	701a      	strb	r2, [r3, #0]
    n = 2;
 801bbe8:	2302      	movs	r3, #2
 801bbea:	61fb      	str	r3, [r7, #28]
 801bbec:	e038      	b.n	801bc60 <mkhdr+0xac>
  } else if (len < 65536) {
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bbf4:	d211      	bcs.n	801bc1a <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	b29b      	uxth	r3, r3
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	f7ff fe80 	bl	801b900 <mg_ntohs>
 801bc00:	4603      	mov	r3, r0
 801bc02:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 801bc04:	683b      	ldr	r3, [r7, #0]
 801bc06:	3301      	adds	r3, #1
 801bc08:	227e      	movs	r2, #126	@ 0x7e
 801bc0a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801bc0c:	683b      	ldr	r3, [r7, #0]
 801bc0e:	3302      	adds	r3, #2
 801bc10:	8b7a      	ldrh	r2, [r7, #26]
 801bc12:	801a      	strh	r2, [r3, #0]
    n = 4;
 801bc14:	2304      	movs	r3, #4
 801bc16:	61fb      	str	r3, [r7, #28]
 801bc18:	e022      	b.n	801bc60 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 801bc1a:	683b      	ldr	r3, [r7, #0]
 801bc1c:	3301      	adds	r3, #1
 801bc1e:	227f      	movs	r2, #127	@ 0x7f
 801bc20:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	2200      	movs	r2, #0
 801bc26:	461c      	mov	r4, r3
 801bc28:	4615      	mov	r5, r2
 801bc2a:	f04f 0200 	mov.w	r2, #0
 801bc2e:	f04f 0300 	mov.w	r3, #0
 801bc32:	002a      	movs	r2, r5
 801bc34:	2300      	movs	r3, #0
 801bc36:	4613      	mov	r3, r2
 801bc38:	4618      	mov	r0, r3
 801bc3a:	f7ff fe78 	bl	801b92e <mg_ntohl>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801bc42:	683b      	ldr	r3, [r7, #0]
 801bc44:	3302      	adds	r3, #2
 801bc46:	697a      	ldr	r2, [r7, #20]
 801bc48:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 801bc4a:	68f8      	ldr	r0, [r7, #12]
 801bc4c:	f7ff fe6f 	bl	801b92e <mg_ntohl>
 801bc50:	4603      	mov	r3, r0
 801bc52:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 801bc54:	683b      	ldr	r3, [r7, #0]
 801bc56:	3306      	adds	r3, #6
 801bc58:	697a      	ldr	r2, [r7, #20]
 801bc5a:	601a      	str	r2, [r3, #0]
    n = 10;
 801bc5c:	230a      	movs	r3, #10
 801bc5e:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 801bc60:	79fb      	ldrb	r3, [r7, #7]
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d012      	beq.n	801bc8c <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	3301      	adds	r3, #1
 801bc6a:	781a      	ldrb	r2, [r3, #0]
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	3301      	adds	r3, #1
 801bc70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801bc74:	b2d2      	uxtb	r2, r2
 801bc76:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 801bc78:	683a      	ldr	r2, [r7, #0]
 801bc7a:	69fb      	ldr	r3, [r7, #28]
 801bc7c:	4413      	add	r3, r2
 801bc7e:	2104      	movs	r1, #4
 801bc80:	4618      	mov	r0, r3
 801bc82:	f7e4 fcdb 	bl	800063c <mg_random>
    n += 4;
 801bc86:	69fb      	ldr	r3, [r7, #28]
 801bc88:	3304      	adds	r3, #4
 801bc8a:	61fb      	str	r3, [r7, #28]
  }
  return n;
 801bc8c:	69fb      	ldr	r3, [r7, #28]
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	3720      	adds	r7, #32
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bdb0      	pop	{r4, r5, r7, pc}

0801bc96 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 801bc96:	b480      	push	{r7}
 801bc98:	b087      	sub	sp, #28
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
 801bc9e:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801bca6:	f003 0302 	and.w	r3, r3, #2
 801bcaa:	b2db      	uxtb	r3, r3
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d028      	beq.n	801bd02 <mg_ws_mask+0x6c>
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d024      	beq.n	801bd02 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801bcc0:	683b      	ldr	r3, [r7, #0]
 801bcc2:	1acb      	subs	r3, r1, r3
 801bcc4:	4413      	add	r3, r2
 801bcc6:	613b      	str	r3, [r7, #16]
 801bcc8:	693b      	ldr	r3, [r7, #16]
 801bcca:	3b04      	subs	r3, #4
 801bccc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 801bcce:	2300      	movs	r3, #0
 801bcd0:	617b      	str	r3, [r7, #20]
 801bcd2:	e012      	b.n	801bcfa <mg_ws_mask+0x64>
 801bcd4:	693a      	ldr	r2, [r7, #16]
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	4413      	add	r3, r2
 801bcda:	7819      	ldrb	r1, [r3, #0]
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	f003 0303 	and.w	r3, r3, #3
 801bce2:	68fa      	ldr	r2, [r7, #12]
 801bce4:	4413      	add	r3, r2
 801bce6:	781a      	ldrb	r2, [r3, #0]
 801bce8:	6938      	ldr	r0, [r7, #16]
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	4403      	add	r3, r0
 801bcee:	404a      	eors	r2, r1
 801bcf0:	b2d2      	uxtb	r2, r2
 801bcf2:	701a      	strb	r2, [r3, #0]
 801bcf4:	697b      	ldr	r3, [r7, #20]
 801bcf6:	3301      	adds	r3, #1
 801bcf8:	617b      	str	r3, [r7, #20]
 801bcfa:	697a      	ldr	r2, [r7, #20]
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d3e8      	bcc.n	801bcd4 <mg_ws_mask+0x3e>
  }
}
 801bd02:	bf00      	nop
 801bd04:	371c      	adds	r7, #28
 801bd06:	46bd      	mov	sp, r7
 801bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0c:	4770      	bx	lr
	...

0801bd10 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b08a      	sub	sp, #40	@ 0x28
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	60f8      	str	r0, [r7, #12]
 801bd18:	60b9      	str	r1, [r7, #8]
 801bd1a:	607a      	str	r2, [r7, #4]
 801bd1c:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801bd24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bd28:	b2db      	uxtb	r3, r3
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	bf14      	ite	ne
 801bd2e:	2301      	movne	r3, #1
 801bd30:	2300      	moveq	r3, #0
 801bd32:	b2da      	uxtb	r2, r3
 801bd34:	f107 0314 	add.w	r3, r7, #20
 801bd38:	6839      	ldr	r1, [r7, #0]
 801bd3a:	6878      	ldr	r0, [r7, #4]
 801bd3c:	f7ff ff3a 	bl	801bbb4 <mkhdr>
 801bd40:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 801bd42:	f107 0314 	add.w	r3, r7, #20
 801bd46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bd48:	4619      	mov	r1, r3
 801bd4a:	68f8      	ldr	r0, [r7, #12]
 801bd4c:	f7f0 ff2c 	bl	800cba8 <mg_send>
 801bd50:	4603      	mov	r3, r0
 801bd52:	f083 0301 	eor.w	r3, r3, #1
 801bd56:	b2db      	uxtb	r3, r3
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d001      	beq.n	801bd60 <mg_ws_send+0x50>
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	e024      	b.n	801bdaa <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 801bd60:	687a      	ldr	r2, [r7, #4]
 801bd62:	68b9      	ldr	r1, [r7, #8]
 801bd64:	68f8      	ldr	r0, [r7, #12]
 801bd66:	f7f0 ff1f 	bl	800cba8 <mg_send>
 801bd6a:	4603      	mov	r3, r0
 801bd6c:	f083 0301 	eor.w	r3, r3, #1
 801bd70:	b2db      	uxtb	r3, r3
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d001      	beq.n	801bd7a <mg_ws_send+0x6a>
 801bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd78:	e017      	b.n	801bdaa <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 801bd7a:	4b0e      	ldr	r3, [pc, #56]	@ (801bdb4 <mg_ws_send+0xa4>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	2b03      	cmp	r3, #3
 801bd80:	dd0c      	ble.n	801bd9c <mg_ws_send+0x8c>
 801bd82:	4b0d      	ldr	r3, [pc, #52]	@ (801bdb8 <mg_ws_send+0xa8>)
 801bd84:	f644 423d 	movw	r2, #19517	@ 0x4c3d
 801bd88:	490c      	ldr	r1, [pc, #48]	@ (801bdbc <mg_ws_send+0xac>)
 801bd8a:	2004      	movs	r0, #4
 801bd8c:	f7ed fa0e 	bl	80091ac <mg_log_prefix>
 801bd90:	6879      	ldr	r1, [r7, #4]
 801bd92:	687a      	ldr	r2, [r7, #4]
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	480a      	ldr	r0, [pc, #40]	@ (801bdc0 <mg_ws_send+0xb0>)
 801bd98:	f7ed fa58 	bl	800924c <mg_log>
  mg_ws_mask(c, len);
 801bd9c:	6879      	ldr	r1, [r7, #4]
 801bd9e:	68f8      	ldr	r0, [r7, #12]
 801bda0:	f7ff ff79 	bl	801bc96 <mg_ws_mask>
  return header_len + len;
 801bda4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	4413      	add	r3, r2
}
 801bdaa:	4618      	mov	r0, r3
 801bdac:	3728      	adds	r7, #40	@ 0x28
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}
 801bdb2:	bf00      	nop
 801bdb4:	20000254 	.word	0x20000254
 801bdb8:	08022b20 	.word	0x08022b20
 801bdbc:	0801f338 	.word	0x0801f338
 801bdc0:	08021b48 	.word	0x08021b48

0801bdc4 <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 801bdca:	af00      	add	r7, sp, #0
 801bdcc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801bdd0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801bdd4:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 801bdd6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801bdda:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bde2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801bde6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bdee:	4619      	mov	r1, r3
 801bdf0:	4610      	mov	r0, r2
 801bdf2:	f7e9 fd5f 	bl	80058b4 <mg_http_get_request_len>
 801bdf6:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 801bdfa:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	da08      	bge.n	801be14 <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 801be02:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be06:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be0a:	4936      	ldr	r1, [pc, #216]	@ (801bee4 <mg_ws_client_handshake+0x120>)
 801be0c:	6818      	ldr	r0, [r3, #0]
 801be0e:	f7e8 f853 	bl	8003eb8 <mg_error>
 801be12:	e060      	b.n	801bed6 <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 801be14:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801be18:	2b00      	cmp	r3, #0
 801be1a:	dd5a      	ble.n	801bed2 <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 801be1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801be20:	2b0e      	cmp	r3, #14
 801be22:	dd0e      	ble.n	801be42 <mg_ws_client_handshake+0x7e>
 801be24:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be28:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be2c:	681b      	ldr	r3, [r3, #0]
 801be2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be30:	3309      	adds	r3, #9
 801be32:	2203      	movs	r2, #3
 801be34:	492c      	ldr	r1, [pc, #176]	@ (801bee8 <mg_ws_client_handshake+0x124>)
 801be36:	4618      	mov	r0, r3
 801be38:	f002 fbf1 	bl	801e61e <memcmp>
 801be3c:	4603      	mov	r3, r0
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d008      	beq.n	801be54 <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 801be42:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be46:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be4a:	4928      	ldr	r1, [pc, #160]	@ (801beec <mg_ws_client_handshake+0x128>)
 801be4c:	6818      	ldr	r0, [r3, #0]
 801be4e:	f7e8 f833 	bl	8003eb8 <mg_error>
 801be52:	e031      	b.n	801beb8 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 801be54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801be60:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be64:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801be6c:	f107 020c 	add.w	r2, r7, #12
 801be70:	4619      	mov	r1, r3
 801be72:	f7e9 ff29 	bl	8005cc8 <mg_http_parse>
 801be76:	4603      	mov	r3, r0
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d015      	beq.n	801bea8 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 801be7c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be80:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be84:	681a      	ldr	r2, [r3, #0]
 801be86:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801be8a:	f043 0302 	orr.w	r3, r3, #2
 801be8e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 801be92:	f107 020c 	add.w	r2, r7, #12
 801be96:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801be9a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801be9e:	210c      	movs	r1, #12
 801bea0:	6818      	ldr	r0, [r3, #0]
 801bea2:	f7e7 ffe8 	bl	8003e76 <mg_call>
 801bea6:	e007      	b.n	801beb8 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 801bea8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801beac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801beb0:	490e      	ldr	r1, [pc, #56]	@ (801beec <mg_ws_client_handshake+0x128>)
 801beb2:	6818      	ldr	r0, [r3, #0]
 801beb4:	f7e8 f800 	bl	8003eb8 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 801beb8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801bebc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	3338      	adds	r3, #56	@ 0x38
 801bec4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801bec8:	2100      	movs	r1, #0
 801beca:	4618      	mov	r0, r3
 801becc:	f7ec faa0 	bl	8008410 <mg_iobuf_del>
 801bed0:	e001      	b.n	801bed6 <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 801bed2:	2301      	movs	r3, #1
 801bed4:	e000      	b.n	801bed8 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 801bed6:	2300      	movs	r3, #0
}
 801bed8:	4618      	mov	r0, r3
 801beda:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 801bede:	46bd      	mov	sp, r7
 801bee0:	bd80      	pop	{r7, pc}
 801bee2:	bf00      	nop
 801bee4:	08021b5c 	.word	0x08021b5c
 801bee8:	08021b68 	.word	0x08021b68
 801beec:	08021b6c 	.word	0x08021b6c

0801bef0 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 801bef0:	b580      	push	{r7, lr}
 801bef2:	b090      	sub	sp, #64	@ 0x40
 801bef4:	af00      	add	r7, sp, #0
 801bef6:	6178      	str	r0, [r7, #20]
 801bef8:	6139      	str	r1, [r7, #16]
 801befa:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 801befc:	697b      	ldr	r3, [r7, #20]
 801befe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801bf02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 801bf04:	693b      	ldr	r3, [r7, #16]
 801bf06:	2b07      	cmp	r3, #7
 801bf08:	f040 8139 	bne.w	801c17e <mg_ws_cb+0x28e>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801bf12:	f003 0302 	and.w	r3, r3, #2
 801bf16:	b2db      	uxtb	r3, r3
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	f000 811d 	beq.w	801c158 <mg_ws_cb+0x268>
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801bf24:	f003 0302 	and.w	r3, r3, #2
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	f040 8114 	bne.w	801c158 <mg_ws_cb+0x268>
 801bf30:	6978      	ldr	r0, [r7, #20]
 801bf32:	f7ff ff47 	bl	801bdc4 <mg_ws_client_handshake>
 801bf36:	4603      	mov	r3, r0
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	f040 811f 	bne.w	801c17c <mg_ws_cb+0x28c>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801bf3e:	e10b      	b.n	801c158 <mg_ws_cb+0x268>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bf44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bf46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf48:	440b      	add	r3, r1
 801bf4a:	4413      	add	r3, r2
 801bf4c:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 801bf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf50:	61bb      	str	r3, [r7, #24]
 801bf52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf54:	61fb      	str	r3, [r7, #28]
 801bf56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bf5a:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 801bf5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bf60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf62:	4413      	add	r3, r2
 801bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 801bf66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bf6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801bf6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801bf72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bf76:	f003 030f 	and.w	r3, r3, #15
 801bf7a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 801bf7e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801bf82:	2b0a      	cmp	r3, #10
 801bf84:	d877      	bhi.n	801c076 <mg_ws_cb+0x186>
 801bf86:	a201      	add	r2, pc, #4	@ (adr r2, 801bf8c <mg_ws_cb+0x9c>)
 801bf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf8c:	0801bfb9 	.word	0x0801bfb9
 801bf90:	0801c013 	.word	0x0801c013
 801bf94:	0801c013 	.word	0x0801c013
 801bf98:	0801c077 	.word	0x0801c077
 801bf9c:	0801c077 	.word	0x0801c077
 801bfa0:	0801c077 	.word	0x0801c077
 801bfa4:	0801c077 	.word	0x0801c077
 801bfa8:	0801c077 	.word	0x0801c077
 801bfac:	0801c02b 	.word	0x0801c02b
 801bfb0:	0801bfc9 	.word	0x0801bfc9
 801bfb4:	0801c003 	.word	0x0801c003
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 801bfb8:	f107 0318 	add.w	r3, r7, #24
 801bfbc:	461a      	mov	r2, r3
 801bfbe:	210e      	movs	r1, #14
 801bfc0:	6978      	ldr	r0, [r7, #20]
 801bfc2:	f7e7 ff58 	bl	8003e76 <mg_call>
          break;
 801bfc6:	e05f      	b.n	801c088 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 801bfc8:	4b6e      	ldr	r3, [pc, #440]	@ (801c184 <mg_ws_cb+0x294>)
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	2b02      	cmp	r3, #2
 801bfce:	dd0a      	ble.n	801bfe6 <mg_ws_cb+0xf6>
 801bfd0:	4b6d      	ldr	r3, [pc, #436]	@ (801c188 <mg_ws_cb+0x298>)
 801bfd2:	f644 426d 	movw	r2, #19565	@ 0x4c6d
 801bfd6:	496d      	ldr	r1, [pc, #436]	@ (801c18c <mg_ws_cb+0x29c>)
 801bfd8:	2003      	movs	r0, #3
 801bfda:	f7ed f8e7 	bl	80091ac <mg_log_prefix>
 801bfde:	496c      	ldr	r1, [pc, #432]	@ (801c190 <mg_ws_cb+0x2a0>)
 801bfe0:	486c      	ldr	r0, [pc, #432]	@ (801c194 <mg_ws_cb+0x2a4>)
 801bfe2:	f7ed f933 	bl	800924c <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 801bfe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bfe8:	230a      	movs	r3, #10
 801bfea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bfec:	6978      	ldr	r0, [r7, #20]
 801bfee:	f7ff fe8f 	bl	801bd10 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 801bff2:	f107 0318 	add.w	r3, r7, #24
 801bff6:	461a      	mov	r2, r3
 801bff8:	210e      	movs	r1, #14
 801bffa:	6978      	ldr	r0, [r7, #20]
 801bffc:	f7e7 ff3b 	bl	8003e76 <mg_call>
          break;
 801c000:	e042      	b.n	801c088 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 801c002:	f107 0318 	add.w	r3, r7, #24
 801c006:	461a      	mov	r2, r3
 801c008:	210e      	movs	r1, #14
 801c00a:	6978      	ldr	r0, [r7, #20]
 801c00c:	f7e7 ff33 	bl	8003e76 <mg_call>
          break;
 801c010:	e03a      	b.n	801c088 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 801c012:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801c016:	2b00      	cmp	r3, #0
 801c018:	d035      	beq.n	801c086 <mg_ws_cb+0x196>
 801c01a:	f107 0318 	add.w	r3, r7, #24
 801c01e:	461a      	mov	r2, r3
 801c020:	210d      	movs	r1, #13
 801c022:	6978      	ldr	r0, [r7, #20]
 801c024:	f7e7 ff27 	bl	8003e76 <mg_call>
          break;
 801c028:	e02d      	b.n	801c086 <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 801c02a:	4b56      	ldr	r3, [pc, #344]	@ (801c184 <mg_ws_cb+0x294>)
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	2b02      	cmp	r3, #2
 801c030:	dd0c      	ble.n	801c04c <mg_ws_cb+0x15c>
 801c032:	4b55      	ldr	r3, [pc, #340]	@ (801c188 <mg_ws_cb+0x298>)
 801c034:	f644 4279 	movw	r2, #19577	@ 0x4c79
 801c038:	4954      	ldr	r1, [pc, #336]	@ (801c18c <mg_ws_cb+0x29c>)
 801c03a:	2003      	movs	r0, #3
 801c03c:	f7ed f8b6 	bl	80091ac <mg_log_prefix>
 801c040:	697b      	ldr	r3, [r7, #20]
 801c042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c044:	4619      	mov	r1, r3
 801c046:	4854      	ldr	r0, [pc, #336]	@ (801c198 <mg_ws_cb+0x2a8>)
 801c048:	f7ed f900 	bl	800924c <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 801c04c:	f107 0318 	add.w	r3, r7, #24
 801c050:	461a      	mov	r2, r3
 801c052:	210e      	movs	r1, #14
 801c054:	6978      	ldr	r0, [r7, #20]
 801c056:	f7e7 ff0e 	bl	8003e76 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 801c05a:	69b9      	ldr	r1, [r7, #24]
 801c05c:	69fa      	ldr	r2, [r7, #28]
 801c05e:	2308      	movs	r3, #8
 801c060:	6978      	ldr	r0, [r7, #20]
 801c062:	f7ff fe55 	bl	801bd10 <mg_ws_send>
          c->is_draining = 1;
 801c066:	697a      	ldr	r2, [r7, #20]
 801c068:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c06c:	f043 0310 	orr.w	r3, r3, #16
 801c070:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 801c074:	e008      	b.n	801c088 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 801c076:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801c07a:	461a      	mov	r2, r3
 801c07c:	4947      	ldr	r1, [pc, #284]	@ (801c19c <mg_ws_cb+0x2ac>)
 801c07e:	6978      	ldr	r0, [r7, #20]
 801c080:	f7e7 ff1a 	bl	8003eb8 <mg_error>
          break;
 801c084:	e000      	b.n	801c088 <mg_ws_cb+0x198>
          break;
 801c086:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 801c088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d003      	beq.n	801c098 <mg_ws_cb+0x1a8>
 801c090:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801c094:	2b00      	cmp	r3, #0
 801c096:	d11f      	bne.n	801c0d8 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 801c098:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d008      	beq.n	801c0b2 <mg_ws_cb+0x1c2>
 801c0a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c0a2:	3301      	adds	r3, #1
 801c0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ae:	3b01      	subs	r3, #1
 801c0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 801c0b2:	697b      	ldr	r3, [r7, #20]
 801c0b4:	3338      	adds	r3, #56	@ 0x38
 801c0b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c0b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7ec f9a8 	bl	8008410 <mg_iobuf_del>
        len -= msg.header_len;
 801c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c0c4:	1ad3      	subs	r3, r2, r3
 801c0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 801c0c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0cc:	4413      	add	r3, r2
 801c0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 801c0d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c0d2:	697b      	ldr	r3, [r7, #20]
 801c0d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 801c0d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d00a      	beq.n	801c0f6 <mg_ws_cb+0x206>
 801c0e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d006      	beq.n	801c0f6 <mg_ws_cb+0x206>
 801c0e8:	697b      	ldr	r3, [r7, #20]
 801c0ea:	3338      	adds	r3, #56	@ 0x38
 801c0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c0ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	f7ec f98d 	bl	8008410 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op) {
 801c0f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d02c      	beq.n	801c158 <mg_ws_cb+0x268>
 801c0fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801c102:	2b00      	cmp	r3, #0
 801c104:	d128      	bne.n	801c158 <mg_ws_cb+0x268>
        m.flags = c->recv.buf[0];
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c10a:	781b      	ldrb	r3, [r3, #0]
 801c10c:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 801c110:	697b      	ldr	r3, [r7, #20]
 801c112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c114:	1c59      	adds	r1, r3, #1
 801c116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c118:	1e5a      	subs	r2, r3, #1
 801c11a:	463b      	mov	r3, r7
 801c11c:	4618      	mov	r0, r3
 801c11e:	f7f4 fa30 	bl	8010582 <mg_str_n>
 801c122:	f107 0318 	add.w	r3, r7, #24
 801c126:	463a      	mov	r2, r7
 801c128:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c12c:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 801c130:	f107 0318 	add.w	r3, r7, #24
 801c134:	461a      	mov	r2, r3
 801c136:	210d      	movs	r1, #13
 801c138:	6978      	ldr	r0, [r7, #20]
 801c13a:	f7e7 fe9c 	bl	8003e76 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 801c13e:	697b      	ldr	r3, [r7, #20]
 801c140:	3338      	adds	r3, #56	@ 0x38
 801c142:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c144:	2100      	movs	r1, #0
 801c146:	4618      	mov	r0, r3
 801c148:	f7ec f962 	bl	8008410 <mg_iobuf_del>
        ofs = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 801c150:	697b      	ldr	r3, [r7, #20]
 801c152:	2200      	movs	r2, #0
 801c154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c15e:	18d0      	adds	r0, r2, r3
 801c160:	697b      	ldr	r3, [r7, #20]
 801c162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801c164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c166:	1ad3      	subs	r3, r2, r3
 801c168:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801c16c:	4619      	mov	r1, r3
 801c16e:	f7ff fc79 	bl	801ba64 <ws_process>
 801c172:	4603      	mov	r3, r0
 801c174:	2b00      	cmp	r3, #0
 801c176:	f47f aee3 	bne.w	801bf40 <mg_ws_cb+0x50>
 801c17a:	e000      	b.n	801c17e <mg_ws_cb+0x28e>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801c17c:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801c17e:	3740      	adds	r7, #64	@ 0x40
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}
 801c184:	20000254 	.word	0x20000254
 801c188:	08022b2c 	.word	0x08022b2c
 801c18c:	0801f338 	.word	0x0801f338
 801c190:	08021b80 	.word	0x08021b80
 801c194:	0801f598 	.word	0x0801f598
 801c198:	08021b88 	.word	0x08021b88
 801c19c:	08021b98 	.word	0x08021b98

0801c1a0 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 801c1a0:	b40c      	push	{r2, r3}
 801c1a2:	b580      	push	{r7, lr}
 801c1a4:	b088      	sub	sp, #32
 801c1a6:	af02      	add	r7, sp, #8
 801c1a8:	6078      	str	r0, [r7, #4]
 801c1aa:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 801c1ac:	4924      	ldr	r1, [pc, #144]	@ (801c240 <mg_ws_upgrade+0xa0>)
 801c1ae:	6838      	ldr	r0, [r7, #0]
 801c1b0:	f7e9 fbce 	bl	8005950 <mg_http_get_header>
 801c1b4:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	4a22      	ldr	r2, [pc, #136]	@ (801c244 <mg_ws_upgrade+0xa4>)
 801c1ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d10e      	bne.n	801c1ea <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 801c1cc:	4b1e      	ldr	r3, [pc, #120]	@ (801c248 <mg_ws_upgrade+0xa8>)
 801c1ce:	4a1f      	ldr	r2, [pc, #124]	@ (801c24c <mg_ws_upgrade+0xac>)
 801c1d0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801c1d4:	6878      	ldr	r0, [r7, #4]
 801c1d6:	f7ea fc31 	bl	8006a3c <mg_http_reply>
    c->is_draining = 1;
 801c1da:	687a      	ldr	r2, [r7, #4]
 801c1dc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c1e0:	f043 0310 	orr.w	r3, r3, #16
 801c1e4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 801c1e8:	e023      	b.n	801c232 <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 801c1ea:	4919      	ldr	r1, [pc, #100]	@ (801c250 <mg_ws_upgrade+0xb0>)
 801c1ec:	6838      	ldr	r0, [r7, #0]
 801c1ee:	f7e9 fbaf 	bl	8005950 <mg_http_get_header>
 801c1f2:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 801c1f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c1f8:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 801c1fa:	f107 030c 	add.w	r3, r7, #12
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	6a3b      	ldr	r3, [r7, #32]
 801c202:	693a      	ldr	r2, [r7, #16]
 801c204:	6979      	ldr	r1, [r7, #20]
 801c206:	6878      	ldr	r0, [r7, #4]
 801c208:	f7ff fbac 	bl	801b964 <ws_handshake>
    c->is_websocket = 1;
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c212:	f043 0302 	orr.w	r3, r3, #2
 801c216:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 801c21a:	687a      	ldr	r2, [r7, #4]
 801c21c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 801c220:	f023 0301 	bic.w	r3, r3, #1
 801c224:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 801c228:	683a      	ldr	r2, [r7, #0]
 801c22a:	210c      	movs	r1, #12
 801c22c:	6878      	ldr	r0, [r7, #4]
 801c22e:	f7e7 fe22 	bl	8003e76 <mg_call>
}
 801c232:	bf00      	nop
 801c234:	3718      	adds	r7, #24
 801c236:	46bd      	mov	sp, r7
 801c238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c23c:	b002      	add	sp, #8
 801c23e:	4770      	bx	lr
 801c240:	08021c28 	.word	0x08021c28
 801c244:	0801bef1 	.word	0x0801bef1
 801c248:	08021c3c 	.word	0x08021c3c
 801c24c:	0801fb0c 	.word	0x0801fb0c
 801c250:	08021c54 	.word	0x08021c54

0801c254 <mg_phy_id_to_str>:
  MG_PHY_LAN87x_REG_SCSR = 31,
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	4603      	mov	r3, r0
 801c25c:	460a      	mov	r2, r1
 801c25e:	80fb      	strh	r3, [r7, #6]
 801c260:	4613      	mov	r3, r2
 801c262:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 801c264:	88fb      	ldrh	r3, [r7, #6]
 801c266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c26a:	d00b      	beq.n	801c284 <mg_phy_id_to_str+0x30>
 801c26c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c270:	dc28      	bgt.n	801c2c4 <mg_phy_id_to_str+0x70>
 801c272:	2b22      	cmp	r3, #34	@ 0x22
 801c274:	d020      	beq.n	801c2b8 <mg_phy_id_to_str+0x64>
 801c276:	2b22      	cmp	r3, #34	@ 0x22
 801c278:	dc24      	bgt.n	801c2c4 <mg_phy_id_to_str+0x70>
 801c27a:	2b07      	cmp	r3, #7
 801c27c:	d01e      	beq.n	801c2bc <mg_phy_id_to_str+0x68>
 801c27e:	2b1c      	cmp	r3, #28
 801c280:	d01e      	beq.n	801c2c0 <mg_phy_id_to_str+0x6c>
 801c282:	e01f      	b.n	801c2c4 <mg_phy_id_to_str+0x70>
    case MG_PHY_DP83x:
      switch (id2) {
 801c284:	88bb      	ldrh	r3, [r7, #4]
 801c286:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801c28a:	4293      	cmp	r3, r2
 801c28c:	d00c      	beq.n	801c2a8 <mg_phy_id_to_str+0x54>
 801c28e:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801c292:	4293      	cmp	r3, r2
 801c294:	dc0e      	bgt.n	801c2b4 <mg_phy_id_to_str+0x60>
 801c296:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 801c29a:	4293      	cmp	r3, r2
 801c29c:	d006      	beq.n	801c2ac <mg_phy_id_to_str+0x58>
 801c29e:	f24a 1240 	movw	r2, #41280	@ 0xa140
 801c2a2:	4293      	cmp	r3, r2
 801c2a4:	d004      	beq.n	801c2b0 <mg_phy_id_to_str+0x5c>
 801c2a6:	e005      	b.n	801c2b4 <mg_phy_id_to_str+0x60>
        case MG_PHY_DP83867:
          return "DP83867";
 801c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d4 <mg_phy_id_to_str+0x80>)
 801c2aa:	e00c      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83848:
          return "DP83848";
 801c2ac:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d8 <mg_phy_id_to_str+0x84>)
 801c2ae:	e00a      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
        case MG_PHY_DP83825:
          return "DP83825";
 801c2b0:	4b0a      	ldr	r3, [pc, #40]	@ (801c2dc <mg_phy_id_to_str+0x88>)
 801c2b2:	e008      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
        default:
          return "DP83x";
 801c2b4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2e0 <mg_phy_id_to_str+0x8c>)
 801c2b6:	e006      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 801c2b8:	4b0a      	ldr	r3, [pc, #40]	@ (801c2e4 <mg_phy_id_to_str+0x90>)
 801c2ba:	e004      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
    case MG_PHY_LAN87x:
      return "LAN87x";
 801c2bc:	4b0a      	ldr	r3, [pc, #40]	@ (801c2e8 <mg_phy_id_to_str+0x94>)
 801c2be:	e002      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
    case MG_PHY_RTL8201:
      return "RTL8201";
 801c2c0:	4b0a      	ldr	r3, [pc, #40]	@ (801c2ec <mg_phy_id_to_str+0x98>)
 801c2c2:	e000      	b.n	801c2c6 <mg_phy_id_to_str+0x72>
    default:
      return "unknown";
 801c2c4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2f0 <mg_phy_id_to_str+0x9c>)
  }
  (void) id2;
}
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	370c      	adds	r7, #12
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d0:	4770      	bx	lr
 801c2d2:	bf00      	nop
 801c2d4:	08021c6c 	.word	0x08021c6c
 801c2d8:	08021c74 	.word	0x08021c74
 801c2dc:	08021c7c 	.word	0x08021c7c
 801c2e0:	08021c84 	.word	0x08021c84
 801c2e4:	08021c8c 	.word	0x08021c8c
 801c2e8:	08021c94 	.word	0x08021c94
 801c2ec:	08021c9c 	.word	0x08021c9c
 801c2f0:	08021ca4 	.word	0x08021ca4

0801c2f4 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 801c2f4:	b5b0      	push	{r4, r5, r7, lr}
 801c2f6:	b084      	sub	sp, #16
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
 801c2fc:	460b      	mov	r3, r1
 801c2fe:	70fb      	strb	r3, [r7, #3]
 801c300:	4613      	mov	r3, r2
 801c302:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	685b      	ldr	r3, [r3, #4]
 801c308:	78f8      	ldrb	r0, [r7, #3]
 801c30a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c30e:	2100      	movs	r1, #0
 801c310:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 801c312:	bf00      	nop
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	78fa      	ldrb	r2, [r7, #3]
 801c31a:	2100      	movs	r1, #0
 801c31c:	4610      	mov	r0, r2
 801c31e:	4798      	blx	r3
 801c320:	4603      	mov	r3, r0
 801c322:	b21b      	sxth	r3, r3
 801c324:	2b00      	cmp	r3, #0
 801c326:	dbf5      	blt.n	801c314 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	681b      	ldr	r3, [r3, #0]
 801c32c:	78fa      	ldrb	r2, [r7, #3]
 801c32e:	2102      	movs	r1, #2
 801c330:	4610      	mov	r0, r2
 801c332:	4798      	blx	r3
 801c334:	4603      	mov	r3, r0
 801c336:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	78fa      	ldrb	r2, [r7, #3]
 801c33e:	2103      	movs	r1, #3
 801c340:	4610      	mov	r0, r2
 801c342:	4798      	blx	r3
 801c344:	4603      	mov	r3, r0
 801c346:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 801c348:	4b42      	ldr	r3, [pc, #264]	@ (801c454 <mg_phy_init+0x160>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	2b01      	cmp	r3, #1
 801c34e:	dd14      	ble.n	801c37a <mg_phy_init+0x86>
 801c350:	4b41      	ldr	r3, [pc, #260]	@ (801c458 <mg_phy_init+0x164>)
 801c352:	f245 3202 	movw	r2, #21250	@ 0x5302
 801c356:	4941      	ldr	r1, [pc, #260]	@ (801c45c <mg_phy_init+0x168>)
 801c358:	2002      	movs	r0, #2
 801c35a:	f7ec ff27 	bl	80091ac <mg_log_prefix>
 801c35e:	89fc      	ldrh	r4, [r7, #14]
 801c360:	89bd      	ldrh	r5, [r7, #12]
 801c362:	89ba      	ldrh	r2, [r7, #12]
 801c364:	89fb      	ldrh	r3, [r7, #14]
 801c366:	4611      	mov	r1, r2
 801c368:	4618      	mov	r0, r3
 801c36a:	f7ff ff73 	bl	801c254 <mg_phy_id_to_str>
 801c36e:	4603      	mov	r3, r0
 801c370:	462a      	mov	r2, r5
 801c372:	4621      	mov	r1, r4
 801c374:	483a      	ldr	r0, [pc, #232]	@ (801c460 <mg_phy_init+0x16c>)
 801c376:	f7ec ff69 	bl	800924c <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 801c37a:	89fb      	ldrh	r3, [r7, #14]
 801c37c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c380:	d11f      	bne.n	801c3c2 <mg_phy_init+0xce>
 801c382:	89bb      	ldrh	r3, [r7, #12]
 801c384:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801c388:	4293      	cmp	r3, r2
 801c38a:	d11a      	bne.n	801c3c2 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	685b      	ldr	r3, [r3, #4]
 801c390:	78f8      	ldrb	r0, [r7, #3]
 801c392:	221f      	movs	r2, #31
 801c394:	210d      	movs	r1, #13
 801c396:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	685b      	ldr	r3, [r3, #4]
 801c39c:	78f8      	ldrb	r0, [r7, #3]
 801c39e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801c3a2:	210e      	movs	r1, #14
 801c3a4:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	78f8      	ldrb	r0, [r7, #3]
 801c3ac:	f244 021f 	movw	r2, #16415	@ 0x401f
 801c3b0:	210d      	movs	r1, #13
 801c3b2:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	685b      	ldr	r3, [r3, #4]
 801c3b8:	78f8      	ldrb	r0, [r7, #3]
 801c3ba:	f240 120d 	movw	r2, #269	@ 0x10d
 801c3be:	210e      	movs	r1, #14
 801c3c0:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 801c3c2:	78bb      	ldrb	r3, [r7, #2]
 801c3c4:	f003 0302 	and.w	r3, r3, #2
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d12e      	bne.n	801c42a <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 801c3cc:	89fb      	ldrh	r3, [r7, #14]
 801c3ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c3d2:	d110      	bne.n	801c3f6 <mg_phy_init+0x102>
 801c3d4:	89bb      	ldrh	r3, [r7, #12]
 801c3d6:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801c3da:	4293      	cmp	r3, r2
 801c3dc:	d00b      	beq.n	801c3f6 <mg_phy_init+0x102>
 801c3de:	89bb      	ldrh	r3, [r7, #12]
 801c3e0:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 801c3e4:	4293      	cmp	r3, r2
 801c3e6:	d006      	beq.n	801c3f6 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	685b      	ldr	r3, [r3, #4]
 801c3ec:	78f8      	ldrb	r0, [r7, #3]
 801c3ee:	2281      	movs	r2, #129	@ 0x81
 801c3f0:	2117      	movs	r1, #23
 801c3f2:	4798      	blx	r3
 801c3f4:	e019      	b.n	801c42a <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 801c3f6:	89fb      	ldrh	r3, [r7, #14]
 801c3f8:	2b22      	cmp	r3, #34	@ 0x22
 801c3fa:	d116      	bne.n	801c42a <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	78fa      	ldrb	r2, [r7, #3]
 801c406:	2100      	movs	r1, #0
 801c408:	4610      	mov	r0, r2
 801c40a:	4798      	blx	r3
 801c40c:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 801c40e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801c412:	b29a      	uxth	r2, r3
 801c414:	78fb      	ldrb	r3, [r7, #3]
 801c416:	2100      	movs	r1, #0
 801c418:	4618      	mov	r0, r3
 801c41a:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	685b      	ldr	r3, [r3, #4]
 801c420:	78f8      	ldrb	r0, [r7, #3]
 801c422:	f248 1280 	movw	r2, #33152	@ 0x8180
 801c426:	211f      	movs	r1, #31
 801c428:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 801c42a:	78bb      	ldrb	r3, [r7, #2]
 801c42c:	f003 0301 	and.w	r3, r3, #1
 801c430:	2b00      	cmp	r3, #0
 801c432:	d00a      	beq.n	801c44a <mg_phy_init+0x156>
 801c434:	89fb      	ldrh	r3, [r7, #14]
 801c436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c43a:	d106      	bne.n	801c44a <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	685b      	ldr	r3, [r3, #4]
 801c440:	78f8      	ldrb	r0, [r7, #3]
 801c442:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c446:	2118      	movs	r1, #24
 801c448:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 801c44a:	bf00      	nop
 801c44c:	3710      	adds	r7, #16
 801c44e:	46bd      	mov	sp, r7
 801c450:	bdb0      	pop	{r4, r5, r7, pc}
 801c452:	bf00      	nop
 801c454:	20000254 	.word	0x20000254
 801c458:	08022b38 	.word	0x08022b38
 801c45c:	0801f338 	.word	0x0801f338
 801c460:	08021cac 	.word	0x08021cac

0801c464 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 801c464:	b580      	push	{r7, lr}
 801c466:	b08a      	sub	sp, #40	@ 0x28
 801c468:	af00      	add	r7, sp, #0
 801c46a:	60f8      	str	r0, [r7, #12]
 801c46c:	607a      	str	r2, [r7, #4]
 801c46e:	603b      	str	r3, [r7, #0]
 801c470:	460b      	mov	r3, r1
 801c472:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 801c474:	2300      	movs	r3, #0
 801c476:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	7afa      	ldrb	r2, [r7, #11]
 801c480:	2101      	movs	r1, #1
 801c482:	4610      	mov	r0, r2
 801c484:	4798      	blx	r3
 801c486:	4603      	mov	r3, r0
 801c488:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 801c48a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c48c:	f003 0320 	and.w	r3, r3, #32
 801c490:	2b00      	cmp	r3, #0
 801c492:	d00c      	beq.n	801c4ae <mg_phy_up+0x4a>
 801c494:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c496:	f003 0304 	and.w	r3, r3, #4
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d107      	bne.n	801c4ae <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	7afa      	ldrb	r2, [r7, #11]
 801c4a4:	2101      	movs	r1, #1
 801c4a6:	4610      	mov	r0, r2
 801c4a8:	4798      	blx	r3
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 801c4ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c4b0:	f003 0304 	and.w	r3, r3, #4
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	bf14      	ite	ne
 801c4b8:	2301      	movne	r3, #1
 801c4ba:	2300      	moveq	r3, #0
 801c4bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 801c4c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f000 80bc 	beq.w	801c642 <mg_phy_up+0x1de>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	f000 80b8 	beq.w	801c642 <mg_phy_up+0x1de>
 801c4d2:	683b      	ldr	r3, [r7, #0]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	f000 80b4 	beq.w	801c642 <mg_phy_up+0x1de>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	7afa      	ldrb	r2, [r7, #11]
 801c4e0:	2102      	movs	r1, #2
 801c4e2:	4610      	mov	r0, r2
 801c4e4:	4798      	blx	r3
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 801c4ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c4ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c4f0:	d14b      	bne.n	801c58a <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	7afa      	ldrb	r2, [r7, #11]
 801c4f8:	2103      	movs	r1, #3
 801c4fa:	4610      	mov	r0, r2
 801c4fc:	4798      	blx	r3
 801c4fe:	4603      	mov	r3, r0
 801c500:	837b      	strh	r3, [r7, #26]
      if (id2 == MG_PHY_DP83867) {
 801c502:	8b7b      	ldrh	r3, [r7, #26]
 801c504:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801c508:	4293      	cmp	r3, r2
 801c50a:	d120      	bne.n	801c54e <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	7afa      	ldrb	r2, [r7, #11]
 801c512:	2111      	movs	r1, #17
 801c514:	4610      	mov	r0, r2
 801c516:	4798      	blx	r3
 801c518:	4603      	mov	r3, r0
 801c51a:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(13);
 801c51c:	8afb      	ldrh	r3, [r7, #22]
 801c51e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c522:	2b00      	cmp	r3, #0
 801c524:	bf14      	ite	ne
 801c526:	2301      	movne	r3, #1
 801c528:	2300      	moveq	r3, #0
 801c52a:	b2da      	uxtb	r2, r3
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 801c530:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c534:	2b00      	cmp	r3, #0
 801c536:	db06      	blt.n	801c546 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 801c538:	8afb      	ldrh	r3, [r7, #22]
 801c53a:	0b9b      	lsrs	r3, r3, #14
 801c53c:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 801c53e:	f003 0301 	and.w	r3, r3, #1
 801c542:	b2da      	uxtb	r2, r3
 801c544:	e000      	b.n	801c548 <mg_phy_up+0xe4>
 801c546:	2202      	movs	r2, #2
 801c548:	683b      	ldr	r3, [r7, #0]
 801c54a:	701a      	strb	r2, [r3, #0]
 801c54c:	e079      	b.n	801c642 <mg_phy_up+0x1de>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	7afa      	ldrb	r2, [r7, #11]
 801c554:	2110      	movs	r1, #16
 801c556:	4610      	mov	r0, r2
 801c558:	4798      	blx	r3
 801c55a:	4603      	mov	r3, r0
 801c55c:	833b      	strh	r3, [r7, #24]
        *full_duplex = physts & MG_BIT(2);
 801c55e:	8b3b      	ldrh	r3, [r7, #24]
 801c560:	f003 0304 	and.w	r3, r3, #4
 801c564:	2b00      	cmp	r3, #0
 801c566:	bf14      	ite	ne
 801c568:	2301      	movne	r3, #1
 801c56a:	2300      	moveq	r3, #0
 801c56c:	b2da      	uxtb	r2, r3
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 801c572:	8b3b      	ldrh	r3, [r7, #24]
 801c574:	f003 0302 	and.w	r3, r3, #2
 801c578:	2b00      	cmp	r3, #0
 801c57a:	bf0c      	ite	eq
 801c57c:	2301      	moveq	r3, #1
 801c57e:	2300      	movne	r3, #0
 801c580:	b2db      	uxtb	r3, r3
 801c582:	461a      	mov	r2, r3
 801c584:	683b      	ldr	r3, [r7, #0]
 801c586:	701a      	strb	r2, [r3, #0]
 801c588:	e05b      	b.n	801c642 <mg_phy_up+0x1de>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 801c58a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c58c:	2b22      	cmp	r3, #34	@ 0x22
 801c58e:	d11d      	bne.n	801c5cc <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	681b      	ldr	r3, [r3, #0]
 801c594:	7afa      	ldrb	r2, [r7, #11]
 801c596:	211e      	movs	r1, #30
 801c598:	4610      	mov	r0, r2
 801c59a:	4798      	blx	r3
 801c59c:	4603      	mov	r3, r0
 801c59e:	83bb      	strh	r3, [r7, #28]
      *full_duplex = pc1r & MG_BIT(2);
 801c5a0:	8bbb      	ldrh	r3, [r7, #28]
 801c5a2:	f003 0304 	and.w	r3, r3, #4
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	bf14      	ite	ne
 801c5aa:	2301      	movne	r3, #1
 801c5ac:	2300      	moveq	r3, #0
 801c5ae:	b2da      	uxtb	r2, r3
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 801c5b4:	8bbb      	ldrh	r3, [r7, #28]
 801c5b6:	f003 0303 	and.w	r3, r3, #3
 801c5ba:	2b01      	cmp	r3, #1
 801c5bc:	bf14      	ite	ne
 801c5be:	2301      	movne	r3, #1
 801c5c0:	2300      	moveq	r3, #0
 801c5c2:	b2db      	uxtb	r3, r3
 801c5c4:	461a      	mov	r2, r3
 801c5c6:	683b      	ldr	r3, [r7, #0]
 801c5c8:	701a      	strb	r2, [r3, #0]
 801c5ca:	e03a      	b.n	801c642 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_LAN87x) {
 801c5cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c5ce:	2b07      	cmp	r3, #7
 801c5d0:	d11a      	bne.n	801c608 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	7afa      	ldrb	r2, [r7, #11]
 801c5d8:	211f      	movs	r1, #31
 801c5da:	4610      	mov	r0, r2
 801c5dc:	4798      	blx	r3
 801c5de:	4603      	mov	r3, r0
 801c5e0:	83fb      	strh	r3, [r7, #30]
      *full_duplex = scsr & MG_BIT(4);
 801c5e2:	8bfb      	ldrh	r3, [r7, #30]
 801c5e4:	f003 0310 	and.w	r3, r3, #16
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	bf14      	ite	ne
 801c5ec:	2301      	movne	r3, #1
 801c5ee:	2300      	moveq	r3, #0
 801c5f0:	b2da      	uxtb	r2, r3
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 801c5f6:	8bfb      	ldrh	r3, [r7, #30]
 801c5f8:	08db      	lsrs	r3, r3, #3
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	f003 0301 	and.w	r3, r3, #1
 801c600:	b2da      	uxtb	r2, r3
 801c602:	683b      	ldr	r3, [r7, #0]
 801c604:	701a      	strb	r2, [r3, #0]
 801c606:	e01c      	b.n	801c642 <mg_phy_up+0x1de>
    } else if (id1 == MG_PHY_RTL8201) {
 801c608:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c60a:	2b1c      	cmp	r3, #28
 801c60c:	d119      	bne.n	801c642 <mg_phy_up+0x1de>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	7afa      	ldrb	r2, [r7, #11]
 801c614:	2100      	movs	r1, #0
 801c616:	4610      	mov	r0, r2
 801c618:	4798      	blx	r3
 801c61a:	4603      	mov	r3, r0
 801c61c:	843b      	strh	r3, [r7, #32]
      *full_duplex = bcr & MG_BIT(8);
 801c61e:	8c3b      	ldrh	r3, [r7, #32]
 801c620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c624:	2b00      	cmp	r3, #0
 801c626:	bf14      	ite	ne
 801c628:	2301      	movne	r3, #1
 801c62a:	2300      	moveq	r3, #0
 801c62c:	b2da      	uxtb	r2, r3
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 801c632:	8c3b      	ldrh	r3, [r7, #32]
 801c634:	0b5b      	lsrs	r3, r3, #13
 801c636:	b2db      	uxtb	r3, r3
 801c638:	f003 0301 	and.w	r3, r3, #1
 801c63c:	b2da      	uxtb	r2, r3
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 801c642:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 801c646:	4618      	mov	r0, r3
 801c648:	3728      	adds	r7, #40	@ 0x28
 801c64a:	46bd      	mov	sp, r7
 801c64c:	bd80      	pop	{r7, pc}
	...

0801c650 <eth_read_phy>:
static uint8_t s_txno;                               // Current TX descriptor
static uint8_t s_rxno;                               // Current RX descriptor

static struct mg_tcpip_if *s_ifp;  // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 801c650:	b480      	push	{r7}
 801c652:	b083      	sub	sp, #12
 801c654:	af00      	add	r7, sp, #0
 801c656:	4603      	mov	r3, r0
 801c658:	460a      	mov	r2, r1
 801c65a:	71fb      	strb	r3, [r7, #7]
 801c65c:	4613      	mov	r3, r2
 801c65e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMIIAR &= (7 << 2);
 801c660:	4b12      	ldr	r3, [pc, #72]	@ (801c6ac <eth_read_phy+0x5c>)
 801c662:	691b      	ldr	r3, [r3, #16]
 801c664:	4a11      	ldr	r2, [pc, #68]	@ (801c6ac <eth_read_phy+0x5c>)
 801c666:	f003 031c 	and.w	r3, r3, #28
 801c66a:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6);
 801c66c:	4b0f      	ldr	r3, [pc, #60]	@ (801c6ac <eth_read_phy+0x5c>)
 801c66e:	691a      	ldr	r2, [r3, #16]
 801c670:	79fb      	ldrb	r3, [r7, #7]
 801c672:	02d9      	lsls	r1, r3, #11
 801c674:	79bb      	ldrb	r3, [r7, #6]
 801c676:	019b      	lsls	r3, r3, #6
 801c678:	430b      	orrs	r3, r1
 801c67a:	490c      	ldr	r1, [pc, #48]	@ (801c6ac <eth_read_phy+0x5c>)
 801c67c:	4313      	orrs	r3, r2
 801c67e:	610b      	str	r3, [r1, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 801c680:	4b0a      	ldr	r3, [pc, #40]	@ (801c6ac <eth_read_phy+0x5c>)
 801c682:	691b      	ldr	r3, [r3, #16]
 801c684:	4a09      	ldr	r2, [pc, #36]	@ (801c6ac <eth_read_phy+0x5c>)
 801c686:	f043 0301 	orr.w	r3, r3, #1
 801c68a:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 801c68c:	bf00      	nop
 801c68e:	4b07      	ldr	r3, [pc, #28]	@ (801c6ac <eth_read_phy+0x5c>)
 801c690:	691b      	ldr	r3, [r3, #16]
 801c692:	f003 0301 	and.w	r3, r3, #1
 801c696:	2b00      	cmp	r3, #0
 801c698:	d1f9      	bne.n	801c68e <eth_read_phy+0x3e>
  return ETH->MACMIIDR & 0xffff;
 801c69a:	4b04      	ldr	r3, [pc, #16]	@ (801c6ac <eth_read_phy+0x5c>)
 801c69c:	695b      	ldr	r3, [r3, #20]
 801c69e:	b29b      	uxth	r3, r3
}
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	370c      	adds	r7, #12
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6aa:	4770      	bx	lr
 801c6ac:	40028000 	.word	0x40028000

0801c6b0 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 801c6b0:	b480      	push	{r7}
 801c6b2:	b083      	sub	sp, #12
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	71fb      	strb	r3, [r7, #7]
 801c6ba:	460b      	mov	r3, r1
 801c6bc:	71bb      	strb	r3, [r7, #6]
 801c6be:	4613      	mov	r3, r2
 801c6c0:	80bb      	strh	r3, [r7, #4]
  ETH->MACMIIDR = val;
 801c6c2:	4a14      	ldr	r2, [pc, #80]	@ (801c714 <eth_write_phy+0x64>)
 801c6c4:	88bb      	ldrh	r3, [r7, #4]
 801c6c6:	6153      	str	r3, [r2, #20]
  ETH->MACMIIAR &= (7 << 2);
 801c6c8:	4b12      	ldr	r3, [pc, #72]	@ (801c714 <eth_write_phy+0x64>)
 801c6ca:	691b      	ldr	r3, [r3, #16]
 801c6cc:	4a11      	ldr	r2, [pc, #68]	@ (801c714 <eth_write_phy+0x64>)
 801c6ce:	f003 031c 	and.w	r3, r3, #28
 801c6d2:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= ((uint32_t) addr << 11) | ((uint32_t) reg << 6) | MG_BIT(1);
 801c6d4:	4b0f      	ldr	r3, [pc, #60]	@ (801c714 <eth_write_phy+0x64>)
 801c6d6:	691a      	ldr	r2, [r3, #16]
 801c6d8:	79fb      	ldrb	r3, [r7, #7]
 801c6da:	02d9      	lsls	r1, r3, #11
 801c6dc:	79bb      	ldrb	r3, [r7, #6]
 801c6de:	019b      	lsls	r3, r3, #6
 801c6e0:	430b      	orrs	r3, r1
 801c6e2:	4313      	orrs	r3, r2
 801c6e4:	4a0b      	ldr	r2, [pc, #44]	@ (801c714 <eth_write_phy+0x64>)
 801c6e6:	f043 0302 	orr.w	r3, r3, #2
 801c6ea:	6113      	str	r3, [r2, #16]
  ETH->MACMIIAR |= MG_BIT(0);
 801c6ec:	4b09      	ldr	r3, [pc, #36]	@ (801c714 <eth_write_phy+0x64>)
 801c6ee:	691b      	ldr	r3, [r3, #16]
 801c6f0:	4a08      	ldr	r2, [pc, #32]	@ (801c714 <eth_write_phy+0x64>)
 801c6f2:	f043 0301 	orr.w	r3, r3, #1
 801c6f6:	6113      	str	r3, [r2, #16]
  while (ETH->MACMIIAR & MG_BIT(0)) (void) 0;
 801c6f8:	bf00      	nop
 801c6fa:	4b06      	ldr	r3, [pc, #24]	@ (801c714 <eth_write_phy+0x64>)
 801c6fc:	691b      	ldr	r3, [r3, #16]
 801c6fe:	f003 0301 	and.w	r3, r3, #1
 801c702:	2b00      	cmp	r3, #0
 801c704:	d1f9      	bne.n	801c6fa <eth_write_phy+0x4a>
}
 801c706:	bf00      	nop
 801c708:	bf00      	nop
 801c70a:	370c      	adds	r7, #12
 801c70c:	46bd      	mov	sp, r7
 801c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c712:	4770      	bx	lr
 801c714:	40028000 	.word	0x40028000

0801c718 <get_hclk>:

static uint32_t get_hclk(void) {
 801c718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c71c:	b08d      	sub	sp, #52	@ 0x34
 801c71e:	af00      	add	r7, sp, #0
  struct rcc {
    volatile uint32_t CR, PLLCFGR, CFGR;
  } *rcc = (struct rcc *) 0x40023800;
 801c720:	4e3c      	ldr	r6, [pc, #240]	@ (801c814 <get_hclk+0xfc>)
 801c722:	62be      	str	r6, [r7, #40]	@ 0x28
  uint32_t clk = 0, hsi = 16000000 /* 16 MHz */, hse = 8000000 /* 8MHz */;
 801c724:	2600      	movs	r6, #0
 801c726:	62fe      	str	r6, [r7, #44]	@ 0x2c
 801c728:	4e3b      	ldr	r6, [pc, #236]	@ (801c818 <get_hclk+0x100>)
 801c72a:	627e      	str	r6, [r7, #36]	@ 0x24
 801c72c:	4e3b      	ldr	r6, [pc, #236]	@ (801c81c <get_hclk+0x104>)
 801c72e:	623e      	str	r6, [r7, #32]

  if (rcc->CFGR & (1 << 2)) {
 801c730:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c732:	68b6      	ldr	r6, [r6, #8]
 801c734:	f006 0604 	and.w	r6, r6, #4
 801c738:	2e00      	cmp	r6, #0
 801c73a:	d002      	beq.n	801c742 <get_hclk+0x2a>
    clk = hse;
 801c73c:	6a3b      	ldr	r3, [r7, #32]
 801c73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c740:	e049      	b.n	801c7d6 <get_hclk+0xbe>
  } else if (rcc->CFGR & (1 << 3)) {
 801c742:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c744:	68b6      	ldr	r6, [r6, #8]
 801c746:	f006 0608 	and.w	r6, r6, #8
 801c74a:	2e00      	cmp	r6, #0
 801c74c:	d041      	beq.n	801c7d2 <get_hclk+0xba>
    uint32_t vco, m, n, p;
    m = (rcc->PLLCFGR & (0x3f << 0)) >> 0;
 801c74e:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c750:	6876      	ldr	r6, [r6, #4]
 801c752:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 801c756:	61fe      	str	r6, [r7, #28]
    n = (rcc->PLLCFGR & (0x1ff << 6)) >> 6;
 801c758:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c75a:	6876      	ldr	r6, [r6, #4]
 801c75c:	09b6      	lsrs	r6, r6, #6
 801c75e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 801c762:	61be      	str	r6, [r7, #24]
    p = (((rcc->PLLCFGR & (3 << 16)) >> 16) + 1) * 2;
 801c764:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c766:	6876      	ldr	r6, [r6, #4]
 801c768:	0c36      	lsrs	r6, r6, #16
 801c76a:	f006 0603 	and.w	r6, r6, #3
 801c76e:	3601      	adds	r6, #1
 801c770:	0076      	lsls	r6, r6, #1
 801c772:	617e      	str	r6, [r7, #20]
    clk = (rcc->PLLCFGR & (1 << 22)) ? hse : hsi;
 801c774:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 801c776:	6876      	ldr	r6, [r6, #4]
 801c778:	f406 0680 	and.w	r6, r6, #4194304	@ 0x400000
 801c77c:	2e00      	cmp	r6, #0
 801c77e:	d001      	beq.n	801c784 <get_hclk+0x6c>
 801c780:	6a3e      	ldr	r6, [r7, #32]
 801c782:	e000      	b.n	801c786 <get_hclk+0x6e>
 801c784:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 801c786:	62fe      	str	r6, [r7, #44]	@ 0x2c
    vco = (uint32_t) ((uint64_t) clk * n / m);
 801c788:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 801c78a:	f04f 0c00 	mov.w	ip, #0
 801c78e:	4634      	mov	r4, r6
 801c790:	4665      	mov	r5, ip
 801c792:	69be      	ldr	r6, [r7, #24]
 801c794:	f04f 0c00 	mov.w	ip, #0
 801c798:	4632      	mov	r2, r6
 801c79a:	4663      	mov	r3, ip
 801c79c:	fb02 fc05 	mul.w	ip, r2, r5
 801c7a0:	fb04 f603 	mul.w	r6, r4, r3
 801c7a4:	4466      	add	r6, ip
 801c7a6:	fba4 0102 	umull	r0, r1, r4, r2
 801c7aa:	1873      	adds	r3, r6, r1
 801c7ac:	4619      	mov	r1, r3
 801c7ae:	69fb      	ldr	r3, [r7, #28]
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	4698      	mov	r8, r3
 801c7b4:	4691      	mov	r9, r2
 801c7b6:	4642      	mov	r2, r8
 801c7b8:	464b      	mov	r3, r9
 801c7ba:	f7e3 fda9 	bl	8000310 <__aeabi_uldivmod>
 801c7be:	4602      	mov	r2, r0
 801c7c0:	460b      	mov	r3, r1
 801c7c2:	4613      	mov	r3, r2
 801c7c4:	613b      	str	r3, [r7, #16]
    clk = vco / p;
 801c7c6:	693a      	ldr	r2, [r7, #16]
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801c7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c7d0:	e001      	b.n	801c7d6 <get_hclk+0xbe>
  } else {
    clk = hsi;
 801c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  uint32_t hpre = (rcc->CFGR & (15 << 4)) >> 4;
 801c7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7d8:	689b      	ldr	r3, [r3, #8]
 801c7da:	091b      	lsrs	r3, r3, #4
 801c7dc:	f003 030f 	and.w	r3, r3, #15
 801c7e0:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	2b07      	cmp	r3, #7
 801c7e6:	d801      	bhi.n	801c7ec <get_hclk+0xd4>
 801c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ea:	e00e      	b.n	801c80a <get_hclk+0xf2>

  uint8_t ahbptab[8] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 801c7ec:	4a0c      	ldr	r2, [pc, #48]	@ (801c820 <get_hclk+0x108>)
 801c7ee:	1d3b      	adds	r3, r7, #4
 801c7f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c7f4:	e883 0003 	stmia.w	r3, {r0, r1}
  return ((uint32_t) clk) >> ahbptab[hpre - 8];
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	3b08      	subs	r3, #8
 801c7fc:	3330      	adds	r3, #48	@ 0x30
 801c7fe:	443b      	add	r3, r7
 801c800:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801c804:	461a      	mov	r2, r3
 801c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c808:	40d3      	lsrs	r3, r2
}
 801c80a:	4618      	mov	r0, r3
 801c80c:	3734      	adds	r7, #52	@ 0x34
 801c80e:	46bd      	mov	sp, r7
 801c810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c814:	40023800 	.word	0x40023800
 801c818:	00f42400 	.word	0x00f42400
 801c81c:	007a1200 	.word	0x007a1200
 801c820:	08021cc8 	.word	0x08021cc8

0801c824 <guess_mdc_cr>:
//  specify a range of frequencies and activate one of a series of dividers to
//  keep the MDC clock safely below 2.5MHz. We guess a divider setting based on
//  HCLK with a +5% drift. If the user uses a different clock from our
//  defaults, needs to set the macros on top Valid for STM32F74xxx/75xxx
//  (38.8.1) and STM32F42xxx/43xxx (33.8.1) (both 4.5% worst case drift)
static int guess_mdc_cr(void) {
 801c824:	b580      	push	{r7, lr}
 801c826:	b088      	sub	sp, #32
 801c828:	af00      	add	r7, sp, #0
  uint8_t crs[] = {2, 3, 0, 1, 4, 5};          // ETH->MACMIIAR::CR values
 801c82a:	4a34      	ldr	r2, [pc, #208]	@ (801c8fc <guess_mdc_cr+0xd8>)
 801c82c:	f107 030c 	add.w	r3, r7, #12
 801c830:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c834:	6018      	str	r0, [r3, #0]
 801c836:	3304      	adds	r3, #4
 801c838:	8019      	strh	r1, [r3, #0]
  uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 801c83a:	4a31      	ldr	r2, [pc, #196]	@ (801c900 <guess_mdc_cr+0xdc>)
 801c83c:	1d3b      	adds	r3, r7, #4
 801c83e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c842:	6018      	str	r0, [r3, #0]
 801c844:	3304      	adds	r3, #4
 801c846:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                  // Guess system HCLK
 801c848:	f7ff ff66 	bl	801c718 <get_hclk>
 801c84c:	6178      	str	r0, [r7, #20]
  int result = -1;                             // Invalid CR value
 801c84e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c852:	61fb      	str	r3, [r7, #28]
  if (hclk < 25000000) {
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	4a2b      	ldr	r2, [pc, #172]	@ (801c904 <guess_mdc_cr+0xe0>)
 801c858:	4293      	cmp	r3, r2
 801c85a:	d80e      	bhi.n	801c87a <guess_mdc_cr+0x56>
    MG_ERROR(("HCLK too low"));
 801c85c:	4b2a      	ldr	r3, [pc, #168]	@ (801c908 <guess_mdc_cr+0xe4>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	2b00      	cmp	r3, #0
 801c862:	dd36      	ble.n	801c8d2 <guess_mdc_cr+0xae>
 801c864:	4b29      	ldr	r3, [pc, #164]	@ (801c90c <guess_mdc_cr+0xe8>)
 801c866:	f645 0230 	movw	r2, #22576	@ 0x5830
 801c86a:	4929      	ldr	r1, [pc, #164]	@ (801c910 <guess_mdc_cr+0xec>)
 801c86c:	2001      	movs	r0, #1
 801c86e:	f7ec fc9d 	bl	80091ac <mg_log_prefix>
 801c872:	4828      	ldr	r0, [pc, #160]	@ (801c914 <guess_mdc_cr+0xf0>)
 801c874:	f7ec fcea 	bl	800924c <mg_log>
 801c878:	e02b      	b.n	801c8d2 <guess_mdc_cr+0xae>
  } else {
    for (int i = 0; i < 6; i++) {
 801c87a:	2300      	movs	r3, #0
 801c87c:	61bb      	str	r3, [r7, #24]
 801c87e:	e014      	b.n	801c8aa <guess_mdc_cr+0x86>
      if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 801c880:	1d3a      	adds	r2, r7, #4
 801c882:	69bb      	ldr	r3, [r7, #24]
 801c884:	4413      	add	r3, r2
 801c886:	781b      	ldrb	r3, [r3, #0]
 801c888:	461a      	mov	r2, r3
 801c88a:	697b      	ldr	r3, [r7, #20]
 801c88c:	fbb3 f3f2 	udiv	r3, r3, r2
 801c890:	4a21      	ldr	r2, [pc, #132]	@ (801c918 <guess_mdc_cr+0xf4>)
 801c892:	4293      	cmp	r3, r2
 801c894:	d806      	bhi.n	801c8a4 <guess_mdc_cr+0x80>
        result = crs[i];
 801c896:	f107 020c 	add.w	r2, r7, #12
 801c89a:	69bb      	ldr	r3, [r7, #24]
 801c89c:	4413      	add	r3, r2
 801c89e:	781b      	ldrb	r3, [r3, #0]
 801c8a0:	61fb      	str	r3, [r7, #28]
        break;
 801c8a2:	e005      	b.n	801c8b0 <guess_mdc_cr+0x8c>
    for (int i = 0; i < 6; i++) {
 801c8a4:	69bb      	ldr	r3, [r7, #24]
 801c8a6:	3301      	adds	r3, #1
 801c8a8:	61bb      	str	r3, [r7, #24]
 801c8aa:	69bb      	ldr	r3, [r7, #24]
 801c8ac:	2b05      	cmp	r3, #5
 801c8ae:	dde7      	ble.n	801c880 <guess_mdc_cr+0x5c>
      }
    }
    if (result < 0) MG_ERROR(("HCLK too high"));
 801c8b0:	69fb      	ldr	r3, [r7, #28]
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	da0d      	bge.n	801c8d2 <guess_mdc_cr+0xae>
 801c8b6:	4b14      	ldr	r3, [pc, #80]	@ (801c908 <guess_mdc_cr+0xe4>)
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	dd09      	ble.n	801c8d2 <guess_mdc_cr+0xae>
 801c8be:	4b13      	ldr	r3, [pc, #76]	@ (801c90c <guess_mdc_cr+0xe8>)
 801c8c0:	f645 0238 	movw	r2, #22584	@ 0x5838
 801c8c4:	4912      	ldr	r1, [pc, #72]	@ (801c910 <guess_mdc_cr+0xec>)
 801c8c6:	2001      	movs	r0, #1
 801c8c8:	f7ec fc70 	bl	80091ac <mg_log_prefix>
 801c8cc:	4813      	ldr	r0, [pc, #76]	@ (801c91c <guess_mdc_cr+0xf8>)
 801c8ce:	f7ec fcbd 	bl	800924c <mg_log>
  }
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 801c8d2:	4b0d      	ldr	r3, [pc, #52]	@ (801c908 <guess_mdc_cr+0xe4>)
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	2b02      	cmp	r3, #2
 801c8d8:	dd0b      	ble.n	801c8f2 <guess_mdc_cr+0xce>
 801c8da:	4b0c      	ldr	r3, [pc, #48]	@ (801c90c <guess_mdc_cr+0xe8>)
 801c8dc:	f645 023a 	movw	r2, #22586	@ 0x583a
 801c8e0:	490b      	ldr	r1, [pc, #44]	@ (801c910 <guess_mdc_cr+0xec>)
 801c8e2:	2003      	movs	r0, #3
 801c8e4:	f7ec fc62 	bl	80091ac <mg_log_prefix>
 801c8e8:	69fa      	ldr	r2, [r7, #28]
 801c8ea:	6979      	ldr	r1, [r7, #20]
 801c8ec:	480c      	ldr	r0, [pc, #48]	@ (801c920 <guess_mdc_cr+0xfc>)
 801c8ee:	f7ec fcad 	bl	800924c <mg_log>
  return result;
 801c8f2:	69fb      	ldr	r3, [r7, #28]
}
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	3720      	adds	r7, #32
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	bd80      	pop	{r7, pc}
 801c8fc:	08021d04 	.word	0x08021d04
 801c900:	08021d0c 	.word	0x08021d0c
 801c904:	017d783f 	.word	0x017d783f
 801c908:	20000254 	.word	0x20000254
 801c90c:	08022b44 	.word	0x08022b44
 801c910:	0801f338 	.word	0x0801f338
 801c914:	08021cd0 	.word	0x08021cd0
 801c918:	00243d58 	.word	0x00243d58
 801c91c:	08021ce0 	.word	0x08021ce0
 801c920:	08021cf0 	.word	0x08021cf0

0801c924 <mg_tcpip_driver_stm32f_init>:

static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {
 801c924:	b580      	push	{r7, lr}
 801c926:	b08a      	sub	sp, #40	@ 0x28
 801c928:	af00      	add	r7, sp, #0
 801c92a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32f_data *d =
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c930:	61fb      	str	r3, [r7, #28]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801c932:	69fb      	ldr	r3, [r7, #28]
 801c934:	2b00      	cmp	r3, #0
 801c936:	d002      	beq.n	801c93e <mg_tcpip_driver_stm32f_init+0x1a>
 801c938:	69fb      	ldr	r3, [r7, #28]
 801c93a:	791b      	ldrb	r3, [r3, #4]
 801c93c:	e000      	b.n	801c940 <mg_tcpip_driver_stm32f_init+0x1c>
 801c93e:	2300      	movs	r3, #0
 801c940:	76fb      	strb	r3, [r7, #27]
  s_ifp = ifp;
 801c942:	4a6d      	ldr	r2, [pc, #436]	@ (801caf8 <mg_tcpip_driver_stm32f_init+0x1d4>)
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801c948:	2300      	movs	r3, #0
 801c94a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c94c:	e032      	b.n	801c9b4 <mg_tcpip_driver_stm32f_init+0x90>
    s_rxdesc[i][0] = MG_BIT(31);                         // Own
 801c94e:	4a6b      	ldr	r2, [pc, #428]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c952:	011b      	lsls	r3, r3, #4
 801c954:	4413      	add	r3, r2
 801c956:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801c95a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][1] = sizeof(s_rxbuf[i]) | MG_BIT(14);    // 2nd address chained
 801c95c:	4a67      	ldr	r2, [pc, #412]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c960:	011b      	lsls	r3, r3, #4
 801c962:	4413      	add	r3, r2
 801c964:	3304      	adds	r3, #4
 801c966:	f244 6204 	movw	r2, #17924	@ 0x4604
 801c96a:	601a      	str	r2, [r3, #0]
    s_rxdesc[i][2] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 801c96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c96e:	f240 6204 	movw	r2, #1540	@ 0x604
 801c972:	fb02 f303 	mul.w	r3, r2, r3
 801c976:	4a62      	ldr	r2, [pc, #392]	@ (801cb00 <mg_tcpip_driver_stm32f_init+0x1dc>)
 801c978:	4413      	add	r3, r2
 801c97a:	4619      	mov	r1, r3
 801c97c:	4a5f      	ldr	r2, [pc, #380]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c980:	011b      	lsls	r3, r3, #4
 801c982:	4413      	add	r3, r2
 801c984:	3308      	adds	r3, #8
 801c986:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] =
        (uint32_t) (uintptr_t) s_rxdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 801c988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c98a:	3301      	adds	r3, #1
 801c98c:	425a      	negs	r2, r3
 801c98e:	f003 0303 	and.w	r3, r3, #3
 801c992:	f002 0203 	and.w	r2, r2, #3
 801c996:	bf58      	it	pl
 801c998:	4253      	negpl	r3, r2
 801c99a:	011b      	lsls	r3, r3, #4
 801c99c:	4a57      	ldr	r2, [pc, #348]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801c99e:	4413      	add	r3, r2
 801c9a0:	4619      	mov	r1, r3
    s_rxdesc[i][3] =
 801c9a2:	4a56      	ldr	r2, [pc, #344]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801c9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9a6:	011b      	lsls	r3, r3, #4
 801c9a8:	4413      	add	r3, r2
 801c9aa:	330c      	adds	r3, #12
 801c9ac:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801c9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9b0:	3301      	adds	r3, #1
 801c9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9b6:	2b03      	cmp	r3, #3
 801c9b8:	ddc9      	ble.n	801c94e <mg_tcpip_driver_stm32f_init+0x2a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	623b      	str	r3, [r7, #32]
 801c9be:	e023      	b.n	801ca08 <mg_tcpip_driver_stm32f_init+0xe4>
    s_txdesc[i][2] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 801c9c0:	6a3b      	ldr	r3, [r7, #32]
 801c9c2:	f240 6204 	movw	r2, #1540	@ 0x604
 801c9c6:	fb02 f303 	mul.w	r3, r2, r3
 801c9ca:	4a4e      	ldr	r2, [pc, #312]	@ (801cb04 <mg_tcpip_driver_stm32f_init+0x1e0>)
 801c9cc:	4413      	add	r3, r2
 801c9ce:	4619      	mov	r1, r3
 801c9d0:	4a4d      	ldr	r2, [pc, #308]	@ (801cb08 <mg_tcpip_driver_stm32f_init+0x1e4>)
 801c9d2:	6a3b      	ldr	r3, [r7, #32]
 801c9d4:	011b      	lsls	r3, r3, #4
 801c9d6:	4413      	add	r3, r2
 801c9d8:	3308      	adds	r3, #8
 801c9da:	6019      	str	r1, [r3, #0]
    s_txdesc[i][3] =
        (uint32_t) (uintptr_t) s_txdesc[(i + 1) % ETH_DESC_CNT];  // Chain
 801c9dc:	6a3b      	ldr	r3, [r7, #32]
 801c9de:	3301      	adds	r3, #1
 801c9e0:	425a      	negs	r2, r3
 801c9e2:	f003 0303 	and.w	r3, r3, #3
 801c9e6:	f002 0203 	and.w	r2, r2, #3
 801c9ea:	bf58      	it	pl
 801c9ec:	4253      	negpl	r3, r2
 801c9ee:	011b      	lsls	r3, r3, #4
 801c9f0:	4a45      	ldr	r2, [pc, #276]	@ (801cb08 <mg_tcpip_driver_stm32f_init+0x1e4>)
 801c9f2:	4413      	add	r3, r2
 801c9f4:	4619      	mov	r1, r3
    s_txdesc[i][3] =
 801c9f6:	4a44      	ldr	r2, [pc, #272]	@ (801cb08 <mg_tcpip_driver_stm32f_init+0x1e4>)
 801c9f8:	6a3b      	ldr	r3, [r7, #32]
 801c9fa:	011b      	lsls	r3, r3, #4
 801c9fc:	4413      	add	r3, r2
 801c9fe:	330c      	adds	r3, #12
 801ca00:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 801ca02:	6a3b      	ldr	r3, [r7, #32]
 801ca04:	3301      	adds	r3, #1
 801ca06:	623b      	str	r3, [r7, #32]
 801ca08:	6a3b      	ldr	r3, [r7, #32]
 801ca0a:	2b03      	cmp	r3, #3
 801ca0c:	ddd8      	ble.n	801c9c0 <mg_tcpip_driver_stm32f_init+0x9c>
  }

  ETH->DMABMR |= MG_BIT(0);                         // Software reset
 801ca0e:	4b3f      	ldr	r3, [pc, #252]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	4a3d      	ldr	r2, [pc, #244]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca18:	f043 0301 	orr.w	r3, r3, #1
 801ca1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ca20:	6013      	str	r3, [r2, #0]
  while ((ETH->DMABMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 801ca22:	bf00      	nop
 801ca24:	4b39      	ldr	r3, [pc, #228]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	f003 0301 	and.w	r3, r3, #1
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d1f7      	bne.n	801ca24 <mg_tcpip_driver_stm32f_init+0x100>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 801ca34:	69fb      	ldr	r3, [r7, #28]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d003      	beq.n	801ca42 <mg_tcpip_driver_stm32f_init+0x11e>
 801ca3a:	69fb      	ldr	r3, [r7, #28]
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	da03      	bge.n	801ca4a <mg_tcpip_driver_stm32f_init+0x126>
 801ca42:	f7ff feef 	bl	801c824 <guess_mdc_cr>
 801ca46:	4603      	mov	r3, r0
 801ca48:	e001      	b.n	801ca4e <mg_tcpip_driver_stm32f_init+0x12a>
 801ca4a:	69fb      	ldr	r3, [r7, #28]
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	617b      	str	r3, [r7, #20]
  ETH->MACMIIAR = ((uint32_t) cr & 7) << 2;
 801ca50:	697b      	ldr	r3, [r7, #20]
 801ca52:	009b      	lsls	r3, r3, #2
 801ca54:	4a2d      	ldr	r2, [pc, #180]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca56:	f003 031c 	and.w	r3, r3, #28
 801ca5a:	6113      	str	r3, [r2, #16]

  // NOTE(cpq): we do not use extended descriptor bit 7, and do not use
  // hardware checksum. Therefore, descriptor size is 4, not 8
  // ETH->DMABMR = MG_BIT(13) | MG_BIT(16) | MG_BIT(22) | MG_BIT(23) |
  // MG_BIT(25);
  ETH->MACIMR = MG_BIT(3) | MG_BIT(9);  // Mask timestamp & PMT IT
 801ca5c:	4b2b      	ldr	r3, [pc, #172]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca5e:	f44f 7202 	mov.w	r2, #520	@ 0x208
 801ca62:	63da      	str	r2, [r3, #60]	@ 0x3c
  ETH->MACFCR = MG_BIT(7);              // Disable zero quarta pause
 801ca64:	4b29      	ldr	r3, [pc, #164]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca66:	2280      	movs	r2, #128	@ 0x80
 801ca68:	619a      	str	r2, [r3, #24]
  // ETH->MACFFR = MG_BIT(31);                            // Receive all
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 801ca6a:	4a29      	ldr	r2, [pc, #164]	@ (801cb10 <mg_tcpip_driver_stm32f_init+0x1ec>)
 801ca6c:	f107 030c 	add.w	r3, r7, #12
 801ca70:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ca74:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, MG_PHY_CLOCKS_MAC);
 801ca78:	7ef9      	ldrb	r1, [r7, #27]
 801ca7a:	f107 030c 	add.w	r3, r7, #12
 801ca7e:	2202      	movs	r2, #2
 801ca80:	4618      	mov	r0, r3
 801ca82:	f7ff fc37 	bl	801c2f4 <mg_phy_init>
  ETH->DMARDLAR = (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors
 801ca86:	4a21      	ldr	r2, [pc, #132]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca88:	4b1c      	ldr	r3, [pc, #112]	@ (801cafc <mg_tcpip_driver_stm32f_init+0x1d8>)
 801ca8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ca8e:	60d3      	str	r3, [r2, #12]
  ETH->DMATDLAR = (uint32_t) (uintptr_t) s_txdesc;  // RX descriptors
 801ca90:	4a1e      	ldr	r2, [pc, #120]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca92:	4b1d      	ldr	r3, [pc, #116]	@ (801cb08 <mg_tcpip_driver_stm32f_init+0x1e4>)
 801ca94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ca98:	6113      	str	r3, [r2, #16]
  ETH->DMAIER = MG_BIT(6) | MG_BIT(16);             // RIE, NISE
 801ca9a:	4b1c      	ldr	r3, [pc, #112]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801ca9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801caa0:	461a      	mov	r2, r3
 801caa2:	4b1c      	ldr	r3, [pc, #112]	@ (801cb14 <mg_tcpip_driver_stm32f_init+0x1f0>)
 801caa4:	61d3      	str	r3, [r2, #28]
  ETH->MACCR =
 801caa6:	4b19      	ldr	r3, [pc, #100]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801caa8:	f644 020c 	movw	r2, #18444	@ 0x480c
 801caac:	601a      	str	r2, [r3, #0]
      MG_BIT(2) | MG_BIT(3) | MG_BIT(11) | MG_BIT(14);  // RE, TE, Duplex, Fast
  ETH->DMAOMR =
 801caae:	4b17      	ldr	r3, [pc, #92]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801cab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801cab4:	461a      	mov	r2, r3
 801cab6:	4b18      	ldr	r3, [pc, #96]	@ (801cb18 <mg_tcpip_driver_stm32f_init+0x1f4>)
 801cab8:	6193      	str	r3, [r2, #24]
      MG_BIT(1) | MG_BIT(13) | MG_BIT(21) | MG_BIT(25);  // SR, ST, TSF, RSF

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	795b      	ldrb	r3, [r3, #5]
 801cabe:	021b      	lsls	r3, r3, #8
 801cac0:	687a      	ldr	r2, [r7, #4]
 801cac2:	7912      	ldrb	r2, [r2, #4]
 801cac4:	4611      	mov	r1, r2
 801cac6:	4a11      	ldr	r2, [pc, #68]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
 801cac8:	430b      	orrs	r3, r1
 801caca:	6413      	str	r3, [r2, #64]	@ 0x40
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	78db      	ldrb	r3, [r3, #3]
 801cad0:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	789b      	ldrb	r3, [r3, #2]
 801cad6:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801cad8:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	785b      	ldrb	r3, [r3, #1]
 801cade:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 801cae0:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 801cae2:	687a      	ldr	r2, [r7, #4]
 801cae4:	7812      	ldrb	r2, [r2, #0]
 801cae6:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801cae8:	4a08      	ldr	r2, [pc, #32]	@ (801cb0c <mg_tcpip_driver_stm32f_init+0x1e8>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 801caea:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 801caec:	6453      	str	r3, [r2, #68]	@ 0x44
  return true;
 801caee:	2301      	movs	r3, #1
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	3728      	adds	r7, #40	@ 0x28
 801caf4:	46bd      	mov	sp, r7
 801caf6:	bd80      	pop	{r7, pc}
 801caf8:	20003710 	.word	0x20003710
 801cafc:	2000066c 	.word	0x2000066c
 801cb00:	200006ec 	.word	0x200006ec
 801cb04:	20001efc 	.word	0x20001efc
 801cb08:	200006ac 	.word	0x200006ac
 801cb0c:	40028000 	.word	0x40028000
 801cb10:	08021d14 	.word	0x08021d14
 801cb14:	00010040 	.word	0x00010040
 801cb18:	02202002 	.word	0x02202002

0801cb1c <mg_tcpip_driver_stm32f_tx>:

static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b084      	sub	sp, #16
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	60f8      	str	r0, [r7, #12]
 801cb24:	60b9      	str	r1, [r7, #8]
 801cb26:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 801cb28:	68bb      	ldr	r3, [r7, #8]
 801cb2a:	f240 6204 	movw	r2, #1540	@ 0x604
 801cb2e:	4293      	cmp	r3, r2
 801cb30:	d912      	bls.n	801cb58 <mg_tcpip_driver_stm32f_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 801cb32:	4b3f      	ldr	r3, [pc, #252]	@ (801cc30 <mg_tcpip_driver_stm32f_tx+0x114>)
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	dd0b      	ble.n	801cb52 <mg_tcpip_driver_stm32f_tx+0x36>
 801cb3a:	4b3e      	ldr	r3, [pc, #248]	@ (801cc34 <mg_tcpip_driver_stm32f_tx+0x118>)
 801cb3c:	f645 0277 	movw	r2, #22647	@ 0x5877
 801cb40:	493d      	ldr	r1, [pc, #244]	@ (801cc38 <mg_tcpip_driver_stm32f_tx+0x11c>)
 801cb42:	2001      	movs	r0, #1
 801cb44:	f7ec fb32 	bl	80091ac <mg_log_prefix>
 801cb48:	68bb      	ldr	r3, [r7, #8]
 801cb4a:	4619      	mov	r1, r3
 801cb4c:	483b      	ldr	r0, [pc, #236]	@ (801cc3c <mg_tcpip_driver_stm32f_tx+0x120>)
 801cb4e:	f7ec fb7d 	bl	800924c <mg_log>
    len = 0;  // Frame is too big
 801cb52:	2300      	movs	r3, #0
 801cb54:	60bb      	str	r3, [r7, #8]
 801cb56:	e058      	b.n	801cc0a <mg_tcpip_driver_stm32f_tx+0xee>
  } else if ((s_txdesc[s_txno][0] & MG_BIT(31))) {
 801cb58:	4b39      	ldr	r3, [pc, #228]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	4a39      	ldr	r2, [pc, #228]	@ (801cc44 <mg_tcpip_driver_stm32f_tx+0x128>)
 801cb5e:	011b      	lsls	r3, r3, #4
 801cb60:	4413      	add	r3, r2
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	da17      	bge.n	801cb98 <mg_tcpip_driver_stm32f_tx+0x7c>
    ifp->nerr++;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801cb6e:	1c5a      	adds	r2, r3, #1
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors"));
 801cb76:	4b2e      	ldr	r3, [pc, #184]	@ (801cc30 <mg_tcpip_driver_stm32f_tx+0x114>)
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	dd09      	ble.n	801cb92 <mg_tcpip_driver_stm32f_tx+0x76>
 801cb7e:	4b2d      	ldr	r3, [pc, #180]	@ (801cc34 <mg_tcpip_driver_stm32f_tx+0x118>)
 801cb80:	f645 027b 	movw	r2, #22651	@ 0x587b
 801cb84:	492c      	ldr	r1, [pc, #176]	@ (801cc38 <mg_tcpip_driver_stm32f_tx+0x11c>)
 801cb86:	2001      	movs	r0, #1
 801cb88:	f7ec fb10 	bl	80091ac <mg_log_prefix>
 801cb8c:	482e      	ldr	r0, [pc, #184]	@ (801cc48 <mg_tcpip_driver_stm32f_tx+0x12c>)
 801cb8e:	f7ec fb5d 	bl	800924c <mg_log>
    // printf("D0 %lx SR %lx\n", (long) s_txdesc[0][0], (long) ETH->DMASR);
    len = 0;  // All descriptors are busy, fail
 801cb92:	2300      	movs	r3, #0
 801cb94:	60bb      	str	r3, [r7, #8]
 801cb96:	e038      	b.n	801cc0a <mg_tcpip_driver_stm32f_tx+0xee>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);                           // Copy data
 801cb98:	4b29      	ldr	r3, [pc, #164]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cb9a:	781b      	ldrb	r3, [r3, #0]
 801cb9c:	461a      	mov	r2, r3
 801cb9e:	f240 6304 	movw	r3, #1540	@ 0x604
 801cba2:	fb02 f303 	mul.w	r3, r2, r3
 801cba6:	4a29      	ldr	r2, [pc, #164]	@ (801cc4c <mg_tcpip_driver_stm32f_tx+0x130>)
 801cba8:	4413      	add	r3, r2
 801cbaa:	68ba      	ldr	r2, [r7, #8]
 801cbac:	68f9      	ldr	r1, [r7, #12]
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f001 fe95 	bl	801e8de <memcpy>
    s_txdesc[s_txno][1] = (uint32_t) len;                        // Set data len
 801cbb4:	4b22      	ldr	r3, [pc, #136]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbb6:	781b      	ldrb	r3, [r3, #0]
 801cbb8:	4a22      	ldr	r2, [pc, #136]	@ (801cc44 <mg_tcpip_driver_stm32f_tx+0x128>)
 801cbba:	011b      	lsls	r3, r3, #4
 801cbbc:	4413      	add	r3, r2
 801cbbe:	3304      	adds	r3, #4
 801cbc0:	68ba      	ldr	r2, [r7, #8]
 801cbc2:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] = MG_BIT(20) | MG_BIT(28) | MG_BIT(29);  // Chain,FS,LS
 801cbc4:	4b1e      	ldr	r3, [pc, #120]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	4a1e      	ldr	r2, [pc, #120]	@ (801cc44 <mg_tcpip_driver_stm32f_tx+0x128>)
 801cbca:	011b      	lsls	r3, r3, #4
 801cbcc:	4413      	add	r3, r2
 801cbce:	4a20      	ldr	r2, [pc, #128]	@ (801cc50 <mg_tcpip_driver_stm32f_tx+0x134>)
 801cbd0:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][0] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 801cbd2:	4b1b      	ldr	r3, [pc, #108]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbd4:	781b      	ldrb	r3, [r3, #0]
 801cbd6:	4a1b      	ldr	r2, [pc, #108]	@ (801cc44 <mg_tcpip_driver_stm32f_tx+0x128>)
 801cbd8:	011b      	lsls	r3, r3, #4
 801cbda:	4413      	add	r3, r2
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	4a18      	ldr	r2, [pc, #96]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbe0:	7812      	ldrb	r2, [r2, #0]
 801cbe2:	4610      	mov	r0, r2
 801cbe4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801cbe8:	4916      	ldr	r1, [pc, #88]	@ (801cc44 <mg_tcpip_driver_stm32f_tx+0x128>)
 801cbea:	0103      	lsls	r3, r0, #4
 801cbec:	440b      	add	r3, r1
 801cbee:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 801cbf0:	4b13      	ldr	r3, [pc, #76]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbf2:	781b      	ldrb	r3, [r3, #0]
 801cbf4:	3301      	adds	r3, #1
 801cbf6:	b2da      	uxtb	r2, r3
 801cbf8:	4b11      	ldr	r3, [pc, #68]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbfa:	701a      	strb	r2, [r3, #0]
 801cbfc:	4b10      	ldr	r3, [pc, #64]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cbfe:	781b      	ldrb	r3, [r3, #0]
 801cc00:	2b03      	cmp	r3, #3
 801cc02:	d902      	bls.n	801cc0a <mg_tcpip_driver_stm32f_tx+0xee>
 801cc04:	4b0e      	ldr	r3, [pc, #56]	@ (801cc40 <mg_tcpip_driver_stm32f_tx+0x124>)
 801cc06:	2200      	movs	r2, #0
 801cc08:	701a      	strb	r2, [r3, #0]
  }
  MG_DSB();                            // ensure descriptors have been written
 801cc0a:	f3bf 8f4f 	dsb	sy
  ETH->DMASR = MG_BIT(2) | MG_BIT(5);  // Clear any prior TBUS/TUS
 801cc0e:	4b11      	ldr	r3, [pc, #68]	@ (801cc54 <mg_tcpip_driver_stm32f_tx+0x138>)
 801cc10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801cc14:	461a      	mov	r2, r3
 801cc16:	2324      	movs	r3, #36	@ 0x24
 801cc18:	6153      	str	r3, [r2, #20]
  ETH->DMATPDR = 0;                    // and resume
 801cc1a:	4b0e      	ldr	r3, [pc, #56]	@ (801cc54 <mg_tcpip_driver_stm32f_tx+0x138>)
 801cc1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801cc20:	461a      	mov	r2, r3
 801cc22:	2300      	movs	r3, #0
 801cc24:	6053      	str	r3, [r2, #4]
  return len;
 801cc26:	68bb      	ldr	r3, [r7, #8]
}
 801cc28:	4618      	mov	r0, r3
 801cc2a:	3710      	adds	r7, #16
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}
 801cc30:	20000254 	.word	0x20000254
 801cc34:	08022b54 	.word	0x08022b54
 801cc38:	0801f338 	.word	0x0801f338
 801cc3c:	08021d1c 	.word	0x08021d1c
 801cc40:	2000370c 	.word	0x2000370c
 801cc44:	200006ac 	.word	0x200006ac
 801cc48:	08021d30 	.word	0x08021d30
 801cc4c:	20001efc 	.word	0x20001efc
 801cc50:	30100000 	.word	0x30100000
 801cc54:	40028000 	.word	0x40028000

0801cc58 <mg_tcpip_driver_stm32f_poll>:

static bool mg_tcpip_driver_stm32f_poll(struct mg_tcpip_if *ifp, bool s1) {
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b088      	sub	sp, #32
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
 801cc60:	460b      	mov	r3, r1
 801cc62:	70fb      	strb	r3, [r7, #3]
  if (!s1) return false;
 801cc64:	78fb      	ldrb	r3, [r7, #3]
 801cc66:	f083 0301 	eor.w	r3, r3, #1
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d001      	beq.n	801cc74 <mg_tcpip_driver_stm32f_poll+0x1c>
 801cc70:	2300      	movs	r3, #0
 801cc72:	e063      	b.n	801cd3c <mg_tcpip_driver_stm32f_poll+0xe4>
  struct mg_tcpip_driver_stm32f_data *d =
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc78:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32f_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 801cc7a:	69bb      	ldr	r3, [r7, #24]
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d002      	beq.n	801cc86 <mg_tcpip_driver_stm32f_poll+0x2e>
 801cc80:	69bb      	ldr	r3, [r7, #24]
 801cc82:	791b      	ldrb	r3, [r3, #4]
 801cc84:	e000      	b.n	801cc88 <mg_tcpip_driver_stm32f_poll+0x30>
 801cc86:	2300      	movs	r3, #0
 801cc88:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	75bb      	strb	r3, [r7, #22]
 801cc92:	2300      	movs	r3, #0
 801cc94:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 801cc96:	4a2b      	ldr	r2, [pc, #172]	@ (801cd44 <mg_tcpip_driver_stm32f_poll+0xec>)
 801cc98:	f107 030c 	add.w	r3, r7, #12
 801cc9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801cca0:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 801cca4:	f107 0315 	add.w	r3, r7, #21
 801cca8:	f107 0214 	add.w	r2, r7, #20
 801ccac:	7df9      	ldrb	r1, [r7, #23]
 801ccae:	f107 000c 	add.w	r0, r7, #12
 801ccb2:	f7ff fbd7 	bl	801c464 <mg_phy_up>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d13a      	bne.n	801cd3a <mg_tcpip_driver_stm32f_poll+0xe2>
 801ccc4:	7dbb      	ldrb	r3, [r7, #22]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d037      	beq.n	801cd3a <mg_tcpip_driver_stm32f_poll+0xe2>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(11);  // 100M, Full-duplex
 801ccca:	4b1f      	ldr	r3, [pc, #124]	@ (801cd48 <mg_tcpip_driver_stm32f_poll+0xf0>)
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	f443 4390 	orr.w	r3, r3, #18432	@ 0x4800
 801ccd2:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 801ccd4:	7d7b      	ldrb	r3, [r7, #21]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d103      	bne.n	801cce2 <mg_tcpip_driver_stm32f_poll+0x8a>
 801ccda:	69fb      	ldr	r3, [r7, #28]
 801ccdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801cce0:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(11);         // Half-duplex
 801cce2:	7d3b      	ldrb	r3, [r7, #20]
 801cce4:	f083 0301 	eor.w	r3, r3, #1
 801cce8:	b2db      	uxtb	r3, r3
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d003      	beq.n	801ccf6 <mg_tcpip_driver_stm32f_poll+0x9e>
 801ccee:	69fb      	ldr	r3, [r7, #28]
 801ccf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ccf4:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 801ccf6:	4a14      	ldr	r2, [pc, #80]	@ (801cd48 <mg_tcpip_driver_stm32f_poll+0xf0>)
 801ccf8:	69fb      	ldr	r3, [r7, #28]
 801ccfa:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 801ccfc:	4b13      	ldr	r3, [pc, #76]	@ (801cd4c <mg_tcpip_driver_stm32f_poll+0xf4>)
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	2b02      	cmp	r3, #2
 801cd02:	dd1a      	ble.n	801cd3a <mg_tcpip_driver_stm32f_poll+0xe2>
 801cd04:	4b12      	ldr	r3, [pc, #72]	@ (801cd50 <mg_tcpip_driver_stm32f_poll+0xf8>)
 801cd06:	f645 029c 	movw	r2, #22684	@ 0x589c
 801cd0a:	4912      	ldr	r1, [pc, #72]	@ (801cd54 <mg_tcpip_driver_stm32f_poll+0xfc>)
 801cd0c:	2003      	movs	r0, #3
 801cd0e:	f7ec fa4d 	bl	80091ac <mg_log_prefix>
 801cd12:	69fb      	ldr	r3, [r7, #28]
 801cd14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d001      	beq.n	801cd20 <mg_tcpip_driver_stm32f_poll+0xc8>
 801cd1c:	2164      	movs	r1, #100	@ 0x64
 801cd1e:	e000      	b.n	801cd22 <mg_tcpip_driver_stm32f_poll+0xca>
 801cd20:	210a      	movs	r1, #10
 801cd22:	69fb      	ldr	r3, [r7, #28]
 801cd24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d001      	beq.n	801cd30 <mg_tcpip_driver_stm32f_poll+0xd8>
 801cd2c:	4b0a      	ldr	r3, [pc, #40]	@ (801cd58 <mg_tcpip_driver_stm32f_poll+0x100>)
 801cd2e:	e000      	b.n	801cd32 <mg_tcpip_driver_stm32f_poll+0xda>
 801cd30:	4b0a      	ldr	r3, [pc, #40]	@ (801cd5c <mg_tcpip_driver_stm32f_poll+0x104>)
 801cd32:	461a      	mov	r2, r3
 801cd34:	480a      	ldr	r0, [pc, #40]	@ (801cd60 <mg_tcpip_driver_stm32f_poll+0x108>)
 801cd36:	f7ec fa89 	bl	800924c <mg_log>
              maccr & MG_BIT(11) ? "full" : "half"));
  }
  return up;
 801cd3a:	7dbb      	ldrb	r3, [r7, #22]
}
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	3720      	adds	r7, #32
 801cd40:	46bd      	mov	sp, r7
 801cd42:	bd80      	pop	{r7, pc}
 801cd44:	08021d14 	.word	0x08021d14
 801cd48:	40028000 	.word	0x40028000
 801cd4c:	20000254 	.word	0x20000254
 801cd50:	08022b70 	.word	0x08022b70
 801cd54:	0801f338 	.word	0x0801f338
 801cd58:	08021d44 	.word	0x08021d44
 801cd5c:	08021d4c 	.word	0x08021d4c
 801cd60:	08021d54 	.word	0x08021d54

0801cd64 <ETH_IRQHandler>:

#ifdef __riscv
__attribute__((interrupt()))  // For RISCV CH32V307, which share the same MAC
#endif
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b082      	sub	sp, #8
 801cd68:	af00      	add	r7, sp, #0
  if (ETH->DMASR & MG_BIT(6)) {           // Frame received, loop
 801cd6a:	4b3d      	ldr	r3, [pc, #244]	@ (801ce60 <ETH_IRQHandler+0xfc>)
 801cd6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801cd70:	695b      	ldr	r3, [r3, #20]
 801cd72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d061      	beq.n	801ce3e <ETH_IRQHandler+0xda>
    ETH->DMASR = MG_BIT(16) | MG_BIT(6);  // Clear flag
 801cd7a:	4b39      	ldr	r3, [pc, #228]	@ (801ce60 <ETH_IRQHandler+0xfc>)
 801cd7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801cd80:	461a      	mov	r2, r3
 801cd82:	4b38      	ldr	r3, [pc, #224]	@ (801ce64 <ETH_IRQHandler+0x100>)
 801cd84:	6153      	str	r3, [r2, #20]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 801cd86:	2300      	movs	r3, #0
 801cd88:	607b      	str	r3, [r7, #4]
 801cd8a:	e053      	b.n	801ce34 <ETH_IRQHandler+0xd0>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 801cd8c:	4b36      	ldr	r3, [pc, #216]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	4a36      	ldr	r2, [pc, #216]	@ (801ce6c <ETH_IRQHandler+0x108>)
 801cd92:	011b      	lsls	r3, r3, #4
 801cd94:	4413      	add	r3, r2
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	db4f      	blt.n	801ce3c <ETH_IRQHandler+0xd8>
      if (((s_rxdesc[s_rxno][0] & (MG_BIT(8) | MG_BIT(9))) ==
 801cd9c:	4b32      	ldr	r3, [pc, #200]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801cd9e:	781b      	ldrb	r3, [r3, #0]
 801cda0:	4a32      	ldr	r2, [pc, #200]	@ (801ce6c <ETH_IRQHandler+0x108>)
 801cda2:	011b      	lsls	r3, r3, #4
 801cda4:	4413      	add	r3, r2
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801cdac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cdb0:	d128      	bne.n	801ce04 <ETH_IRQHandler+0xa0>
           (MG_BIT(8) | MG_BIT(9))) &&
          !(s_rxdesc[s_rxno][0] & MG_BIT(15))) {  // skip partial/errored frames
 801cdb2:	4b2d      	ldr	r3, [pc, #180]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801cdb4:	781b      	ldrb	r3, [r3, #0]
 801cdb6:	4a2d      	ldr	r2, [pc, #180]	@ (801ce6c <ETH_IRQHandler+0x108>)
 801cdb8:	011b      	lsls	r3, r3, #4
 801cdba:	4413      	add	r3, r2
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(8) | MG_BIT(9))) &&
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d11e      	bne.n	801ce04 <ETH_IRQHandler+0xa0>
        uint32_t len = ((s_rxdesc[s_rxno][0] >> 16) & (MG_BIT(14) - 1));
 801cdc6:	4b28      	ldr	r3, [pc, #160]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801cdc8:	781b      	ldrb	r3, [r3, #0]
 801cdca:	4a28      	ldr	r2, [pc, #160]	@ (801ce6c <ETH_IRQHandler+0x108>)
 801cdcc:	011b      	lsls	r3, r3, #4
 801cdce:	4413      	add	r3, r2
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	0c1b      	lsrs	r3, r3, #16
 801cdd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801cdd8:	603b      	str	r3, [r7, #0]
        //  printf("%lx %lu %lx %.8lx\n", s_rxno, len, s_rxdesc[s_rxno][0],
        //  ETH->DMASR);
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 801cdda:	4b23      	ldr	r3, [pc, #140]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801cddc:	781b      	ldrb	r3, [r3, #0]
 801cdde:	461a      	mov	r2, r3
 801cde0:	f240 6304 	movw	r3, #1540	@ 0x604
 801cde4:	fb02 f303 	mul.w	r3, r2, r3
 801cde8:	4a21      	ldr	r2, [pc, #132]	@ (801ce70 <ETH_IRQHandler+0x10c>)
 801cdea:	1898      	adds	r0, r3, r2
 801cdec:	683b      	ldr	r3, [r7, #0]
 801cdee:	2b04      	cmp	r3, #4
 801cdf0:	d902      	bls.n	801cdf8 <ETH_IRQHandler+0x94>
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	3b04      	subs	r3, #4
 801cdf6:	e000      	b.n	801cdfa <ETH_IRQHandler+0x96>
 801cdf8:	683b      	ldr	r3, [r7, #0]
 801cdfa:	4a1e      	ldr	r2, [pc, #120]	@ (801ce74 <ETH_IRQHandler+0x110>)
 801cdfc:	6812      	ldr	r2, [r2, #0]
 801cdfe:	4619      	mov	r1, r3
 801ce00:	f7ef fb70 	bl	800c4e4 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][0] = MG_BIT(31);
 801ce04:	4b18      	ldr	r3, [pc, #96]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801ce06:	781b      	ldrb	r3, [r3, #0]
 801ce08:	4a18      	ldr	r2, [pc, #96]	@ (801ce6c <ETH_IRQHandler+0x108>)
 801ce0a:	011b      	lsls	r3, r3, #4
 801ce0c:	4413      	add	r3, r2
 801ce0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ce12:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 801ce14:	4b14      	ldr	r3, [pc, #80]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801ce16:	781b      	ldrb	r3, [r3, #0]
 801ce18:	3301      	adds	r3, #1
 801ce1a:	b2da      	uxtb	r2, r3
 801ce1c:	4b12      	ldr	r3, [pc, #72]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801ce1e:	701a      	strb	r2, [r3, #0]
 801ce20:	4b11      	ldr	r3, [pc, #68]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801ce22:	781b      	ldrb	r3, [r3, #0]
 801ce24:	2b03      	cmp	r3, #3
 801ce26:	d902      	bls.n	801ce2e <ETH_IRQHandler+0xca>
 801ce28:	4b0f      	ldr	r3, [pc, #60]	@ (801ce68 <ETH_IRQHandler+0x104>)
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {   // read as they arrive but not forever
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	3301      	adds	r3, #1
 801ce32:	607b      	str	r3, [r7, #4]
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2b09      	cmp	r3, #9
 801ce38:	d9a8      	bls.n	801cd8c <ETH_IRQHandler+0x28>
 801ce3a:	e000      	b.n	801ce3e <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][0] & MG_BIT(31)) break;  // exit when done
 801ce3c:	bf00      	nop
    }
  }
  // Cleanup flags
  ETH->DMASR = MG_BIT(16)    // NIS, normal interrupt summary
 801ce3e:	4b08      	ldr	r3, [pc, #32]	@ (801ce60 <ETH_IRQHandler+0xfc>)
 801ce40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ce44:	461a      	mov	r2, r3
 801ce46:	4b0c      	ldr	r3, [pc, #48]	@ (801ce78 <ETH_IRQHandler+0x114>)
 801ce48:	6153      	str	r3, [r2, #20]
               | MG_BIT(7);  // Clear possible RBUS while processing
  ETH->DMARPDR = 0;          // and resume RX
 801ce4a:	4b05      	ldr	r3, [pc, #20]	@ (801ce60 <ETH_IRQHandler+0xfc>)
 801ce4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ce50:	461a      	mov	r2, r3
 801ce52:	2300      	movs	r3, #0
 801ce54:	6093      	str	r3, [r2, #8]
}
 801ce56:	bf00      	nop
 801ce58:	3708      	adds	r7, #8
 801ce5a:	46bd      	mov	sp, r7
 801ce5c:	bd80      	pop	{r7, pc}
 801ce5e:	bf00      	nop
 801ce60:	40028000 	.word	0x40028000
 801ce64:	00010040 	.word	0x00010040
 801ce68:	2000370d 	.word	0x2000370d
 801ce6c:	2000066c 	.word	0x2000066c
 801ce70:	200006ec 	.word	0x200006ec
 801ce74:	20003710 	.word	0x20003710
 801ce78:	00010080 	.word	0x00010080

0801ce7c <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1744883898},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 801ce7c:	b480      	push	{r7}
 801ce7e:	b083      	sub	sp, #12
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 801ce86:	e005      	b.n	801ce94 <scmp+0x18>
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	607b      	str	r3, [r7, #4]
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	3301      	adds	r3, #1
 801ce92:	603b      	str	r3, [r7, #0]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	781b      	ldrb	r3, [r3, #0]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d005      	beq.n	801cea8 <scmp+0x2c>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	781a      	ldrb	r2, [r3, #0]
 801cea0:	683b      	ldr	r3, [r7, #0]
 801cea2:	781b      	ldrb	r3, [r3, #0]
 801cea4:	429a      	cmp	r2, r3
 801cea6:	d0ef      	beq.n	801ce88 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	781b      	ldrb	r3, [r3, #0]
 801ceac:	461a      	mov	r2, r3
 801ceae:	683b      	ldr	r3, [r7, #0]
 801ceb0:	781b      	ldrb	r3, [r3, #0]
 801ceb2:	1ad3      	subs	r3, r2, r3
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	370c      	adds	r7, #12
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cebe:	4770      	bx	lr

0801cec0 <mg_unlist>:
const char *mg_unlist(size_t no) {
 801cec0:	b480      	push	{r7}
 801cec2:	b083      	sub	sp, #12
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 801cec8:	4906      	ldr	r1, [pc, #24]	@ (801cee4 <mg_unlist+0x24>)
 801ceca:	687a      	ldr	r2, [r7, #4]
 801cecc:	4613      	mov	r3, r2
 801cece:	005b      	lsls	r3, r3, #1
 801ced0:	4413      	add	r3, r2
 801ced2:	00db      	lsls	r3, r3, #3
 801ced4:	440b      	add	r3, r1
 801ced6:	681b      	ldr	r3, [r3, #0]
}
 801ced8:	4618      	mov	r0, r3
 801ceda:	370c      	adds	r7, #12
 801cedc:	46bd      	mov	sp, r7
 801cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cee2:	4770      	bx	lr
 801cee4:	0802f168 	.word	0x0802f168

0801cee8 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b086      	sub	sp, #24
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	60f8      	str	r0, [r7, #12]
 801cef0:	60b9      	str	r1, [r7, #8]
 801cef2:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 801cef4:	4b16      	ldr	r3, [pc, #88]	@ (801cf50 <mg_unpack+0x68>)
 801cef6:	617b      	str	r3, [r7, #20]
 801cef8:	e020      	b.n	801cf3c <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 801cefa:	697b      	ldr	r3, [r7, #20]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	68f9      	ldr	r1, [r7, #12]
 801cf00:	4618      	mov	r0, r3
 801cf02:	f7ff ffbb 	bl	801ce7c <scmp>
 801cf06:	4603      	mov	r3, r0
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d113      	bne.n	801cf34 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 801cf0c:	68bb      	ldr	r3, [r7, #8]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d004      	beq.n	801cf1c <mg_unpack+0x34>
 801cf12:	697b      	ldr	r3, [r7, #20]
 801cf14:	689b      	ldr	r3, [r3, #8]
 801cf16:	1e5a      	subs	r2, r3, #1
 801cf18:	68bb      	ldr	r3, [r7, #8]
 801cf1a:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d005      	beq.n	801cf2e <mg_unpack+0x46>
 801cf22:	697b      	ldr	r3, [r7, #20]
 801cf24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801cf28:	6879      	ldr	r1, [r7, #4]
 801cf2a:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 801cf2e:	697b      	ldr	r3, [r7, #20]
 801cf30:	685b      	ldr	r3, [r3, #4]
 801cf32:	e008      	b.n	801cf46 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 801cf34:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 801cf36:	697b      	ldr	r3, [r7, #20]
 801cf38:	3318      	adds	r3, #24
 801cf3a:	617b      	str	r3, [r7, #20]
 801cf3c:	697b      	ldr	r3, [r7, #20]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d1da      	bne.n	801cefa <mg_unpack+0x12>
  }
  return NULL;
 801cf44:	2300      	movs	r3, #0
}
 801cf46:	4618      	mov	r0, r3
 801cf48:	3718      	adds	r7, #24
 801cf4a:	46bd      	mov	sp, r7
 801cf4c:	bd80      	pop	{r7, pc}
 801cf4e:	bf00      	nop
 801cf50:	0802f168 	.word	0x0802f168

0801cf54 <glue_get_leds>:
// Default mock implementation of the API callbacks

#include "mongoose_glue.h"
#include "stm32f7xx_hal.h"
static struct leds s_leds = {false};
void glue_get_leds(struct leds *data) {
 801cf54:	b480      	push	{r7}
 801cf56:	b083      	sub	sp, #12
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	4a04      	ldr	r2, [pc, #16]	@ (801cf70 <glue_get_leds+0x1c>)
 801cf60:	7812      	ldrb	r2, [r2, #0]
 801cf62:	701a      	strb	r2, [r3, #0]
}
 801cf64:	bf00      	nop
 801cf66:	370c      	adds	r7, #12
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6e:	4770      	bx	lr
 801cf70:	200037a8 	.word	0x200037a8

0801cf74 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b082      	sub	sp, #8
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 801cf7c:	4a0b      	ldr	r2, [pc, #44]	@ (801cfac <glue_set_leds+0x38>)
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	781b      	ldrb	r3, [r3, #0]
 801cf82:	7013      	strb	r3, [r2, #0]
  if(data->led1) {
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	781b      	ldrb	r3, [r3, #0]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d005      	beq.n	801cf98 <glue_set_leds+0x24>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 801cf8c:	2201      	movs	r2, #1
 801cf8e:	2101      	movs	r1, #1
 801cf90:	4807      	ldr	r0, [pc, #28]	@ (801cfb0 <glue_set_leds+0x3c>)
 801cf92:	f7e4 fe41 	bl	8001c18 <HAL_GPIO_WritePin>
  } else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  }
}
 801cf96:	e004      	b.n	801cfa2 <glue_set_leds+0x2e>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801cf98:	2200      	movs	r2, #0
 801cf9a:	2101      	movs	r1, #1
 801cf9c:	4804      	ldr	r0, [pc, #16]	@ (801cfb0 <glue_set_leds+0x3c>)
 801cf9e:	f7e4 fe3b 	bl	8001c18 <HAL_GPIO_WritePin>
}
 801cfa2:	bf00      	nop
 801cfa4:	3708      	adds	r7, #8
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	bd80      	pop	{r7, pc}
 801cfaa:	bf00      	nop
 801cfac:	200037a8 	.word	0x200037a8
 801cfb0:	40020400 	.word	0x40020400

0801cfb4 <get_api_handler>:

static struct apihandler *s_apihandlers[] = {
  (struct apihandler *) &s_apihandler_leds
};

static struct apihandler *get_api_handler(struct mg_str name) {
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b086      	sub	sp, #24
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	463b      	mov	r3, r7
 801cfbc:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d101      	bne.n	801cfce <get_api_handler+0x1a>
 801cfca:	2300      	movs	r3, #0
 801cfcc:	e049      	b.n	801d062 <get_api_handler+0xae>
  if (num_handlers == 0) return NULL;
 801cfce:	693b      	ldr	r3, [r7, #16]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d101      	bne.n	801cfd8 <get_api_handler+0x24>
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	e044      	b.n	801d062 <get_api_handler+0xae>
  for (i = 0; i < num_handlers; i++) {
 801cfd8:	2300      	movs	r3, #0
 801cfda:	617b      	str	r3, [r7, #20]
 801cfdc:	e03c      	b.n	801d058 <get_api_handler+0xa4>
    struct apihandler *h = s_apihandlers[i];
 801cfde:	4a23      	ldr	r2, [pc, #140]	@ (801d06c <get_api_handler+0xb8>)
 801cfe0:	697b      	ldr	r3, [r7, #20]
 801cfe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfe6:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7e3 f987 	bl	8000300 <strlen>
 801cff2:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	68ba      	ldr	r2, [r7, #8]
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d825      	bhi.n	801d048 <get_api_handler+0x94>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 801cffc:	6838      	ldr	r0, [r7, #0]
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	68ba      	ldr	r2, [r7, #8]
 801d004:	4619      	mov	r1, r3
 801d006:	f001 fb49 	bl	801e69c <strncmp>
 801d00a:	4603      	mov	r3, r0
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d11d      	bne.n	801d04c <get_api_handler+0x98>
    if (name.len > n && name.buf[n] != '/') continue;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	68ba      	ldr	r2, [r7, #8]
 801d014:	429a      	cmp	r2, r3
 801d016:	d205      	bcs.n	801d024 <get_api_handler+0x70>
 801d018:	683a      	ldr	r2, [r7, #0]
 801d01a:	68bb      	ldr	r3, [r7, #8]
 801d01c:	4413      	add	r3, r2
 801d01e:	781b      	ldrb	r3, [r3, #0]
 801d020:	2b2f      	cmp	r3, #47	@ 0x2f
 801d022:	d115      	bne.n	801d050 <get_api_handler+0x9c>
    MG_DEBUG(("Found handler [%s]", h->name));
 801d024:	4b12      	ldr	r3, [pc, #72]	@ (801d070 <get_api_handler+0xbc>)
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	2b02      	cmp	r3, #2
 801d02a:	dd0b      	ble.n	801d044 <get_api_handler+0x90>
 801d02c:	4b11      	ldr	r3, [pc, #68]	@ (801d074 <get_api_handler+0xc0>)
 801d02e:	228c      	movs	r2, #140	@ 0x8c
 801d030:	4911      	ldr	r1, [pc, #68]	@ (801d078 <get_api_handler+0xc4>)
 801d032:	2003      	movs	r0, #3
 801d034:	f7ec f8ba 	bl	80091ac <mg_log_prefix>
 801d038:	68fb      	ldr	r3, [r7, #12]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	4619      	mov	r1, r3
 801d03e:	480f      	ldr	r0, [pc, #60]	@ (801d07c <get_api_handler+0xc8>)
 801d040:	f7ec f904 	bl	800924c <mg_log>
    return h;
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	e00c      	b.n	801d062 <get_api_handler+0xae>
    if (n > name.len) continue;
 801d048:	bf00      	nop
 801d04a:	e002      	b.n	801d052 <get_api_handler+0x9e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 801d04c:	bf00      	nop
 801d04e:	e000      	b.n	801d052 <get_api_handler+0x9e>
    if (name.len > n && name.buf[n] != '/') continue;
 801d050:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 801d052:	697b      	ldr	r3, [r7, #20]
 801d054:	3301      	adds	r3, #1
 801d056:	617b      	str	r3, [r7, #20]
 801d058:	697a      	ldr	r2, [r7, #20]
 801d05a:	693b      	ldr	r3, [r7, #16]
 801d05c:	429a      	cmp	r2, r3
 801d05e:	d3be      	bcc.n	801cfde <get_api_handler+0x2a>
  }
  return NULL;
 801d060:	2300      	movs	r3, #0
}
 801d062:	4618      	mov	r0, r3
 801d064:	3718      	adds	r7, #24
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	bf00      	nop
 801d06c:	200002e4 	.word	0x200002e4
 801d070:	20000254 	.word	0x20000254
 801d074:	0802f198 	.word	0x0802f198
 801d078:	08021da4 	.word	0x08021da4
 801d07c:	08021dc0 	.word	0x08021dc0

0801d080 <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 801d080:	b580      	push	{r7, lr}
 801d082:	b084      	sub	sp, #16
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	68db      	ldr	r3, [r3, #12]
 801d08c:	2b05      	cmp	r3, #5
 801d08e:	d909      	bls.n	801d0a4 <find_handler+0x24>
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	689b      	ldr	r3, [r3, #8]
 801d094:	2205      	movs	r2, #5
 801d096:	490f      	ldr	r1, [pc, #60]	@ (801d0d4 <find_handler+0x54>)
 801d098:	4618      	mov	r0, r3
 801d09a:	f001 faff 	bl	801e69c <strncmp>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d001      	beq.n	801d0a8 <find_handler+0x28>
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	e011      	b.n	801d0cc <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	689b      	ldr	r3, [r3, #8]
 801d0ac:	1d59      	adds	r1, r3, #5
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	68db      	ldr	r3, [r3, #12]
 801d0b2:	1f5a      	subs	r2, r3, #5
 801d0b4:	f107 0308 	add.w	r3, r7, #8
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f7f3 fa62 	bl	8010582 <mg_str_n>
 801d0be:	f107 0308 	add.w	r3, r7, #8
 801d0c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d0c6:	f7ff ff75 	bl	801cfb4 <get_api_handler>
 801d0ca:	4603      	mov	r3, r0
}
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	3710      	adds	r7, #16
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}
 801d0d4:	08021dd4 	.word	0x08021dd4

0801d0d8 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 801d0d8:	b590      	push	{r4, r7, lr}
 801d0da:	b089      	sub	sp, #36	@ 0x24
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	f107 0408 	add.w	r4, r7, #8
 801d0e2:	e884 0003 	stmia.w	r4, {r0, r1}
 801d0e6:	607a      	str	r2, [r7, #4]
 801d0e8:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 801d0ea:	f107 0010 	add.w	r0, r7, #16
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	f107 0208 	add.w	r2, r7, #8
 801d0f4:	ca06      	ldmia	r2, {r1, r2}
 801d0f6:	f7eb fef5 	bl	8008ee4 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 801d0fa:	697b      	ldr	r3, [r7, #20]
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	d913      	bls.n	801d128 <mg_json_get_str2+0x50>
 801d100:	693b      	ldr	r3, [r7, #16]
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	2b22      	cmp	r3, #34	@ 0x22
 801d106:	d10f      	bne.n	801d128 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 801d108:	693b      	ldr	r3, [r7, #16]
 801d10a:	1c59      	adds	r1, r3, #1
 801d10c:	697b      	ldr	r3, [r7, #20]
 801d10e:	1e9a      	subs	r2, r3, #2
 801d110:	f107 0318 	add.w	r3, r7, #24
 801d114:	4618      	mov	r0, r3
 801d116:	f7f3 fa34 	bl	8010582 <mg_str_n>
 801d11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d11c:	683a      	ldr	r2, [r7, #0]
 801d11e:	f107 0118 	add.w	r1, r7, #24
 801d122:	c903      	ldmia	r1, {r0, r1}
 801d124:	f7eb ff84 	bl	8009030 <mg_json_unescape>
  }
}
 801d128:	bf00      	nop
 801d12a:	3724      	adds	r7, #36	@ 0x24
 801d12c:	46bd      	mov	sp, r7
 801d12e:	bd90      	pop	{r4, r7, pc}

0801d130 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	2200      	movs	r2, #0
 801d13c:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	691b      	ldr	r3, [r3, #16]
 801d142:	2b00      	cmp	r3, #0
 801d144:	d00c      	beq.n	801d160 <close_uploaded_file+0x30>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	68db      	ldr	r3, [r3, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d008      	beq.n	801d160 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	691b      	ldr	r3, [r3, #16]
 801d152:	687a      	ldr	r2, [r7, #4]
 801d154:	68d2      	ldr	r2, [r2, #12]
 801d156:	4610      	mov	r0, r2
 801d158:	4798      	blx	r3
    us->fp = NULL;
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	2200      	movs	r2, #0
 801d15e:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 801d160:	2218      	movs	r2, #24
 801d162:	2100      	movs	r1, #0
 801d164:	6878      	ldr	r0, [r7, #4]
 801d166:	f001 fa84 	bl	801e672 <memset>
}
 801d16a:	bf00      	nop
 801d16c:	3708      	adds	r7, #8
 801d16e:	46bd      	mov	sp, r7
 801d170:	bd80      	pop	{r7, pc}
	...

0801d174 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 801d174:	b590      	push	{r4, r7, lr}
 801d176:	b08d      	sub	sp, #52	@ 0x34
 801d178:	af04      	add	r7, sp, #16
 801d17a:	60f8      	str	r0, [r7, #12]
 801d17c:	60b9      	str	r1, [r7, #8]
 801d17e:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	3388      	adds	r3, #136	@ 0x88
 801d184:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 801d186:	69fb      	ldr	r3, [r7, #28]
 801d188:	781b      	ldrb	r3, [r3, #0]
 801d18a:	2b55      	cmp	r3, #85	@ 0x55
 801d18c:	f040 80ae 	bne.w	801d2ec <upload_handler+0x178>
 801d190:	68bb      	ldr	r3, [r7, #8]
 801d192:	2b07      	cmp	r3, #7
 801d194:	f040 80aa 	bne.w	801d2ec <upload_handler+0x178>
 801d198:	69fb      	ldr	r3, [r7, #28]
 801d19a:	685b      	ldr	r3, [r3, #4]
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	f000 80a5 	beq.w	801d2ec <upload_handler+0x178>
      c->recv.len > 0) {
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	f000 80a0 	beq.w	801d2ec <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 801d1ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801d1b0:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 801d1b2:	69fb      	ldr	r3, [r7, #28]
 801d1b4:	689a      	ldr	r2, [r3, #8]
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1ba:	441a      	add	r2, r3
 801d1bc:	69fb      	ldr	r3, [r7, #28]
 801d1be:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 801d1c0:	429a      	cmp	r2, r3
 801d1c2:	d210      	bcs.n	801d1e6 <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 801d1c4:	69bb      	ldr	r3, [r7, #24]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d102      	bne.n	801d1d0 <upload_handler+0x5c>
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d1ce:	e007      	b.n	801d1e0 <upload_handler+0x6c>
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d1d4:	69bb      	ldr	r3, [r7, #24]
 801d1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1da:	69ba      	ldr	r2, [r7, #24]
 801d1dc:	fb02 f303 	mul.w	r3, r2, r3
 801d1e0:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 801d1e2:	697b      	ldr	r3, [r7, #20]
 801d1e4:	e001      	b.n	801d1ea <upload_handler+0x76>
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 801d1ea:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 801d1ec:	697b      	ldr	r3, [r7, #20]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d00a      	beq.n	801d208 <upload_handler+0x94>
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	695b      	ldr	r3, [r3, #20]
 801d1f6:	69fa      	ldr	r2, [r7, #28]
 801d1f8:	68d0      	ldr	r0, [r2, #12]
 801d1fa:	68fa      	ldr	r2, [r7, #12]
 801d1fc:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 801d1fe:	697a      	ldr	r2, [r7, #20]
 801d200:	4798      	blx	r3
 801d202:	4603      	mov	r3, r0
 801d204:	2b00      	cmp	r3, #0
 801d206:	d001      	beq.n	801d20c <upload_handler+0x98>
 801d208:	2301      	movs	r3, #1
 801d20a:	e000      	b.n	801d20e <upload_handler+0x9a>
 801d20c:	2300      	movs	r3, #0
 801d20e:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 801d210:	69fb      	ldr	r3, [r7, #28]
 801d212:	689a      	ldr	r2, [r3, #8]
 801d214:	697b      	ldr	r3, [r7, #20]
 801d216:	441a      	add	r2, r3
 801d218:	69fb      	ldr	r3, [r7, #28]
 801d21a:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 801d21c:	4b3a      	ldr	r3, [pc, #232]	@ (801d308 <upload_handler+0x194>)
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	2b02      	cmp	r3, #2
 801d222:	dd18      	ble.n	801d256 <upload_handler+0xe2>
 801d224:	4b39      	ldr	r3, [pc, #228]	@ (801d30c <upload_handler+0x198>)
 801d226:	f44f 7292 	mov.w	r2, #292	@ 0x124
 801d22a:	4939      	ldr	r1, [pc, #228]	@ (801d310 <upload_handler+0x19c>)
 801d22c:	2003      	movs	r0, #3
 801d22e:	f7eb ffbd 	bl	80091ac <mg_log_prefix>
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 801d23a:	69fb      	ldr	r3, [r7, #28]
 801d23c:	689b      	ldr	r3, [r3, #8]
 801d23e:	69fa      	ldr	r2, [r7, #28]
 801d240:	6852      	ldr	r2, [r2, #4]
 801d242:	7cf9      	ldrb	r1, [r7, #19]
 801d244:	9102      	str	r1, [sp, #8]
 801d246:	9201      	str	r2, [sp, #4]
 801d248:	9300      	str	r3, [sp, #0]
 801d24a:	4623      	mov	r3, r4
 801d24c:	697a      	ldr	r2, [r7, #20]
 801d24e:	4601      	mov	r1, r0
 801d250:	4830      	ldr	r0, [pc, #192]	@ (801d314 <upload_handler+0x1a0>)
 801d252:	f7eb fffb 	bl	800924c <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	3338      	adds	r3, #56	@ 0x38
 801d25a:	697a      	ldr	r2, [r7, #20]
 801d25c:	2100      	movs	r1, #0
 801d25e:	4618      	mov	r0, r3
 801d260:	f7eb f8d6 	bl	8008410 <mg_iobuf_del>
    if (ok == false) {
 801d264:	7cfb      	ldrb	r3, [r7, #19]
 801d266:	f083 0301 	eor.w	r3, r3, #1
 801d26a:	b2db      	uxtb	r3, r3
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	d011      	beq.n	801d294 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 801d270:	4b29      	ldr	r3, [pc, #164]	@ (801d318 <upload_handler+0x1a4>)
 801d272:	4a2a      	ldr	r2, [pc, #168]	@ (801d31c <upload_handler+0x1a8>)
 801d274:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801d278:	68f8      	ldr	r0, [r7, #12]
 801d27a:	f7e9 fbdf 	bl	8006a3c <mg_http_reply>
      close_uploaded_file(us);
 801d27e:	69f8      	ldr	r0, [r7, #28]
 801d280:	f7ff ff56 	bl	801d130 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 801d284:	68fa      	ldr	r2, [r7, #12]
 801d286:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d28a:	f043 0310 	orr.w	r3, r3, #16
 801d28e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 801d292:	e02b      	b.n	801d2ec <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 801d294:	69fb      	ldr	r3, [r7, #28]
 801d296:	689a      	ldr	r2, [r3, #8]
 801d298:	69fb      	ldr	r3, [r7, #28]
 801d29a:	685b      	ldr	r3, [r3, #4]
 801d29c:	429a      	cmp	r2, r3
 801d29e:	d325      	bcc.n	801d2ec <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 801d2a0:	4b19      	ldr	r3, [pc, #100]	@ (801d308 <upload_handler+0x194>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	2b01      	cmp	r3, #1
 801d2a6:	dd0e      	ble.n	801d2c6 <upload_handler+0x152>
 801d2a8:	4b18      	ldr	r3, [pc, #96]	@ (801d30c <upload_handler+0x198>)
 801d2aa:	f240 122d 	movw	r2, #301	@ 0x12d
 801d2ae:	4918      	ldr	r1, [pc, #96]	@ (801d310 <upload_handler+0x19c>)
 801d2b0:	2002      	movs	r0, #2
 801d2b2:	f7eb ff7b 	bl	80091ac <mg_log_prefix>
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d2ba:	69fb      	ldr	r3, [r7, #28]
 801d2bc:	689b      	ldr	r3, [r3, #8]
 801d2be:	461a      	mov	r2, r3
 801d2c0:	4817      	ldr	r0, [pc, #92]	@ (801d320 <upload_handler+0x1ac>)
 801d2c2:	f7eb ffc3 	bl	800924c <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 801d2c6:	69fb      	ldr	r3, [r7, #28]
 801d2c8:	689b      	ldr	r3, [r3, #8]
 801d2ca:	9300      	str	r3, [sp, #0]
 801d2cc:	4b15      	ldr	r3, [pc, #84]	@ (801d324 <upload_handler+0x1b0>)
 801d2ce:	2200      	movs	r2, #0
 801d2d0:	21c8      	movs	r1, #200	@ 0xc8
 801d2d2:	68f8      	ldr	r0, [r7, #12]
 801d2d4:	f7e9 fbb2 	bl	8006a3c <mg_http_reply>
      close_uploaded_file(us);
 801d2d8:	69f8      	ldr	r0, [r7, #28]
 801d2da:	f7ff ff29 	bl	801d130 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 801d2de:	68fa      	ldr	r2, [r7, #12]
 801d2e0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d2e4:	f043 0310 	orr.w	r3, r3, #16
 801d2e8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 801d2ec:	69fb      	ldr	r3, [r7, #28]
 801d2ee:	781b      	ldrb	r3, [r3, #0]
 801d2f0:	2b55      	cmp	r3, #85	@ 0x55
 801d2f2:	d105      	bne.n	801d300 <upload_handler+0x18c>
 801d2f4:	68bb      	ldr	r3, [r7, #8]
 801d2f6:	2b09      	cmp	r3, #9
 801d2f8:	d102      	bne.n	801d300 <upload_handler+0x18c>
 801d2fa:	69f8      	ldr	r0, [r7, #28]
 801d2fc:	f7ff ff18 	bl	801d130 <close_uploaded_file>
  (void) ev_data;
}
 801d300:	3724      	adds	r7, #36	@ 0x24
 801d302:	46bd      	mov	sp, r7
 801d304:	bd90      	pop	{r4, r7, pc}
 801d306:	bf00      	nop
 801d308:	20000254 	.word	0x20000254
 801d30c:	0802f1a8 	.word	0x0802f1a8
 801d310:	08021da4 	.word	0x08021da4
 801d314:	08021e38 	.word	0x08021e38
 801d318:	08021e5c 	.word	0x08021e5c
 801d31c:	08021e6c 	.word	0x08021e6c
 801d320:	08021e70 	.word	0x08021e70
 801d324:	08021e84 	.word	0x08021e84

0801d328 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 801d328:	b580      	push	{r7, lr}
 801d32a:	b0a8      	sub	sp, #160	@ 0xa0
 801d32c:	af02      	add	r7, sp, #8
 801d32e:	60f8      	str	r0, [r7, #12]
 801d330:	60b9      	str	r1, [r7, #8]
 801d332:	607a      	str	r2, [r7, #4]
 801d334:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	3388      	adds	r3, #136	@ 0x88
 801d33a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  struct mg_str parts[3];
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));                    // Cleanup upload state
 801d33e:	2218      	movs	r2, #24
 801d340:	2100      	movs	r1, #0
 801d342:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 801d346:	f001 f994 	bl	801e672 <memset>
  memset(parts, 0, sizeof(parts));               // Init match parts
 801d34a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801d34e:	2218      	movs	r2, #24
 801d350:	2100      	movs	r1, #0
 801d352:	4618      	mov	r0, r3
 801d354:	f001 f98d 	bl	801e672 <memset>
  mg_match(hm->uri, mg_str("/api/*/#"), parts);  // Fetch file name
 801d358:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801d35c:	493e      	ldr	r1, [pc, #248]	@ (801d458 <prep_upload+0x130>)
 801d35e:	4618      	mov	r0, r3
 801d360:	f7f3 f8f2 	bl	8010548 <mg_str_s>
 801d364:	68b9      	ldr	r1, [r7, #8]
 801d366:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801d36a:	9300      	str	r3, [sp, #0]
 801d36c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801d370:	cb0c      	ldmia	r3, {r2, r3}
 801d372:	3108      	adds	r1, #8
 801d374:	c903      	ldmia	r1, {r0, r1}
 801d376:	f7f3 f9f1 	bl	801075c <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, path, sizeof(path), 0);
 801d37a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801d37c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801d380:	f107 0210 	add.w	r2, r7, #16
 801d384:	2300      	movs	r3, #0
 801d386:	9300      	str	r3, [sp, #0]
 801d388:	2364      	movs	r3, #100	@ 0x64
 801d38a:	f7e8 f9ee 	bl	800576a <mg_url_decode>
  us->fp = fn_open(path, hm->body.len);
 801d38e:	68bb      	ldr	r3, [r7, #8]
 801d390:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 801d394:	f107 0210 	add.w	r2, r7, #16
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	4610      	mov	r0, r2
 801d39c:	4798      	blx	r3
 801d39e:	4602      	mov	r2, r0
 801d3a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d3a4:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 801d3a6:	4b2d      	ldr	r3, [pc, #180]	@ (801d45c <prep_upload+0x134>)
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	2b02      	cmp	r3, #2
 801d3ac:	dd11      	ble.n	801d3d2 <prep_upload+0xaa>
 801d3ae:	4b2c      	ldr	r3, [pc, #176]	@ (801d460 <prep_upload+0x138>)
 801d3b0:	f240 1245 	movw	r2, #325	@ 0x145
 801d3b4:	492b      	ldr	r1, [pc, #172]	@ (801d464 <prep_upload+0x13c>)
 801d3b6:	2003      	movs	r0, #3
 801d3b8:	f7eb fef8 	bl	80091ac <mg_log_prefix>
 801d3bc:	68bb      	ldr	r3, [r7, #8]
 801d3be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801d3c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d3c6:	68db      	ldr	r3, [r3, #12]
 801d3c8:	f107 0110 	add.w	r1, r7, #16
 801d3cc:	4826      	ldr	r0, [pc, #152]	@ (801d468 <prep_upload+0x140>)
 801d3ce:	f7eb ff3d 	bl	800924c <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 801d3d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d3d6:	2255      	movs	r2, #85	@ 0x55
 801d3d8:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 801d3da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d3de:	68db      	ldr	r3, [r3, #12]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d10e      	bne.n	801d402 <prep_upload+0xda>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 801d3e4:	4b21      	ldr	r3, [pc, #132]	@ (801d46c <prep_upload+0x144>)
 801d3e6:	4a22      	ldr	r2, [pc, #136]	@ (801d470 <prep_upload+0x148>)
 801d3e8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801d3ec:	68f8      	ldr	r0, [r7, #12]
 801d3ee:	f7e9 fb25 	bl	8006a3c <mg_http_reply>
    c->is_draining = 1;
 801d3f2:	68fa      	ldr	r2, [r7, #12]
 801d3f4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d3f8:	f043 0310 	orr.w	r3, r3, #16
 801d3fc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 801d400:	e026      	b.n	801d450 <prep_upload+0x128>
    us->expected = hm->body.len;              // Store number of bytes we expect
 801d402:	68bb      	ldr	r3, [r7, #8]
 801d404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801d408:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d40c:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 801d40e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d412:	683a      	ldr	r2, [r7, #0]
 801d414:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 801d416:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801d41a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801d41e:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801d426:	68bb      	ldr	r3, [r7, #8]
 801d428:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 801d42c:	461a      	mov	r2, r3
 801d42e:	2100      	movs	r1, #0
 801d430:	f7ea ffee 	bl	8008410 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	4a0f      	ldr	r2, [pc, #60]	@ (801d474 <prep_upload+0x14c>)
 801d438:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	2200      	movs	r2, #0
 801d43e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	3340      	adds	r3, #64	@ 0x40
 801d446:	461a      	mov	r2, r3
 801d448:	2107      	movs	r1, #7
 801d44a:	68f8      	ldr	r0, [r7, #12]
 801d44c:	f7e6 fd13 	bl	8003e76 <mg_call>
}
 801d450:	bf00      	nop
 801d452:	3798      	adds	r7, #152	@ 0x98
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}
 801d458:	08021e8c 	.word	0x08021e8c
 801d45c:	20000254 	.word	0x20000254
 801d460:	0802f1b8 	.word	0x0802f1b8
 801d464:	08021da4 	.word	0x08021da4
 801d468:	08021e98 	.word	0x08021e98
 801d46c:	08021eb4 	.word	0x08021eb4
 801d470:	08021ec8 	.word	0x08021ec8
 801d474:	0801d175 	.word	0x0801d175

0801d478 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 801d478:	b580      	push	{r7, lr}
 801d47a:	b08a      	sub	sp, #40	@ 0x28
 801d47c:	af02      	add	r7, sp, #8
 801d47e:	60f8      	str	r0, [r7, #12]
 801d480:	60b9      	str	r1, [r7, #8]
 801d482:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 801d484:	68fb      	ldr	r3, [r7, #12]
 801d486:	3388      	adds	r3, #136	@ 0x88
 801d488:	61fb      	str	r3, [r7, #28]

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0) {
 801d48a:	68bb      	ldr	r3, [r7, #8]
 801d48c:	2b0a      	cmp	r3, #10
 801d48e:	d12c      	bne.n	801d4ea <handle_uploads+0x72>
 801d490:	69fb      	ldr	r3, [r7, #28]
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d128      	bne.n	801d4ea <handle_uploads+0x72>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	61bb      	str	r3, [r7, #24]
    struct apihandler *h = find_handler(hm);
 801d49c:	69b8      	ldr	r0, [r7, #24]
 801d49e:	f7ff fdef 	bl	801d080 <find_handler>
 801d4a2:	6178      	str	r0, [r7, #20]
    if (h != NULL &&
 801d4a4:	697b      	ldr	r3, [r7, #20]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d01f      	beq.n	801d4ea <handle_uploads+0x72>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	4911      	ldr	r1, [pc, #68]	@ (801d4f4 <handle_uploads+0x7c>)
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	f7e2 fec5 	bl	8000240 <strcmp>
 801d4b6:	4603      	mov	r3, r0
    if (h != NULL &&
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d008      	beq.n	801d4ce <handle_uploads+0x56>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 801d4bc:	697b      	ldr	r3, [r7, #20]
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	490d      	ldr	r1, [pc, #52]	@ (801d4f8 <handle_uploads+0x80>)
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7e2 febc 	bl	8000240 <strcmp>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d10d      	bne.n	801d4ea <handle_uploads+0x72>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 801d4ce:	697b      	ldr	r3, [r7, #20]
 801d4d0:	613b      	str	r3, [r7, #16]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	699a      	ldr	r2, [r3, #24]
 801d4d6:	693b      	ldr	r3, [r7, #16]
 801d4d8:	69d9      	ldr	r1, [r3, #28]
 801d4da:	693b      	ldr	r3, [r7, #16]
 801d4dc:	6a1b      	ldr	r3, [r3, #32]
 801d4de:	9300      	str	r3, [sp, #0]
 801d4e0:	460b      	mov	r3, r1
 801d4e2:	69b9      	ldr	r1, [r7, #24]
 801d4e4:	68f8      	ldr	r0, [r7, #12]
 801d4e6:	f7ff ff1f 	bl	801d328 <prep_upload>
    }
  }
}
 801d4ea:	bf00      	nop
 801d4ec:	3720      	adds	r7, #32
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	bd80      	pop	{r7, pc}
 801d4f2:	bf00      	nop
 801d4f4:	08021e00 	.word	0x08021e00
 801d4f8:	08021dfc 	.word	0x08021dfc

0801d4fc <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 801d4fc:	b580      	push	{r7, lr}
 801d4fe:	b088      	sub	sp, #32
 801d500:	af02      	add	r7, sp, #8
 801d502:	60f8      	str	r0, [r7, #12]
 801d504:	60b9      	str	r1, [r7, #8]
 801d506:	607a      	str	r2, [r7, #4]
 801d508:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801d510:	2b00      	cmp	r3, #0
 801d512:	d01c      	beq.n	801d54e <handle_action+0x52>
    start_fn(hm->body);
 801d514:	68ba      	ldr	r2, [r7, #8]
 801d516:	683b      	ldr	r3, [r7, #0]
 801d518:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 801d51c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d520:	4798      	blx	r3
    if (check_fn()) {
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	4798      	blx	r3
 801d526:	4603      	mov	r3, r0
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d009      	beq.n	801d540 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	3388      	adds	r3, #136	@ 0x88
 801d530:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 801d532:	697b      	ldr	r3, [r7, #20]
 801d534:	2241      	movs	r2, #65	@ 0x41
 801d536:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 801d538:	697b      	ldr	r3, [r7, #20]
 801d53a:	687a      	ldr	r2, [r7, #4]
 801d53c:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 801d53e:	e015      	b.n	801d56c <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 801d540:	4b0c      	ldr	r3, [pc, #48]	@ (801d574 <handle_action+0x78>)
 801d542:	4a0d      	ldr	r2, [pc, #52]	@ (801d578 <handle_action+0x7c>)
 801d544:	21c8      	movs	r1, #200	@ 0xc8
 801d546:	68f8      	ldr	r0, [r7, #12]
 801d548:	f7e9 fa78 	bl	8006a3c <mg_http_reply>
}
 801d54c:	e00e      	b.n	801d56c <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	4798      	blx	r3
 801d552:	4603      	mov	r3, r0
 801d554:	2b00      	cmp	r3, #0
 801d556:	d001      	beq.n	801d55c <handle_action+0x60>
 801d558:	4b08      	ldr	r3, [pc, #32]	@ (801d57c <handle_action+0x80>)
 801d55a:	e000      	b.n	801d55e <handle_action+0x62>
 801d55c:	4b05      	ldr	r3, [pc, #20]	@ (801d574 <handle_action+0x78>)
 801d55e:	9300      	str	r3, [sp, #0]
 801d560:	4b07      	ldr	r3, [pc, #28]	@ (801d580 <handle_action+0x84>)
 801d562:	4a05      	ldr	r2, [pc, #20]	@ (801d578 <handle_action+0x7c>)
 801d564:	21c8      	movs	r1, #200	@ 0xc8
 801d566:	68f8      	ldr	r0, [r7, #12]
 801d568:	f7e9 fa68 	bl	8006a3c <mg_http_reply>
}
 801d56c:	bf00      	nop
 801d56e:	3718      	adds	r7, #24
 801d570:	46bd      	mov	sp, r7
 801d572:	bd80      	pop	{r7, pc}
 801d574:	08021f04 	.word	0x08021f04
 801d578:	08021ec8 	.word	0x08021ec8
 801d57c:	08021f0c 	.word	0x08021f0c
 801d580:	08021f14 	.word	0x08021f14

0801d584 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 801d584:	b580      	push	{r7, lr}
 801d586:	b08e      	sub	sp, #56	@ 0x38
 801d588:	af04      	add	r7, sp, #16
 801d58a:	60f8      	str	r0, [r7, #12]
 801d58c:	60b9      	str	r1, [r7, #8]
 801d58e:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	1d19      	adds	r1, r3, #4
 801d596:	687a      	ldr	r2, [r7, #4]
 801d598:	6011      	str	r1, [r2, #0]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	1d19      	adds	r1, r3, #4
 801d5a4:	687a      	ldr	r2, [r7, #4]
 801d5a6:	6011      	str	r1, [r2, #0]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	627b      	str	r3, [r7, #36]	@ 0x24
 801d5b4:	e0bf      	b.n	801d736 <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 801d5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d5b8:	4613      	mov	r3, r2
 801d5ba:	005b      	lsls	r3, r3, #1
 801d5bc:	4413      	add	r3, r2
 801d5be:	00db      	lsls	r3, r3, #3
 801d5c0:	461a      	mov	r2, r3
 801d5c2:	69bb      	ldr	r3, [r7, #24]
 801d5c4:	4413      	add	r3, r2
 801d5c6:	68db      	ldr	r3, [r3, #12]
 801d5c8:	697a      	ldr	r2, [r7, #20]
 801d5ca:	4413      	add	r3, r2
 801d5cc:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 801d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d101      	bne.n	801d5d8 <print_struct+0x54>
 801d5d4:	4960      	ldr	r1, [pc, #384]	@ (801d758 <print_struct+0x1d4>)
 801d5d6:	e000      	b.n	801d5da <print_struct+0x56>
 801d5d8:	4960      	ldr	r1, [pc, #384]	@ (801d75c <print_struct+0x1d8>)
 801d5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d5dc:	4613      	mov	r3, r2
 801d5de:	005b      	lsls	r3, r3, #1
 801d5e0:	4413      	add	r3, r2
 801d5e2:	00db      	lsls	r3, r3, #3
 801d5e4:	461a      	mov	r2, r3
 801d5e6:	69bb      	ldr	r3, [r7, #24]
 801d5e8:	4413      	add	r3, r2
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	9302      	str	r3, [sp, #8]
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	9301      	str	r3, [sp, #4]
 801d5f2:	4b5b      	ldr	r3, [pc, #364]	@ (801d760 <print_struct+0x1dc>)
 801d5f4:	9300      	str	r3, [sp, #0]
 801d5f6:	460b      	mov	r3, r1
 801d5f8:	4a5a      	ldr	r2, [pc, #360]	@ (801d764 <print_struct+0x1e0>)
 801d5fa:	68b9      	ldr	r1, [r7, #8]
 801d5fc:	68f8      	ldr	r0, [r7, #12]
 801d5fe:	f7e7 f914 	bl	800482a <mg_xprintf>
 801d602:	4602      	mov	r2, r0
 801d604:	6a3b      	ldr	r3, [r7, #32]
 801d606:	4413      	add	r3, r2
 801d608:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 801d60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d60c:	4613      	mov	r3, r2
 801d60e:	005b      	lsls	r3, r3, #1
 801d610:	4413      	add	r3, r2
 801d612:	00db      	lsls	r3, r3, #3
 801d614:	461a      	mov	r2, r3
 801d616:	69bb      	ldr	r3, [r7, #24]
 801d618:	4413      	add	r3, r2
 801d61a:	685b      	ldr	r3, [r3, #4]
 801d61c:	4952      	ldr	r1, [pc, #328]	@ (801d768 <print_struct+0x1e4>)
 801d61e:	4618      	mov	r0, r3
 801d620:	f7e2 fe0e 	bl	8000240 <strcmp>
 801d624:	4603      	mov	r3, r0
 801d626:	2b00      	cmp	r3, #0
 801d628:	d10b      	bne.n	801d642 <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 801d62a:	693b      	ldr	r3, [r7, #16]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	4a4f      	ldr	r2, [pc, #316]	@ (801d76c <print_struct+0x1e8>)
 801d630:	68b9      	ldr	r1, [r7, #8]
 801d632:	68f8      	ldr	r0, [r7, #12]
 801d634:	f7e7 f8f9 	bl	800482a <mg_xprintf>
 801d638:	4602      	mov	r2, r0
 801d63a:	6a3b      	ldr	r3, [r7, #32]
 801d63c:	4413      	add	r3, r2
 801d63e:	623b      	str	r3, [r7, #32]
 801d640:	e076      	b.n	801d730 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 801d642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d644:	4613      	mov	r3, r2
 801d646:	005b      	lsls	r3, r3, #1
 801d648:	4413      	add	r3, r2
 801d64a:	00db      	lsls	r3, r3, #3
 801d64c:	461a      	mov	r2, r3
 801d64e:	69bb      	ldr	r3, [r7, #24]
 801d650:	4413      	add	r3, r2
 801d652:	685b      	ldr	r3, [r3, #4]
 801d654:	4946      	ldr	r1, [pc, #280]	@ (801d770 <print_struct+0x1ec>)
 801d656:	4618      	mov	r0, r3
 801d658:	f7e2 fdf2 	bl	8000240 <strcmp>
 801d65c:	4603      	mov	r3, r0
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d11d      	bne.n	801d69e <print_struct+0x11a>
      const char *fmt = a[i].format;
 801d662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d664:	4613      	mov	r3, r2
 801d666:	005b      	lsls	r3, r3, #1
 801d668:	4413      	add	r3, r2
 801d66a:	00db      	lsls	r3, r3, #3
 801d66c:	461a      	mov	r2, r3
 801d66e:	69bb      	ldr	r3, [r7, #24]
 801d670:	4413      	add	r3, r2
 801d672:	689b      	ldr	r3, [r3, #8]
 801d674:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 801d676:	69fb      	ldr	r3, [r7, #28]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d101      	bne.n	801d680 <print_struct+0xfc>
 801d67c:	4b3d      	ldr	r3, [pc, #244]	@ (801d774 <print_struct+0x1f0>)
 801d67e:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 801d680:	693b      	ldr	r3, [r7, #16]
 801d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d686:	e9cd 2300 	strd	r2, r3, [sp]
 801d68a:	69fa      	ldr	r2, [r7, #28]
 801d68c:	68b9      	ldr	r1, [r7, #8]
 801d68e:	68f8      	ldr	r0, [r7, #12]
 801d690:	f7e7 f8cb 	bl	800482a <mg_xprintf>
 801d694:	4602      	mov	r2, r0
 801d696:	6a3b      	ldr	r3, [r7, #32]
 801d698:	4413      	add	r3, r2
 801d69a:	623b      	str	r3, [r7, #32]
 801d69c:	e048      	b.n	801d730 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 801d69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d6a0:	4613      	mov	r3, r2
 801d6a2:	005b      	lsls	r3, r3, #1
 801d6a4:	4413      	add	r3, r2
 801d6a6:	00db      	lsls	r3, r3, #3
 801d6a8:	461a      	mov	r2, r3
 801d6aa:	69bb      	ldr	r3, [r7, #24]
 801d6ac:	4413      	add	r3, r2
 801d6ae:	685b      	ldr	r3, [r3, #4]
 801d6b0:	4931      	ldr	r1, [pc, #196]	@ (801d778 <print_struct+0x1f4>)
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f7e2 fdc4 	bl	8000240 <strcmp>
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d110      	bne.n	801d6e0 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 801d6be:	693b      	ldr	r3, [r7, #16]
 801d6c0:	781b      	ldrb	r3, [r3, #0]
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d001      	beq.n	801d6ca <print_struct+0x146>
 801d6c6:	4b2d      	ldr	r3, [pc, #180]	@ (801d77c <print_struct+0x1f8>)
 801d6c8:	e000      	b.n	801d6cc <print_struct+0x148>
 801d6ca:	4b2d      	ldr	r3, [pc, #180]	@ (801d780 <print_struct+0x1fc>)
 801d6cc:	4a2d      	ldr	r2, [pc, #180]	@ (801d784 <print_struct+0x200>)
 801d6ce:	68b9      	ldr	r1, [r7, #8]
 801d6d0:	68f8      	ldr	r0, [r7, #12]
 801d6d2:	f7e7 f8aa 	bl	800482a <mg_xprintf>
 801d6d6:	4602      	mov	r2, r0
 801d6d8:	6a3b      	ldr	r3, [r7, #32]
 801d6da:	4413      	add	r3, r2
 801d6dc:	623b      	str	r3, [r7, #32]
 801d6de:	e027      	b.n	801d730 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 801d6e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d6e2:	4613      	mov	r3, r2
 801d6e4:	005b      	lsls	r3, r3, #1
 801d6e6:	4413      	add	r3, r2
 801d6e8:	00db      	lsls	r3, r3, #3
 801d6ea:	461a      	mov	r2, r3
 801d6ec:	69bb      	ldr	r3, [r7, #24]
 801d6ee:	4413      	add	r3, r2
 801d6f0:	685b      	ldr	r3, [r3, #4]
 801d6f2:	4925      	ldr	r1, [pc, #148]	@ (801d788 <print_struct+0x204>)
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f7e2 fda3 	bl	8000240 <strcmp>
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d10e      	bne.n	801d71e <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 801d700:	693b      	ldr	r3, [r7, #16]
 801d702:	9301      	str	r3, [sp, #4]
 801d704:	2300      	movs	r3, #0
 801d706:	9300      	str	r3, [sp, #0]
 801d708:	4b15      	ldr	r3, [pc, #84]	@ (801d760 <print_struct+0x1dc>)
 801d70a:	4a20      	ldr	r2, [pc, #128]	@ (801d78c <print_struct+0x208>)
 801d70c:	68b9      	ldr	r1, [r7, #8]
 801d70e:	68f8      	ldr	r0, [r7, #12]
 801d710:	f7e7 f88b 	bl	800482a <mg_xprintf>
 801d714:	4602      	mov	r2, r0
 801d716:	6a3b      	ldr	r3, [r7, #32]
 801d718:	4413      	add	r3, r2
 801d71a:	623b      	str	r3, [r7, #32]
 801d71c:	e008      	b.n	801d730 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 801d71e:	4a1c      	ldr	r2, [pc, #112]	@ (801d790 <print_struct+0x20c>)
 801d720:	68b9      	ldr	r1, [r7, #8]
 801d722:	68f8      	ldr	r0, [r7, #12]
 801d724:	f7e7 f881 	bl	800482a <mg_xprintf>
 801d728:	4602      	mov	r2, r0
 801d72a:	6a3b      	ldr	r3, [r7, #32]
 801d72c:	4413      	add	r3, r2
 801d72e:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 801d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d732:	3301      	adds	r3, #1
 801d734:	627b      	str	r3, [r7, #36]	@ 0x24
 801d736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d738:	4613      	mov	r3, r2
 801d73a:	005b      	lsls	r3, r3, #1
 801d73c:	4413      	add	r3, r2
 801d73e:	00db      	lsls	r3, r3, #3
 801d740:	461a      	mov	r2, r3
 801d742:	69bb      	ldr	r3, [r7, #24]
 801d744:	4413      	add	r3, r2
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	f47f af34 	bne.w	801d5b6 <print_struct+0x32>
    }
  }
  return len;
 801d74e:	6a3b      	ldr	r3, [r7, #32]
}
 801d750:	4618      	mov	r0, r3
 801d752:	3728      	adds	r7, #40	@ 0x28
 801d754:	46bd      	mov	sp, r7
 801d756:	bd80      	pop	{r7, pc}
 801d758:	08021e6c 	.word	0x08021e6c
 801d75c:	08021f18 	.word	0x08021f18
 801d760:	0800d26d 	.word	0x0800d26d
 801d764:	08021f1c 	.word	0x08021f1c
 801d768:	08021f24 	.word	0x08021f24
 801d76c:	08021f28 	.word	0x08021f28
 801d770:	08021f2c 	.word	0x08021f2c
 801d774:	08021f34 	.word	0x08021f34
 801d778:	08021d8c 	.word	0x08021d8c
 801d77c:	08021f0c 	.word	0x08021f0c
 801d780:	08021f04 	.word	0x08021f04
 801d784:	08021f14 	.word	0x08021f14
 801d788:	08021f38 	.word	0x08021f38
 801d78c:	08021f40 	.word	0x08021f40
 801d790:	08021f44 	.word	0x08021f44

0801d794 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 801d794:	b580      	push	{r7, lr}
 801d796:	b0a8      	sub	sp, #160	@ 0xa0
 801d798:	af04      	add	r7, sp, #16
 801d79a:	60f8      	str	r0, [r7, #12]
 801d79c:	60b9      	str	r1, [r7, #8]
 801d79e:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	69db      	ldr	r3, [r3, #28]
 801d7a4:	4619      	mov	r1, r3
 801d7a6:	2001      	movs	r0, #1
 801d7a8:	f000 fc8e 	bl	801e0c8 <calloc>
 801d7ac:	4603      	mov	r3, r0
 801d7ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	6a1b      	ldr	r3, [r3, #32]
 801d7b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801d7ba:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 801d7bc:	68bb      	ldr	r3, [r7, #8]
 801d7be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	f000 80da 	beq.w	801d97c <handle_object+0x1e8>
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	69db      	ldr	r3, [r3, #28]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	f000 80d5 	beq.w	801d97c <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	69db      	ldr	r3, [r3, #28]
 801d7d6:	4619      	mov	r1, r3
 801d7d8:	2001      	movs	r0, #1
 801d7da:	f000 fc75 	bl	801e0c8 <calloc>
 801d7de:	4603      	mov	r3, r0
 801d7e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	69db      	ldr	r3, [r3, #28]
 801d7e8:	461a      	mov	r2, r3
 801d7ea:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801d7ee:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801d7f2:	f001 f874 	bl	801e8de <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d7fc:	e08e      	b.n	801d91c <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	6999      	ldr	r1, [r3, #24]
 801d802:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801d806:	4613      	mov	r3, r2
 801d808:	005b      	lsls	r3, r3, #1
 801d80a:	4413      	add	r3, r2
 801d80c:	00db      	lsls	r3, r3, #3
 801d80e:	440b      	add	r3, r1
 801d810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 801d814:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	f107 0010 	add.w	r0, r7, #16
 801d81e:	4a62      	ldr	r2, [pc, #392]	@ (801d9a8 <handle_object+0x214>)
 801d820:	2164      	movs	r1, #100	@ 0x64
 801d822:	f7ef fadd 	bl	800cde0 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 801d826:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d82a:	685b      	ldr	r3, [r3, #4]
 801d82c:	495f      	ldr	r1, [pc, #380]	@ (801d9ac <handle_object+0x218>)
 801d82e:	4618      	mov	r0, r3
 801d830:	f7e2 fd06 	bl	8000240 <strcmp>
 801d834:	4603      	mov	r3, r0
 801d836:	2b00      	cmp	r3, #0
 801d838:	d11c      	bne.n	801d874 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 801d83a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801d83e:	f107 0210 	add.w	r2, r7, #16
 801d842:	68b9      	ldr	r1, [r7, #8]
 801d844:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d848:	c903      	ldmia	r1, {r0, r1}
 801d84a:	f7eb fb70 	bl	8008f2e <mg_json_get_num>
 801d84e:	4603      	mov	r3, r0
 801d850:	2b00      	cmp	r3, #0
 801d852:	d05e      	beq.n	801d912 <handle_object+0x17e>
          int v = (int) d;
 801d854:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 801d858:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d85c:	ee17 3a90 	vmov	r3, s15
 801d860:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 801d862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d866:	68db      	ldr	r3, [r3, #12]
 801d868:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801d86c:	4413      	add	r3, r2
 801d86e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801d870:	601a      	str	r2, [r3, #0]
 801d872:	e04e      	b.n	801d912 <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 801d874:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d878:	685b      	ldr	r3, [r3, #4]
 801d87a:	494d      	ldr	r1, [pc, #308]	@ (801d9b0 <handle_object+0x21c>)
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7e2 fcdf 	bl	8000240 <strcmp>
 801d882:	4603      	mov	r3, r0
 801d884:	2b00      	cmp	r3, #0
 801d886:	d10e      	bne.n	801d8a6 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 801d888:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d88c:	68db      	ldr	r3, [r3, #12]
 801d88e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801d892:	4413      	add	r3, r2
 801d894:	f107 0210 	add.w	r2, r7, #16
 801d898:	68b9      	ldr	r1, [r7, #8]
 801d89a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d89e:	c903      	ldmia	r1, {r0, r1}
 801d8a0:	f7eb fb8a 	bl	8008fb8 <mg_json_get_bool>
 801d8a4:	e035      	b.n	801d912 <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 801d8a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d8aa:	685b      	ldr	r3, [r3, #4]
 801d8ac:	4941      	ldr	r1, [pc, #260]	@ (801d9b4 <handle_object+0x220>)
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	f7e2 fcc6 	bl	8000240 <strcmp>
 801d8b4:	4603      	mov	r3, r0
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d10e      	bne.n	801d8d8 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 801d8ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d8be:	68db      	ldr	r3, [r3, #12]
 801d8c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801d8c4:	4413      	add	r3, r2
 801d8c6:	f107 0210 	add.w	r2, r7, #16
 801d8ca:	68b9      	ldr	r1, [r7, #8]
 801d8cc:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d8d0:	c903      	ldmia	r1, {r0, r1}
 801d8d2:	f7eb fb2c 	bl	8008f2e <mg_json_get_num>
 801d8d6:	e01c      	b.n	801d912 <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 801d8d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d8dc:	685b      	ldr	r3, [r3, #4]
 801d8de:	4936      	ldr	r1, [pc, #216]	@ (801d9b8 <handle_object+0x224>)
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	f7e2 fcad 	bl	8000240 <strcmp>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d112      	bne.n	801d912 <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 801d8ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d8f0:	68db      	ldr	r3, [r3, #12]
 801d8f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801d8f6:	18d0      	adds	r0, r2, r3
 801d8f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d8fc:	691b      	ldr	r3, [r3, #16]
 801d8fe:	f107 0210 	add.w	r2, r7, #16
 801d902:	68b9      	ldr	r1, [r7, #8]
 801d904:	9300      	str	r3, [sp, #0]
 801d906:	4603      	mov	r3, r0
 801d908:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 801d90c:	c903      	ldmia	r1, {r0, r1}
 801d90e:	f7ff fbe3 	bl	801d0d8 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 801d912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801d916:	3301      	adds	r3, #1
 801d918:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	6999      	ldr	r1, [r3, #24]
 801d920:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801d924:	4613      	mov	r3, r2
 801d926:	005b      	lsls	r3, r3, #1
 801d928:	4413      	add	r3, r2
 801d92a:	00db      	lsls	r3, r3, #3
 801d92c:	440b      	add	r3, r1
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	f47f af64 	bne.w	801d7fe <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	69db      	ldr	r3, [r3, #28]
 801d93a:	461a      	mov	r2, r3
 801d93c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801d940:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801d944:	f000 fe6b 	bl	801e61e <memcmp>
 801d948:	4603      	mov	r3, r0
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d004      	beq.n	801d958 <handle_object+0x1c4>
 801d94e:	4b1b      	ldr	r3, [pc, #108]	@ (801d9bc <handle_object+0x228>)
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	3301      	adds	r3, #1
 801d954:	4a19      	ldr	r2, [pc, #100]	@ (801d9bc <handle_object+0x228>)
 801d956:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d004      	beq.n	801d96a <handle_object+0x1d6>
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d964:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801d968:	4798      	blx	r3
    free(tmp);
 801d96a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801d96e:	f000 fbcf 	bl	801e110 <free>
    h->getter(data);  // Re-sync again after setting
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	6a1b      	ldr	r3, [r3, #32]
 801d976:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801d97a:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	699b      	ldr	r3, [r3, #24]
 801d980:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d984:	9202      	str	r2, [sp, #8]
 801d986:	9301      	str	r3, [sp, #4]
 801d988:	4b0d      	ldr	r3, [pc, #52]	@ (801d9c0 <handle_object+0x22c>)
 801d98a:	9300      	str	r3, [sp, #0]
 801d98c:	4b0d      	ldr	r3, [pc, #52]	@ (801d9c4 <handle_object+0x230>)
 801d98e:	4a0e      	ldr	r2, [pc, #56]	@ (801d9c8 <handle_object+0x234>)
 801d990:	21c8      	movs	r1, #200	@ 0xc8
 801d992:	68f8      	ldr	r0, [r7, #12]
 801d994:	f7e9 f852 	bl	8006a3c <mg_http_reply>
                data);
  free(data);
 801d998:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801d99c:	f000 fbb8 	bl	801e110 <free>
}
 801d9a0:	bf00      	nop
 801d9a2:	3790      	adds	r7, #144	@ 0x90
 801d9a4:	46bd      	mov	sp, r7
 801d9a6:	bd80      	pop	{r7, pc}
 801d9a8:	08021f4c 	.word	0x08021f4c
 801d9ac:	08021f24 	.word	0x08021f24
 801d9b0:	08021d8c 	.word	0x08021d8c
 801d9b4:	08021f2c 	.word	0x08021f2c
 801d9b8:	08021f38 	.word	0x08021f38
 801d9bc:	200037f0 	.word	0x200037f0
 801d9c0:	0801d585 	.word	0x0801d585
 801d9c4:	08021f54 	.word	0x08021f54
 801d9c8:	08021ec8 	.word	0x08021ec8

0801d9cc <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 801d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9d0:	b093      	sub	sp, #76	@ 0x4c
 801d9d2:	af02      	add	r7, sp, #8
 801d9d4:	6178      	str	r0, [r7, #20]
 801d9d6:	6139      	str	r1, [r7, #16]
 801d9d8:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	1d19      	adds	r1, r3, #4
 801d9e0:	68fa      	ldr	r2, [r7, #12]
 801d9e2:	6011      	str	r1, [r2, #0]
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	1d19      	adds	r1, r3, #4
 801d9ee:	68fa      	ldr	r2, [r7, #12]
 801d9f0:	6011      	str	r1, [r2, #0]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	1d19      	adds	r1, r3, #4
 801da02:	68fa      	ldr	r2, [r7, #12]
 801da04:	6011      	str	r1, [r2, #0]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 801da10:	2314      	movs	r3, #20
 801da12:	61fb      	str	r3, [r7, #28]
 801da14:	2300      	movs	r3, #0
 801da16:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 801da18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da1a:	69db      	ldr	r3, [r3, #28]
 801da1c:	4619      	mov	r1, r3
 801da1e:	2001      	movs	r0, #1
 801da20:	f000 fb52 	bl	801e0c8 <calloc>
 801da24:	4603      	mov	r3, r0
 801da26:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 801da28:	2300      	movs	r3, #0
 801da2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801da2c:	e02f      	b.n	801da8e <print_array+0xc2>
    ha->getter(start + i, data);
 801da2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da30:	6a1e      	ldr	r6, [r3, #32]
 801da32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da34:	2200      	movs	r2, #0
 801da36:	469a      	mov	sl, r3
 801da38:	4693      	mov	fp, r2
 801da3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801da3e:	eb1a 0102 	adds.w	r1, sl, r2
 801da42:	6039      	str	r1, [r7, #0]
 801da44:	eb4b 0303 	adc.w	r3, fp, r3
 801da48:	607b      	str	r3, [r7, #4]
 801da4a:	69ba      	ldr	r2, [r7, #24]
 801da4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801da50:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 801da52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da54:	2b00      	cmp	r3, #0
 801da56:	d008      	beq.n	801da6a <print_array+0x9e>
 801da58:	4a1b      	ldr	r2, [pc, #108]	@ (801dac8 <print_array+0xfc>)
 801da5a:	6939      	ldr	r1, [r7, #16]
 801da5c:	6978      	ldr	r0, [r7, #20]
 801da5e:	f7e6 fee4 	bl	800482a <mg_xprintf>
 801da62:	4602      	mov	r2, r0
 801da64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da66:	4413      	add	r3, r2
 801da68:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 801da6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da6c:	699b      	ldr	r3, [r3, #24]
 801da6e:	69ba      	ldr	r2, [r7, #24]
 801da70:	9201      	str	r2, [sp, #4]
 801da72:	9300      	str	r3, [sp, #0]
 801da74:	4b15      	ldr	r3, [pc, #84]	@ (801dacc <print_array+0x100>)
 801da76:	4a16      	ldr	r2, [pc, #88]	@ (801dad0 <print_array+0x104>)
 801da78:	6939      	ldr	r1, [r7, #16]
 801da7a:	6978      	ldr	r0, [r7, #20]
 801da7c:	f7e6 fed5 	bl	800482a <mg_xprintf>
 801da80:	4602      	mov	r2, r0
 801da82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da84:	4413      	add	r3, r2
 801da86:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 801da88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da8a:	3301      	adds	r3, #1
 801da8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801da8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801da90:	69fb      	ldr	r3, [r7, #28]
 801da92:	429a      	cmp	r2, r3
 801da94:	d20f      	bcs.n	801dab6 <print_array+0xea>
 801da96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da98:	2200      	movs	r2, #0
 801da9a:	4698      	mov	r8, r3
 801da9c:	4691      	mov	r9, r2
 801da9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801daa2:	eb18 0402 	adds.w	r4, r8, r2
 801daa6:	eb49 0503 	adc.w	r5, r9, r3
 801daaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801daae:	4294      	cmp	r4, r2
 801dab0:	eb75 0303 	sbcs.w	r3, r5, r3
 801dab4:	d3bb      	bcc.n	801da2e <print_array+0x62>
  }
  free(data);
 801dab6:	69b8      	ldr	r0, [r7, #24]
 801dab8:	f000 fb2a 	bl	801e110 <free>
  return len;
 801dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 801dabe:	4618      	mov	r0, r3
 801dac0:	3744      	adds	r7, #68	@ 0x44
 801dac2:	46bd      	mov	sp, r7
 801dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac8:	08021f18 	.word	0x08021f18
 801dacc:	0801d585 	.word	0x0801d585
 801dad0:	08021f5c 	.word	0x08021f5c

0801dad4 <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 801dad4:	b590      	push	{r4, r7, lr}
 801dad6:	b0a9      	sub	sp, #164	@ 0xa4
 801dad8:	af14      	add	r7, sp, #80	@ 0x50
 801dada:	60f8      	str	r0, [r7, #12]
 801dadc:	60b9      	str	r1, [r7, #8]
 801dade:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 801dae0:	f107 0320 	add.w	r3, r7, #32
 801dae4:	2228      	movs	r2, #40	@ 0x28
 801dae6:	2100      	movs	r1, #0
 801dae8:	4618      	mov	r0, r3
 801daea:	f000 fdc2 	bl	801e672 <memset>
  uint64_t size = h->sizer();
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801daf2:	4798      	blx	r3
 801daf4:	4602      	mov	r2, r0
 801daf6:	460b      	mov	r3, r1
 801daf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 801dafc:	f04f 0200 	mov.w	r2, #0
 801db00:	f04f 0300 	mov.w	r3, #0
 801db04:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 801db08:	68bb      	ldr	r3, [r7, #8]
 801db0a:	f103 0010 	add.w	r0, r3, #16
 801db0e:	f107 0220 	add.w	r2, r7, #32
 801db12:	2328      	movs	r3, #40	@ 0x28
 801db14:	4927      	ldr	r1, [pc, #156]	@ (801dbb4 <handle_array+0xe0>)
 801db16:	f7e7 fdb3 	bl	8005680 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 801db1a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801db1e:	f107 0220 	add.w	r2, r7, #32
 801db22:	4611      	mov	r1, r2
 801db24:	4618      	mov	r0, r3
 801db26:	f7f2 fd0f 	bl	8010548 <mg_str_s>
 801db2a:	f107 0310 	add.w	r3, r7, #16
 801db2e:	2208      	movs	r2, #8
 801db30:	9200      	str	r2, [sp, #0]
 801db32:	220a      	movs	r2, #10
 801db34:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801db38:	c903      	ldmia	r1, {r0, r1}
 801db3a:	f7f2 ff60 	bl	80109fe <mg_str_to_num>
 801db3e:	4603      	mov	r3, r0
 801db40:	f083 0301 	eor.w	r3, r3, #1
 801db44:	b2db      	uxtb	r3, r3
 801db46:	2b00      	cmp	r3, #0
 801db48:	d005      	beq.n	801db56 <handle_array+0x82>
 801db4a:	f04f 0200 	mov.w	r2, #0
 801db4e:	f04f 0300 	mov.w	r3, #0
 801db52:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 801db56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801db5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801db5e:	f107 0410 	add.w	r4, r7, #16
 801db62:	9412      	str	r4, [sp, #72]	@ 0x48
 801db64:	f107 0418 	add.w	r4, r7, #24
 801db68:	9411      	str	r4, [sp, #68]	@ 0x44
 801db6a:	687c      	ldr	r4, [r7, #4]
 801db6c:	9410      	str	r4, [sp, #64]	@ 0x40
 801db6e:	4c12      	ldr	r4, [pc, #72]	@ (801dbb8 <handle_array+0xe4>)
 801db70:	940f      	str	r4, [sp, #60]	@ 0x3c
 801db72:	4c12      	ldr	r4, [pc, #72]	@ (801dbbc <handle_array+0xe8>)
 801db74:	940e      	str	r4, [sp, #56]	@ 0x38
 801db76:	2400      	movs	r4, #0
 801db78:	940d      	str	r4, [sp, #52]	@ 0x34
 801db7a:	4c11      	ldr	r4, [pc, #68]	@ (801dbc0 <handle_array+0xec>)
 801db7c:	940c      	str	r4, [sp, #48]	@ 0x30
 801db7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801db82:	490c      	ldr	r1, [pc, #48]	@ (801dbb4 <handle_array+0xe0>)
 801db84:	9108      	str	r1, [sp, #32]
 801db86:	2100      	movs	r1, #0
 801db88:	9107      	str	r1, [sp, #28]
 801db8a:	490d      	ldr	r1, [pc, #52]	@ (801dbc0 <handle_array+0xec>)
 801db8c:	9106      	str	r1, [sp, #24]
 801db8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801db92:	4b0c      	ldr	r3, [pc, #48]	@ (801dbc4 <handle_array+0xf0>)
 801db94:	9302      	str	r3, [sp, #8]
 801db96:	2300      	movs	r3, #0
 801db98:	9301      	str	r3, [sp, #4]
 801db9a:	4b09      	ldr	r3, [pc, #36]	@ (801dbc0 <handle_array+0xec>)
 801db9c:	9300      	str	r3, [sp, #0]
 801db9e:	4b0a      	ldr	r3, [pc, #40]	@ (801dbc8 <handle_array+0xf4>)
 801dba0:	4a0a      	ldr	r2, [pc, #40]	@ (801dbcc <handle_array+0xf8>)
 801dba2:	21c8      	movs	r1, #200	@ 0xc8
 801dba4:	68f8      	ldr	r0, [r7, #12]
 801dba6:	f7e8 ff49 	bl	8006a3c <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 801dbaa:	bf00      	nop
 801dbac:	3754      	adds	r7, #84	@ 0x54
 801dbae:	46bd      	mov	sp, r7
 801dbb0:	bd90      	pop	{r4, r7, pc}
 801dbb2:	bf00      	nop
 801dbb4:	08021f64 	.word	0x08021f64
 801dbb8:	0801d9cd 	.word	0x0801d9cd
 801dbbc:	08021d9c 	.word	0x08021d9c
 801dbc0:	0800d26d 	.word	0x0800d26d
 801dbc4:	08021f8c 	.word	0x08021f8c
 801dbc8:	08021f6c 	.word	0x08021f6c
 801dbcc:	08021ec8 	.word	0x08021ec8

0801dbd0 <handle_api_call>:
  }
  return len;
}

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 801dbd0:	b580      	push	{r7, lr}
 801dbd2:	b088      	sub	sp, #32
 801dbd4:	af02      	add	r7, sp, #8
 801dbd6:	60f8      	str	r0, [r7, #12]
 801dbd8:	60b9      	str	r1, [r7, #8]
 801dbda:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	685b      	ldr	r3, [r3, #4]
 801dbe0:	492a      	ldr	r1, [pc, #168]	@ (801dc8c <handle_api_call+0xbc>)
 801dbe2:	4618      	mov	r0, r3
 801dbe4:	f7e2 fb2c 	bl	8000240 <strcmp>
 801dbe8:	4603      	mov	r3, r0
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d008      	beq.n	801dc00 <handle_api_call+0x30>
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	685b      	ldr	r3, [r3, #4]
 801dbf2:	4927      	ldr	r1, [pc, #156]	@ (801dc90 <handle_api_call+0xc0>)
 801dbf4:	4618      	mov	r0, r3
 801dbf6:	f7e2 fb23 	bl	8000240 <strcmp>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d105      	bne.n	801dc0c <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 801dc00:	687a      	ldr	r2, [r7, #4]
 801dc02:	68b9      	ldr	r1, [r7, #8]
 801dc04:	68f8      	ldr	r0, [r7, #12]
 801dc06:	f7ff fdc5 	bl	801d794 <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 801dc0a:	e03b      	b.n	801dc84 <handle_api_call+0xb4>
  } else if (strcmp(h->type, "array") == 0) {
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	685b      	ldr	r3, [r3, #4]
 801dc10:	4920      	ldr	r1, [pc, #128]	@ (801dc94 <handle_api_call+0xc4>)
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7e2 fb14 	bl	8000240 <strcmp>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d105      	bne.n	801dc2a <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 801dc1e:	687a      	ldr	r2, [r7, #4]
 801dc20:	68b9      	ldr	r1, [r7, #8]
 801dc22:	68f8      	ldr	r0, [r7, #12]
 801dc24:	f7ff ff56 	bl	801dad4 <handle_array>
}
 801dc28:	e02c      	b.n	801dc84 <handle_api_call+0xb4>
  } else if (strcmp(h->type, "action") == 0) {
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	685b      	ldr	r3, [r3, #4]
 801dc2e:	491a      	ldr	r1, [pc, #104]	@ (801dc98 <handle_api_call+0xc8>)
 801dc30:	4618      	mov	r0, r3
 801dc32:	f7e2 fb05 	bl	8000240 <strcmp>
 801dc36:	4603      	mov	r3, r0
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	d10a      	bne.n	801dc52 <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 801dc40:	697b      	ldr	r3, [r7, #20]
 801dc42:	699a      	ldr	r2, [r3, #24]
 801dc44:	697b      	ldr	r3, [r7, #20]
 801dc46:	69db      	ldr	r3, [r3, #28]
 801dc48:	68b9      	ldr	r1, [r7, #8]
 801dc4a:	68f8      	ldr	r0, [r7, #12]
 801dc4c:	f7ff fc56 	bl	801d4fc <handle_action>
}
 801dc50:	e018      	b.n	801dc84 <handle_api_call+0xb4>
  } else if (strcmp(h->type, "custom") == 0) {
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	685b      	ldr	r3, [r3, #4]
 801dc56:	4911      	ldr	r1, [pc, #68]	@ (801dc9c <handle_api_call+0xcc>)
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f7e2 faf1 	bl	8000240 <strcmp>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d105      	bne.n	801dc70 <handle_api_call+0xa0>
    ((struct apihandler_custom *) h)->reply(c, hm);
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	699b      	ldr	r3, [r3, #24]
 801dc68:	68b9      	ldr	r1, [r7, #8]
 801dc6a:	68f8      	ldr	r0, [r7, #12]
 801dc6c:	4798      	blx	r3
}
 801dc6e:	e009      	b.n	801dc84 <handle_api_call+0xb4>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	685b      	ldr	r3, [r3, #4]
 801dc74:	9300      	str	r3, [sp, #0]
 801dc76:	4b0a      	ldr	r3, [pc, #40]	@ (801dca0 <handle_api_call+0xd0>)
 801dc78:	4a0a      	ldr	r2, [pc, #40]	@ (801dca4 <handle_api_call+0xd4>)
 801dc7a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801dc7e:	68f8      	ldr	r0, [r7, #12]
 801dc80:	f7e8 fedc 	bl	8006a3c <mg_http_reply>
}
 801dc84:	bf00      	nop
 801dc86:	3718      	adds	r7, #24
 801dc88:	46bd      	mov	sp, r7
 801dc8a:	bd80      	pop	{r7, pc}
 801dc8c:	08021fa0 	.word	0x08021fa0
 801dc90:	08021d9c 	.word	0x08021d9c
 801dc94:	08021fa8 	.word	0x08021fa8
 801dc98:	08021df4 	.word	0x08021df4
 801dc9c:	08021e08 	.word	0x08021e08
 801dca0:	08021fb0 	.word	0x08021fb0
 801dca4:	08021ec8 	.word	0x08021ec8

0801dca8 <http_ev_handler>:
void glue_update_state(void) {
  s_device_change_version++;
}

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 801dca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcaa:	b0a9      	sub	sp, #164	@ 0xa4
 801dcac:	af06      	add	r7, sp, #24
 801dcae:	61f8      	str	r0, [r7, #28]
 801dcb0:	61b9      	str	r1, [r7, #24]
 801dcb2:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 801dcb4:	69bb      	ldr	r3, [r7, #24]
 801dcb6:	2b0a      	cmp	r3, #10
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 801dcb8:	69fb      	ldr	r3, [r7, #28]
 801dcba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801dcbe:	f003 0302 	and.w	r3, r3, #2
 801dcc2:	b2db      	uxtb	r3, r3
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d104      	bne.n	801dcd2 <http_ev_handler+0x2a>
 801dcc8:	697a      	ldr	r2, [r7, #20]
 801dcca:	69b9      	ldr	r1, [r7, #24]
 801dccc:	69f8      	ldr	r0, [r7, #28]
 801dcce:	f7ff fbd3 	bl	801d478 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 801dcd2:	69bb      	ldr	r3, [r7, #24]
 801dcd4:	2b02      	cmp	r3, #2
 801dcd6:	d128      	bne.n	801dd2a <http_ev_handler+0x82>
 801dcd8:	69fb      	ldr	r3, [r7, #28]
 801dcda:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801dcde:	f003 0302 	and.w	r3, r3, #2
 801dce2:	b2db      	uxtb	r3, r3
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d120      	bne.n	801dd2a <http_ev_handler+0x82>
 801dce8:	69fb      	ldr	r3, [r7, #28]
 801dcea:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801dcee:	2b41      	cmp	r3, #65	@ 0x41
 801dcf0:	d11b      	bne.n	801dd2a <http_ev_handler+0x82>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 801dcf2:	69fb      	ldr	r3, [r7, #28]
 801dcf4:	3388      	adds	r3, #136	@ 0x88
 801dcf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (as->fn() == false) {
 801dcfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801dcfe:	685b      	ldr	r3, [r3, #4]
 801dd00:	4798      	blx	r3
 801dd02:	4603      	mov	r3, r0
 801dd04:	f083 0301 	eor.w	r3, r3, #1
 801dd08:	b2db      	uxtb	r3, r3
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	f000 80de 	beq.w	801decc <http_ev_handler+0x224>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 801dd10:	4b95      	ldr	r3, [pc, #596]	@ (801df68 <http_ev_handler+0x2c0>)
 801dd12:	4a96      	ldr	r2, [pc, #600]	@ (801df6c <http_ev_handler+0x2c4>)
 801dd14:	21c8      	movs	r1, #200	@ 0xc8
 801dd16:	69f8      	ldr	r0, [r7, #28]
 801dd18:	f7e8 fe90 	bl	8006a3c <mg_http_reply>
      memset(as, 0, sizeof(*as));
 801dd1c:	2208      	movs	r2, #8
 801dd1e:	2100      	movs	r1, #0
 801dd20:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801dd24:	f000 fca5 	bl	801e672 <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 801dd28:	e0d0      	b.n	801decc <http_ev_handler+0x224>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801dd2a:	69bb      	ldr	r3, [r7, #24]
 801dd2c:	2b0b      	cmp	r3, #11
 801dd2e:	f040 8096 	bne.w	801de5e <http_ev_handler+0x1b6>
 801dd32:	69fb      	ldr	r3, [r7, #28]
 801dd34:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801dd38:	f003 0302 	and.w	r3, r3, #2
 801dd3c:	b2db      	uxtb	r3, r3
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	f040 808d 	bne.w	801de5e <http_ev_handler+0x1b6>
 801dd44:	69fb      	ldr	r3, [r7, #28]
 801dd46:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	f040 8087 	bne.w	801de5e <http_ev_handler+0x1b6>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801dd50:	697b      	ldr	r3, [r7, #20]
 801dd52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 801dd56:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801dd5a:	f7ff f991 	bl	801d080 <find_handler>
 801dd5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
      handle_login(c, u);
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
      handle_logout(c);
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 801dd60:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801dd64:	4982      	ldr	r1, [pc, #520]	@ (801df70 <http_ev_handler+0x2c8>)
 801dd66:	4618      	mov	r0, r3
 801dd68:	f7f2 fbee 	bl	8010548 <mg_str_s>
 801dd6c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801dd70:	2300      	movs	r3, #0
 801dd72:	9300      	str	r3, [sp, #0]
 801dd74:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801dd78:	cb0c      	ldmia	r3, {r2, r3}
 801dd7a:	3108      	adds	r1, #8
 801dd7c:	c903      	ldmia	r1, {r0, r1}
 801dd7e:	f7f2 fced 	bl	801075c <mg_match>
 801dd82:	4603      	mov	r3, r0
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d006      	beq.n	801dd96 <http_ev_handler+0xee>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 801dd88:	4b7a      	ldr	r3, [pc, #488]	@ (801df74 <http_ev_handler+0x2cc>)
 801dd8a:	4a78      	ldr	r2, [pc, #480]	@ (801df6c <http_ev_handler+0x2c4>)
 801dd8c:	21c8      	movs	r1, #200	@ 0xc8
 801dd8e:	69f8      	ldr	r0, [r7, #28]
 801dd90:	f7e8 fe54 	bl	8006a3c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801dd94:	e09c      	b.n	801ded0 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 801dd96:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801dd9a:	4977      	ldr	r1, [pc, #476]	@ (801df78 <http_ev_handler+0x2d0>)
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	f7f2 fbd3 	bl	8010548 <mg_str_s>
 801dda2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801dda6:	2300      	movs	r3, #0
 801dda8:	9300      	str	r3, [sp, #0]
 801ddaa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801ddae:	cb0c      	ldmia	r3, {r2, r3}
 801ddb0:	3108      	adds	r1, #8
 801ddb2:	c903      	ldmia	r1, {r0, r1}
 801ddb4:	f7f2 fcd2 	bl	801075c <mg_match>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d006      	beq.n	801ddcc <http_ev_handler+0x124>
      mg_ws_upgrade(c, hm, NULL);
 801ddbe:	2200      	movs	r2, #0
 801ddc0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801ddc4:	69f8      	ldr	r0, [r7, #28]
 801ddc6:	f7fe f9eb 	bl	801c1a0 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801ddca:	e081      	b.n	801ded0 <http_ev_handler+0x228>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 801ddcc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801ddd0:	496a      	ldr	r1, [pc, #424]	@ (801df7c <http_ev_handler+0x2d4>)
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	f7f2 fbb8 	bl	8010548 <mg_str_s>
 801ddd8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801dddc:	2300      	movs	r3, #0
 801ddde:	9300      	str	r3, [sp, #0]
 801dde0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801dde4:	cb0c      	ldmia	r3, {r2, r3}
 801dde6:	3108      	adds	r1, #8
 801dde8:	c903      	ldmia	r1, {r0, r1}
 801ddea:	f7f2 fcb7 	bl	801075c <mg_match>
 801ddee:	4603      	mov	r3, r0
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d00f      	beq.n	801de14 <http_ev_handler+0x16c>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 801ddf4:	4b62      	ldr	r3, [pc, #392]	@ (801df80 <http_ev_handler+0x2d8>)
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	9303      	str	r3, [sp, #12]
 801ddfa:	4b62      	ldr	r3, [pc, #392]	@ (801df84 <http_ev_handler+0x2dc>)
 801ddfc:	9302      	str	r3, [sp, #8]
 801ddfe:	2300      	movs	r3, #0
 801de00:	9301      	str	r3, [sp, #4]
 801de02:	4b61      	ldr	r3, [pc, #388]	@ (801df88 <http_ev_handler+0x2e0>)
 801de04:	9300      	str	r3, [sp, #0]
 801de06:	4b61      	ldr	r3, [pc, #388]	@ (801df8c <http_ev_handler+0x2e4>)
 801de08:	4a58      	ldr	r2, [pc, #352]	@ (801df6c <http_ev_handler+0x2c4>)
 801de0a:	21c8      	movs	r1, #200	@ 0xc8
 801de0c:	69f8      	ldr	r0, [r7, #28]
 801de0e:	f7e8 fe15 	bl	8006a3c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801de12:	e05d      	b.n	801ded0 <http_ev_handler+0x228>
                    s_device_change_version);
    } else if (h != NULL) {
 801de14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801de16:	2b00      	cmp	r3, #0
 801de18:	d006      	beq.n	801de28 <http_ev_handler+0x180>
      handle_api_call(c, hm, h);
 801de1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801de1c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801de20:	69f8      	ldr	r0, [r7, #28]
 801de22:	f7ff fed5 	bl	801dbd0 <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801de26:	e053      	b.n	801ded0 <http_ev_handler+0x228>
    } else if (c->data[0] == 0)
 801de28:	69fb      	ldr	r3, [r7, #28]
 801de2a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d14e      	bne.n	801ded0 <http_ev_handler+0x228>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 801de32:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801de36:	2218      	movs	r2, #24
 801de38:	2100      	movs	r1, #0
 801de3a:	4618      	mov	r0, r3
 801de3c:	f000 fc19 	bl	801e672 <memset>
      opts.root_dir = "/web_root/";
 801de40:	4b53      	ldr	r3, [pc, #332]	@ (801df90 <http_ev_handler+0x2e8>)
 801de42:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 801de44:	4b53      	ldr	r3, [pc, #332]	@ (801df94 <http_ev_handler+0x2ec>)
 801de46:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 801de48:	4b53      	ldr	r3, [pc, #332]	@ (801df98 <http_ev_handler+0x2f0>)
 801de4a:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 801de4c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801de50:	461a      	mov	r2, r3
 801de52:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801de56:	69f8      	ldr	r0, [r7, #28]
 801de58:	f7e9 fd02 	bl	8007860 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801de5c:	e038      	b.n	801ded0 <http_ev_handler+0x228>
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 801de5e:	69bb      	ldr	r3, [r7, #24]
 801de60:	2b0d      	cmp	r3, #13
 801de62:	d036      	beq.n	801ded2 <http_ev_handler+0x22a>
 801de64:	69bb      	ldr	r3, [r7, #24]
 801de66:	2b0e      	cmp	r3, #14
 801de68:	d033      	beq.n	801ded2 <http_ev_handler+0x22a>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 801de6a:	69bb      	ldr	r3, [r7, #24]
 801de6c:	2b05      	cmp	r3, #5
 801de6e:	d130      	bne.n	801ded2 <http_ev_handler+0x22a>
    if (c->fn_data != NULL) {  // TLS listener
 801de70:	69fb      	ldr	r3, [r7, #28]
 801de72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801de74:	2b00      	cmp	r3, #0
 801de76:	d02c      	beq.n	801ded2 <http_ev_handler+0x22a>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 801de78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801de7c:	2224      	movs	r2, #36	@ 0x24
 801de7e:	2100      	movs	r1, #0
 801de80:	4618      	mov	r0, r3
 801de82:	f000 fbf6 	bl	801e672 <memset>
      opts.cert = mg_str(TLS_CERT);
 801de86:	f107 0308 	add.w	r3, r7, #8
 801de8a:	4944      	ldr	r1, [pc, #272]	@ (801df9c <http_ev_handler+0x2f4>)
 801de8c:	4618      	mov	r0, r3
 801de8e:	f7f2 fb5b 	bl	8010548 <mg_str_s>
 801de92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801de96:	f107 0208 	add.w	r2, r7, #8
 801de9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801de9e:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 801dea2:	f107 0308 	add.w	r3, r7, #8
 801dea6:	493e      	ldr	r1, [pc, #248]	@ (801dfa0 <http_ev_handler+0x2f8>)
 801dea8:	4618      	mov	r0, r3
 801deaa:	f7f2 fb4d 	bl	8010548 <mg_str_s>
 801deae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801deb2:	f107 0208 	add.w	r2, r7, #8
 801deb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801deba:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 801debe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801dec2:	4619      	mov	r1, r3
 801dec4:	69f8      	ldr	r0, [r7, #28]
 801dec6:	f7f6 fec3 	bl	8014c50 <mg_tls_init>
 801deca:	e002      	b.n	801ded2 <http_ev_handler+0x22a>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 801decc:	bf00      	nop
 801dece:	e000      	b.n	801ded2 <http_ev_handler+0x22a>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 801ded0:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 801ded2:	69bb      	ldr	r3, [r7, #24]
 801ded4:	2b0b      	cmp	r3, #11
 801ded6:	d143      	bne.n	801df60 <http_ev_handler+0x2b8>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 801ded8:	697b      	ldr	r3, [r7, #20]
 801deda:	67bb      	str	r3, [r7, #120]	@ 0x78
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 801dedc:	4b31      	ldr	r3, [pc, #196]	@ (801dfa4 <http_ev_handler+0x2fc>)
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	2b02      	cmp	r3, #2
 801dee2:	dd2d      	ble.n	801df40 <http_ev_handler+0x298>
 801dee4:	4b30      	ldr	r3, [pc, #192]	@ (801dfa8 <http_ev_handler+0x300>)
 801dee6:	f240 223f 	movw	r2, #575	@ 0x23f
 801deea:	4930      	ldr	r1, [pc, #192]	@ (801dfac <http_ev_handler+0x304>)
 801deec:	2003      	movs	r0, #3
 801deee:	f7eb f95d 	bl	80091ac <mg_log_prefix>
 801def2:	69fb      	ldr	r3, [r7, #28]
 801def4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 801def6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	607b      	str	r3, [r7, #4]
 801defc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	603b      	str	r3, [r7, #0]
 801df02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801df04:	68db      	ldr	r3, [r3, #12]
 801df06:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801df08:	6892      	ldr	r2, [r2, #8]
 801df0a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801df0c:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 801df10:	69f8      	ldr	r0, [r7, #28]
 801df12:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801df14:	280f      	cmp	r0, #15
 801df16:	d901      	bls.n	801df1c <http_ev_handler+0x274>
 801df18:	2003      	movs	r0, #3
 801df1a:	e000      	b.n	801df1e <http_ev_handler+0x276>
 801df1c:	2000      	movs	r0, #0
 801df1e:	69fc      	ldr	r4, [r7, #28]
 801df20:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 801df22:	3409      	adds	r4, #9
 801df24:	69fd      	ldr	r5, [r7, #28]
 801df26:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 801df28:	9505      	str	r5, [sp, #20]
 801df2a:	9404      	str	r4, [sp, #16]
 801df2c:	9003      	str	r0, [sp, #12]
 801df2e:	9102      	str	r1, [sp, #8]
 801df30:	9201      	str	r2, [sp, #4]
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	683b      	ldr	r3, [r7, #0]
 801df36:	687a      	ldr	r2, [r7, #4]
 801df38:	4631      	mov	r1, r6
 801df3a:	481d      	ldr	r0, [pc, #116]	@ (801dfb0 <http_ev_handler+0x308>)
 801df3c:	f7eb f986 	bl	800924c <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 801df40:	69fb      	ldr	r3, [r7, #28]
 801df42:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 801df46:	2b5a      	cmp	r3, #90	@ 0x5a
 801df48:	d10a      	bne.n	801df60 <http_ev_handler+0x2b8>
      c->data[0] = 0;
 801df4a:	69fb      	ldr	r3, [r7, #28]
 801df4c:	2200      	movs	r2, #0
 801df4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 801df52:	69fa      	ldr	r2, [r7, #28]
 801df54:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 801df58:	f023 0301 	bic.w	r3, r3, #1
 801df5c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 801df60:	bf00      	nop
 801df62:	378c      	adds	r7, #140	@ 0x8c
 801df64:	46bd      	mov	sp, r7
 801df66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df68:	08021f0c 	.word	0x08021f0c
 801df6c:	08021ec8 	.word	0x08021ec8
 801df70:	08021fc8 	.word	0x08021fc8
 801df74:	08021fd0 	.word	0x08021fd0
 801df78:	08021fd8 	.word	0x08021fd8
 801df7c:	08021fe4 	.word	0x08021fe4
 801df80:	200037f0 	.word	0x200037f0
 801df84:	08022000 	.word	0x08022000
 801df88:	0800d26d 	.word	0x0800d26d
 801df8c:	08021ff4 	.word	0x08021ff4
 801df90:	08022008 	.word	0x08022008
 801df94:	2000000c 	.word	0x2000000c
 801df98:	08022014 	.word	0x08022014
 801df9c:	08022030 	.word	0x08022030
 801dfa0:	0802220c 	.word	0x0802220c
 801dfa4:	20000254 	.word	0x20000254
 801dfa8:	0802f1c4 	.word	0x0802f1c4
 801dfac:	08021da4 	.word	0x08021da4
 801dfb0:	080222f0 	.word	0x080222f0

0801dfb4 <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 801dfb4:	b580      	push	{r7, lr}
 801dfb6:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 801dfb8:	481e      	ldr	r0, [pc, #120]	@ (801e034 <mongoose_init+0x80>)
 801dfba:	f7eb fb9f 	bl	80096fc <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 801dfbe:	4b1e      	ldr	r3, [pc, #120]	@ (801e038 <mongoose_init+0x84>)
 801dfc0:	2203      	movs	r2, #3
 801dfc2:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 801dfc4:	4b1c      	ldr	r3, [pc, #112]	@ (801e038 <mongoose_init+0x84>)
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	2b01      	cmp	r3, #1
 801dfca:	dd09      	ble.n	801dfe0 <mongoose_init+0x2c>
 801dfcc:	4b1b      	ldr	r3, [pc, #108]	@ (801e03c <mongoose_init+0x88>)
 801dfce:	f44f 7252 	mov.w	r2, #840	@ 0x348
 801dfd2:	491b      	ldr	r1, [pc, #108]	@ (801e040 <mongoose_init+0x8c>)
 801dfd4:	2002      	movs	r0, #2
 801dfd6:	f7eb f8e9 	bl	80091ac <mg_log_prefix>
 801dfda:	481a      	ldr	r0, [pc, #104]	@ (801e044 <mongoose_init+0x90>)
 801dfdc:	f7eb f936 	bl	800924c <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 801dfe0:	2300      	movs	r3, #0
 801dfe2:	4a19      	ldr	r2, [pc, #100]	@ (801e048 <mongoose_init+0x94>)
 801dfe4:	4919      	ldr	r1, [pc, #100]	@ (801e04c <mongoose_init+0x98>)
 801dfe6:	4813      	ldr	r0, [pc, #76]	@ (801e034 <mongoose_init+0x80>)
 801dfe8:	f7ea f8fe 	bl	80081e8 <mg_http_listen>
#endif
#if WIZARD_ENABLE_HTTPS
  MG_INFO(("Starting HTTPS listener"));
 801dfec:	4b12      	ldr	r3, [pc, #72]	@ (801e038 <mongoose_init+0x84>)
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	2b01      	cmp	r3, #1
 801dff2:	dd09      	ble.n	801e008 <mongoose_init+0x54>
 801dff4:	4b11      	ldr	r3, [pc, #68]	@ (801e03c <mongoose_init+0x88>)
 801dff6:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 801dffa:	4911      	ldr	r1, [pc, #68]	@ (801e040 <mongoose_init+0x8c>)
 801dffc:	2002      	movs	r0, #2
 801dffe:	f7eb f8d5 	bl	80091ac <mg_log_prefix>
 801e002:	4813      	ldr	r0, [pc, #76]	@ (801e050 <mongoose_init+0x9c>)
 801e004:	f7eb f922 	bl	800924c <mg_log>
  mg_http_listen(&g_mgr, HTTPS_URL, http_ev_handler, "");
 801e008:	4b12      	ldr	r3, [pc, #72]	@ (801e054 <mongoose_init+0xa0>)
 801e00a:	4a0f      	ldr	r2, [pc, #60]	@ (801e048 <mongoose_init+0x94>)
 801e00c:	4912      	ldr	r1, [pc, #72]	@ (801e058 <mongoose_init+0xa4>)
 801e00e:	4809      	ldr	r0, [pc, #36]	@ (801e034 <mongoose_init+0x80>)
 801e010:	f7ea f8ea 	bl	80081e8 <mg_http_listen>
#if WIZARD_CAPTIVE_PORTAL
  MG_INFO(("Starting captive portal"));
  mg_listen(&g_mgr, CAPTIVE_PORTAL_URL, dns_fn, NULL);
#endif

  MG_INFO(("Mongoose init complete"));
 801e014:	4b08      	ldr	r3, [pc, #32]	@ (801e038 <mongoose_init+0x84>)
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	2b01      	cmp	r3, #1
 801e01a:	dd09      	ble.n	801e030 <mongoose_init+0x7c>
 801e01c:	4b07      	ldr	r3, [pc, #28]	@ (801e03c <mongoose_init+0x88>)
 801e01e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801e022:	4907      	ldr	r1, [pc, #28]	@ (801e040 <mongoose_init+0x8c>)
 801e024:	2002      	movs	r0, #2
 801e026:	f7eb f8c1 	bl	80091ac <mg_log_prefix>
 801e02a:	480c      	ldr	r0, [pc, #48]	@ (801e05c <mongoose_init+0xa8>)
 801e02c:	f7eb f90e 	bl	800924c <mg_log>
}
 801e030:	bf00      	nop
 801e032:	bd80      	pop	{r7, pc}
 801e034:	200037ac 	.word	0x200037ac
 801e038:	20000254 	.word	0x20000254
 801e03c:	0802f1d4 	.word	0x0802f1d4
 801e040:	08021da4 	.word	0x08021da4
 801e044:	08022334 	.word	0x08022334
 801e048:	0801dca9 	.word	0x0801dca9
 801e04c:	0802234c 	.word	0x0802234c
 801e050:	08022360 	.word	0x08022360
 801e054:	08021e6c 	.word	0x08021e6c
 801e058:	08022378 	.word	0x08022378
 801e05c:	0802238c 	.word	0x0802238c

0801e060 <mongoose_poll>:

void mongoose_poll(void) {
 801e060:	b580      	push	{r7, lr}
 801e062:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 801e064:	210a      	movs	r1, #10
 801e066:	4802      	ldr	r0, [pc, #8]	@ (801e070 <mongoose_poll+0x10>)
 801e068:	f7ee fc9e 	bl	800c9a8 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
#endif
  glue_unlock();
}
 801e06c:	bf00      	nop
 801e06e:	bd80      	pop	{r7, pc}
 801e070:	200037ac 	.word	0x200037ac

0801e074 <abort>:
 801e074:	b508      	push	{r3, lr}
 801e076:	2006      	movs	r0, #6
 801e078:	f000 fb8a 	bl	801e790 <raise>
 801e07c:	2001      	movs	r0, #1
 801e07e:	f7e2 fe70 	bl	8000d62 <_exit>
	...

0801e084 <__assert_func>:
 801e084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e086:	4614      	mov	r4, r2
 801e088:	461a      	mov	r2, r3
 801e08a:	4b09      	ldr	r3, [pc, #36]	@ (801e0b0 <__assert_func+0x2c>)
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	4605      	mov	r5, r0
 801e090:	68d8      	ldr	r0, [r3, #12]
 801e092:	b14c      	cbz	r4, 801e0a8 <__assert_func+0x24>
 801e094:	4b07      	ldr	r3, [pc, #28]	@ (801e0b4 <__assert_func+0x30>)
 801e096:	9100      	str	r1, [sp, #0]
 801e098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e09c:	4906      	ldr	r1, [pc, #24]	@ (801e0b8 <__assert_func+0x34>)
 801e09e:	462b      	mov	r3, r5
 801e0a0:	f000 fa42 	bl	801e528 <fiprintf>
 801e0a4:	f7ff ffe6 	bl	801e074 <abort>
 801e0a8:	4b04      	ldr	r3, [pc, #16]	@ (801e0bc <__assert_func+0x38>)
 801e0aa:	461c      	mov	r4, r3
 801e0ac:	e7f3      	b.n	801e096 <__assert_func+0x12>
 801e0ae:	bf00      	nop
 801e0b0:	200002f4 	.word	0x200002f4
 801e0b4:	0802f1e2 	.word	0x0802f1e2
 801e0b8:	0802f1ef 	.word	0x0802f1ef
 801e0bc:	0802f21d 	.word	0x0802f21d

0801e0c0 <atoi>:
 801e0c0:	220a      	movs	r2, #10
 801e0c2:	2100      	movs	r1, #0
 801e0c4:	f000 b982 	b.w	801e3cc <strtol>

0801e0c8 <calloc>:
 801e0c8:	4b02      	ldr	r3, [pc, #8]	@ (801e0d4 <calloc+0xc>)
 801e0ca:	460a      	mov	r2, r1
 801e0cc:	4601      	mov	r1, r0
 801e0ce:	6818      	ldr	r0, [r3, #0]
 801e0d0:	f000 b802 	b.w	801e0d8 <_calloc_r>
 801e0d4:	200002f4 	.word	0x200002f4

0801e0d8 <_calloc_r>:
 801e0d8:	b570      	push	{r4, r5, r6, lr}
 801e0da:	fba1 5402 	umull	r5, r4, r1, r2
 801e0de:	b934      	cbnz	r4, 801e0ee <_calloc_r+0x16>
 801e0e0:	4629      	mov	r1, r5
 801e0e2:	f000 f83f 	bl	801e164 <_malloc_r>
 801e0e6:	4606      	mov	r6, r0
 801e0e8:	b928      	cbnz	r0, 801e0f6 <_calloc_r+0x1e>
 801e0ea:	4630      	mov	r0, r6
 801e0ec:	bd70      	pop	{r4, r5, r6, pc}
 801e0ee:	220c      	movs	r2, #12
 801e0f0:	6002      	str	r2, [r0, #0]
 801e0f2:	2600      	movs	r6, #0
 801e0f4:	e7f9      	b.n	801e0ea <_calloc_r+0x12>
 801e0f6:	462a      	mov	r2, r5
 801e0f8:	4621      	mov	r1, r4
 801e0fa:	f000 faba 	bl	801e672 <memset>
 801e0fe:	e7f4      	b.n	801e0ea <_calloc_r+0x12>

0801e100 <malloc>:
 801e100:	4b02      	ldr	r3, [pc, #8]	@ (801e10c <malloc+0xc>)
 801e102:	4601      	mov	r1, r0
 801e104:	6818      	ldr	r0, [r3, #0]
 801e106:	f000 b82d 	b.w	801e164 <_malloc_r>
 801e10a:	bf00      	nop
 801e10c:	200002f4 	.word	0x200002f4

0801e110 <free>:
 801e110:	4b02      	ldr	r3, [pc, #8]	@ (801e11c <free+0xc>)
 801e112:	4601      	mov	r1, r0
 801e114:	6818      	ldr	r0, [r3, #0]
 801e116:	f000 bbf1 	b.w	801e8fc <_free_r>
 801e11a:	bf00      	nop
 801e11c:	200002f4 	.word	0x200002f4

0801e120 <sbrk_aligned>:
 801e120:	b570      	push	{r4, r5, r6, lr}
 801e122:	4e0f      	ldr	r6, [pc, #60]	@ (801e160 <sbrk_aligned+0x40>)
 801e124:	460c      	mov	r4, r1
 801e126:	6831      	ldr	r1, [r6, #0]
 801e128:	4605      	mov	r5, r0
 801e12a:	b911      	cbnz	r1, 801e132 <sbrk_aligned+0x12>
 801e12c:	f000 fb80 	bl	801e830 <_sbrk_r>
 801e130:	6030      	str	r0, [r6, #0]
 801e132:	4621      	mov	r1, r4
 801e134:	4628      	mov	r0, r5
 801e136:	f000 fb7b 	bl	801e830 <_sbrk_r>
 801e13a:	1c43      	adds	r3, r0, #1
 801e13c:	d103      	bne.n	801e146 <sbrk_aligned+0x26>
 801e13e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801e142:	4620      	mov	r0, r4
 801e144:	bd70      	pop	{r4, r5, r6, pc}
 801e146:	1cc4      	adds	r4, r0, #3
 801e148:	f024 0403 	bic.w	r4, r4, #3
 801e14c:	42a0      	cmp	r0, r4
 801e14e:	d0f8      	beq.n	801e142 <sbrk_aligned+0x22>
 801e150:	1a21      	subs	r1, r4, r0
 801e152:	4628      	mov	r0, r5
 801e154:	f000 fb6c 	bl	801e830 <_sbrk_r>
 801e158:	3001      	adds	r0, #1
 801e15a:	d1f2      	bne.n	801e142 <sbrk_aligned+0x22>
 801e15c:	e7ef      	b.n	801e13e <sbrk_aligned+0x1e>
 801e15e:	bf00      	nop
 801e160:	200037f4 	.word	0x200037f4

0801e164 <_malloc_r>:
 801e164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e168:	1ccd      	adds	r5, r1, #3
 801e16a:	f025 0503 	bic.w	r5, r5, #3
 801e16e:	3508      	adds	r5, #8
 801e170:	2d0c      	cmp	r5, #12
 801e172:	bf38      	it	cc
 801e174:	250c      	movcc	r5, #12
 801e176:	2d00      	cmp	r5, #0
 801e178:	4606      	mov	r6, r0
 801e17a:	db01      	blt.n	801e180 <_malloc_r+0x1c>
 801e17c:	42a9      	cmp	r1, r5
 801e17e:	d904      	bls.n	801e18a <_malloc_r+0x26>
 801e180:	230c      	movs	r3, #12
 801e182:	6033      	str	r3, [r6, #0]
 801e184:	2000      	movs	r0, #0
 801e186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e18a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e260 <_malloc_r+0xfc>
 801e18e:	f000 f869 	bl	801e264 <__malloc_lock>
 801e192:	f8d8 3000 	ldr.w	r3, [r8]
 801e196:	461c      	mov	r4, r3
 801e198:	bb44      	cbnz	r4, 801e1ec <_malloc_r+0x88>
 801e19a:	4629      	mov	r1, r5
 801e19c:	4630      	mov	r0, r6
 801e19e:	f7ff ffbf 	bl	801e120 <sbrk_aligned>
 801e1a2:	1c43      	adds	r3, r0, #1
 801e1a4:	4604      	mov	r4, r0
 801e1a6:	d158      	bne.n	801e25a <_malloc_r+0xf6>
 801e1a8:	f8d8 4000 	ldr.w	r4, [r8]
 801e1ac:	4627      	mov	r7, r4
 801e1ae:	2f00      	cmp	r7, #0
 801e1b0:	d143      	bne.n	801e23a <_malloc_r+0xd6>
 801e1b2:	2c00      	cmp	r4, #0
 801e1b4:	d04b      	beq.n	801e24e <_malloc_r+0xea>
 801e1b6:	6823      	ldr	r3, [r4, #0]
 801e1b8:	4639      	mov	r1, r7
 801e1ba:	4630      	mov	r0, r6
 801e1bc:	eb04 0903 	add.w	r9, r4, r3
 801e1c0:	f000 fb36 	bl	801e830 <_sbrk_r>
 801e1c4:	4581      	cmp	r9, r0
 801e1c6:	d142      	bne.n	801e24e <_malloc_r+0xea>
 801e1c8:	6821      	ldr	r1, [r4, #0]
 801e1ca:	1a6d      	subs	r5, r5, r1
 801e1cc:	4629      	mov	r1, r5
 801e1ce:	4630      	mov	r0, r6
 801e1d0:	f7ff ffa6 	bl	801e120 <sbrk_aligned>
 801e1d4:	3001      	adds	r0, #1
 801e1d6:	d03a      	beq.n	801e24e <_malloc_r+0xea>
 801e1d8:	6823      	ldr	r3, [r4, #0]
 801e1da:	442b      	add	r3, r5
 801e1dc:	6023      	str	r3, [r4, #0]
 801e1de:	f8d8 3000 	ldr.w	r3, [r8]
 801e1e2:	685a      	ldr	r2, [r3, #4]
 801e1e4:	bb62      	cbnz	r2, 801e240 <_malloc_r+0xdc>
 801e1e6:	f8c8 7000 	str.w	r7, [r8]
 801e1ea:	e00f      	b.n	801e20c <_malloc_r+0xa8>
 801e1ec:	6822      	ldr	r2, [r4, #0]
 801e1ee:	1b52      	subs	r2, r2, r5
 801e1f0:	d420      	bmi.n	801e234 <_malloc_r+0xd0>
 801e1f2:	2a0b      	cmp	r2, #11
 801e1f4:	d917      	bls.n	801e226 <_malloc_r+0xc2>
 801e1f6:	1961      	adds	r1, r4, r5
 801e1f8:	42a3      	cmp	r3, r4
 801e1fa:	6025      	str	r5, [r4, #0]
 801e1fc:	bf18      	it	ne
 801e1fe:	6059      	strne	r1, [r3, #4]
 801e200:	6863      	ldr	r3, [r4, #4]
 801e202:	bf08      	it	eq
 801e204:	f8c8 1000 	streq.w	r1, [r8]
 801e208:	5162      	str	r2, [r4, r5]
 801e20a:	604b      	str	r3, [r1, #4]
 801e20c:	4630      	mov	r0, r6
 801e20e:	f000 f82f 	bl	801e270 <__malloc_unlock>
 801e212:	f104 000b 	add.w	r0, r4, #11
 801e216:	1d23      	adds	r3, r4, #4
 801e218:	f020 0007 	bic.w	r0, r0, #7
 801e21c:	1ac2      	subs	r2, r0, r3
 801e21e:	bf1c      	itt	ne
 801e220:	1a1b      	subne	r3, r3, r0
 801e222:	50a3      	strne	r3, [r4, r2]
 801e224:	e7af      	b.n	801e186 <_malloc_r+0x22>
 801e226:	6862      	ldr	r2, [r4, #4]
 801e228:	42a3      	cmp	r3, r4
 801e22a:	bf0c      	ite	eq
 801e22c:	f8c8 2000 	streq.w	r2, [r8]
 801e230:	605a      	strne	r2, [r3, #4]
 801e232:	e7eb      	b.n	801e20c <_malloc_r+0xa8>
 801e234:	4623      	mov	r3, r4
 801e236:	6864      	ldr	r4, [r4, #4]
 801e238:	e7ae      	b.n	801e198 <_malloc_r+0x34>
 801e23a:	463c      	mov	r4, r7
 801e23c:	687f      	ldr	r7, [r7, #4]
 801e23e:	e7b6      	b.n	801e1ae <_malloc_r+0x4a>
 801e240:	461a      	mov	r2, r3
 801e242:	685b      	ldr	r3, [r3, #4]
 801e244:	42a3      	cmp	r3, r4
 801e246:	d1fb      	bne.n	801e240 <_malloc_r+0xdc>
 801e248:	2300      	movs	r3, #0
 801e24a:	6053      	str	r3, [r2, #4]
 801e24c:	e7de      	b.n	801e20c <_malloc_r+0xa8>
 801e24e:	230c      	movs	r3, #12
 801e250:	6033      	str	r3, [r6, #0]
 801e252:	4630      	mov	r0, r6
 801e254:	f000 f80c 	bl	801e270 <__malloc_unlock>
 801e258:	e794      	b.n	801e184 <_malloc_r+0x20>
 801e25a:	6005      	str	r5, [r0, #0]
 801e25c:	e7d6      	b.n	801e20c <_malloc_r+0xa8>
 801e25e:	bf00      	nop
 801e260:	200037f8 	.word	0x200037f8

0801e264 <__malloc_lock>:
 801e264:	4801      	ldr	r0, [pc, #4]	@ (801e26c <__malloc_lock+0x8>)
 801e266:	f000 bb30 	b.w	801e8ca <__retarget_lock_acquire_recursive>
 801e26a:	bf00      	nop
 801e26c:	2000393c 	.word	0x2000393c

0801e270 <__malloc_unlock>:
 801e270:	4801      	ldr	r0, [pc, #4]	@ (801e278 <__malloc_unlock+0x8>)
 801e272:	f000 bb2b 	b.w	801e8cc <__retarget_lock_release_recursive>
 801e276:	bf00      	nop
 801e278:	2000393c 	.word	0x2000393c

0801e27c <srand>:
 801e27c:	b538      	push	{r3, r4, r5, lr}
 801e27e:	4b10      	ldr	r3, [pc, #64]	@ (801e2c0 <srand+0x44>)
 801e280:	681d      	ldr	r5, [r3, #0]
 801e282:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801e284:	4604      	mov	r4, r0
 801e286:	b9b3      	cbnz	r3, 801e2b6 <srand+0x3a>
 801e288:	2018      	movs	r0, #24
 801e28a:	f7ff ff39 	bl	801e100 <malloc>
 801e28e:	4602      	mov	r2, r0
 801e290:	6328      	str	r0, [r5, #48]	@ 0x30
 801e292:	b920      	cbnz	r0, 801e29e <srand+0x22>
 801e294:	4b0b      	ldr	r3, [pc, #44]	@ (801e2c4 <srand+0x48>)
 801e296:	480c      	ldr	r0, [pc, #48]	@ (801e2c8 <srand+0x4c>)
 801e298:	2146      	movs	r1, #70	@ 0x46
 801e29a:	f7ff fef3 	bl	801e084 <__assert_func>
 801e29e:	490b      	ldr	r1, [pc, #44]	@ (801e2cc <srand+0x50>)
 801e2a0:	4b0b      	ldr	r3, [pc, #44]	@ (801e2d0 <srand+0x54>)
 801e2a2:	e9c0 1300 	strd	r1, r3, [r0]
 801e2a6:	4b0b      	ldr	r3, [pc, #44]	@ (801e2d4 <srand+0x58>)
 801e2a8:	6083      	str	r3, [r0, #8]
 801e2aa:	230b      	movs	r3, #11
 801e2ac:	8183      	strh	r3, [r0, #12]
 801e2ae:	2100      	movs	r1, #0
 801e2b0:	2001      	movs	r0, #1
 801e2b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e2b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801e2b8:	2200      	movs	r2, #0
 801e2ba:	611c      	str	r4, [r3, #16]
 801e2bc:	615a      	str	r2, [r3, #20]
 801e2be:	bd38      	pop	{r3, r4, r5, pc}
 801e2c0:	200002f4 	.word	0x200002f4
 801e2c4:	0802f21e 	.word	0x0802f21e
 801e2c8:	0802f235 	.word	0x0802f235
 801e2cc:	abcd330e 	.word	0xabcd330e
 801e2d0:	e66d1234 	.word	0xe66d1234
 801e2d4:	0005deec 	.word	0x0005deec

0801e2d8 <_strtol_l.isra.0>:
 801e2d8:	2b24      	cmp	r3, #36	@ 0x24
 801e2da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2de:	4686      	mov	lr, r0
 801e2e0:	4690      	mov	r8, r2
 801e2e2:	d801      	bhi.n	801e2e8 <_strtol_l.isra.0+0x10>
 801e2e4:	2b01      	cmp	r3, #1
 801e2e6:	d106      	bne.n	801e2f6 <_strtol_l.isra.0+0x1e>
 801e2e8:	f000 fac4 	bl	801e874 <__errno>
 801e2ec:	2316      	movs	r3, #22
 801e2ee:	6003      	str	r3, [r0, #0]
 801e2f0:	2000      	movs	r0, #0
 801e2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2f6:	4834      	ldr	r0, [pc, #208]	@ (801e3c8 <_strtol_l.isra.0+0xf0>)
 801e2f8:	460d      	mov	r5, r1
 801e2fa:	462a      	mov	r2, r5
 801e2fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e300:	5d06      	ldrb	r6, [r0, r4]
 801e302:	f016 0608 	ands.w	r6, r6, #8
 801e306:	d1f8      	bne.n	801e2fa <_strtol_l.isra.0+0x22>
 801e308:	2c2d      	cmp	r4, #45	@ 0x2d
 801e30a:	d110      	bne.n	801e32e <_strtol_l.isra.0+0x56>
 801e30c:	782c      	ldrb	r4, [r5, #0]
 801e30e:	2601      	movs	r6, #1
 801e310:	1c95      	adds	r5, r2, #2
 801e312:	f033 0210 	bics.w	r2, r3, #16
 801e316:	d115      	bne.n	801e344 <_strtol_l.isra.0+0x6c>
 801e318:	2c30      	cmp	r4, #48	@ 0x30
 801e31a:	d10d      	bne.n	801e338 <_strtol_l.isra.0+0x60>
 801e31c:	782a      	ldrb	r2, [r5, #0]
 801e31e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801e322:	2a58      	cmp	r2, #88	@ 0x58
 801e324:	d108      	bne.n	801e338 <_strtol_l.isra.0+0x60>
 801e326:	786c      	ldrb	r4, [r5, #1]
 801e328:	3502      	adds	r5, #2
 801e32a:	2310      	movs	r3, #16
 801e32c:	e00a      	b.n	801e344 <_strtol_l.isra.0+0x6c>
 801e32e:	2c2b      	cmp	r4, #43	@ 0x2b
 801e330:	bf04      	itt	eq
 801e332:	782c      	ldrbeq	r4, [r5, #0]
 801e334:	1c95      	addeq	r5, r2, #2
 801e336:	e7ec      	b.n	801e312 <_strtol_l.isra.0+0x3a>
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d1f6      	bne.n	801e32a <_strtol_l.isra.0+0x52>
 801e33c:	2c30      	cmp	r4, #48	@ 0x30
 801e33e:	bf14      	ite	ne
 801e340:	230a      	movne	r3, #10
 801e342:	2308      	moveq	r3, #8
 801e344:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801e348:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801e34c:	2200      	movs	r2, #0
 801e34e:	fbbc f9f3 	udiv	r9, ip, r3
 801e352:	4610      	mov	r0, r2
 801e354:	fb03 ca19 	mls	sl, r3, r9, ip
 801e358:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801e35c:	2f09      	cmp	r7, #9
 801e35e:	d80f      	bhi.n	801e380 <_strtol_l.isra.0+0xa8>
 801e360:	463c      	mov	r4, r7
 801e362:	42a3      	cmp	r3, r4
 801e364:	dd1b      	ble.n	801e39e <_strtol_l.isra.0+0xc6>
 801e366:	1c57      	adds	r7, r2, #1
 801e368:	d007      	beq.n	801e37a <_strtol_l.isra.0+0xa2>
 801e36a:	4581      	cmp	r9, r0
 801e36c:	d314      	bcc.n	801e398 <_strtol_l.isra.0+0xc0>
 801e36e:	d101      	bne.n	801e374 <_strtol_l.isra.0+0x9c>
 801e370:	45a2      	cmp	sl, r4
 801e372:	db11      	blt.n	801e398 <_strtol_l.isra.0+0xc0>
 801e374:	fb00 4003 	mla	r0, r0, r3, r4
 801e378:	2201      	movs	r2, #1
 801e37a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e37e:	e7eb      	b.n	801e358 <_strtol_l.isra.0+0x80>
 801e380:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801e384:	2f19      	cmp	r7, #25
 801e386:	d801      	bhi.n	801e38c <_strtol_l.isra.0+0xb4>
 801e388:	3c37      	subs	r4, #55	@ 0x37
 801e38a:	e7ea      	b.n	801e362 <_strtol_l.isra.0+0x8a>
 801e38c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801e390:	2f19      	cmp	r7, #25
 801e392:	d804      	bhi.n	801e39e <_strtol_l.isra.0+0xc6>
 801e394:	3c57      	subs	r4, #87	@ 0x57
 801e396:	e7e4      	b.n	801e362 <_strtol_l.isra.0+0x8a>
 801e398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e39c:	e7ed      	b.n	801e37a <_strtol_l.isra.0+0xa2>
 801e39e:	1c53      	adds	r3, r2, #1
 801e3a0:	d108      	bne.n	801e3b4 <_strtol_l.isra.0+0xdc>
 801e3a2:	2322      	movs	r3, #34	@ 0x22
 801e3a4:	f8ce 3000 	str.w	r3, [lr]
 801e3a8:	4660      	mov	r0, ip
 801e3aa:	f1b8 0f00 	cmp.w	r8, #0
 801e3ae:	d0a0      	beq.n	801e2f2 <_strtol_l.isra.0+0x1a>
 801e3b0:	1e69      	subs	r1, r5, #1
 801e3b2:	e006      	b.n	801e3c2 <_strtol_l.isra.0+0xea>
 801e3b4:	b106      	cbz	r6, 801e3b8 <_strtol_l.isra.0+0xe0>
 801e3b6:	4240      	negs	r0, r0
 801e3b8:	f1b8 0f00 	cmp.w	r8, #0
 801e3bc:	d099      	beq.n	801e2f2 <_strtol_l.isra.0+0x1a>
 801e3be:	2a00      	cmp	r2, #0
 801e3c0:	d1f6      	bne.n	801e3b0 <_strtol_l.isra.0+0xd8>
 801e3c2:	f8c8 1000 	str.w	r1, [r8]
 801e3c6:	e794      	b.n	801e2f2 <_strtol_l.isra.0+0x1a>
 801e3c8:	0802f2c1 	.word	0x0802f2c1

0801e3cc <strtol>:
 801e3cc:	4613      	mov	r3, r2
 801e3ce:	460a      	mov	r2, r1
 801e3d0:	4601      	mov	r1, r0
 801e3d2:	4802      	ldr	r0, [pc, #8]	@ (801e3dc <strtol+0x10>)
 801e3d4:	6800      	ldr	r0, [r0, #0]
 801e3d6:	f7ff bf7f 	b.w	801e2d8 <_strtol_l.isra.0>
 801e3da:	bf00      	nop
 801e3dc:	200002f4 	.word	0x200002f4

0801e3e0 <std>:
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	b510      	push	{r4, lr}
 801e3e4:	4604      	mov	r4, r0
 801e3e6:	e9c0 3300 	strd	r3, r3, [r0]
 801e3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e3ee:	6083      	str	r3, [r0, #8]
 801e3f0:	8181      	strh	r1, [r0, #12]
 801e3f2:	6643      	str	r3, [r0, #100]	@ 0x64
 801e3f4:	81c2      	strh	r2, [r0, #14]
 801e3f6:	6183      	str	r3, [r0, #24]
 801e3f8:	4619      	mov	r1, r3
 801e3fa:	2208      	movs	r2, #8
 801e3fc:	305c      	adds	r0, #92	@ 0x5c
 801e3fe:	f000 f938 	bl	801e672 <memset>
 801e402:	4b0d      	ldr	r3, [pc, #52]	@ (801e438 <std+0x58>)
 801e404:	6263      	str	r3, [r4, #36]	@ 0x24
 801e406:	4b0d      	ldr	r3, [pc, #52]	@ (801e43c <std+0x5c>)
 801e408:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e40a:	4b0d      	ldr	r3, [pc, #52]	@ (801e440 <std+0x60>)
 801e40c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e40e:	4b0d      	ldr	r3, [pc, #52]	@ (801e444 <std+0x64>)
 801e410:	6323      	str	r3, [r4, #48]	@ 0x30
 801e412:	4b0d      	ldr	r3, [pc, #52]	@ (801e448 <std+0x68>)
 801e414:	6224      	str	r4, [r4, #32]
 801e416:	429c      	cmp	r4, r3
 801e418:	d006      	beq.n	801e428 <std+0x48>
 801e41a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e41e:	4294      	cmp	r4, r2
 801e420:	d002      	beq.n	801e428 <std+0x48>
 801e422:	33d0      	adds	r3, #208	@ 0xd0
 801e424:	429c      	cmp	r4, r3
 801e426:	d105      	bne.n	801e434 <std+0x54>
 801e428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e430:	f000 ba4a 	b.w	801e8c8 <__retarget_lock_init_recursive>
 801e434:	bd10      	pop	{r4, pc}
 801e436:	bf00      	nop
 801e438:	0801e599 	.word	0x0801e599
 801e43c:	0801e5bb 	.word	0x0801e5bb
 801e440:	0801e5f3 	.word	0x0801e5f3
 801e444:	0801e617 	.word	0x0801e617
 801e448:	200037fc 	.word	0x200037fc

0801e44c <stdio_exit_handler>:
 801e44c:	4a02      	ldr	r2, [pc, #8]	@ (801e458 <stdio_exit_handler+0xc>)
 801e44e:	4903      	ldr	r1, [pc, #12]	@ (801e45c <stdio_exit_handler+0x10>)
 801e450:	4803      	ldr	r0, [pc, #12]	@ (801e460 <stdio_exit_handler+0x14>)
 801e452:	f000 b87b 	b.w	801e54c <_fwalk_sglue>
 801e456:	bf00      	nop
 801e458:	200002e8 	.word	0x200002e8
 801e45c:	0801f035 	.word	0x0801f035
 801e460:	200002f8 	.word	0x200002f8

0801e464 <cleanup_stdio>:
 801e464:	6841      	ldr	r1, [r0, #4]
 801e466:	4b0c      	ldr	r3, [pc, #48]	@ (801e498 <cleanup_stdio+0x34>)
 801e468:	4299      	cmp	r1, r3
 801e46a:	b510      	push	{r4, lr}
 801e46c:	4604      	mov	r4, r0
 801e46e:	d001      	beq.n	801e474 <cleanup_stdio+0x10>
 801e470:	f000 fde0 	bl	801f034 <_fflush_r>
 801e474:	68a1      	ldr	r1, [r4, #8]
 801e476:	4b09      	ldr	r3, [pc, #36]	@ (801e49c <cleanup_stdio+0x38>)
 801e478:	4299      	cmp	r1, r3
 801e47a:	d002      	beq.n	801e482 <cleanup_stdio+0x1e>
 801e47c:	4620      	mov	r0, r4
 801e47e:	f000 fdd9 	bl	801f034 <_fflush_r>
 801e482:	68e1      	ldr	r1, [r4, #12]
 801e484:	4b06      	ldr	r3, [pc, #24]	@ (801e4a0 <cleanup_stdio+0x3c>)
 801e486:	4299      	cmp	r1, r3
 801e488:	d004      	beq.n	801e494 <cleanup_stdio+0x30>
 801e48a:	4620      	mov	r0, r4
 801e48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e490:	f000 bdd0 	b.w	801f034 <_fflush_r>
 801e494:	bd10      	pop	{r4, pc}
 801e496:	bf00      	nop
 801e498:	200037fc 	.word	0x200037fc
 801e49c:	20003864 	.word	0x20003864
 801e4a0:	200038cc 	.word	0x200038cc

0801e4a4 <global_stdio_init.part.0>:
 801e4a4:	b510      	push	{r4, lr}
 801e4a6:	4b0b      	ldr	r3, [pc, #44]	@ (801e4d4 <global_stdio_init.part.0+0x30>)
 801e4a8:	4c0b      	ldr	r4, [pc, #44]	@ (801e4d8 <global_stdio_init.part.0+0x34>)
 801e4aa:	4a0c      	ldr	r2, [pc, #48]	@ (801e4dc <global_stdio_init.part.0+0x38>)
 801e4ac:	601a      	str	r2, [r3, #0]
 801e4ae:	4620      	mov	r0, r4
 801e4b0:	2200      	movs	r2, #0
 801e4b2:	2104      	movs	r1, #4
 801e4b4:	f7ff ff94 	bl	801e3e0 <std>
 801e4b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e4bc:	2201      	movs	r2, #1
 801e4be:	2109      	movs	r1, #9
 801e4c0:	f7ff ff8e 	bl	801e3e0 <std>
 801e4c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e4c8:	2202      	movs	r2, #2
 801e4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ce:	2112      	movs	r1, #18
 801e4d0:	f7ff bf86 	b.w	801e3e0 <std>
 801e4d4:	20003934 	.word	0x20003934
 801e4d8:	200037fc 	.word	0x200037fc
 801e4dc:	0801e44d 	.word	0x0801e44d

0801e4e0 <__sfp_lock_acquire>:
 801e4e0:	4801      	ldr	r0, [pc, #4]	@ (801e4e8 <__sfp_lock_acquire+0x8>)
 801e4e2:	f000 b9f2 	b.w	801e8ca <__retarget_lock_acquire_recursive>
 801e4e6:	bf00      	nop
 801e4e8:	2000393d 	.word	0x2000393d

0801e4ec <__sfp_lock_release>:
 801e4ec:	4801      	ldr	r0, [pc, #4]	@ (801e4f4 <__sfp_lock_release+0x8>)
 801e4ee:	f000 b9ed 	b.w	801e8cc <__retarget_lock_release_recursive>
 801e4f2:	bf00      	nop
 801e4f4:	2000393d 	.word	0x2000393d

0801e4f8 <__sinit>:
 801e4f8:	b510      	push	{r4, lr}
 801e4fa:	4604      	mov	r4, r0
 801e4fc:	f7ff fff0 	bl	801e4e0 <__sfp_lock_acquire>
 801e500:	6a23      	ldr	r3, [r4, #32]
 801e502:	b11b      	cbz	r3, 801e50c <__sinit+0x14>
 801e504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e508:	f7ff bff0 	b.w	801e4ec <__sfp_lock_release>
 801e50c:	4b04      	ldr	r3, [pc, #16]	@ (801e520 <__sinit+0x28>)
 801e50e:	6223      	str	r3, [r4, #32]
 801e510:	4b04      	ldr	r3, [pc, #16]	@ (801e524 <__sinit+0x2c>)
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d1f5      	bne.n	801e504 <__sinit+0xc>
 801e518:	f7ff ffc4 	bl	801e4a4 <global_stdio_init.part.0>
 801e51c:	e7f2      	b.n	801e504 <__sinit+0xc>
 801e51e:	bf00      	nop
 801e520:	0801e465 	.word	0x0801e465
 801e524:	20003934 	.word	0x20003934

0801e528 <fiprintf>:
 801e528:	b40e      	push	{r1, r2, r3}
 801e52a:	b503      	push	{r0, r1, lr}
 801e52c:	4601      	mov	r1, r0
 801e52e:	ab03      	add	r3, sp, #12
 801e530:	4805      	ldr	r0, [pc, #20]	@ (801e548 <fiprintf+0x20>)
 801e532:	f853 2b04 	ldr.w	r2, [r3], #4
 801e536:	6800      	ldr	r0, [r0, #0]
 801e538:	9301      	str	r3, [sp, #4]
 801e53a:	f000 fa53 	bl	801e9e4 <_vfiprintf_r>
 801e53e:	b002      	add	sp, #8
 801e540:	f85d eb04 	ldr.w	lr, [sp], #4
 801e544:	b003      	add	sp, #12
 801e546:	4770      	bx	lr
 801e548:	200002f4 	.word	0x200002f4

0801e54c <_fwalk_sglue>:
 801e54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e550:	4607      	mov	r7, r0
 801e552:	4688      	mov	r8, r1
 801e554:	4614      	mov	r4, r2
 801e556:	2600      	movs	r6, #0
 801e558:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e55c:	f1b9 0901 	subs.w	r9, r9, #1
 801e560:	d505      	bpl.n	801e56e <_fwalk_sglue+0x22>
 801e562:	6824      	ldr	r4, [r4, #0]
 801e564:	2c00      	cmp	r4, #0
 801e566:	d1f7      	bne.n	801e558 <_fwalk_sglue+0xc>
 801e568:	4630      	mov	r0, r6
 801e56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e56e:	89ab      	ldrh	r3, [r5, #12]
 801e570:	2b01      	cmp	r3, #1
 801e572:	d907      	bls.n	801e584 <_fwalk_sglue+0x38>
 801e574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e578:	3301      	adds	r3, #1
 801e57a:	d003      	beq.n	801e584 <_fwalk_sglue+0x38>
 801e57c:	4629      	mov	r1, r5
 801e57e:	4638      	mov	r0, r7
 801e580:	47c0      	blx	r8
 801e582:	4306      	orrs	r6, r0
 801e584:	3568      	adds	r5, #104	@ 0x68
 801e586:	e7e9      	b.n	801e55c <_fwalk_sglue+0x10>

0801e588 <putchar>:
 801e588:	4b02      	ldr	r3, [pc, #8]	@ (801e594 <putchar+0xc>)
 801e58a:	4601      	mov	r1, r0
 801e58c:	6818      	ldr	r0, [r3, #0]
 801e58e:	6882      	ldr	r2, [r0, #8]
 801e590:	f000 bd78 	b.w	801f084 <_putc_r>
 801e594:	200002f4 	.word	0x200002f4

0801e598 <__sread>:
 801e598:	b510      	push	{r4, lr}
 801e59a:	460c      	mov	r4, r1
 801e59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5a0:	f000 f920 	bl	801e7e4 <_read_r>
 801e5a4:	2800      	cmp	r0, #0
 801e5a6:	bfab      	itete	ge
 801e5a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e5aa:	89a3      	ldrhlt	r3, [r4, #12]
 801e5ac:	181b      	addge	r3, r3, r0
 801e5ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e5b2:	bfac      	ite	ge
 801e5b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e5b6:	81a3      	strhlt	r3, [r4, #12]
 801e5b8:	bd10      	pop	{r4, pc}

0801e5ba <__swrite>:
 801e5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5be:	461f      	mov	r7, r3
 801e5c0:	898b      	ldrh	r3, [r1, #12]
 801e5c2:	05db      	lsls	r3, r3, #23
 801e5c4:	4605      	mov	r5, r0
 801e5c6:	460c      	mov	r4, r1
 801e5c8:	4616      	mov	r6, r2
 801e5ca:	d505      	bpl.n	801e5d8 <__swrite+0x1e>
 801e5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5d0:	2302      	movs	r3, #2
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	f000 f8f4 	bl	801e7c0 <_lseek_r>
 801e5d8:	89a3      	ldrh	r3, [r4, #12]
 801e5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e5de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e5e2:	81a3      	strh	r3, [r4, #12]
 801e5e4:	4632      	mov	r2, r6
 801e5e6:	463b      	mov	r3, r7
 801e5e8:	4628      	mov	r0, r5
 801e5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e5ee:	f000 b92f 	b.w	801e850 <_write_r>

0801e5f2 <__sseek>:
 801e5f2:	b510      	push	{r4, lr}
 801e5f4:	460c      	mov	r4, r1
 801e5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5fa:	f000 f8e1 	bl	801e7c0 <_lseek_r>
 801e5fe:	1c43      	adds	r3, r0, #1
 801e600:	89a3      	ldrh	r3, [r4, #12]
 801e602:	bf15      	itete	ne
 801e604:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e60a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e60e:	81a3      	strheq	r3, [r4, #12]
 801e610:	bf18      	it	ne
 801e612:	81a3      	strhne	r3, [r4, #12]
 801e614:	bd10      	pop	{r4, pc}

0801e616 <__sclose>:
 801e616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e61a:	f000 b8c1 	b.w	801e7a0 <_close_r>

0801e61e <memcmp>:
 801e61e:	b510      	push	{r4, lr}
 801e620:	3901      	subs	r1, #1
 801e622:	4402      	add	r2, r0
 801e624:	4290      	cmp	r0, r2
 801e626:	d101      	bne.n	801e62c <memcmp+0xe>
 801e628:	2000      	movs	r0, #0
 801e62a:	e005      	b.n	801e638 <memcmp+0x1a>
 801e62c:	7803      	ldrb	r3, [r0, #0]
 801e62e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e632:	42a3      	cmp	r3, r4
 801e634:	d001      	beq.n	801e63a <memcmp+0x1c>
 801e636:	1b18      	subs	r0, r3, r4
 801e638:	bd10      	pop	{r4, pc}
 801e63a:	3001      	adds	r0, #1
 801e63c:	e7f2      	b.n	801e624 <memcmp+0x6>

0801e63e <memmove>:
 801e63e:	4288      	cmp	r0, r1
 801e640:	b510      	push	{r4, lr}
 801e642:	eb01 0402 	add.w	r4, r1, r2
 801e646:	d902      	bls.n	801e64e <memmove+0x10>
 801e648:	4284      	cmp	r4, r0
 801e64a:	4623      	mov	r3, r4
 801e64c:	d807      	bhi.n	801e65e <memmove+0x20>
 801e64e:	1e43      	subs	r3, r0, #1
 801e650:	42a1      	cmp	r1, r4
 801e652:	d008      	beq.n	801e666 <memmove+0x28>
 801e654:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e658:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e65c:	e7f8      	b.n	801e650 <memmove+0x12>
 801e65e:	4402      	add	r2, r0
 801e660:	4601      	mov	r1, r0
 801e662:	428a      	cmp	r2, r1
 801e664:	d100      	bne.n	801e668 <memmove+0x2a>
 801e666:	bd10      	pop	{r4, pc}
 801e668:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e66c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e670:	e7f7      	b.n	801e662 <memmove+0x24>

0801e672 <memset>:
 801e672:	4402      	add	r2, r0
 801e674:	4603      	mov	r3, r0
 801e676:	4293      	cmp	r3, r2
 801e678:	d100      	bne.n	801e67c <memset+0xa>
 801e67a:	4770      	bx	lr
 801e67c:	f803 1b01 	strb.w	r1, [r3], #1
 801e680:	e7f9      	b.n	801e676 <memset+0x4>

0801e682 <strchr>:
 801e682:	b2c9      	uxtb	r1, r1
 801e684:	4603      	mov	r3, r0
 801e686:	4618      	mov	r0, r3
 801e688:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e68c:	b112      	cbz	r2, 801e694 <strchr+0x12>
 801e68e:	428a      	cmp	r2, r1
 801e690:	d1f9      	bne.n	801e686 <strchr+0x4>
 801e692:	4770      	bx	lr
 801e694:	2900      	cmp	r1, #0
 801e696:	bf18      	it	ne
 801e698:	2000      	movne	r0, #0
 801e69a:	4770      	bx	lr

0801e69c <strncmp>:
 801e69c:	b510      	push	{r4, lr}
 801e69e:	b16a      	cbz	r2, 801e6bc <strncmp+0x20>
 801e6a0:	3901      	subs	r1, #1
 801e6a2:	1884      	adds	r4, r0, r2
 801e6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e6a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e6ac:	429a      	cmp	r2, r3
 801e6ae:	d103      	bne.n	801e6b8 <strncmp+0x1c>
 801e6b0:	42a0      	cmp	r0, r4
 801e6b2:	d001      	beq.n	801e6b8 <strncmp+0x1c>
 801e6b4:	2a00      	cmp	r2, #0
 801e6b6:	d1f5      	bne.n	801e6a4 <strncmp+0x8>
 801e6b8:	1ad0      	subs	r0, r2, r3
 801e6ba:	bd10      	pop	{r4, pc}
 801e6bc:	4610      	mov	r0, r2
 801e6be:	e7fc      	b.n	801e6ba <strncmp+0x1e>

0801e6c0 <strncpy>:
 801e6c0:	b510      	push	{r4, lr}
 801e6c2:	3901      	subs	r1, #1
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	b132      	cbz	r2, 801e6d6 <strncpy+0x16>
 801e6c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e6cc:	f803 4b01 	strb.w	r4, [r3], #1
 801e6d0:	3a01      	subs	r2, #1
 801e6d2:	2c00      	cmp	r4, #0
 801e6d4:	d1f7      	bne.n	801e6c6 <strncpy+0x6>
 801e6d6:	441a      	add	r2, r3
 801e6d8:	2100      	movs	r1, #0
 801e6da:	4293      	cmp	r3, r2
 801e6dc:	d100      	bne.n	801e6e0 <strncpy+0x20>
 801e6de:	bd10      	pop	{r4, pc}
 801e6e0:	f803 1b01 	strb.w	r1, [r3], #1
 801e6e4:	e7f9      	b.n	801e6da <strncpy+0x1a>

0801e6e6 <strrchr>:
 801e6e6:	b538      	push	{r3, r4, r5, lr}
 801e6e8:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801e6ec:	4603      	mov	r3, r0
 801e6ee:	d10e      	bne.n	801e70e <strrchr+0x28>
 801e6f0:	4621      	mov	r1, r4
 801e6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6f6:	f7ff bfc4 	b.w	801e682 <strchr>
 801e6fa:	1c43      	adds	r3, r0, #1
 801e6fc:	4605      	mov	r5, r0
 801e6fe:	4621      	mov	r1, r4
 801e700:	4618      	mov	r0, r3
 801e702:	f7ff ffbe 	bl	801e682 <strchr>
 801e706:	2800      	cmp	r0, #0
 801e708:	d1f7      	bne.n	801e6fa <strrchr+0x14>
 801e70a:	4628      	mov	r0, r5
 801e70c:	bd38      	pop	{r3, r4, r5, pc}
 801e70e:	2500      	movs	r5, #0
 801e710:	e7f5      	b.n	801e6fe <strrchr+0x18>

0801e712 <strstr>:
 801e712:	780a      	ldrb	r2, [r1, #0]
 801e714:	b570      	push	{r4, r5, r6, lr}
 801e716:	b96a      	cbnz	r2, 801e734 <strstr+0x22>
 801e718:	bd70      	pop	{r4, r5, r6, pc}
 801e71a:	429a      	cmp	r2, r3
 801e71c:	d109      	bne.n	801e732 <strstr+0x20>
 801e71e:	460c      	mov	r4, r1
 801e720:	4605      	mov	r5, r0
 801e722:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801e726:	2b00      	cmp	r3, #0
 801e728:	d0f6      	beq.n	801e718 <strstr+0x6>
 801e72a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801e72e:	429e      	cmp	r6, r3
 801e730:	d0f7      	beq.n	801e722 <strstr+0x10>
 801e732:	3001      	adds	r0, #1
 801e734:	7803      	ldrb	r3, [r0, #0]
 801e736:	2b00      	cmp	r3, #0
 801e738:	d1ef      	bne.n	801e71a <strstr+0x8>
 801e73a:	4618      	mov	r0, r3
 801e73c:	e7ec      	b.n	801e718 <strstr+0x6>

0801e73e <_raise_r>:
 801e73e:	291f      	cmp	r1, #31
 801e740:	b538      	push	{r3, r4, r5, lr}
 801e742:	4605      	mov	r5, r0
 801e744:	460c      	mov	r4, r1
 801e746:	d904      	bls.n	801e752 <_raise_r+0x14>
 801e748:	2316      	movs	r3, #22
 801e74a:	6003      	str	r3, [r0, #0]
 801e74c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e750:	bd38      	pop	{r3, r4, r5, pc}
 801e752:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e754:	b112      	cbz	r2, 801e75c <_raise_r+0x1e>
 801e756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e75a:	b94b      	cbnz	r3, 801e770 <_raise_r+0x32>
 801e75c:	4628      	mov	r0, r5
 801e75e:	f000 f865 	bl	801e82c <_getpid_r>
 801e762:	4622      	mov	r2, r4
 801e764:	4601      	mov	r1, r0
 801e766:	4628      	mov	r0, r5
 801e768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e76c:	f000 b84c 	b.w	801e808 <_kill_r>
 801e770:	2b01      	cmp	r3, #1
 801e772:	d00a      	beq.n	801e78a <_raise_r+0x4c>
 801e774:	1c59      	adds	r1, r3, #1
 801e776:	d103      	bne.n	801e780 <_raise_r+0x42>
 801e778:	2316      	movs	r3, #22
 801e77a:	6003      	str	r3, [r0, #0]
 801e77c:	2001      	movs	r0, #1
 801e77e:	e7e7      	b.n	801e750 <_raise_r+0x12>
 801e780:	2100      	movs	r1, #0
 801e782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e786:	4620      	mov	r0, r4
 801e788:	4798      	blx	r3
 801e78a:	2000      	movs	r0, #0
 801e78c:	e7e0      	b.n	801e750 <_raise_r+0x12>
	...

0801e790 <raise>:
 801e790:	4b02      	ldr	r3, [pc, #8]	@ (801e79c <raise+0xc>)
 801e792:	4601      	mov	r1, r0
 801e794:	6818      	ldr	r0, [r3, #0]
 801e796:	f7ff bfd2 	b.w	801e73e <_raise_r>
 801e79a:	bf00      	nop
 801e79c:	200002f4 	.word	0x200002f4

0801e7a0 <_close_r>:
 801e7a0:	b538      	push	{r3, r4, r5, lr}
 801e7a2:	4d06      	ldr	r5, [pc, #24]	@ (801e7bc <_close_r+0x1c>)
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	4608      	mov	r0, r1
 801e7aa:	602b      	str	r3, [r5, #0]
 801e7ac:	f7e2 fb01 	bl	8000db2 <_close>
 801e7b0:	1c43      	adds	r3, r0, #1
 801e7b2:	d102      	bne.n	801e7ba <_close_r+0x1a>
 801e7b4:	682b      	ldr	r3, [r5, #0]
 801e7b6:	b103      	cbz	r3, 801e7ba <_close_r+0x1a>
 801e7b8:	6023      	str	r3, [r4, #0]
 801e7ba:	bd38      	pop	{r3, r4, r5, pc}
 801e7bc:	20003938 	.word	0x20003938

0801e7c0 <_lseek_r>:
 801e7c0:	b538      	push	{r3, r4, r5, lr}
 801e7c2:	4d07      	ldr	r5, [pc, #28]	@ (801e7e0 <_lseek_r+0x20>)
 801e7c4:	4604      	mov	r4, r0
 801e7c6:	4608      	mov	r0, r1
 801e7c8:	4611      	mov	r1, r2
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	602a      	str	r2, [r5, #0]
 801e7ce:	461a      	mov	r2, r3
 801e7d0:	f7e2 fb16 	bl	8000e00 <_lseek>
 801e7d4:	1c43      	adds	r3, r0, #1
 801e7d6:	d102      	bne.n	801e7de <_lseek_r+0x1e>
 801e7d8:	682b      	ldr	r3, [r5, #0]
 801e7da:	b103      	cbz	r3, 801e7de <_lseek_r+0x1e>
 801e7dc:	6023      	str	r3, [r4, #0]
 801e7de:	bd38      	pop	{r3, r4, r5, pc}
 801e7e0:	20003938 	.word	0x20003938

0801e7e4 <_read_r>:
 801e7e4:	b538      	push	{r3, r4, r5, lr}
 801e7e6:	4d07      	ldr	r5, [pc, #28]	@ (801e804 <_read_r+0x20>)
 801e7e8:	4604      	mov	r4, r0
 801e7ea:	4608      	mov	r0, r1
 801e7ec:	4611      	mov	r1, r2
 801e7ee:	2200      	movs	r2, #0
 801e7f0:	602a      	str	r2, [r5, #0]
 801e7f2:	461a      	mov	r2, r3
 801e7f4:	f7e2 fac0 	bl	8000d78 <_read>
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	d102      	bne.n	801e802 <_read_r+0x1e>
 801e7fc:	682b      	ldr	r3, [r5, #0]
 801e7fe:	b103      	cbz	r3, 801e802 <_read_r+0x1e>
 801e800:	6023      	str	r3, [r4, #0]
 801e802:	bd38      	pop	{r3, r4, r5, pc}
 801e804:	20003938 	.word	0x20003938

0801e808 <_kill_r>:
 801e808:	b538      	push	{r3, r4, r5, lr}
 801e80a:	4d07      	ldr	r5, [pc, #28]	@ (801e828 <_kill_r+0x20>)
 801e80c:	2300      	movs	r3, #0
 801e80e:	4604      	mov	r4, r0
 801e810:	4608      	mov	r0, r1
 801e812:	4611      	mov	r1, r2
 801e814:	602b      	str	r3, [r5, #0]
 801e816:	f7e2 fa94 	bl	8000d42 <_kill>
 801e81a:	1c43      	adds	r3, r0, #1
 801e81c:	d102      	bne.n	801e824 <_kill_r+0x1c>
 801e81e:	682b      	ldr	r3, [r5, #0]
 801e820:	b103      	cbz	r3, 801e824 <_kill_r+0x1c>
 801e822:	6023      	str	r3, [r4, #0]
 801e824:	bd38      	pop	{r3, r4, r5, pc}
 801e826:	bf00      	nop
 801e828:	20003938 	.word	0x20003938

0801e82c <_getpid_r>:
 801e82c:	f7e2 ba81 	b.w	8000d32 <_getpid>

0801e830 <_sbrk_r>:
 801e830:	b538      	push	{r3, r4, r5, lr}
 801e832:	4d06      	ldr	r5, [pc, #24]	@ (801e84c <_sbrk_r+0x1c>)
 801e834:	2300      	movs	r3, #0
 801e836:	4604      	mov	r4, r0
 801e838:	4608      	mov	r0, r1
 801e83a:	602b      	str	r3, [r5, #0]
 801e83c:	f7e2 faee 	bl	8000e1c <_sbrk>
 801e840:	1c43      	adds	r3, r0, #1
 801e842:	d102      	bne.n	801e84a <_sbrk_r+0x1a>
 801e844:	682b      	ldr	r3, [r5, #0]
 801e846:	b103      	cbz	r3, 801e84a <_sbrk_r+0x1a>
 801e848:	6023      	str	r3, [r4, #0]
 801e84a:	bd38      	pop	{r3, r4, r5, pc}
 801e84c:	20003938 	.word	0x20003938

0801e850 <_write_r>:
 801e850:	b538      	push	{r3, r4, r5, lr}
 801e852:	4d07      	ldr	r5, [pc, #28]	@ (801e870 <_write_r+0x20>)
 801e854:	4604      	mov	r4, r0
 801e856:	4608      	mov	r0, r1
 801e858:	4611      	mov	r1, r2
 801e85a:	2200      	movs	r2, #0
 801e85c:	602a      	str	r2, [r5, #0]
 801e85e:	461a      	mov	r2, r3
 801e860:	f7e1 ff1a 	bl	8000698 <_write>
 801e864:	1c43      	adds	r3, r0, #1
 801e866:	d102      	bne.n	801e86e <_write_r+0x1e>
 801e868:	682b      	ldr	r3, [r5, #0]
 801e86a:	b103      	cbz	r3, 801e86e <_write_r+0x1e>
 801e86c:	6023      	str	r3, [r4, #0]
 801e86e:	bd38      	pop	{r3, r4, r5, pc}
 801e870:	20003938 	.word	0x20003938

0801e874 <__errno>:
 801e874:	4b01      	ldr	r3, [pc, #4]	@ (801e87c <__errno+0x8>)
 801e876:	6818      	ldr	r0, [r3, #0]
 801e878:	4770      	bx	lr
 801e87a:	bf00      	nop
 801e87c:	200002f4 	.word	0x200002f4

0801e880 <__libc_init_array>:
 801e880:	b570      	push	{r4, r5, r6, lr}
 801e882:	4d0d      	ldr	r5, [pc, #52]	@ (801e8b8 <__libc_init_array+0x38>)
 801e884:	4c0d      	ldr	r4, [pc, #52]	@ (801e8bc <__libc_init_array+0x3c>)
 801e886:	1b64      	subs	r4, r4, r5
 801e888:	10a4      	asrs	r4, r4, #2
 801e88a:	2600      	movs	r6, #0
 801e88c:	42a6      	cmp	r6, r4
 801e88e:	d109      	bne.n	801e8a4 <__libc_init_array+0x24>
 801e890:	4d0b      	ldr	r5, [pc, #44]	@ (801e8c0 <__libc_init_array+0x40>)
 801e892:	4c0c      	ldr	r4, [pc, #48]	@ (801e8c4 <__libc_init_array+0x44>)
 801e894:	f000 fd42 	bl	801f31c <_init>
 801e898:	1b64      	subs	r4, r4, r5
 801e89a:	10a4      	asrs	r4, r4, #2
 801e89c:	2600      	movs	r6, #0
 801e89e:	42a6      	cmp	r6, r4
 801e8a0:	d105      	bne.n	801e8ae <__libc_init_array+0x2e>
 801e8a2:	bd70      	pop	{r4, r5, r6, pc}
 801e8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e8a8:	4798      	blx	r3
 801e8aa:	3601      	adds	r6, #1
 801e8ac:	e7ee      	b.n	801e88c <__libc_init_array+0xc>
 801e8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801e8b2:	4798      	blx	r3
 801e8b4:	3601      	adds	r6, #1
 801e8b6:	e7f2      	b.n	801e89e <__libc_init_array+0x1e>
 801e8b8:	0802f3cc 	.word	0x0802f3cc
 801e8bc:	0802f3cc 	.word	0x0802f3cc
 801e8c0:	0802f3cc 	.word	0x0802f3cc
 801e8c4:	0802f3d0 	.word	0x0802f3d0

0801e8c8 <__retarget_lock_init_recursive>:
 801e8c8:	4770      	bx	lr

0801e8ca <__retarget_lock_acquire_recursive>:
 801e8ca:	4770      	bx	lr

0801e8cc <__retarget_lock_release_recursive>:
 801e8cc:	4770      	bx	lr

0801e8ce <strcpy>:
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e8d4:	f803 2b01 	strb.w	r2, [r3], #1
 801e8d8:	2a00      	cmp	r2, #0
 801e8da:	d1f9      	bne.n	801e8d0 <strcpy+0x2>
 801e8dc:	4770      	bx	lr

0801e8de <memcpy>:
 801e8de:	440a      	add	r2, r1
 801e8e0:	4291      	cmp	r1, r2
 801e8e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801e8e6:	d100      	bne.n	801e8ea <memcpy+0xc>
 801e8e8:	4770      	bx	lr
 801e8ea:	b510      	push	{r4, lr}
 801e8ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e8f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e8f4:	4291      	cmp	r1, r2
 801e8f6:	d1f9      	bne.n	801e8ec <memcpy+0xe>
 801e8f8:	bd10      	pop	{r4, pc}
	...

0801e8fc <_free_r>:
 801e8fc:	b538      	push	{r3, r4, r5, lr}
 801e8fe:	4605      	mov	r5, r0
 801e900:	2900      	cmp	r1, #0
 801e902:	d041      	beq.n	801e988 <_free_r+0x8c>
 801e904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e908:	1f0c      	subs	r4, r1, #4
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	bfb8      	it	lt
 801e90e:	18e4      	addlt	r4, r4, r3
 801e910:	f7ff fca8 	bl	801e264 <__malloc_lock>
 801e914:	4a1d      	ldr	r2, [pc, #116]	@ (801e98c <_free_r+0x90>)
 801e916:	6813      	ldr	r3, [r2, #0]
 801e918:	b933      	cbnz	r3, 801e928 <_free_r+0x2c>
 801e91a:	6063      	str	r3, [r4, #4]
 801e91c:	6014      	str	r4, [r2, #0]
 801e91e:	4628      	mov	r0, r5
 801e920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e924:	f7ff bca4 	b.w	801e270 <__malloc_unlock>
 801e928:	42a3      	cmp	r3, r4
 801e92a:	d908      	bls.n	801e93e <_free_r+0x42>
 801e92c:	6820      	ldr	r0, [r4, #0]
 801e92e:	1821      	adds	r1, r4, r0
 801e930:	428b      	cmp	r3, r1
 801e932:	bf01      	itttt	eq
 801e934:	6819      	ldreq	r1, [r3, #0]
 801e936:	685b      	ldreq	r3, [r3, #4]
 801e938:	1809      	addeq	r1, r1, r0
 801e93a:	6021      	streq	r1, [r4, #0]
 801e93c:	e7ed      	b.n	801e91a <_free_r+0x1e>
 801e93e:	461a      	mov	r2, r3
 801e940:	685b      	ldr	r3, [r3, #4]
 801e942:	b10b      	cbz	r3, 801e948 <_free_r+0x4c>
 801e944:	42a3      	cmp	r3, r4
 801e946:	d9fa      	bls.n	801e93e <_free_r+0x42>
 801e948:	6811      	ldr	r1, [r2, #0]
 801e94a:	1850      	adds	r0, r2, r1
 801e94c:	42a0      	cmp	r0, r4
 801e94e:	d10b      	bne.n	801e968 <_free_r+0x6c>
 801e950:	6820      	ldr	r0, [r4, #0]
 801e952:	4401      	add	r1, r0
 801e954:	1850      	adds	r0, r2, r1
 801e956:	4283      	cmp	r3, r0
 801e958:	6011      	str	r1, [r2, #0]
 801e95a:	d1e0      	bne.n	801e91e <_free_r+0x22>
 801e95c:	6818      	ldr	r0, [r3, #0]
 801e95e:	685b      	ldr	r3, [r3, #4]
 801e960:	6053      	str	r3, [r2, #4]
 801e962:	4408      	add	r0, r1
 801e964:	6010      	str	r0, [r2, #0]
 801e966:	e7da      	b.n	801e91e <_free_r+0x22>
 801e968:	d902      	bls.n	801e970 <_free_r+0x74>
 801e96a:	230c      	movs	r3, #12
 801e96c:	602b      	str	r3, [r5, #0]
 801e96e:	e7d6      	b.n	801e91e <_free_r+0x22>
 801e970:	6820      	ldr	r0, [r4, #0]
 801e972:	1821      	adds	r1, r4, r0
 801e974:	428b      	cmp	r3, r1
 801e976:	bf04      	itt	eq
 801e978:	6819      	ldreq	r1, [r3, #0]
 801e97a:	685b      	ldreq	r3, [r3, #4]
 801e97c:	6063      	str	r3, [r4, #4]
 801e97e:	bf04      	itt	eq
 801e980:	1809      	addeq	r1, r1, r0
 801e982:	6021      	streq	r1, [r4, #0]
 801e984:	6054      	str	r4, [r2, #4]
 801e986:	e7ca      	b.n	801e91e <_free_r+0x22>
 801e988:	bd38      	pop	{r3, r4, r5, pc}
 801e98a:	bf00      	nop
 801e98c:	200037f8 	.word	0x200037f8

0801e990 <__sfputc_r>:
 801e990:	6893      	ldr	r3, [r2, #8]
 801e992:	3b01      	subs	r3, #1
 801e994:	2b00      	cmp	r3, #0
 801e996:	b410      	push	{r4}
 801e998:	6093      	str	r3, [r2, #8]
 801e99a:	da08      	bge.n	801e9ae <__sfputc_r+0x1e>
 801e99c:	6994      	ldr	r4, [r2, #24]
 801e99e:	42a3      	cmp	r3, r4
 801e9a0:	db01      	blt.n	801e9a6 <__sfputc_r+0x16>
 801e9a2:	290a      	cmp	r1, #10
 801e9a4:	d103      	bne.n	801e9ae <__sfputc_r+0x1e>
 801e9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e9aa:	f000 bb9f 	b.w	801f0ec <__swbuf_r>
 801e9ae:	6813      	ldr	r3, [r2, #0]
 801e9b0:	1c58      	adds	r0, r3, #1
 801e9b2:	6010      	str	r0, [r2, #0]
 801e9b4:	7019      	strb	r1, [r3, #0]
 801e9b6:	4608      	mov	r0, r1
 801e9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e9bc:	4770      	bx	lr

0801e9be <__sfputs_r>:
 801e9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9c0:	4606      	mov	r6, r0
 801e9c2:	460f      	mov	r7, r1
 801e9c4:	4614      	mov	r4, r2
 801e9c6:	18d5      	adds	r5, r2, r3
 801e9c8:	42ac      	cmp	r4, r5
 801e9ca:	d101      	bne.n	801e9d0 <__sfputs_r+0x12>
 801e9cc:	2000      	movs	r0, #0
 801e9ce:	e007      	b.n	801e9e0 <__sfputs_r+0x22>
 801e9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9d4:	463a      	mov	r2, r7
 801e9d6:	4630      	mov	r0, r6
 801e9d8:	f7ff ffda 	bl	801e990 <__sfputc_r>
 801e9dc:	1c43      	adds	r3, r0, #1
 801e9de:	d1f3      	bne.n	801e9c8 <__sfputs_r+0xa>
 801e9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e9e4 <_vfiprintf_r>:
 801e9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e8:	460d      	mov	r5, r1
 801e9ea:	b09d      	sub	sp, #116	@ 0x74
 801e9ec:	4614      	mov	r4, r2
 801e9ee:	4698      	mov	r8, r3
 801e9f0:	4606      	mov	r6, r0
 801e9f2:	b118      	cbz	r0, 801e9fc <_vfiprintf_r+0x18>
 801e9f4:	6a03      	ldr	r3, [r0, #32]
 801e9f6:	b90b      	cbnz	r3, 801e9fc <_vfiprintf_r+0x18>
 801e9f8:	f7ff fd7e 	bl	801e4f8 <__sinit>
 801e9fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9fe:	07d9      	lsls	r1, r3, #31
 801ea00:	d405      	bmi.n	801ea0e <_vfiprintf_r+0x2a>
 801ea02:	89ab      	ldrh	r3, [r5, #12]
 801ea04:	059a      	lsls	r2, r3, #22
 801ea06:	d402      	bmi.n	801ea0e <_vfiprintf_r+0x2a>
 801ea08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea0a:	f7ff ff5e 	bl	801e8ca <__retarget_lock_acquire_recursive>
 801ea0e:	89ab      	ldrh	r3, [r5, #12]
 801ea10:	071b      	lsls	r3, r3, #28
 801ea12:	d501      	bpl.n	801ea18 <_vfiprintf_r+0x34>
 801ea14:	692b      	ldr	r3, [r5, #16]
 801ea16:	b99b      	cbnz	r3, 801ea40 <_vfiprintf_r+0x5c>
 801ea18:	4629      	mov	r1, r5
 801ea1a:	4630      	mov	r0, r6
 801ea1c:	f000 fba4 	bl	801f168 <__swsetup_r>
 801ea20:	b170      	cbz	r0, 801ea40 <_vfiprintf_r+0x5c>
 801ea22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea24:	07dc      	lsls	r4, r3, #31
 801ea26:	d504      	bpl.n	801ea32 <_vfiprintf_r+0x4e>
 801ea28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ea2c:	b01d      	add	sp, #116	@ 0x74
 801ea2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea32:	89ab      	ldrh	r3, [r5, #12]
 801ea34:	0598      	lsls	r0, r3, #22
 801ea36:	d4f7      	bmi.n	801ea28 <_vfiprintf_r+0x44>
 801ea38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea3a:	f7ff ff47 	bl	801e8cc <__retarget_lock_release_recursive>
 801ea3e:	e7f3      	b.n	801ea28 <_vfiprintf_r+0x44>
 801ea40:	2300      	movs	r3, #0
 801ea42:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea44:	2320      	movs	r3, #32
 801ea46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ea4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ea4e:	2330      	movs	r3, #48	@ 0x30
 801ea50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ec00 <_vfiprintf_r+0x21c>
 801ea54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ea58:	f04f 0901 	mov.w	r9, #1
 801ea5c:	4623      	mov	r3, r4
 801ea5e:	469a      	mov	sl, r3
 801ea60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ea64:	b10a      	cbz	r2, 801ea6a <_vfiprintf_r+0x86>
 801ea66:	2a25      	cmp	r2, #37	@ 0x25
 801ea68:	d1f9      	bne.n	801ea5e <_vfiprintf_r+0x7a>
 801ea6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ea6e:	d00b      	beq.n	801ea88 <_vfiprintf_r+0xa4>
 801ea70:	465b      	mov	r3, fp
 801ea72:	4622      	mov	r2, r4
 801ea74:	4629      	mov	r1, r5
 801ea76:	4630      	mov	r0, r6
 801ea78:	f7ff ffa1 	bl	801e9be <__sfputs_r>
 801ea7c:	3001      	adds	r0, #1
 801ea7e:	f000 80a7 	beq.w	801ebd0 <_vfiprintf_r+0x1ec>
 801ea82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea84:	445a      	add	r2, fp
 801ea86:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea88:	f89a 3000 	ldrb.w	r3, [sl]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	f000 809f 	beq.w	801ebd0 <_vfiprintf_r+0x1ec>
 801ea92:	2300      	movs	r3, #0
 801ea94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ea98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ea9c:	f10a 0a01 	add.w	sl, sl, #1
 801eaa0:	9304      	str	r3, [sp, #16]
 801eaa2:	9307      	str	r3, [sp, #28]
 801eaa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eaa8:	931a      	str	r3, [sp, #104]	@ 0x68
 801eaaa:	4654      	mov	r4, sl
 801eaac:	2205      	movs	r2, #5
 801eaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eab2:	4853      	ldr	r0, [pc, #332]	@ (801ec00 <_vfiprintf_r+0x21c>)
 801eab4:	f7e1 fbd4 	bl	8000260 <memchr>
 801eab8:	9a04      	ldr	r2, [sp, #16]
 801eaba:	b9d8      	cbnz	r0, 801eaf4 <_vfiprintf_r+0x110>
 801eabc:	06d1      	lsls	r1, r2, #27
 801eabe:	bf44      	itt	mi
 801eac0:	2320      	movmi	r3, #32
 801eac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801eac6:	0713      	lsls	r3, r2, #28
 801eac8:	bf44      	itt	mi
 801eaca:	232b      	movmi	r3, #43	@ 0x2b
 801eacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ead0:	f89a 3000 	ldrb.w	r3, [sl]
 801ead4:	2b2a      	cmp	r3, #42	@ 0x2a
 801ead6:	d015      	beq.n	801eb04 <_vfiprintf_r+0x120>
 801ead8:	9a07      	ldr	r2, [sp, #28]
 801eada:	4654      	mov	r4, sl
 801eadc:	2000      	movs	r0, #0
 801eade:	f04f 0c0a 	mov.w	ip, #10
 801eae2:	4621      	mov	r1, r4
 801eae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801eae8:	3b30      	subs	r3, #48	@ 0x30
 801eaea:	2b09      	cmp	r3, #9
 801eaec:	d94b      	bls.n	801eb86 <_vfiprintf_r+0x1a2>
 801eaee:	b1b0      	cbz	r0, 801eb1e <_vfiprintf_r+0x13a>
 801eaf0:	9207      	str	r2, [sp, #28]
 801eaf2:	e014      	b.n	801eb1e <_vfiprintf_r+0x13a>
 801eaf4:	eba0 0308 	sub.w	r3, r0, r8
 801eaf8:	fa09 f303 	lsl.w	r3, r9, r3
 801eafc:	4313      	orrs	r3, r2
 801eafe:	9304      	str	r3, [sp, #16]
 801eb00:	46a2      	mov	sl, r4
 801eb02:	e7d2      	b.n	801eaaa <_vfiprintf_r+0xc6>
 801eb04:	9b03      	ldr	r3, [sp, #12]
 801eb06:	1d19      	adds	r1, r3, #4
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	9103      	str	r1, [sp, #12]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	bfbb      	ittet	lt
 801eb10:	425b      	neglt	r3, r3
 801eb12:	f042 0202 	orrlt.w	r2, r2, #2
 801eb16:	9307      	strge	r3, [sp, #28]
 801eb18:	9307      	strlt	r3, [sp, #28]
 801eb1a:	bfb8      	it	lt
 801eb1c:	9204      	strlt	r2, [sp, #16]
 801eb1e:	7823      	ldrb	r3, [r4, #0]
 801eb20:	2b2e      	cmp	r3, #46	@ 0x2e
 801eb22:	d10a      	bne.n	801eb3a <_vfiprintf_r+0x156>
 801eb24:	7863      	ldrb	r3, [r4, #1]
 801eb26:	2b2a      	cmp	r3, #42	@ 0x2a
 801eb28:	d132      	bne.n	801eb90 <_vfiprintf_r+0x1ac>
 801eb2a:	9b03      	ldr	r3, [sp, #12]
 801eb2c:	1d1a      	adds	r2, r3, #4
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	9203      	str	r2, [sp, #12]
 801eb32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801eb36:	3402      	adds	r4, #2
 801eb38:	9305      	str	r3, [sp, #20]
 801eb3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ec10 <_vfiprintf_r+0x22c>
 801eb3e:	7821      	ldrb	r1, [r4, #0]
 801eb40:	2203      	movs	r2, #3
 801eb42:	4650      	mov	r0, sl
 801eb44:	f7e1 fb8c 	bl	8000260 <memchr>
 801eb48:	b138      	cbz	r0, 801eb5a <_vfiprintf_r+0x176>
 801eb4a:	9b04      	ldr	r3, [sp, #16]
 801eb4c:	eba0 000a 	sub.w	r0, r0, sl
 801eb50:	2240      	movs	r2, #64	@ 0x40
 801eb52:	4082      	lsls	r2, r0
 801eb54:	4313      	orrs	r3, r2
 801eb56:	3401      	adds	r4, #1
 801eb58:	9304      	str	r3, [sp, #16]
 801eb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eb5e:	4829      	ldr	r0, [pc, #164]	@ (801ec04 <_vfiprintf_r+0x220>)
 801eb60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801eb64:	2206      	movs	r2, #6
 801eb66:	f7e1 fb7b 	bl	8000260 <memchr>
 801eb6a:	2800      	cmp	r0, #0
 801eb6c:	d03f      	beq.n	801ebee <_vfiprintf_r+0x20a>
 801eb6e:	4b26      	ldr	r3, [pc, #152]	@ (801ec08 <_vfiprintf_r+0x224>)
 801eb70:	bb1b      	cbnz	r3, 801ebba <_vfiprintf_r+0x1d6>
 801eb72:	9b03      	ldr	r3, [sp, #12]
 801eb74:	3307      	adds	r3, #7
 801eb76:	f023 0307 	bic.w	r3, r3, #7
 801eb7a:	3308      	adds	r3, #8
 801eb7c:	9303      	str	r3, [sp, #12]
 801eb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb80:	443b      	add	r3, r7
 801eb82:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb84:	e76a      	b.n	801ea5c <_vfiprintf_r+0x78>
 801eb86:	fb0c 3202 	mla	r2, ip, r2, r3
 801eb8a:	460c      	mov	r4, r1
 801eb8c:	2001      	movs	r0, #1
 801eb8e:	e7a8      	b.n	801eae2 <_vfiprintf_r+0xfe>
 801eb90:	2300      	movs	r3, #0
 801eb92:	3401      	adds	r4, #1
 801eb94:	9305      	str	r3, [sp, #20]
 801eb96:	4619      	mov	r1, r3
 801eb98:	f04f 0c0a 	mov.w	ip, #10
 801eb9c:	4620      	mov	r0, r4
 801eb9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eba2:	3a30      	subs	r2, #48	@ 0x30
 801eba4:	2a09      	cmp	r2, #9
 801eba6:	d903      	bls.n	801ebb0 <_vfiprintf_r+0x1cc>
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d0c6      	beq.n	801eb3a <_vfiprintf_r+0x156>
 801ebac:	9105      	str	r1, [sp, #20]
 801ebae:	e7c4      	b.n	801eb3a <_vfiprintf_r+0x156>
 801ebb0:	fb0c 2101 	mla	r1, ip, r1, r2
 801ebb4:	4604      	mov	r4, r0
 801ebb6:	2301      	movs	r3, #1
 801ebb8:	e7f0      	b.n	801eb9c <_vfiprintf_r+0x1b8>
 801ebba:	ab03      	add	r3, sp, #12
 801ebbc:	9300      	str	r3, [sp, #0]
 801ebbe:	462a      	mov	r2, r5
 801ebc0:	4b12      	ldr	r3, [pc, #72]	@ (801ec0c <_vfiprintf_r+0x228>)
 801ebc2:	a904      	add	r1, sp, #16
 801ebc4:	4630      	mov	r0, r6
 801ebc6:	f3af 8000 	nop.w
 801ebca:	4607      	mov	r7, r0
 801ebcc:	1c78      	adds	r0, r7, #1
 801ebce:	d1d6      	bne.n	801eb7e <_vfiprintf_r+0x19a>
 801ebd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ebd2:	07d9      	lsls	r1, r3, #31
 801ebd4:	d405      	bmi.n	801ebe2 <_vfiprintf_r+0x1fe>
 801ebd6:	89ab      	ldrh	r3, [r5, #12]
 801ebd8:	059a      	lsls	r2, r3, #22
 801ebda:	d402      	bmi.n	801ebe2 <_vfiprintf_r+0x1fe>
 801ebdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ebde:	f7ff fe75 	bl	801e8cc <__retarget_lock_release_recursive>
 801ebe2:	89ab      	ldrh	r3, [r5, #12]
 801ebe4:	065b      	lsls	r3, r3, #25
 801ebe6:	f53f af1f 	bmi.w	801ea28 <_vfiprintf_r+0x44>
 801ebea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebec:	e71e      	b.n	801ea2c <_vfiprintf_r+0x48>
 801ebee:	ab03      	add	r3, sp, #12
 801ebf0:	9300      	str	r3, [sp, #0]
 801ebf2:	462a      	mov	r2, r5
 801ebf4:	4b05      	ldr	r3, [pc, #20]	@ (801ec0c <_vfiprintf_r+0x228>)
 801ebf6:	a904      	add	r1, sp, #16
 801ebf8:	4630      	mov	r0, r6
 801ebfa:	f000 f879 	bl	801ecf0 <_printf_i>
 801ebfe:	e7e4      	b.n	801ebca <_vfiprintf_r+0x1e6>
 801ec00:	0802f28d 	.word	0x0802f28d
 801ec04:	0802f297 	.word	0x0802f297
 801ec08:	00000000 	.word	0x00000000
 801ec0c:	0801e9bf 	.word	0x0801e9bf
 801ec10:	0802f293 	.word	0x0802f293

0801ec14 <_printf_common>:
 801ec14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec18:	4616      	mov	r6, r2
 801ec1a:	4698      	mov	r8, r3
 801ec1c:	688a      	ldr	r2, [r1, #8]
 801ec1e:	690b      	ldr	r3, [r1, #16]
 801ec20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ec24:	4293      	cmp	r3, r2
 801ec26:	bfb8      	it	lt
 801ec28:	4613      	movlt	r3, r2
 801ec2a:	6033      	str	r3, [r6, #0]
 801ec2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ec30:	4607      	mov	r7, r0
 801ec32:	460c      	mov	r4, r1
 801ec34:	b10a      	cbz	r2, 801ec3a <_printf_common+0x26>
 801ec36:	3301      	adds	r3, #1
 801ec38:	6033      	str	r3, [r6, #0]
 801ec3a:	6823      	ldr	r3, [r4, #0]
 801ec3c:	0699      	lsls	r1, r3, #26
 801ec3e:	bf42      	ittt	mi
 801ec40:	6833      	ldrmi	r3, [r6, #0]
 801ec42:	3302      	addmi	r3, #2
 801ec44:	6033      	strmi	r3, [r6, #0]
 801ec46:	6825      	ldr	r5, [r4, #0]
 801ec48:	f015 0506 	ands.w	r5, r5, #6
 801ec4c:	d106      	bne.n	801ec5c <_printf_common+0x48>
 801ec4e:	f104 0a19 	add.w	sl, r4, #25
 801ec52:	68e3      	ldr	r3, [r4, #12]
 801ec54:	6832      	ldr	r2, [r6, #0]
 801ec56:	1a9b      	subs	r3, r3, r2
 801ec58:	42ab      	cmp	r3, r5
 801ec5a:	dc26      	bgt.n	801ecaa <_printf_common+0x96>
 801ec5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ec60:	6822      	ldr	r2, [r4, #0]
 801ec62:	3b00      	subs	r3, #0
 801ec64:	bf18      	it	ne
 801ec66:	2301      	movne	r3, #1
 801ec68:	0692      	lsls	r2, r2, #26
 801ec6a:	d42b      	bmi.n	801ecc4 <_printf_common+0xb0>
 801ec6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ec70:	4641      	mov	r1, r8
 801ec72:	4638      	mov	r0, r7
 801ec74:	47c8      	blx	r9
 801ec76:	3001      	adds	r0, #1
 801ec78:	d01e      	beq.n	801ecb8 <_printf_common+0xa4>
 801ec7a:	6823      	ldr	r3, [r4, #0]
 801ec7c:	6922      	ldr	r2, [r4, #16]
 801ec7e:	f003 0306 	and.w	r3, r3, #6
 801ec82:	2b04      	cmp	r3, #4
 801ec84:	bf02      	ittt	eq
 801ec86:	68e5      	ldreq	r5, [r4, #12]
 801ec88:	6833      	ldreq	r3, [r6, #0]
 801ec8a:	1aed      	subeq	r5, r5, r3
 801ec8c:	68a3      	ldr	r3, [r4, #8]
 801ec8e:	bf0c      	ite	eq
 801ec90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ec94:	2500      	movne	r5, #0
 801ec96:	4293      	cmp	r3, r2
 801ec98:	bfc4      	itt	gt
 801ec9a:	1a9b      	subgt	r3, r3, r2
 801ec9c:	18ed      	addgt	r5, r5, r3
 801ec9e:	2600      	movs	r6, #0
 801eca0:	341a      	adds	r4, #26
 801eca2:	42b5      	cmp	r5, r6
 801eca4:	d11a      	bne.n	801ecdc <_printf_common+0xc8>
 801eca6:	2000      	movs	r0, #0
 801eca8:	e008      	b.n	801ecbc <_printf_common+0xa8>
 801ecaa:	2301      	movs	r3, #1
 801ecac:	4652      	mov	r2, sl
 801ecae:	4641      	mov	r1, r8
 801ecb0:	4638      	mov	r0, r7
 801ecb2:	47c8      	blx	r9
 801ecb4:	3001      	adds	r0, #1
 801ecb6:	d103      	bne.n	801ecc0 <_printf_common+0xac>
 801ecb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ecbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ecc0:	3501      	adds	r5, #1
 801ecc2:	e7c6      	b.n	801ec52 <_printf_common+0x3e>
 801ecc4:	18e1      	adds	r1, r4, r3
 801ecc6:	1c5a      	adds	r2, r3, #1
 801ecc8:	2030      	movs	r0, #48	@ 0x30
 801ecca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ecce:	4422      	add	r2, r4
 801ecd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ecd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ecd8:	3302      	adds	r3, #2
 801ecda:	e7c7      	b.n	801ec6c <_printf_common+0x58>
 801ecdc:	2301      	movs	r3, #1
 801ecde:	4622      	mov	r2, r4
 801ece0:	4641      	mov	r1, r8
 801ece2:	4638      	mov	r0, r7
 801ece4:	47c8      	blx	r9
 801ece6:	3001      	adds	r0, #1
 801ece8:	d0e6      	beq.n	801ecb8 <_printf_common+0xa4>
 801ecea:	3601      	adds	r6, #1
 801ecec:	e7d9      	b.n	801eca2 <_printf_common+0x8e>
	...

0801ecf0 <_printf_i>:
 801ecf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ecf4:	7e0f      	ldrb	r7, [r1, #24]
 801ecf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ecf8:	2f78      	cmp	r7, #120	@ 0x78
 801ecfa:	4691      	mov	r9, r2
 801ecfc:	4680      	mov	r8, r0
 801ecfe:	460c      	mov	r4, r1
 801ed00:	469a      	mov	sl, r3
 801ed02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ed06:	d807      	bhi.n	801ed18 <_printf_i+0x28>
 801ed08:	2f62      	cmp	r7, #98	@ 0x62
 801ed0a:	d80a      	bhi.n	801ed22 <_printf_i+0x32>
 801ed0c:	2f00      	cmp	r7, #0
 801ed0e:	f000 80d1 	beq.w	801eeb4 <_printf_i+0x1c4>
 801ed12:	2f58      	cmp	r7, #88	@ 0x58
 801ed14:	f000 80b8 	beq.w	801ee88 <_printf_i+0x198>
 801ed18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ed1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ed20:	e03a      	b.n	801ed98 <_printf_i+0xa8>
 801ed22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ed26:	2b15      	cmp	r3, #21
 801ed28:	d8f6      	bhi.n	801ed18 <_printf_i+0x28>
 801ed2a:	a101      	add	r1, pc, #4	@ (adr r1, 801ed30 <_printf_i+0x40>)
 801ed2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ed30:	0801ed89 	.word	0x0801ed89
 801ed34:	0801ed9d 	.word	0x0801ed9d
 801ed38:	0801ed19 	.word	0x0801ed19
 801ed3c:	0801ed19 	.word	0x0801ed19
 801ed40:	0801ed19 	.word	0x0801ed19
 801ed44:	0801ed19 	.word	0x0801ed19
 801ed48:	0801ed9d 	.word	0x0801ed9d
 801ed4c:	0801ed19 	.word	0x0801ed19
 801ed50:	0801ed19 	.word	0x0801ed19
 801ed54:	0801ed19 	.word	0x0801ed19
 801ed58:	0801ed19 	.word	0x0801ed19
 801ed5c:	0801ee9b 	.word	0x0801ee9b
 801ed60:	0801edc7 	.word	0x0801edc7
 801ed64:	0801ee55 	.word	0x0801ee55
 801ed68:	0801ed19 	.word	0x0801ed19
 801ed6c:	0801ed19 	.word	0x0801ed19
 801ed70:	0801eebd 	.word	0x0801eebd
 801ed74:	0801ed19 	.word	0x0801ed19
 801ed78:	0801edc7 	.word	0x0801edc7
 801ed7c:	0801ed19 	.word	0x0801ed19
 801ed80:	0801ed19 	.word	0x0801ed19
 801ed84:	0801ee5d 	.word	0x0801ee5d
 801ed88:	6833      	ldr	r3, [r6, #0]
 801ed8a:	1d1a      	adds	r2, r3, #4
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	6032      	str	r2, [r6, #0]
 801ed90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ed94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ed98:	2301      	movs	r3, #1
 801ed9a:	e09c      	b.n	801eed6 <_printf_i+0x1e6>
 801ed9c:	6833      	ldr	r3, [r6, #0]
 801ed9e:	6820      	ldr	r0, [r4, #0]
 801eda0:	1d19      	adds	r1, r3, #4
 801eda2:	6031      	str	r1, [r6, #0]
 801eda4:	0606      	lsls	r6, r0, #24
 801eda6:	d501      	bpl.n	801edac <_printf_i+0xbc>
 801eda8:	681d      	ldr	r5, [r3, #0]
 801edaa:	e003      	b.n	801edb4 <_printf_i+0xc4>
 801edac:	0645      	lsls	r5, r0, #25
 801edae:	d5fb      	bpl.n	801eda8 <_printf_i+0xb8>
 801edb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801edb4:	2d00      	cmp	r5, #0
 801edb6:	da03      	bge.n	801edc0 <_printf_i+0xd0>
 801edb8:	232d      	movs	r3, #45	@ 0x2d
 801edba:	426d      	negs	r5, r5
 801edbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801edc0:	4858      	ldr	r0, [pc, #352]	@ (801ef24 <_printf_i+0x234>)
 801edc2:	230a      	movs	r3, #10
 801edc4:	e011      	b.n	801edea <_printf_i+0xfa>
 801edc6:	6821      	ldr	r1, [r4, #0]
 801edc8:	6833      	ldr	r3, [r6, #0]
 801edca:	0608      	lsls	r0, r1, #24
 801edcc:	f853 5b04 	ldr.w	r5, [r3], #4
 801edd0:	d402      	bmi.n	801edd8 <_printf_i+0xe8>
 801edd2:	0649      	lsls	r1, r1, #25
 801edd4:	bf48      	it	mi
 801edd6:	b2ad      	uxthmi	r5, r5
 801edd8:	2f6f      	cmp	r7, #111	@ 0x6f
 801edda:	4852      	ldr	r0, [pc, #328]	@ (801ef24 <_printf_i+0x234>)
 801eddc:	6033      	str	r3, [r6, #0]
 801edde:	bf14      	ite	ne
 801ede0:	230a      	movne	r3, #10
 801ede2:	2308      	moveq	r3, #8
 801ede4:	2100      	movs	r1, #0
 801ede6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801edea:	6866      	ldr	r6, [r4, #4]
 801edec:	60a6      	str	r6, [r4, #8]
 801edee:	2e00      	cmp	r6, #0
 801edf0:	db05      	blt.n	801edfe <_printf_i+0x10e>
 801edf2:	6821      	ldr	r1, [r4, #0]
 801edf4:	432e      	orrs	r6, r5
 801edf6:	f021 0104 	bic.w	r1, r1, #4
 801edfa:	6021      	str	r1, [r4, #0]
 801edfc:	d04b      	beq.n	801ee96 <_printf_i+0x1a6>
 801edfe:	4616      	mov	r6, r2
 801ee00:	fbb5 f1f3 	udiv	r1, r5, r3
 801ee04:	fb03 5711 	mls	r7, r3, r1, r5
 801ee08:	5dc7      	ldrb	r7, [r0, r7]
 801ee0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ee0e:	462f      	mov	r7, r5
 801ee10:	42bb      	cmp	r3, r7
 801ee12:	460d      	mov	r5, r1
 801ee14:	d9f4      	bls.n	801ee00 <_printf_i+0x110>
 801ee16:	2b08      	cmp	r3, #8
 801ee18:	d10b      	bne.n	801ee32 <_printf_i+0x142>
 801ee1a:	6823      	ldr	r3, [r4, #0]
 801ee1c:	07df      	lsls	r7, r3, #31
 801ee1e:	d508      	bpl.n	801ee32 <_printf_i+0x142>
 801ee20:	6923      	ldr	r3, [r4, #16]
 801ee22:	6861      	ldr	r1, [r4, #4]
 801ee24:	4299      	cmp	r1, r3
 801ee26:	bfde      	ittt	le
 801ee28:	2330      	movle	r3, #48	@ 0x30
 801ee2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ee2e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801ee32:	1b92      	subs	r2, r2, r6
 801ee34:	6122      	str	r2, [r4, #16]
 801ee36:	f8cd a000 	str.w	sl, [sp]
 801ee3a:	464b      	mov	r3, r9
 801ee3c:	aa03      	add	r2, sp, #12
 801ee3e:	4621      	mov	r1, r4
 801ee40:	4640      	mov	r0, r8
 801ee42:	f7ff fee7 	bl	801ec14 <_printf_common>
 801ee46:	3001      	adds	r0, #1
 801ee48:	d14a      	bne.n	801eee0 <_printf_i+0x1f0>
 801ee4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ee4e:	b004      	add	sp, #16
 801ee50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee54:	6823      	ldr	r3, [r4, #0]
 801ee56:	f043 0320 	orr.w	r3, r3, #32
 801ee5a:	6023      	str	r3, [r4, #0]
 801ee5c:	4832      	ldr	r0, [pc, #200]	@ (801ef28 <_printf_i+0x238>)
 801ee5e:	2778      	movs	r7, #120	@ 0x78
 801ee60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ee64:	6823      	ldr	r3, [r4, #0]
 801ee66:	6831      	ldr	r1, [r6, #0]
 801ee68:	061f      	lsls	r7, r3, #24
 801ee6a:	f851 5b04 	ldr.w	r5, [r1], #4
 801ee6e:	d402      	bmi.n	801ee76 <_printf_i+0x186>
 801ee70:	065f      	lsls	r7, r3, #25
 801ee72:	bf48      	it	mi
 801ee74:	b2ad      	uxthmi	r5, r5
 801ee76:	6031      	str	r1, [r6, #0]
 801ee78:	07d9      	lsls	r1, r3, #31
 801ee7a:	bf44      	itt	mi
 801ee7c:	f043 0320 	orrmi.w	r3, r3, #32
 801ee80:	6023      	strmi	r3, [r4, #0]
 801ee82:	b11d      	cbz	r5, 801ee8c <_printf_i+0x19c>
 801ee84:	2310      	movs	r3, #16
 801ee86:	e7ad      	b.n	801ede4 <_printf_i+0xf4>
 801ee88:	4826      	ldr	r0, [pc, #152]	@ (801ef24 <_printf_i+0x234>)
 801ee8a:	e7e9      	b.n	801ee60 <_printf_i+0x170>
 801ee8c:	6823      	ldr	r3, [r4, #0]
 801ee8e:	f023 0320 	bic.w	r3, r3, #32
 801ee92:	6023      	str	r3, [r4, #0]
 801ee94:	e7f6      	b.n	801ee84 <_printf_i+0x194>
 801ee96:	4616      	mov	r6, r2
 801ee98:	e7bd      	b.n	801ee16 <_printf_i+0x126>
 801ee9a:	6833      	ldr	r3, [r6, #0]
 801ee9c:	6825      	ldr	r5, [r4, #0]
 801ee9e:	6961      	ldr	r1, [r4, #20]
 801eea0:	1d18      	adds	r0, r3, #4
 801eea2:	6030      	str	r0, [r6, #0]
 801eea4:	062e      	lsls	r6, r5, #24
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	d501      	bpl.n	801eeae <_printf_i+0x1be>
 801eeaa:	6019      	str	r1, [r3, #0]
 801eeac:	e002      	b.n	801eeb4 <_printf_i+0x1c4>
 801eeae:	0668      	lsls	r0, r5, #25
 801eeb0:	d5fb      	bpl.n	801eeaa <_printf_i+0x1ba>
 801eeb2:	8019      	strh	r1, [r3, #0]
 801eeb4:	2300      	movs	r3, #0
 801eeb6:	6123      	str	r3, [r4, #16]
 801eeb8:	4616      	mov	r6, r2
 801eeba:	e7bc      	b.n	801ee36 <_printf_i+0x146>
 801eebc:	6833      	ldr	r3, [r6, #0]
 801eebe:	1d1a      	adds	r2, r3, #4
 801eec0:	6032      	str	r2, [r6, #0]
 801eec2:	681e      	ldr	r6, [r3, #0]
 801eec4:	6862      	ldr	r2, [r4, #4]
 801eec6:	2100      	movs	r1, #0
 801eec8:	4630      	mov	r0, r6
 801eeca:	f7e1 f9c9 	bl	8000260 <memchr>
 801eece:	b108      	cbz	r0, 801eed4 <_printf_i+0x1e4>
 801eed0:	1b80      	subs	r0, r0, r6
 801eed2:	6060      	str	r0, [r4, #4]
 801eed4:	6863      	ldr	r3, [r4, #4]
 801eed6:	6123      	str	r3, [r4, #16]
 801eed8:	2300      	movs	r3, #0
 801eeda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eede:	e7aa      	b.n	801ee36 <_printf_i+0x146>
 801eee0:	6923      	ldr	r3, [r4, #16]
 801eee2:	4632      	mov	r2, r6
 801eee4:	4649      	mov	r1, r9
 801eee6:	4640      	mov	r0, r8
 801eee8:	47d0      	blx	sl
 801eeea:	3001      	adds	r0, #1
 801eeec:	d0ad      	beq.n	801ee4a <_printf_i+0x15a>
 801eeee:	6823      	ldr	r3, [r4, #0]
 801eef0:	079b      	lsls	r3, r3, #30
 801eef2:	d413      	bmi.n	801ef1c <_printf_i+0x22c>
 801eef4:	68e0      	ldr	r0, [r4, #12]
 801eef6:	9b03      	ldr	r3, [sp, #12]
 801eef8:	4298      	cmp	r0, r3
 801eefa:	bfb8      	it	lt
 801eefc:	4618      	movlt	r0, r3
 801eefe:	e7a6      	b.n	801ee4e <_printf_i+0x15e>
 801ef00:	2301      	movs	r3, #1
 801ef02:	4632      	mov	r2, r6
 801ef04:	4649      	mov	r1, r9
 801ef06:	4640      	mov	r0, r8
 801ef08:	47d0      	blx	sl
 801ef0a:	3001      	adds	r0, #1
 801ef0c:	d09d      	beq.n	801ee4a <_printf_i+0x15a>
 801ef0e:	3501      	adds	r5, #1
 801ef10:	68e3      	ldr	r3, [r4, #12]
 801ef12:	9903      	ldr	r1, [sp, #12]
 801ef14:	1a5b      	subs	r3, r3, r1
 801ef16:	42ab      	cmp	r3, r5
 801ef18:	dcf2      	bgt.n	801ef00 <_printf_i+0x210>
 801ef1a:	e7eb      	b.n	801eef4 <_printf_i+0x204>
 801ef1c:	2500      	movs	r5, #0
 801ef1e:	f104 0619 	add.w	r6, r4, #25
 801ef22:	e7f5      	b.n	801ef10 <_printf_i+0x220>
 801ef24:	0802f29e 	.word	0x0802f29e
 801ef28:	0802f2af 	.word	0x0802f2af

0801ef2c <__sflush_r>:
 801ef2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ef30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef34:	0716      	lsls	r6, r2, #28
 801ef36:	4605      	mov	r5, r0
 801ef38:	460c      	mov	r4, r1
 801ef3a:	d454      	bmi.n	801efe6 <__sflush_r+0xba>
 801ef3c:	684b      	ldr	r3, [r1, #4]
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	dc02      	bgt.n	801ef48 <__sflush_r+0x1c>
 801ef42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	dd48      	ble.n	801efda <__sflush_r+0xae>
 801ef48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ef4a:	2e00      	cmp	r6, #0
 801ef4c:	d045      	beq.n	801efda <__sflush_r+0xae>
 801ef4e:	2300      	movs	r3, #0
 801ef50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ef54:	682f      	ldr	r7, [r5, #0]
 801ef56:	6a21      	ldr	r1, [r4, #32]
 801ef58:	602b      	str	r3, [r5, #0]
 801ef5a:	d030      	beq.n	801efbe <__sflush_r+0x92>
 801ef5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ef5e:	89a3      	ldrh	r3, [r4, #12]
 801ef60:	0759      	lsls	r1, r3, #29
 801ef62:	d505      	bpl.n	801ef70 <__sflush_r+0x44>
 801ef64:	6863      	ldr	r3, [r4, #4]
 801ef66:	1ad2      	subs	r2, r2, r3
 801ef68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ef6a:	b10b      	cbz	r3, 801ef70 <__sflush_r+0x44>
 801ef6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ef6e:	1ad2      	subs	r2, r2, r3
 801ef70:	2300      	movs	r3, #0
 801ef72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ef74:	6a21      	ldr	r1, [r4, #32]
 801ef76:	4628      	mov	r0, r5
 801ef78:	47b0      	blx	r6
 801ef7a:	1c43      	adds	r3, r0, #1
 801ef7c:	89a3      	ldrh	r3, [r4, #12]
 801ef7e:	d106      	bne.n	801ef8e <__sflush_r+0x62>
 801ef80:	6829      	ldr	r1, [r5, #0]
 801ef82:	291d      	cmp	r1, #29
 801ef84:	d82b      	bhi.n	801efde <__sflush_r+0xb2>
 801ef86:	4a2a      	ldr	r2, [pc, #168]	@ (801f030 <__sflush_r+0x104>)
 801ef88:	40ca      	lsrs	r2, r1
 801ef8a:	07d6      	lsls	r6, r2, #31
 801ef8c:	d527      	bpl.n	801efde <__sflush_r+0xb2>
 801ef8e:	2200      	movs	r2, #0
 801ef90:	6062      	str	r2, [r4, #4]
 801ef92:	04d9      	lsls	r1, r3, #19
 801ef94:	6922      	ldr	r2, [r4, #16]
 801ef96:	6022      	str	r2, [r4, #0]
 801ef98:	d504      	bpl.n	801efa4 <__sflush_r+0x78>
 801ef9a:	1c42      	adds	r2, r0, #1
 801ef9c:	d101      	bne.n	801efa2 <__sflush_r+0x76>
 801ef9e:	682b      	ldr	r3, [r5, #0]
 801efa0:	b903      	cbnz	r3, 801efa4 <__sflush_r+0x78>
 801efa2:	6560      	str	r0, [r4, #84]	@ 0x54
 801efa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801efa6:	602f      	str	r7, [r5, #0]
 801efa8:	b1b9      	cbz	r1, 801efda <__sflush_r+0xae>
 801efaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801efae:	4299      	cmp	r1, r3
 801efb0:	d002      	beq.n	801efb8 <__sflush_r+0x8c>
 801efb2:	4628      	mov	r0, r5
 801efb4:	f7ff fca2 	bl	801e8fc <_free_r>
 801efb8:	2300      	movs	r3, #0
 801efba:	6363      	str	r3, [r4, #52]	@ 0x34
 801efbc:	e00d      	b.n	801efda <__sflush_r+0xae>
 801efbe:	2301      	movs	r3, #1
 801efc0:	4628      	mov	r0, r5
 801efc2:	47b0      	blx	r6
 801efc4:	4602      	mov	r2, r0
 801efc6:	1c50      	adds	r0, r2, #1
 801efc8:	d1c9      	bne.n	801ef5e <__sflush_r+0x32>
 801efca:	682b      	ldr	r3, [r5, #0]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d0c6      	beq.n	801ef5e <__sflush_r+0x32>
 801efd0:	2b1d      	cmp	r3, #29
 801efd2:	d001      	beq.n	801efd8 <__sflush_r+0xac>
 801efd4:	2b16      	cmp	r3, #22
 801efd6:	d11e      	bne.n	801f016 <__sflush_r+0xea>
 801efd8:	602f      	str	r7, [r5, #0]
 801efda:	2000      	movs	r0, #0
 801efdc:	e022      	b.n	801f024 <__sflush_r+0xf8>
 801efde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801efe2:	b21b      	sxth	r3, r3
 801efe4:	e01b      	b.n	801f01e <__sflush_r+0xf2>
 801efe6:	690f      	ldr	r7, [r1, #16]
 801efe8:	2f00      	cmp	r7, #0
 801efea:	d0f6      	beq.n	801efda <__sflush_r+0xae>
 801efec:	0793      	lsls	r3, r2, #30
 801efee:	680e      	ldr	r6, [r1, #0]
 801eff0:	bf08      	it	eq
 801eff2:	694b      	ldreq	r3, [r1, #20]
 801eff4:	600f      	str	r7, [r1, #0]
 801eff6:	bf18      	it	ne
 801eff8:	2300      	movne	r3, #0
 801effa:	eba6 0807 	sub.w	r8, r6, r7
 801effe:	608b      	str	r3, [r1, #8]
 801f000:	f1b8 0f00 	cmp.w	r8, #0
 801f004:	dde9      	ble.n	801efda <__sflush_r+0xae>
 801f006:	6a21      	ldr	r1, [r4, #32]
 801f008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f00a:	4643      	mov	r3, r8
 801f00c:	463a      	mov	r2, r7
 801f00e:	4628      	mov	r0, r5
 801f010:	47b0      	blx	r6
 801f012:	2800      	cmp	r0, #0
 801f014:	dc08      	bgt.n	801f028 <__sflush_r+0xfc>
 801f016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f01a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f01e:	81a3      	strh	r3, [r4, #12]
 801f020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f028:	4407      	add	r7, r0
 801f02a:	eba8 0800 	sub.w	r8, r8, r0
 801f02e:	e7e7      	b.n	801f000 <__sflush_r+0xd4>
 801f030:	20400001 	.word	0x20400001

0801f034 <_fflush_r>:
 801f034:	b538      	push	{r3, r4, r5, lr}
 801f036:	690b      	ldr	r3, [r1, #16]
 801f038:	4605      	mov	r5, r0
 801f03a:	460c      	mov	r4, r1
 801f03c:	b913      	cbnz	r3, 801f044 <_fflush_r+0x10>
 801f03e:	2500      	movs	r5, #0
 801f040:	4628      	mov	r0, r5
 801f042:	bd38      	pop	{r3, r4, r5, pc}
 801f044:	b118      	cbz	r0, 801f04e <_fflush_r+0x1a>
 801f046:	6a03      	ldr	r3, [r0, #32]
 801f048:	b90b      	cbnz	r3, 801f04e <_fflush_r+0x1a>
 801f04a:	f7ff fa55 	bl	801e4f8 <__sinit>
 801f04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d0f3      	beq.n	801f03e <_fflush_r+0xa>
 801f056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f058:	07d0      	lsls	r0, r2, #31
 801f05a:	d404      	bmi.n	801f066 <_fflush_r+0x32>
 801f05c:	0599      	lsls	r1, r3, #22
 801f05e:	d402      	bmi.n	801f066 <_fflush_r+0x32>
 801f060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f062:	f7ff fc32 	bl	801e8ca <__retarget_lock_acquire_recursive>
 801f066:	4628      	mov	r0, r5
 801f068:	4621      	mov	r1, r4
 801f06a:	f7ff ff5f 	bl	801ef2c <__sflush_r>
 801f06e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f070:	07da      	lsls	r2, r3, #31
 801f072:	4605      	mov	r5, r0
 801f074:	d4e4      	bmi.n	801f040 <_fflush_r+0xc>
 801f076:	89a3      	ldrh	r3, [r4, #12]
 801f078:	059b      	lsls	r3, r3, #22
 801f07a:	d4e1      	bmi.n	801f040 <_fflush_r+0xc>
 801f07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f07e:	f7ff fc25 	bl	801e8cc <__retarget_lock_release_recursive>
 801f082:	e7dd      	b.n	801f040 <_fflush_r+0xc>

0801f084 <_putc_r>:
 801f084:	b570      	push	{r4, r5, r6, lr}
 801f086:	460d      	mov	r5, r1
 801f088:	4614      	mov	r4, r2
 801f08a:	4606      	mov	r6, r0
 801f08c:	b118      	cbz	r0, 801f096 <_putc_r+0x12>
 801f08e:	6a03      	ldr	r3, [r0, #32]
 801f090:	b90b      	cbnz	r3, 801f096 <_putc_r+0x12>
 801f092:	f7ff fa31 	bl	801e4f8 <__sinit>
 801f096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f098:	07d8      	lsls	r0, r3, #31
 801f09a:	d405      	bmi.n	801f0a8 <_putc_r+0x24>
 801f09c:	89a3      	ldrh	r3, [r4, #12]
 801f09e:	0599      	lsls	r1, r3, #22
 801f0a0:	d402      	bmi.n	801f0a8 <_putc_r+0x24>
 801f0a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0a4:	f7ff fc11 	bl	801e8ca <__retarget_lock_acquire_recursive>
 801f0a8:	68a3      	ldr	r3, [r4, #8]
 801f0aa:	3b01      	subs	r3, #1
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	60a3      	str	r3, [r4, #8]
 801f0b0:	da05      	bge.n	801f0be <_putc_r+0x3a>
 801f0b2:	69a2      	ldr	r2, [r4, #24]
 801f0b4:	4293      	cmp	r3, r2
 801f0b6:	db12      	blt.n	801f0de <_putc_r+0x5a>
 801f0b8:	b2eb      	uxtb	r3, r5
 801f0ba:	2b0a      	cmp	r3, #10
 801f0bc:	d00f      	beq.n	801f0de <_putc_r+0x5a>
 801f0be:	6823      	ldr	r3, [r4, #0]
 801f0c0:	1c5a      	adds	r2, r3, #1
 801f0c2:	6022      	str	r2, [r4, #0]
 801f0c4:	701d      	strb	r5, [r3, #0]
 801f0c6:	b2ed      	uxtb	r5, r5
 801f0c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f0ca:	07da      	lsls	r2, r3, #31
 801f0cc:	d405      	bmi.n	801f0da <_putc_r+0x56>
 801f0ce:	89a3      	ldrh	r3, [r4, #12]
 801f0d0:	059b      	lsls	r3, r3, #22
 801f0d2:	d402      	bmi.n	801f0da <_putc_r+0x56>
 801f0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0d6:	f7ff fbf9 	bl	801e8cc <__retarget_lock_release_recursive>
 801f0da:	4628      	mov	r0, r5
 801f0dc:	bd70      	pop	{r4, r5, r6, pc}
 801f0de:	4629      	mov	r1, r5
 801f0e0:	4622      	mov	r2, r4
 801f0e2:	4630      	mov	r0, r6
 801f0e4:	f000 f802 	bl	801f0ec <__swbuf_r>
 801f0e8:	4605      	mov	r5, r0
 801f0ea:	e7ed      	b.n	801f0c8 <_putc_r+0x44>

0801f0ec <__swbuf_r>:
 801f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0ee:	460e      	mov	r6, r1
 801f0f0:	4614      	mov	r4, r2
 801f0f2:	4605      	mov	r5, r0
 801f0f4:	b118      	cbz	r0, 801f0fe <__swbuf_r+0x12>
 801f0f6:	6a03      	ldr	r3, [r0, #32]
 801f0f8:	b90b      	cbnz	r3, 801f0fe <__swbuf_r+0x12>
 801f0fa:	f7ff f9fd 	bl	801e4f8 <__sinit>
 801f0fe:	69a3      	ldr	r3, [r4, #24]
 801f100:	60a3      	str	r3, [r4, #8]
 801f102:	89a3      	ldrh	r3, [r4, #12]
 801f104:	071a      	lsls	r2, r3, #28
 801f106:	d501      	bpl.n	801f10c <__swbuf_r+0x20>
 801f108:	6923      	ldr	r3, [r4, #16]
 801f10a:	b943      	cbnz	r3, 801f11e <__swbuf_r+0x32>
 801f10c:	4621      	mov	r1, r4
 801f10e:	4628      	mov	r0, r5
 801f110:	f000 f82a 	bl	801f168 <__swsetup_r>
 801f114:	b118      	cbz	r0, 801f11e <__swbuf_r+0x32>
 801f116:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801f11a:	4638      	mov	r0, r7
 801f11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f11e:	6823      	ldr	r3, [r4, #0]
 801f120:	6922      	ldr	r2, [r4, #16]
 801f122:	1a98      	subs	r0, r3, r2
 801f124:	6963      	ldr	r3, [r4, #20]
 801f126:	b2f6      	uxtb	r6, r6
 801f128:	4283      	cmp	r3, r0
 801f12a:	4637      	mov	r7, r6
 801f12c:	dc05      	bgt.n	801f13a <__swbuf_r+0x4e>
 801f12e:	4621      	mov	r1, r4
 801f130:	4628      	mov	r0, r5
 801f132:	f7ff ff7f 	bl	801f034 <_fflush_r>
 801f136:	2800      	cmp	r0, #0
 801f138:	d1ed      	bne.n	801f116 <__swbuf_r+0x2a>
 801f13a:	68a3      	ldr	r3, [r4, #8]
 801f13c:	3b01      	subs	r3, #1
 801f13e:	60a3      	str	r3, [r4, #8]
 801f140:	6823      	ldr	r3, [r4, #0]
 801f142:	1c5a      	adds	r2, r3, #1
 801f144:	6022      	str	r2, [r4, #0]
 801f146:	701e      	strb	r6, [r3, #0]
 801f148:	6962      	ldr	r2, [r4, #20]
 801f14a:	1c43      	adds	r3, r0, #1
 801f14c:	429a      	cmp	r2, r3
 801f14e:	d004      	beq.n	801f15a <__swbuf_r+0x6e>
 801f150:	89a3      	ldrh	r3, [r4, #12]
 801f152:	07db      	lsls	r3, r3, #31
 801f154:	d5e1      	bpl.n	801f11a <__swbuf_r+0x2e>
 801f156:	2e0a      	cmp	r6, #10
 801f158:	d1df      	bne.n	801f11a <__swbuf_r+0x2e>
 801f15a:	4621      	mov	r1, r4
 801f15c:	4628      	mov	r0, r5
 801f15e:	f7ff ff69 	bl	801f034 <_fflush_r>
 801f162:	2800      	cmp	r0, #0
 801f164:	d0d9      	beq.n	801f11a <__swbuf_r+0x2e>
 801f166:	e7d6      	b.n	801f116 <__swbuf_r+0x2a>

0801f168 <__swsetup_r>:
 801f168:	b538      	push	{r3, r4, r5, lr}
 801f16a:	4b29      	ldr	r3, [pc, #164]	@ (801f210 <__swsetup_r+0xa8>)
 801f16c:	4605      	mov	r5, r0
 801f16e:	6818      	ldr	r0, [r3, #0]
 801f170:	460c      	mov	r4, r1
 801f172:	b118      	cbz	r0, 801f17c <__swsetup_r+0x14>
 801f174:	6a03      	ldr	r3, [r0, #32]
 801f176:	b90b      	cbnz	r3, 801f17c <__swsetup_r+0x14>
 801f178:	f7ff f9be 	bl	801e4f8 <__sinit>
 801f17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f180:	0719      	lsls	r1, r3, #28
 801f182:	d422      	bmi.n	801f1ca <__swsetup_r+0x62>
 801f184:	06da      	lsls	r2, r3, #27
 801f186:	d407      	bmi.n	801f198 <__swsetup_r+0x30>
 801f188:	2209      	movs	r2, #9
 801f18a:	602a      	str	r2, [r5, #0]
 801f18c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f190:	81a3      	strh	r3, [r4, #12]
 801f192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f196:	e033      	b.n	801f200 <__swsetup_r+0x98>
 801f198:	0758      	lsls	r0, r3, #29
 801f19a:	d512      	bpl.n	801f1c2 <__swsetup_r+0x5a>
 801f19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f19e:	b141      	cbz	r1, 801f1b2 <__swsetup_r+0x4a>
 801f1a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f1a4:	4299      	cmp	r1, r3
 801f1a6:	d002      	beq.n	801f1ae <__swsetup_r+0x46>
 801f1a8:	4628      	mov	r0, r5
 801f1aa:	f7ff fba7 	bl	801e8fc <_free_r>
 801f1ae:	2300      	movs	r3, #0
 801f1b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801f1b2:	89a3      	ldrh	r3, [r4, #12]
 801f1b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f1b8:	81a3      	strh	r3, [r4, #12]
 801f1ba:	2300      	movs	r3, #0
 801f1bc:	6063      	str	r3, [r4, #4]
 801f1be:	6923      	ldr	r3, [r4, #16]
 801f1c0:	6023      	str	r3, [r4, #0]
 801f1c2:	89a3      	ldrh	r3, [r4, #12]
 801f1c4:	f043 0308 	orr.w	r3, r3, #8
 801f1c8:	81a3      	strh	r3, [r4, #12]
 801f1ca:	6923      	ldr	r3, [r4, #16]
 801f1cc:	b94b      	cbnz	r3, 801f1e2 <__swsetup_r+0x7a>
 801f1ce:	89a3      	ldrh	r3, [r4, #12]
 801f1d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f1d8:	d003      	beq.n	801f1e2 <__swsetup_r+0x7a>
 801f1da:	4621      	mov	r1, r4
 801f1dc:	4628      	mov	r0, r5
 801f1de:	f000 f83f 	bl	801f260 <__smakebuf_r>
 801f1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1e6:	f013 0201 	ands.w	r2, r3, #1
 801f1ea:	d00a      	beq.n	801f202 <__swsetup_r+0x9a>
 801f1ec:	2200      	movs	r2, #0
 801f1ee:	60a2      	str	r2, [r4, #8]
 801f1f0:	6962      	ldr	r2, [r4, #20]
 801f1f2:	4252      	negs	r2, r2
 801f1f4:	61a2      	str	r2, [r4, #24]
 801f1f6:	6922      	ldr	r2, [r4, #16]
 801f1f8:	b942      	cbnz	r2, 801f20c <__swsetup_r+0xa4>
 801f1fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f1fe:	d1c5      	bne.n	801f18c <__swsetup_r+0x24>
 801f200:	bd38      	pop	{r3, r4, r5, pc}
 801f202:	0799      	lsls	r1, r3, #30
 801f204:	bf58      	it	pl
 801f206:	6962      	ldrpl	r2, [r4, #20]
 801f208:	60a2      	str	r2, [r4, #8]
 801f20a:	e7f4      	b.n	801f1f6 <__swsetup_r+0x8e>
 801f20c:	2000      	movs	r0, #0
 801f20e:	e7f7      	b.n	801f200 <__swsetup_r+0x98>
 801f210:	200002f4 	.word	0x200002f4

0801f214 <__swhatbuf_r>:
 801f214:	b570      	push	{r4, r5, r6, lr}
 801f216:	460c      	mov	r4, r1
 801f218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f21c:	2900      	cmp	r1, #0
 801f21e:	b096      	sub	sp, #88	@ 0x58
 801f220:	4615      	mov	r5, r2
 801f222:	461e      	mov	r6, r3
 801f224:	da0d      	bge.n	801f242 <__swhatbuf_r+0x2e>
 801f226:	89a3      	ldrh	r3, [r4, #12]
 801f228:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f22c:	f04f 0100 	mov.w	r1, #0
 801f230:	bf14      	ite	ne
 801f232:	2340      	movne	r3, #64	@ 0x40
 801f234:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f238:	2000      	movs	r0, #0
 801f23a:	6031      	str	r1, [r6, #0]
 801f23c:	602b      	str	r3, [r5, #0]
 801f23e:	b016      	add	sp, #88	@ 0x58
 801f240:	bd70      	pop	{r4, r5, r6, pc}
 801f242:	466a      	mov	r2, sp
 801f244:	f000 f848 	bl	801f2d8 <_fstat_r>
 801f248:	2800      	cmp	r0, #0
 801f24a:	dbec      	blt.n	801f226 <__swhatbuf_r+0x12>
 801f24c:	9901      	ldr	r1, [sp, #4]
 801f24e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f252:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f256:	4259      	negs	r1, r3
 801f258:	4159      	adcs	r1, r3
 801f25a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f25e:	e7eb      	b.n	801f238 <__swhatbuf_r+0x24>

0801f260 <__smakebuf_r>:
 801f260:	898b      	ldrh	r3, [r1, #12]
 801f262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f264:	079d      	lsls	r5, r3, #30
 801f266:	4606      	mov	r6, r0
 801f268:	460c      	mov	r4, r1
 801f26a:	d507      	bpl.n	801f27c <__smakebuf_r+0x1c>
 801f26c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f270:	6023      	str	r3, [r4, #0]
 801f272:	6123      	str	r3, [r4, #16]
 801f274:	2301      	movs	r3, #1
 801f276:	6163      	str	r3, [r4, #20]
 801f278:	b003      	add	sp, #12
 801f27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f27c:	ab01      	add	r3, sp, #4
 801f27e:	466a      	mov	r2, sp
 801f280:	f7ff ffc8 	bl	801f214 <__swhatbuf_r>
 801f284:	9f00      	ldr	r7, [sp, #0]
 801f286:	4605      	mov	r5, r0
 801f288:	4639      	mov	r1, r7
 801f28a:	4630      	mov	r0, r6
 801f28c:	f7fe ff6a 	bl	801e164 <_malloc_r>
 801f290:	b948      	cbnz	r0, 801f2a6 <__smakebuf_r+0x46>
 801f292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f296:	059a      	lsls	r2, r3, #22
 801f298:	d4ee      	bmi.n	801f278 <__smakebuf_r+0x18>
 801f29a:	f023 0303 	bic.w	r3, r3, #3
 801f29e:	f043 0302 	orr.w	r3, r3, #2
 801f2a2:	81a3      	strh	r3, [r4, #12]
 801f2a4:	e7e2      	b.n	801f26c <__smakebuf_r+0xc>
 801f2a6:	89a3      	ldrh	r3, [r4, #12]
 801f2a8:	6020      	str	r0, [r4, #0]
 801f2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f2ae:	81a3      	strh	r3, [r4, #12]
 801f2b0:	9b01      	ldr	r3, [sp, #4]
 801f2b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f2b6:	b15b      	cbz	r3, 801f2d0 <__smakebuf_r+0x70>
 801f2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2bc:	4630      	mov	r0, r6
 801f2be:	f000 f81d 	bl	801f2fc <_isatty_r>
 801f2c2:	b128      	cbz	r0, 801f2d0 <__smakebuf_r+0x70>
 801f2c4:	89a3      	ldrh	r3, [r4, #12]
 801f2c6:	f023 0303 	bic.w	r3, r3, #3
 801f2ca:	f043 0301 	orr.w	r3, r3, #1
 801f2ce:	81a3      	strh	r3, [r4, #12]
 801f2d0:	89a3      	ldrh	r3, [r4, #12]
 801f2d2:	431d      	orrs	r5, r3
 801f2d4:	81a5      	strh	r5, [r4, #12]
 801f2d6:	e7cf      	b.n	801f278 <__smakebuf_r+0x18>

0801f2d8 <_fstat_r>:
 801f2d8:	b538      	push	{r3, r4, r5, lr}
 801f2da:	4d07      	ldr	r5, [pc, #28]	@ (801f2f8 <_fstat_r+0x20>)
 801f2dc:	2300      	movs	r3, #0
 801f2de:	4604      	mov	r4, r0
 801f2e0:	4608      	mov	r0, r1
 801f2e2:	4611      	mov	r1, r2
 801f2e4:	602b      	str	r3, [r5, #0]
 801f2e6:	f7e1 fd70 	bl	8000dca <_fstat>
 801f2ea:	1c43      	adds	r3, r0, #1
 801f2ec:	d102      	bne.n	801f2f4 <_fstat_r+0x1c>
 801f2ee:	682b      	ldr	r3, [r5, #0]
 801f2f0:	b103      	cbz	r3, 801f2f4 <_fstat_r+0x1c>
 801f2f2:	6023      	str	r3, [r4, #0]
 801f2f4:	bd38      	pop	{r3, r4, r5, pc}
 801f2f6:	bf00      	nop
 801f2f8:	20003938 	.word	0x20003938

0801f2fc <_isatty_r>:
 801f2fc:	b538      	push	{r3, r4, r5, lr}
 801f2fe:	4d06      	ldr	r5, [pc, #24]	@ (801f318 <_isatty_r+0x1c>)
 801f300:	2300      	movs	r3, #0
 801f302:	4604      	mov	r4, r0
 801f304:	4608      	mov	r0, r1
 801f306:	602b      	str	r3, [r5, #0]
 801f308:	f7e1 fd6f 	bl	8000dea <_isatty>
 801f30c:	1c43      	adds	r3, r0, #1
 801f30e:	d102      	bne.n	801f316 <_isatty_r+0x1a>
 801f310:	682b      	ldr	r3, [r5, #0]
 801f312:	b103      	cbz	r3, 801f316 <_isatty_r+0x1a>
 801f314:	6023      	str	r3, [r4, #0]
 801f316:	bd38      	pop	{r3, r4, r5, pc}
 801f318:	20003938 	.word	0x20003938

0801f31c <_init>:
 801f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f31e:	bf00      	nop
 801f320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f322:	bc08      	pop	{r3}
 801f324:	469e      	mov	lr, r3
 801f326:	4770      	bx	lr

0801f328 <_fini>:
 801f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f32a:	bf00      	nop
 801f32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f32e:	bc08      	pop	{r3}
 801f330:	469e      	mov	lr, r3
 801f332:	4770      	bx	lr
