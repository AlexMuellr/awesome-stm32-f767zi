
f767zi-lwip-httpd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a40  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036b8  08014c40  08014c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182f8  080182f8  0001a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080182f8  080182f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018300  08018300  0001a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018300  08018300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018304  08018304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08018308  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801839c  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801843c  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000086e4  200001d4  080184dc  0001a1d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200088b8  080184dc  0001a8b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001a1d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002575b  00000000  00000000  0001a202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000062f0  00000000  00000000  0003f95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  00045c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001572  00000000  00000000  00047760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000362bd  00000000  00000000  00048cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b74f  00000000  00000000  0007ef8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010ebeb  00000000  00000000  000aa6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b92c9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000077cc  00000000  00000000  001b930c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  001c0ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08014c28 	.word	0x08014c28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08014c28 	.word	0x08014c28

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <LED_CGI_HANDLER>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// actual cgi handler function #5
const char* LED_CGI_HANDLER(int index, int num_params, char* pc_params[], char* pc_values[])
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

	if(index == 0) {
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10a      	bne.n	800066a <LED_CGI_HANDLER+0x2e>

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	4823      	ldr	r0, [pc, #140]	@ (80006e8 <LED_CGI_HANDLER+0xac>)
 800065a:	f002 fa2b 	bl	8002ab4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000664:	4820      	ldr	r0, [pc, #128]	@ (80006e8 <LED_CGI_HANDLER+0xac>)
 8000666:	f002 fa25 	bl	8002ab4 <HAL_GPIO_WritePin>

	}

	for(i = 0; i < num_params; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	e032      	b.n	80006d6 <LED_CGI_HANDLER+0x9a>
		if(strcmp(pc_params[i], "led") == 0) {
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	491c      	ldr	r1, [pc, #112]	@ (80006ec <LED_CGI_HANDLER+0xb0>)
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fddf 	bl	8000240 <strcmp>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d123      	bne.n	80006d0 <LED_CGI_HANDLER+0x94>
			if(strcmp(pc_values[i], "1") == 0) {
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	4413      	add	r3, r2
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4917      	ldr	r1, [pc, #92]	@ (80006f0 <LED_CGI_HANDLER+0xb4>)
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fdd3 	bl	8000240 <strcmp>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <LED_CGI_HANDLER+0x72>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a6:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <LED_CGI_HANDLER+0xac>)
 80006a8:	f002 fa04 	bl	8002ab4 <HAL_GPIO_WritePin>
 80006ac:	e010      	b.n	80006d0 <LED_CGI_HANDLER+0x94>
			} else if(strcmp(pc_values[i], "2") == 0) {
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	490e      	ldr	r1, [pc, #56]	@ (80006f4 <LED_CGI_HANDLER+0xb8>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fdc0 	bl	8000240 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d104      	bne.n	80006d0 <LED_CGI_HANDLER+0x94>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <LED_CGI_HANDLER+0xac>)
 80006cc:	f002 f9f2 	bl	8002ab4 <HAL_GPIO_WritePin>
	for(i = 0; i < num_params; i++) {
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	3301      	adds	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d3c8      	bcc.n	8000670 <LED_CGI_HANDLER+0x34>
			}
		}
	}
	return "/index.shtml";
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <LED_CGI_HANDLER+0xbc>)

} // end #5
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40020400 	.word	0x40020400
 80006ec:	08014c5c 	.word	0x08014c5c
 80006f0:	08014c60 	.word	0x08014c60
 80006f4:	08014c64 	.word	0x08014c64
 80006f8:	08014c68 	.word	0x08014c68

080006fc <MY_CGI_INIT>:


// init cgi handler #6
void MY_CGI_INIT(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	cgi_table[0] = led_cgi;
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <MY_CGI_INIT+0x1c>)
 8000702:	4a06      	ldr	r2, [pc, #24]	@ (800071c <MY_CGI_INIT+0x20>)
 8000704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000708:	e883 0003 	stmia.w	r3, {r0, r1}
	http_set_cgi_handlers(cgi_table, 1);
 800070c:	2101      	movs	r1, #1
 800070e:	4802      	ldr	r0, [pc, #8]	@ (8000718 <MY_CGI_INIT+0x1c>)
 8000710:	f006 fbec 	bl	8006eec <http_set_cgi_handlers>
} // end #6
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000075c 	.word	0x2000075c
 800071c:	08017de0 	.word	0x08017de0

08000720 <MY_SSI_HANDLER>:


// function for ssi handler #4
u16_t MY_SSI_HANDLER(int index, char* pc_insert, char* insert_len)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b092      	sub	sp, #72	@ 0x48
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	if(index == 0) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d141      	bne.n	80007b6 <MY_SSI_HANDLER+0x96>
		// return length of string
		if(!LD1_ON) {
 8000732:	4b45      	ldr	r3, [pc, #276]	@ (8000848 <MY_SSI_HANDLER+0x128>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	f083 0301 	eor.w	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d019      	beq.n	8000774 <MY_SSI_HANDLER+0x54>
			char my_str[] = "<input value=\"1\" type=\"checkbox\" name=\"led\">";
 8000740:	4b42      	ldr	r3, [pc, #264]	@ (800084c <MY_SSI_HANDLER+0x12c>)
 8000742:	f107 0410 	add.w	r4, r7, #16
 8000746:	461d      	mov	r5, r3
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000750:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000754:	c407      	stmia	r4!, {r0, r1, r2}
 8000756:	7023      	strb	r3, [r4, #0]
			strcpy(pc_insert, my_str);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	f013 fc2d 	bl	8013fbe <strcpy>
			return strlen(my_str);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fd73 	bl	8000254 <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	b29b      	uxth	r3, r3
 8000772:	e065      	b.n	8000840 <MY_SSI_HANDLER+0x120>

		} else if(LD1_ON){
 8000774:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <MY_SSI_HANDLER+0x128>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d061      	beq.n	8000840 <MY_SSI_HANDLER+0x120>
			char my_str[] = "<input value=\"1\" type=\"checkbox\" name=\"led\" checked>";
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <MY_SSI_HANDLER+0x130>)
 800077e:	f107 0410 	add.w	r4, r7, #16
 8000782:	461d      	mov	r5, r3
 8000784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000794:	6020      	str	r0, [r4, #0]
 8000796:	3404      	adds	r4, #4
 8000798:	7021      	strb	r1, [r4, #0]
			strcpy(pc_insert, my_str);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f013 fc0c 	bl	8013fbe <strcpy>
			return strlen(my_str);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd52 	bl	8000254 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	e044      	b.n	8000840 <MY_SSI_HANDLER+0x120>
		}
	} else if(index == 1){
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d141      	bne.n	8000840 <MY_SSI_HANDLER+0x120>
		if(!LD2_ON) {
 80007bc:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <MY_SSI_HANDLER+0x134>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d019      	beq.n	80007fe <MY_SSI_HANDLER+0xde>
			char my_str[] = "<input value=\"2\" type=\"checkbox\" name=\"led\">";
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <MY_SSI_HANDLER+0x138>)
 80007cc:	f107 0410 	add.w	r4, r7, #16
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007de:	c407      	stmia	r4!, {r0, r1, r2}
 80007e0:	7023      	strb	r3, [r4, #0]
				strcpy(pc_insert, my_str);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f013 fbe8 	bl	8013fbe <strcpy>
				return strlen(my_str);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fd2e 	bl	8000254 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	e020      	b.n	8000840 <MY_SSI_HANDLER+0x120>

			} else if(LD2_ON){
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MY_SSI_HANDLER+0x134>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d01c      	beq.n	8000840 <MY_SSI_HANDLER+0x120>
				char my_str[] = "<input value=\"2\" type=\"checkbox\" name=\"led\" checked>";
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MY_SSI_HANDLER+0x13c>)
 8000808:	f107 0410 	add.w	r4, r7, #16
 800080c:	461d      	mov	r5, r3
 800080e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081e:	6020      	str	r0, [r4, #0]
 8000820:	3404      	adds	r4, #4
 8000822:	7021      	strb	r1, [r4, #0]
				strcpy(pc_insert, my_str);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f013 fbc7 	bl	8013fbe <strcpy>
				return strlen(my_str);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd0d 	bl	8000254 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29b      	uxth	r3, r3
 800083e:	e7ff      	b.n	8000840 <MY_SSI_HANDLER+0x120>
			}
	}
} // end #7
 8000840:	4618      	mov	r0, r3
 8000842:	3748      	adds	r7, #72	@ 0x48
 8000844:	46bd      	mov	sp, r7
 8000846:	bdb0      	pop	{r4, r5, r7, pc}
 8000848:	200001f0 	.word	0x200001f0
 800084c:	08014c78 	.word	0x08014c78
 8000850:	08014ca8 	.word	0x08014ca8
 8000854:	200001f1 	.word	0x200001f1
 8000858:	08014ce0 	.word	0x08014ce0
 800085c:	08014d10 	.word	0x08014d10

08000860 <MY_SSI_INIT>:


// function to init ssi #5
void MY_SSI_INIT(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	http_set_ssi_handler(MY_SSI_HANDLER, (char const **) ssi_tags, NUM_SSI_TAGS);
 8000864:	2202      	movs	r2, #2
 8000866:	4903      	ldr	r1, [pc, #12]	@ (8000874 <MY_SSI_INIT+0x14>)
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <MY_SSI_INIT+0x18>)
 800086a:	f006 fafd 	bl	8006e68 <http_set_ssi_handler>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000000 	.word	0x20000000
 8000878:	08000721 	.word	0x08000721

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fcd3 	bl	800122a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f812 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 f8e0 	bl	8000a4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800088c:	f000 f880 	bl	8000990 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000890:	f000 f8ae 	bl	80009f0 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000894:	f004 fb7c 	bl	8004f90 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  httpd_init();
 8000898:	f006 fac6 	bl	8006e28 <httpd_init>
  MY_CGI_INIT();
 800089c:	f7ff ff2e 	bl	80006fc <MY_CGI_INIT>
  MY_SSI_INIT();
 80008a0:	f7ff ffde 	bl	8000860 <MY_SSI_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80008a4:	f004 fbc6 	bl	8005034 <MX_LWIP_Process>
 80008a8:	e7fc      	b.n	80008a4 <main+0x28>
	...

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	@ 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2234      	movs	r2, #52	@ 0x34
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f013 faeb 	bl	8013e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d0:	f002 fa44 	bl	8002d5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <SystemClock_Config+0xdc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000988 <SystemClock_Config+0xdc>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SystemClock_Config+0xdc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ec:	4b27      	ldr	r3, [pc, #156]	@ (800098c <SystemClock_Config+0xe0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f4:	4a25      	ldr	r2, [pc, #148]	@ (800098c <SystemClock_Config+0xe0>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b23      	ldr	r3, [pc, #140]	@ (800098c <SystemClock_Config+0xe0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000910:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fa71 	bl	8002e1c <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000940:	f000 f934 	bl	8000bac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000944:	f002 fa1a 	bl	8002d7c <HAL_PWREx_EnableOverDrive>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094e:	f000 f92d 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	2103      	movs	r1, #3
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fd02 	bl	8003378 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800097a:	f000 f917 	bl	8000bac <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <MX_USART3_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_USART3_UART_Init+0x58>)
 80009d4:	f003 fb1e 	bl	8004014 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8e5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001f4 	.word	0x200001f4
 80009ec:	40004800 	.word	0x40004800

080009f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2206      	movs	r2, #6
 8000a00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2202      	movs	r2, #2
 8000a06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	f002 f857 	bl	8002ae6 <HAL_PCD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 f8b5 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000027c 	.word	0x2000027c

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b4e      	ldr	r3, [pc, #312]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a4d      	ldr	r2, [pc, #308]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	61bb      	str	r3, [r7, #24]
 8000a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b48      	ldr	r3, [pc, #288]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a47      	ldr	r2, [pc, #284]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b45      	ldr	r3, [pc, #276]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a41      	ldr	r2, [pc, #260]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a3b      	ldr	r2, [pc, #236]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a35      	ldr	r2, [pc, #212]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a2f      	ldr	r2, [pc, #188]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_GPIO_Init+0x150>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000af8:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <MX_GPIO_Init+0x154>)
 8000afa:	f001 ffdb 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2140      	movs	r1, #64	@ 0x40
 8000b02:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <MX_GPIO_Init+0x158>)
 8000b04:	f001 ffd6 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4822      	ldr	r0, [pc, #136]	@ (8000ba8 <MX_GPIO_Init+0x15c>)
 8000b20:	f001 fe1c 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4819      	ldr	r0, [pc, #100]	@ (8000ba0 <MX_GPIO_Init+0x154>)
 8000b3c:	f001 fe0e 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b40:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <MX_GPIO_Init+0x154>)
 8000b5a:	f001 fdff 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b5e:	2340      	movs	r3, #64	@ 0x40
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <MX_GPIO_Init+0x158>)
 8000b76:	f001 fdf1 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b7a:	2380      	movs	r3, #128	@ 0x80
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_GPIO_Init+0x158>)
 8000b8e:	f001 fde5 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	@ 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	40021800 	.word	0x40021800
 8000ba8:	40020800 	.word	0x40020800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x44>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x44>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0ae      	sub	sp, #184	@ 0xb8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2290      	movs	r2, #144	@ 0x90
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f013 f938 	bl	8013e96 <memset>
  if(huart->Instance==USART3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_UART_MspInit+0xb4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d13c      	bne.n	8000caa <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fdc0 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c4a:	f7ff ffaf 	bl	8000bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_UART_MspInit+0xb8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_UART_MspInit+0xbc>)
 8000ca6:	f001 fd59 	bl	800275c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000caa:	bf00      	nop
 8000cac:	37b8      	adds	r7, #184	@ 0xb8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004800 	.word	0x40004800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0ae      	sub	sp, #184	@ 0xb8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2290      	movs	r2, #144	@ 0x90
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f013 f8d8 	bl	8013e96 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cee:	d159      	bne.n	8000da4 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000cf4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fd5f 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff ff4e 	bl	8000bac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d28:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d42:	230a      	movs	r3, #10
 8000d44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4818      	ldr	r0, [pc, #96]	@ (8000db0 <HAL_PCD_MspInit+0xf0>)
 8000d50:	f001 fd04 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <HAL_PCD_MspInit+0xf0>)
 8000d70:	f001 fcf4 	bl	800275c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d74:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d90:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <HAL_PCD_MspInit+0xec>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000da4:	bf00      	nop
 8000da6:	37b8      	adds	r7, #184	@ 0xb8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 fa4b 	bl	80012a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_kill>:

int _kill(int pid, int sig)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <_kill+0x20>)
 8000e30:	2216      	movs	r2, #22
 8000e32:	601a      	str	r2, [r3, #0]
  return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	200088a8 	.word	0x200088a8

08000e48 <_exit>:

void _exit (int status)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffe5 	bl	8000e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e5a:	bf00      	nop
 8000e5c:	e7fd      	b.n	8000e5a <_exit+0x12>

08000e5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e00a      	b.n	8000e86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e70:	f3af 8000 	nop.w
 8000e74:	4601      	mov	r1, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	60ba      	str	r2, [r7, #8]
 8000e7c:	b2ca      	uxtb	r2, r1
 8000e7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dbf0      	blt.n	8000e70 <_read+0x12>
  }

  return len;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e009      	b.n	8000ebe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	60ba      	str	r2, [r7, #8]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dbf1      	blt.n	8000eaa <_write+0x12>
  }
  return len;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_close>:

int _close(int file)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef8:	605a      	str	r2, [r3, #4]
  return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_isatty>:

int _isatty(int file)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f10:	2301      	movs	r3, #1
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	@ (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d205      	bcs.n	8000f74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <_sbrk+0x6c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20080000 	.word	0x20080000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000764 	.word	0x20000764
 8000fa0:	200088b8 	.word	0x200088b8
 8000fa4:	200088a8 	.word	0x200088a8

08000fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	@ (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f012 ffb9 	bl	8013f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fc3d 	bl	800087c <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001010:	08018308 	.word	0x08018308
  ldr r2, =_sbss
 8001014:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001018:	200088b8 	.word	0x200088b8

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>

0800101e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d007      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <LAN8742_RegisterBusIO+0x28>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e014      	b.n	8001076 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d139      	bne.n	8001112 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e01c      	b.n	80010f2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f107 020c 	add.w	r2, r7, #12
 80010c0:	2112      	movs	r1, #18
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da03      	bge.n	80010d4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80010cc:	f06f 0304 	mvn.w	r3, #4
 80010d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80010d2:	e00b      	b.n	80010ec <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d105      	bne.n	80010ec <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
         break;
 80010ea:	e005      	b.n	80010f8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	d9df      	bls.n	80010b8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	d902      	bls.n	8001106 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001100:	f06f 0302 	mvn.w	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001112:	693b      	ldr	r3, [r7, #16]
 }
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6810      	ldr	r0, [r2, #0]
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	2101      	movs	r1, #1
 8001136:	4798      	blx	r3
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	da02      	bge.n	8001144 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800113e:	f06f 0304 	mvn.w	r3, #4
 8001142:	e06e      	b.n	8001222 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	f107 020c 	add.w	r2, r7, #12
 8001150:	2101      	movs	r1, #1
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	da02      	bge.n	8001160 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800115a:	f06f 0304 	mvn.w	r3, #4
 800115e:	e060      	b.n	8001222 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800116a:	2301      	movs	r3, #1
 800116c:	e059      	b.n	8001222 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6810      	ldr	r0, [r2, #0]
 8001176:	f107 020c 	add.w	r2, r7, #12
 800117a:	2100      	movs	r1, #0
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	da02      	bge.n	800118a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001184:	f06f 0304 	mvn.w	r3, #4
 8001188:	e04b      	b.n	8001222 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d11b      	bne.n	80011cc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <LAN8742_GetLinkState+0x90>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011a8:	2302      	movs	r3, #2
 80011aa:	e03a      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e033      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011c4:	2304      	movs	r3, #4
 80011c6:	e02c      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011c8:	2305      	movs	r3, #5
 80011ca:	e02a      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	f107 020c 	add.w	r2, r7, #12
 80011d8:	211f      	movs	r1, #31
 80011da:	4798      	blx	r3
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da02      	bge.n	80011e8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80011e2:	f06f 0304 	mvn.w	r3, #4
 80011e6:	e01c      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011f2:	2306      	movs	r3, #6
 80011f4:	e015      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 031c 	and.w	r3, r3, #28
 80011fc:	2b18      	cmp	r3, #24
 80011fe:	d101      	bne.n	8001204 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001200:	2302      	movs	r3, #2
 8001202:	e00e      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 031c 	and.w	r3, r3, #28
 800120a:	2b08      	cmp	r3, #8
 800120c:	d101      	bne.n	8001212 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800120e:	2303      	movs	r3, #3
 8001210:	e007      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f003 031c 	and.w	r3, r3, #28
 8001218:	2b14      	cmp	r3, #20
 800121a:	d101      	bne.n	8001220 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800121c:	2304      	movs	r3, #4
 800121e:	e000      	b.n	8001222 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001220:	2305      	movs	r3, #5
    }
  }
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f92e 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f805 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123a:	f7ff fcbd 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f93b 	bl	80014de <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001280:	f000 f911 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000008 	.word	0x20000008
 800129c:	20000010 	.word	0x20000010
 80012a0:	2000000c 	.word	0x2000000c

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000010 	.word	0x20000010
 80012c8:	20000768 	.word	0x20000768

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000768 	.word	0x20000768

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000010 	.word	0x20000010

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	4313      	orrs	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	@ (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	05fa0000 	.word	0x05fa0000

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff47 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff5c 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffb0 	bl	800144c <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e086      	b.n	8001618 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2223      	movs	r2, #35	@ 0x23
 8001518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f003 ff79 	bl	8005414 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <HAL_ETH_Init+0x128>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <HAL_ETH_Init+0x128>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <HAL_ETH_Init+0x128>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <HAL_ETH_Init+0x12c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a39      	ldr	r2, [pc, #228]	@ (8001624 <HAL_ETH_Init+0x12c>)
 8001540:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001544:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <HAL_ETH_Init+0x12c>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4935      	ldr	r1, [pc, #212]	@ (8001624 <HAL_ETH_Init+0x12c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001554:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <HAL_ETH_Init+0x12c>)
 8001556:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001570:	f7ff feac 	bl	80012cc <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001576:	e011      	b.n	800159c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001578:	f7ff fea8 	bl	80012cc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001586:	d909      	bls.n	800159c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2204      	movs	r2, #4
 800158c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	22e0      	movs	r2, #224	@ 0xe0
 8001594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e03d      	b.n	8001618 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1e4      	bne.n	8001578 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 fe18 	bl	80021e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fec3 	bl	8002340 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 ff19 	bl	80023f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	461a      	mov	r2, r3
 80015c6:	2100      	movs	r1, #0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fe81 	bl	80022d0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80015dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_ETH_Init+0x130>)
 80015ec:	430b      	orrs	r3, r1
 80015ee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001602:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2210      	movs	r2, #16
 8001612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40013800 	.word	0x40013800
 8001628:	00020060 	.word	0x00020060

0800162c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800163a:	2b10      	cmp	r3, #16
 800163c:	d150      	bne.n	80016e0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2223      	movs	r2, #35	@ 0x23
 8001642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2204      	movs	r2, #4
 800164a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f9f9 	bl	8001a44 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0208 	orr.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fe3a 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0204 	orr.w	r2, r2, #4
 8001686:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fe27 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fc3c 	bl	8001f1c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ba:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016d2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2223      	movs	r2, #35	@ 0x23
 80016d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016f8:	2b23      	cmp	r3, #35	@ 0x23
 80016fa:	d14a      	bne.n	8001792 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2223      	movs	r2, #35	@ 0x23
 8001700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001716:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800171a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001732:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0204 	bic.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fdc9 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fbde 	bl	8001f1c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0208 	bic.w	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fdb3 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2210      	movs	r2, #16
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
  }
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07c      	b.n	80018bc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017c8:	2b23      	cmp	r3, #35	@ 0x23
 80017ca:	d176      	bne.n	80018ba <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80017cc:	2200      	movs	r2, #0
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 fe7d 	bl	80024d0 <ETH_Prepare_Tx_Descriptors>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e065      	b.n	80018bc <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f0:	f3bf 8f4f 	dsb	sy
}
 80017f4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3206      	adds	r2, #6
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	2b03      	cmp	r3, #3
 8001814:	d904      	bls.n	8001820 <HAL_ETH_Transmit+0x84>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	1f1a      	subs	r2, r3, #4
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3106      	adds	r1, #6
 800182c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001830:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001834:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001836:	f7ff fd49 	bl	80012cc <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800183c:	e037      	b.n	80018ae <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d011      	beq.n	8001874 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	f043 0208 	orr.w	r2, r3, #8
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e023      	b.n	80018bc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800187a:	d018      	beq.n	80018ae <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800187c:	f7ff fd26 	bl	80012cc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d302      	bcc.n	8001892 <HAL_ETH_Transmit+0xf6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80018a8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e006      	b.n	80018bc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	dbc3      	blt.n	800183e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
  }
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	f043 0201 	orr.w	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0a4      	b.n	8001a3a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018f6:	2b23      	cmp	r3, #35	@ 0x23
 80018f8:	d001      	beq.n	80018fe <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e09d      	b.n	8001a3a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001902:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	3212      	adds	r2, #18
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001914:	f1c3 0304 	rsb	r3, r3, #4
 8001918:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800191a:	e066      	b.n	80019ea <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	69da      	ldr	r2, [r3, #28]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001940:	2b00      	cmp	r3, #0
 8001942:	d103      	bne.n	800194c <HAL_ETH_ReadData+0x88>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001948:	2b00      	cmp	r3, #0
 800194a:	d03c      	beq.n	80019c6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800196e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019a0:	461a      	mov	r2, r3
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f003 fef7 	bl	8005798 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	441a      	add	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d902      	bls.n	80019d8 <HAL_ETH_ReadData+0x114>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b04      	subs	r3, #4
 80019d6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	3212      	adds	r2, #18
 80019de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db06      	blt.n	8001a00 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d202      	bcs.n	8001a00 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d08d      	beq.n	800191c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	441a      	add	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f815 	bl	8001a44 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e000      	b.n	8001a3a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a50:	2301      	movs	r3, #1
 8001a52:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a58:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	3212      	adds	r2, #18
 8001a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a64:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a6a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a6c:	e042      	b.n	8001af4 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d112      	bne.n	8001a9c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fe5c 	bl	8005738 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	74fb      	strb	r3, [r7, #19]
 8001a8a:	e007      	b.n	8001a9c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	461a      	mov	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d028      	beq.n	8001af4 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <ETH_UpdateDescriptor+0x104>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	6053      	str	r3, [r2, #4]
 8001ab6:	e005      	b.n	8001ac4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d902      	bls.n	8001ae2 <ETH_UpdateDescriptor+0x9e>
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	3212      	adds	r2, #18
 8001ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aec:	617b      	str	r3, [r7, #20]
      desccount--;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <ETH_UpdateDescriptor+0xbc>
 8001afa:	7cfb      	ldrb	r3, [r7, #19]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1b6      	bne.n	8001a6e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d01a      	beq.n	8001b40 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b14:	f3bf 8f5f 	dmb	sy
}
 8001b18:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	18ca      	adds	r2, r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b32:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	80004000 	.word	0x80004000

08001b4c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 031c 	and.w	r3, r3, #28
 8001b68:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	02db      	lsls	r3, r3, #11
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	019b      	lsls	r3, r3, #6
 8001b7a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f023 0302 	bic.w	r3, r3, #2
 8001b8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b9c:	f7ff fb96 	bl	80012cc <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ba2:	e00d      	b.n	8001bc0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ba4:	f7ff fb92 	bl	80012cc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb2:	d301      	bcc.n	8001bb8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e010      	b.n	8001bda <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ec      	bne.n	8001ba4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 031c 	and.w	r3, r3, #28
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	02db      	lsls	r3, r3, #11
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	019b      	lsls	r3, r3, #6
 8001c10:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3c:	f7ff fb46 	bl	80012cc <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c42:	e00d      	b.n	8001c60 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001c44:	f7ff fb42 	bl	80012cc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c52:	d301      	bcc.n	8001c58 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e009      	b.n	8001c6c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ec      	bne.n	8001c44 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0e6      	b.n	8001e56 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf0c      	ite	eq
 8001cf6:	2301      	moveq	r3, #1
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf14      	ite	ne
 8001d10:	2301      	movne	r3, #1
 8001d12:	2300      	moveq	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf0c      	ite	eq
 8001d46:	2301      	moveq	r3, #1
 8001d48:	2300      	movne	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00b      	b.n	8001e8e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d105      	bne.n	8001e8c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f870 	bl	8001f68 <ETH_SetMACConfig>

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 031c 	bic.w	r3, r3, #28
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001eb0:	f001 fc54 	bl	800375c <HAL_RCC_GetHCLKFreq>
 8001eb4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_ETH_SetMDIOClockRange+0x74>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d804      	bhi.n	8001ec8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e019      	b.n	8001efc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d204      	bcs.n	8001eda <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f043 030c 	orr.w	r3, r3, #12
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e010      	b.n	8001efc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d90c      	bls.n	8001efc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d804      	bhi.n	8001ef4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e003      	b.n	8001efc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	611a      	str	r2, [r3, #16]
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	02160ebf 	.word	0x02160ebf
 8001f10:	03938700 	.word	0x03938700
 8001f14:	05f5e0ff 	.word	0x05f5e0ff
 8001f18:	08f0d17f 	.word	0x08f0d17f

08001f1c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f3e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff f9c9 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f5c:	6193      	str	r3, [r2, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <ETH_SetMACConfig+0x164>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	7b9b      	ldrb	r3, [r3, #14]
 8001f86:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	7c12      	ldrb	r2, [r2, #16]
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d102      	bne.n	8001f96 <ETH_SetMACConfig+0x2e>
 8001f90:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f94:	e000      	b.n	8001f98 <ETH_SetMACConfig+0x30>
 8001f96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	7c52      	ldrb	r2, [r2, #17]
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d102      	bne.n	8001fa8 <ETH_SetMACConfig+0x40>
 8001fa2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x42>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001faa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7fdb      	ldrb	r3, [r3, #31]
 8001fb6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001fb8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001fbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	7f92      	ldrb	r2, [r2, #30]
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d102      	bne.n	8001fce <ETH_SetMACConfig+0x66>
 8001fc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fcc:	e000      	b.n	8001fd0 <ETH_SetMACConfig+0x68>
 8001fce:	2200      	movs	r2, #0
                        macconf->Speed |
 8001fd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001fd8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001fde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001fe6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	d102      	bne.n	8001ff8 <ETH_SetMACConfig+0x90>
 8001ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff6:	e000      	b.n	8001ffa <ETH_SetMACConfig+0x92>
 8001ff8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ffa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	7bdb      	ldrb	r3, [r3, #15]
 8002000:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002002:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002008:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002010:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002012:	4313      	orrs	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f95a 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002056:	2a00      	cmp	r2, #0
 8002058:	d101      	bne.n	800205e <ETH_SetMACConfig+0xf6>
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	e000      	b.n	8002060 <ETH_SetMACConfig+0xf8>
 800205e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002060:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002066:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800206e:	2a01      	cmp	r2, #1
 8002070:	d101      	bne.n	8002076 <ETH_SetMACConfig+0x10e>
 8002072:	2208      	movs	r2, #8
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0x110>
 8002076:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002078:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002080:	2a01      	cmp	r2, #1
 8002082:	d101      	bne.n	8002088 <ETH_SetMACConfig+0x120>
 8002084:	2204      	movs	r2, #4
 8002086:	e000      	b.n	800208a <ETH_SetMACConfig+0x122>
 8002088:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800208a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002092:	2a01      	cmp	r2, #1
 8002094:	d101      	bne.n	800209a <ETH_SetMACConfig+0x132>
 8002096:	2202      	movs	r2, #2
 8002098:	e000      	b.n	800209c <ETH_SetMACConfig+0x134>
 800209a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800209c:	4313      	orrs	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff f915 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	fd20810f 	.word	0xfd20810f

080020d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <ETH_SetDMAConfig+0x110>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	7b1b      	ldrb	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <ETH_SetDMAConfig+0x2c>
 80020f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020fa:	e000      	b.n	80020fe <ETH_SetDMAConfig+0x2e>
 80020fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	7b5b      	ldrb	r3, [r3, #13]
 8002102:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002104:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	7f52      	ldrb	r2, [r2, #29]
 800210a:	2a00      	cmp	r2, #0
 800210c:	d102      	bne.n	8002114 <ETH_SetDMAConfig+0x44>
 800210e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002112:	e000      	b.n	8002116 <ETH_SetDMAConfig+0x46>
 8002114:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	7b9b      	ldrb	r3, [r3, #14]
 800211c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800211e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002124:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	7f1b      	ldrb	r3, [r3, #28]
 800212a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800212c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	7f9b      	ldrb	r3, [r3, #30]
 8002132:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002134:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800213a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002142:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002144:	4313      	orrs	r3, r2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002154:	461a      	mov	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff f8bc 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	791b      	ldrb	r3, [r3, #4]
 800217e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002184:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800218a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002190:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002198:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800219a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80021a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80021a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff f88d 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	f8de3f23 	.word	0xf8de3f23

080021e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0a6      	sub	sp, #152	@ 0x98
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002226:	2300      	movs	r3, #0
 8002228:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002230:	2300      	movs	r3, #0
 8002232:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800224c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002252:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002256:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800225e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fe7f 	bl	8001f68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800226a:	2301      	movs	r3, #1
 800226c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800226e:	2301      	movs	r3, #1
 8002270:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002278:	2301      	movs	r3, #1
 800227a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002296:	2301      	movs	r3, #1
 8002298:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800229a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800229e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022a4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022aa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4619      	mov	r1, r3
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff05 	bl	80020d0 <ETH_SetDMAConfig>
}
 80022c6:	bf00      	nop
 80022c8:	3798      	adds	r7, #152	@ 0x98
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3305      	adds	r3, #5
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	3204      	adds	r2, #4
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <ETH_MACAddressConfig+0x68>)
 80022f2:	4413      	add	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3303      	adds	r3, #3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	061a      	lsls	r2, r3, #24
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3302      	adds	r3, #2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3301      	adds	r3, #1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4313      	orrs	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <ETH_MACAddressConfig+0x6c>)
 8002322:	4413      	add	r3, r2
 8002324:	461a      	mov	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	6013      	str	r3, [r2, #0]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40028040 	.word	0x40028040
 800233c:	40028044 	.word	0x40028044

08002340 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e03e      	b.n	80023cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68d9      	ldr	r1, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	3206      	adds	r2, #6
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d80c      	bhi.n	80023b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68d9      	ldr	r1, [r3, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	e004      	b.n	80023ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d9bd      	bls.n	800234e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	e048      	b.n	8002492 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6919      	ldr	r1, [r3, #16]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800243c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002456:	68b9      	ldr	r1, [r7, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	3212      	adds	r2, #18
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d80c      	bhi.n	8002482 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6919      	ldr	r1, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	e004      	b.n	800248c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	461a      	mov	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d9b3      	bls.n	8002400 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c2:	60da      	str	r2, [r3, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b091      	sub	sp, #68	@ 0x44
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3318      	adds	r3, #24
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800250e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002512:	d007      	beq.n	8002524 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002518:	3304      	adds	r3, #4
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002524:	2302      	movs	r3, #2
 8002526:	e111      	b.n	800274c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252a:	3301      	adds	r3, #1
 800252c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800252e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	4b86      	ldr	r3, [pc, #536]	@ (8002758 <ETH_Prepare_Tx_Descriptors+0x288>)
 800253e:	4013      	ands	r3, r2
 8002540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002542:	6852      	ldr	r2, [r2, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	431a      	orrs	r2, r3
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800259a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025aa:	e082      	b.n	80026b2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e005      	b.n	80025d8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025da:	3301      	adds	r3, #1
 80025dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d902      	bls.n	80025ea <ETH_Prepare_Tx_Descriptors+0x11a>
 80025e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025e6:	3b04      	subs	r3, #4
 80025e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002600:	d007      	beq.n	8002612 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002606:	3304      	adds	r3, #4
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d029      	beq.n	8002666 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002624:	e019      	b.n	800265a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002626:	f3bf 8f5f 	dmb	sy
}
 800262a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002636:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263a:	3301      	adds	r3, #1
 800263c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800263e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002640:	2b03      	cmp	r3, #3
 8002642:	d902      	bls.n	800264a <ETH_Prepare_Tx_Descriptors+0x17a>
 8002644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002646:	3b04      	subs	r3, #4
 8002648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800264e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002652:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002656:	3301      	adds	r3, #1
 8002658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800265a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265e:	429a      	cmp	r2, r3
 8002660:	d3e1      	bcc.n	8002626 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	e072      	b.n	800274c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002686:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <ETH_Prepare_Tx_Descriptors+0x288>)
 800268e:	4013      	ands	r3, r2
 8002690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002692:	6852      	ldr	r2, [r2, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800269a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269c:	3301      	adds	r3, #1
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80026a0:	f3bf 8f5f 	dmb	sy
}
 80026a4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f af78 	bne.w	80025ac <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e005      	b.n	80026dc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80026f2:	f3bf 8f5f 	dmb	sy
}
 80026f6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002708:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270c:	3304      	adds	r3, #4
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002718:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	613b      	str	r3, [r7, #16]
  return(result);
 8002720:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002736:	4413      	add	r3, r2
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f383 8810 	msr	PRIMASK, r3
}
 8002748:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3744      	adds	r7, #68	@ 0x44
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	ffffe000 	.word	0xffffe000

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e175      	b.n	8002a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8164 	bne.w	8002a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x56>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80be 	beq.w	8002a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a65      	ldr	r2, [pc, #404]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b63      	ldr	r3, [pc, #396]	@ (8002a80 <HAL_GPIO_Init+0x324>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028fe:	4a61      	ldr	r2, [pc, #388]	@ (8002a84 <HAL_GPIO_Init+0x328>)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <HAL_GPIO_Init+0x32c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d037      	beq.n	800299a <HAL_GPIO_Init+0x23e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <HAL_GPIO_Init+0x330>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d031      	beq.n	8002996 <HAL_GPIO_Init+0x23a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a56      	ldr	r2, [pc, #344]	@ (8002a90 <HAL_GPIO_Init+0x334>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x236>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a55      	ldr	r2, [pc, #340]	@ (8002a94 <HAL_GPIO_Init+0x338>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d025      	beq.n	800298e <HAL_GPIO_Init+0x232>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a54      	ldr	r2, [pc, #336]	@ (8002a98 <HAL_GPIO_Init+0x33c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01f      	beq.n	800298a <HAL_GPIO_Init+0x22e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a53      	ldr	r2, [pc, #332]	@ (8002a9c <HAL_GPIO_Init+0x340>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x22a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_GPIO_Init+0x344>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x226>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a51      	ldr	r2, [pc, #324]	@ (8002aa4 <HAL_GPIO_Init+0x348>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x222>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <HAL_GPIO_Init+0x34c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x21e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	@ (8002aac <HAL_GPIO_Init+0x350>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x21a>
 8002972:	2309      	movs	r3, #9
 8002974:	e012      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002976:	230a      	movs	r3, #10
 8002978:	e010      	b.n	800299c <HAL_GPIO_Init+0x240>
 800297a:	2308      	movs	r3, #8
 800297c:	e00e      	b.n	800299c <HAL_GPIO_Init+0x240>
 800297e:	2307      	movs	r3, #7
 8002980:	e00c      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002982:	2306      	movs	r3, #6
 8002984:	e00a      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002986:	2305      	movs	r3, #5
 8002988:	e008      	b.n	800299c <HAL_GPIO_Init+0x240>
 800298a:	2304      	movs	r3, #4
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x240>
 800298e:	2303      	movs	r3, #3
 8002990:	e004      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002992:	2302      	movs	r3, #2
 8002994:	e002      	b.n	800299c <HAL_GPIO_Init+0x240>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_GPIO_Init+0x240>
 800299a:	2300      	movs	r3, #0
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	4093      	lsls	r3, r2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029ac:	4935      	ldr	r1, [pc, #212]	@ (8002a84 <HAL_GPIO_Init+0x328>)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029de:	4a34      	ldr	r2, [pc, #208]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a08:	4a29      	ldr	r2, [pc, #164]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5c:	4a14      	ldr	r2, [pc, #80]	@ (8002ab0 <HAL_GPIO_Init+0x354>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	f67f ae86 	bls.w	800277c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021800 	.word	0x40021800
 8002aa4:	40021c00 	.word	0x40021c00
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40022400 	.word	0x40022400
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e108      	b.n	8002d0a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f8d4 	bl	8000cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 ff96 	bl	8004a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c1a      	ldrb	r2, [r3, #16]
 8002b40:	f88d 2000 	strb.w	r2, [sp]
 8002b44:	3304      	adds	r3, #4
 8002b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b48:	f001 ff32 	bl	80049b0 <USB_CoreInit>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0d5      	b.n	8002d0a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 ff8e 	bl	8004a86 <USB_SetCurrentMode>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0c6      	b.n	8002d0a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e04a      	b.n	8002c18 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3315      	adds	r3, #21
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	b298      	uxth	r0, r3
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	332e      	adds	r3, #46	@ 0x2e
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	331c      	adds	r3, #28
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3324      	adds	r3, #36	@ 0x24
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3301      	adds	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d3af      	bcc.n	8002b82 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
 8002c26:	e044      	b.n	8002cb2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	791b      	ldrb	r3, [r3, #4]
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d3b5      	bcc.n	8002c28 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7c1a      	ldrb	r2, [r3, #16]
 8002cc4:	f88d 2000 	strb.w	r2, [sp]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ccc:	f001 ff28 	bl	8004b20 <USB_DevInit>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e013      	b.n	8002d0a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7b1b      	ldrb	r3, [r3, #12]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f80b 	bl	8002d14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 f8e3 	bl	8004ece <USB_DevDisconnect>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	10000003 	.word	0x10000003

08002d5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000

08002d7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a22      	ldr	r2, [pc, #136]	@ (8002e14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002daa:	f7fe fa8f 	bl	80012cc <HAL_GetTick>
 8002dae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002db0:	e009      	b.n	8002dc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002db2:	f7fe fa8b 	bl	80012cc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dc0:	d901      	bls.n	8002dc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e022      	b.n	8002e0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dd4:	4b10      	ldr	r3, [pc, #64]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de0:	f7fe fa74 	bl	80012cc <HAL_GetTick>
 8002de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002de6:	e009      	b.n	8002dfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de8:	f7fe fa70 	bl	80012cc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002df6:	d901      	bls.n	8002dfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e007      	b.n	8002e0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e08:	d1ee      	bne.n	8002de8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e29b      	b.n	800336a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8087 	beq.w	8002f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e40:	4b96      	ldr	r3, [pc, #600]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d00c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4c:	4b93      	ldr	r3, [pc, #588]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d112      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62>
 8002e58:	4b90      	ldr	r3, [pc, #576]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e64:	d10b      	bne.n	8002e7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e66:	4b8d      	ldr	r3, [pc, #564]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d06c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x130>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d168      	bne.n	8002f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e275      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x7a>
 8002e88:	4b84      	ldr	r3, [pc, #528]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a83      	ldr	r2, [pc, #524]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e02e      	b.n	8002ef4 <HAL_RCC_OscConfig+0xd8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x9c>
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7b      	ldr	r2, [pc, #492]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e01d      	b.n	8002ef4 <HAL_RCC_OscConfig+0xd8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b73      	ldr	r3, [pc, #460]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a72      	ldr	r2, [pc, #456]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0xd8>
 8002edc:	4b6f      	ldr	r3, [pc, #444]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6b      	ldr	r2, [pc, #428]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe f9e6 	bl	80012cc <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe f9e2 	bl	80012cc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e229      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe f9d2 	bl	80012cc <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe f9ce 	bl	80012cc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e215      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x110>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d069      	beq.n	800302e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f5a:	4b50      	ldr	r3, [pc, #320]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00b      	beq.n	8002f7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f66:	4b4d      	ldr	r3, [pc, #308]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d11c      	bne.n	8002fac <HAL_RCC_OscConfig+0x190>
 8002f72:	4b4a      	ldr	r3, [pc, #296]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d116      	bne.n	8002fac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_RCC_OscConfig+0x17a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e1e9      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b41      	ldr	r3, [pc, #260]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	493d      	ldr	r1, [pc, #244]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	e040      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb4:	4b39      	ldr	r3, [pc, #228]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a38      	ldr	r2, [pc, #224]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f984 	bl	80012cc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc8:	f7fe f980 	bl	80012cc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1c7      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b30      	ldr	r3, [pc, #192]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4929      	ldr	r1, [pc, #164]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
 8002ffa:	e018      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffc:	4b27      	ldr	r3, [pc, #156]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a26      	ldr	r2, [pc, #152]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe f960 	bl	80012cc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe f95c 	bl	80012cc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1a3      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d038      	beq.n	80030ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d019      	beq.n	8003076 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8003044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe f93d 	bl	80012cc <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe f939 	bl	80012cc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e180      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x23a>
 8003074:	e01a      	b.n	80030ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 8003078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307a:	4a08      	ldr	r2, [pc, #32]	@ (800309c <HAL_RCC_OscConfig+0x280>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe f923 	bl	80012cc <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe f91f 	bl	80012cc <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d903      	bls.n	80030a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e166      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
 800309c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b92      	ldr	r3, [pc, #584]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a4 	beq.w	8003202 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b89      	ldr	r3, [pc, #548]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	4a88      	ldr	r2, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030d2:	4b86      	ldr	r3, [pc, #536]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e2:	4b83      	ldr	r3, [pc, #524]	@ (80032f0 <HAL_RCC_OscConfig+0x4d4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030ee:	4b80      	ldr	r3, [pc, #512]	@ (80032f0 <HAL_RCC_OscConfig+0x4d4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7f      	ldr	r2, [pc, #508]	@ (80032f0 <HAL_RCC_OscConfig+0x4d4>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe f8e7 	bl	80012cc <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fe f8e3 	bl	80012cc <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	@ 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e12a      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	4b76      	ldr	r3, [pc, #472]	@ (80032f0 <HAL_RCC_OscConfig+0x4d4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x31a>
 8003128:	4b70      	ldr	r3, [pc, #448]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a6f      	ldr	r2, [pc, #444]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
 8003134:	e02d      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x33c>
 800313e:	4b6b      	ldr	r3, [pc, #428]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	4a6a      	ldr	r2, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	@ 0x70
 800314a:	4b68      	ldr	r3, [pc, #416]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314e:	4a67      	ldr	r2, [pc, #412]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	@ 0x70
 8003156:	e01c      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d10c      	bne.n	800317a <HAL_RCC_OscConfig+0x35e>
 8003160:	4b62      	ldr	r3, [pc, #392]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003164:	4a61      	ldr	r2, [pc, #388]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6713      	str	r3, [r2, #112]	@ 0x70
 800316c:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003170:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6713      	str	r3, [r2, #112]	@ 0x70
 8003178:	e00b      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318a:	4a58      	ldr	r2, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d015      	beq.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe f897 	bl	80012cc <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe f893 	bl	80012cc <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0d8      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ee      	beq.n	80031a2 <HAL_RCC_OscConfig+0x386>
 80031c4:	e014      	b.n	80031f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c6:	f7fe f881 	bl	80012cc <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fe f87d 	bl	80012cc <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0c2      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ee      	bne.n	80031ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	4a3c      	ldr	r2, [pc, #240]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80ae 	beq.w	8003368 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320c:	4b37      	ldr	r3, [pc, #220]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d06d      	beq.n	80032f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d14b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b32      	ldr	r3, [pc, #200]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a31      	ldr	r2, [pc, #196]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003226:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe f84e 	bl	80012cc <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe f84a 	bl	80012cc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e091      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003246:	4b29      	ldr	r3, [pc, #164]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	3b01      	subs	r3, #1
 800326c:	041b      	lsls	r3, r3, #16
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	071b      	lsls	r3, r3, #28
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800328e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe f81c 	bl	80012cc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe f818 	bl	80012cc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e05f      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x47c>
 80032b6:	e057      	b.n	8003368 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0b      	ldr	r2, [pc, #44]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f802 	bl	80012cc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd fffe 	bl	80012cc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e045      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_RCC_OscConfig+0x4d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x4b0>
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x54c>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003374 <HAL_RCC_OscConfig+0x558>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d030      	beq.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d129      	bne.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d122      	bne.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800332c:	4293      	cmp	r3, r2
 800332e:	d119      	bne.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d10f      	bne.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d0      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b6a      	ldr	r3, [pc, #424]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b67      	ldr	r3, [pc, #412]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 020f 	bic.w	r2, r3, #15
 80033a6:	4965      	ldr	r1, [pc, #404]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a58      	ldr	r2, [pc, #352]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80033f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d040      	beq.n	800349c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d115      	bne.n	800345a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e073      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b39      	ldr	r3, [pc, #228]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4936      	ldr	r1, [pc, #216]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fd ff2e 	bl	80012cc <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fd ff2a 	bl	80012cc <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e053      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d210      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 020f 	bic.w	r2, r3, #15
 80034b2:	4922      	ldr	r1, [pc, #136]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	@ (8003544 <HAL_RCC_ClockConfig+0x1cc>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_RCC_ClockConfig+0x1d0>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	@ (800354c <HAL_RCC_ClockConfig+0x1d4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fe8a 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	08017de8 	.word	0x08017de8
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b094      	sub	sp, #80	@ 0x50
 8003556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	647b      	str	r3, [r7, #68]	@ 0x44
 800355c:	2300      	movs	r3, #0
 800355e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003560:	2300      	movs	r3, #0
 8003562:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003568:	4b79      	ldr	r3, [pc, #484]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d00d      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 8003574:	2b08      	cmp	r3, #8
 8003576:	f200 80e1 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x1ec>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x34>
 800357e:	2b04      	cmp	r3, #4
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x3a>
 8003582:	e0db      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b73      	ldr	r3, [pc, #460]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x204>)
 8003586:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003588:	e0db      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358a:	4b73      	ldr	r3, [pc, #460]	@ (8003758 <HAL_RCC_GetSysClockFreq+0x208>)
 800358c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358e:	e0d8      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003590:	4b6f      	ldr	r3, [pc, #444]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003598:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800359a:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d063      	beq.n	800366e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ba:	2300      	movs	r3, #0
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	0159      	lsls	r1, r3, #5
 80035d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d4:	0150      	lsls	r0, r2, #5
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4621      	mov	r1, r4
 80035dc:	1a51      	subs	r1, r2, r1
 80035de:	6139      	str	r1, [r7, #16]
 80035e0:	4629      	mov	r1, r5
 80035e2:	eb63 0301 	sbc.w	r3, r3, r1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f4:	4659      	mov	r1, fp
 80035f6:	018b      	lsls	r3, r1, #6
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fe:	4651      	mov	r1, sl
 8003600:	018a      	lsls	r2, r1, #6
 8003602:	4651      	mov	r1, sl
 8003604:	ebb2 0801 	subs.w	r8, r2, r1
 8003608:	4659      	mov	r1, fp
 800360a:	eb63 0901 	sbc.w	r9, r3, r1
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800361a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800361e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003622:	4690      	mov	r8, r2
 8003624:	4699      	mov	r9, r3
 8003626:	4623      	mov	r3, r4
 8003628:	eb18 0303 	adds.w	r3, r8, r3
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	462b      	mov	r3, r5
 8003630:	eb49 0303 	adc.w	r3, r9, r3
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003642:	4629      	mov	r1, r5
 8003644:	024b      	lsls	r3, r1, #9
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800364c:	4621      	mov	r1, r4
 800364e:	024a      	lsls	r2, r1, #9
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003656:	2200      	movs	r2, #0
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800365a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800365c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003660:	f7fc fe56 	bl	8000310 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800366c:	e058      	b.n	8003720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366e:	4b38      	ldr	r3, [pc, #224]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2200      	movs	r2, #0
 8003676:	4618      	mov	r0, r3
 8003678:	4611      	mov	r1, r2
 800367a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
 8003684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003688:	4642      	mov	r2, r8
 800368a:	464b      	mov	r3, r9
 800368c:	f04f 0000 	mov.w	r0, #0
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	0159      	lsls	r1, r3, #5
 8003696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369a:	0150      	lsls	r0, r2, #5
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4641      	mov	r1, r8
 80036a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036c0:	ebb2 040a 	subs.w	r4, r2, sl
 80036c4:	eb63 050b 	sbc.w	r5, r3, fp
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	00eb      	lsls	r3, r5, #3
 80036d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d6:	00e2      	lsls	r2, r4, #3
 80036d8:	4614      	mov	r4, r2
 80036da:	461d      	mov	r5, r3
 80036dc:	4643      	mov	r3, r8
 80036de:	18e3      	adds	r3, r4, r3
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	464b      	mov	r3, r9
 80036e4:	eb45 0303 	adc.w	r3, r5, r3
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f6:	4629      	mov	r1, r5
 80036f8:	028b      	lsls	r3, r1, #10
 80036fa:	4621      	mov	r1, r4
 80036fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003700:	4621      	mov	r1, r4
 8003702:	028a      	lsls	r2, r1, #10
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370a:	2200      	movs	r2, #0
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	61fa      	str	r2, [r7, #28]
 8003710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003714:	f7fc fdfc 	bl	8000310 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x200>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800373a:	e002      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x204>)
 800373e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003744:	4618      	mov	r0, r3
 8003746:	3750      	adds	r7, #80	@ 0x50
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	007a1200 	.word	0x007a1200

0800375c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	@ (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000008 	.word	0x20000008

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	@ (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08017df8 	.word	0x08017df8

0800379c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a0:	f7ff ffdc 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a4:	4602      	mov	r2, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4903      	ldr	r1, [pc, #12]	@ (80037c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b2:	5ccb      	ldrb	r3, [r1, r3]
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	08017df8 	.word	0x08017df8

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037ec:	4b69      	ldr	r3, [pc, #420]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a68      	ldr	r2, [pc, #416]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	4b66      	ldr	r3, [pc, #408]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003800:	4964      	ldr	r1, [pc, #400]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800380e:	2301      	movs	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d017      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800381e:	4b5d      	ldr	r3, [pc, #372]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003824:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	4959      	ldr	r1, [pc, #356]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383c:	d101      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800383e:	2301      	movs	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d017      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800385a:	4b4e      	ldr	r3, [pc, #312]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003860:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	494a      	ldr	r1, [pc, #296]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 808b 	beq.w	80039be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	4a39      	ldr	r2, [pc, #228]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b4:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038c0:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a34      	ldr	r2, [pc, #208]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fd fcfe 	bl	80012cc <HAL_GetTick>
 80038d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd fcfa 	bl	80012cc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e38f      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d035      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d02e      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003910:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003918:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800391a:	4b1e      	ldr	r3, [pc, #120]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	4a1d      	ldr	r2, [pc, #116]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003930:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003932:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003938:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d114      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd fcc2 	bl	80012cc <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394a:	e00a      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd fcbe 	bl	80012cc <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e351      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ee      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800397a:	d111      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003988:	4b04      	ldr	r3, [pc, #16]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800398a:	400b      	ands	r3, r1
 800398c:	4901      	ldr	r1, [pc, #4]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
 8003992:	e00b      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
 800399c:	0ffffcff 	.word	0x0ffffcff
 80039a0:	4bac      	ldr	r3, [pc, #688]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4aab      	ldr	r2, [pc, #684]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039aa:	6093      	str	r3, [r2, #8]
 80039ac:	4ba9      	ldr	r3, [pc, #676]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	49a6      	ldr	r1, [pc, #664]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ca:	4ba2      	ldr	r3, [pc, #648]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039d0:	4aa0      	ldr	r2, [pc, #640]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80039da:	4b9e      	ldr	r3, [pc, #632]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	499b      	ldr	r1, [pc, #620]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f8:	4b96      	ldr	r3, [pc, #600]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a06:	4993      	ldr	r1, [pc, #588]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a1a:	4b8e      	ldr	r3, [pc, #568]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a28:	498a      	ldr	r1, [pc, #552]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a3c:	4b85      	ldr	r3, [pc, #532]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4a:	4982      	ldr	r1, [pc, #520]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6c:	4979      	ldr	r1, [pc, #484]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a80:	4b74      	ldr	r3, [pc, #464]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	4971      	ldr	r1, [pc, #452]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa8:	f023 020c 	bic.w	r2, r3, #12
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab0:	4968      	ldr	r1, [pc, #416]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac4:	4b63      	ldr	r3, [pc, #396]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	4960      	ldr	r1, [pc, #384]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	4957      	ldr	r1, [pc, #348]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b08:	4b52      	ldr	r3, [pc, #328]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b16:	494f      	ldr	r1, [pc, #316]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4946      	ldr	r1, [pc, #280]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b4c:	4b41      	ldr	r3, [pc, #260]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	493e      	ldr	r1, [pc, #248]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b6e:	4b39      	ldr	r3, [pc, #228]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	4935      	ldr	r1, [pc, #212]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b90:	4b30      	ldr	r3, [pc, #192]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9e:	492d      	ldr	r1, [pc, #180]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d011      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bb2:	4b28      	ldr	r3, [pc, #160]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bc0:	4924      	ldr	r1, [pc, #144]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf2:	4b18      	ldr	r3, [pc, #96]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c00:	4914      	ldr	r1, [pc, #80]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c24:	490b      	ldr	r1, [pc, #44]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00f      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c48:	4902      	ldr	r1, [pc, #8]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c64:	4b8a      	ldr	r3, [pc, #552]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c74:	4986      	ldr	r1, [pc, #536]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c88:	4b81      	ldr	r3, [pc, #516]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c8e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c98:	497d      	ldr	r1, [pc, #500]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d006      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80d6 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cb4:	4b76      	ldr	r3, [pc, #472]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a75      	ldr	r2, [pc, #468]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fd fb04 	bl	80012cc <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cc8:	f7fd fb00 	bl	80012cc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	@ 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e195      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cda:	4b6d      	ldr	r3, [pc, #436]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d021      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cfa:	4b65      	ldr	r3, [pc, #404]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d08:	4b61      	ldr	r3, [pc, #388]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0e:	0e1b      	lsrs	r3, r3, #24
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	019a      	lsls	r2, r3, #6
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	071b      	lsls	r3, r3, #28
 8003d2e:	4958      	ldr	r1, [pc, #352]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02e      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d60:	d129      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d62:	4b4b      	ldr	r3, [pc, #300]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d70:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d76:	0f1b      	lsrs	r3, r3, #28
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	019a      	lsls	r2, r3, #6
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	493e      	ldr	r1, [pc, #248]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da4:	f023 021f 	bic.w	r2, r3, #31
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	3b01      	subs	r3, #1
 8003dae:	4938      	ldr	r1, [pc, #224]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01d      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dc2:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd6:	0f1b      	lsrs	r3, r3, #28
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	019a      	lsls	r2, r3, #6
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	071b      	lsls	r3, r3, #28
 8003df6:	4926      	ldr	r1, [pc, #152]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d011      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	071b      	lsls	r3, r3, #28
 8003e26:	491a      	ldr	r1, [pc, #104]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3a:	f7fd fa47 	bl	80012cc <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e42:	f7fd fa43 	bl	80012cc <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	@ 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0d8      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80ce 	bne.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fd fa2a 	bl	80012cc <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e7c:	f7fd fa26 	bl	80012cc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d904      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0bb      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e94:	4b5e      	ldr	r3, [pc, #376]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ea0:	d0ec      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eca:	4b51      	ldr	r3, [pc, #324]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	4944      	ldr	r1, [pc, #272]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f06:	4b42      	ldr	r3, [pc, #264]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	3b01      	subs	r3, #1
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	493d      	ldr	r1, [pc, #244]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f34:	d11d      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f36:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	0e1b      	lsrs	r3, r3, #24
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f44:	4b32      	ldr	r3, [pc, #200]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	0f1b      	lsrs	r3, r3, #28
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	019a      	lsls	r2, r3, #6
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	071b      	lsls	r3, r3, #28
 8003f6a:	4929      	ldr	r1, [pc, #164]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f8c:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	061b      	lsls	r3, r3, #24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	071b      	lsls	r3, r3, #28
 8003fb2:	4917      	ldr	r1, [pc, #92]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003fba:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4911      	ldr	r1, [pc, #68]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd f976 	bl	80012cc <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fe4:	f7fd f972 	bl	80012cc <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	@ 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e007      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004002:	d1ef      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e040      	b.n	80040a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fc fde2 	bl	8000c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	@ 0x24
 8004040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa8c 	bl	8004578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f825 	bl	80040b0 <UART_SetConfig>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01b      	b.n	80040a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800407e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800408e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb0b 	bl	80046bc <UART_CheckIdleState>
 80040a6:	4603      	mov	r3, r0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4ba6      	ldr	r3, [pc, #664]	@ (8004374 <UART_SetConfig+0x2c4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6979      	ldr	r1, [r7, #20]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a94      	ldr	r2, [pc, #592]	@ (8004378 <UART_SetConfig+0x2c8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d120      	bne.n	800416e <UART_SetConfig+0xbe>
 800412c:	4b93      	ldr	r3, [pc, #588]	@ (800437c <UART_SetConfig+0x2cc>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b03      	cmp	r3, #3
 8004138:	d816      	bhi.n	8004168 <UART_SetConfig+0xb8>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <UART_SetConfig+0x90>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004157 	.word	0x08004157
 800414c:	08004163 	.word	0x08004163
 8004150:	2301      	movs	r3, #1
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e150      	b.n	80043f8 <UART_SetConfig+0x348>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e14d      	b.n	80043f8 <UART_SetConfig+0x348>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e14a      	b.n	80043f8 <UART_SetConfig+0x348>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e147      	b.n	80043f8 <UART_SetConfig+0x348>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e144      	b.n	80043f8 <UART_SetConfig+0x348>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a83      	ldr	r2, [pc, #524]	@ (8004380 <UART_SetConfig+0x2d0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d132      	bne.n	80041de <UART_SetConfig+0x12e>
 8004178:	4b80      	ldr	r3, [pc, #512]	@ (800437c <UART_SetConfig+0x2cc>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d828      	bhi.n	80041d8 <UART_SetConfig+0x128>
 8004186:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <UART_SetConfig+0xdc>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d9 	.word	0x080041d9
 8004194:	080041d9 	.word	0x080041d9
 8004198:	080041d9 	.word	0x080041d9
 800419c:	080041cd 	.word	0x080041cd
 80041a0:	080041d9 	.word	0x080041d9
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041d9 	.word	0x080041d9
 80041ac:	080041c7 	.word	0x080041c7
 80041b0:	080041d9 	.word	0x080041d9
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041d3 	.word	0x080041d3
 80041c0:	2300      	movs	r3, #0
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e118      	b.n	80043f8 <UART_SetConfig+0x348>
 80041c6:	2302      	movs	r3, #2
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e115      	b.n	80043f8 <UART_SetConfig+0x348>
 80041cc:	2304      	movs	r3, #4
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e112      	b.n	80043f8 <UART_SetConfig+0x348>
 80041d2:	2308      	movs	r3, #8
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e10f      	b.n	80043f8 <UART_SetConfig+0x348>
 80041d8:	2310      	movs	r3, #16
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e10c      	b.n	80043f8 <UART_SetConfig+0x348>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a68      	ldr	r2, [pc, #416]	@ (8004384 <UART_SetConfig+0x2d4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d120      	bne.n	800422a <UART_SetConfig+0x17a>
 80041e8:	4b64      	ldr	r3, [pc, #400]	@ (800437c <UART_SetConfig+0x2cc>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041f2:	2b30      	cmp	r3, #48	@ 0x30
 80041f4:	d013      	beq.n	800421e <UART_SetConfig+0x16e>
 80041f6:	2b30      	cmp	r3, #48	@ 0x30
 80041f8:	d814      	bhi.n	8004224 <UART_SetConfig+0x174>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d009      	beq.n	8004212 <UART_SetConfig+0x162>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d810      	bhi.n	8004224 <UART_SetConfig+0x174>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <UART_SetConfig+0x15c>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d006      	beq.n	8004218 <UART_SetConfig+0x168>
 800420a:	e00b      	b.n	8004224 <UART_SetConfig+0x174>
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e0f2      	b.n	80043f8 <UART_SetConfig+0x348>
 8004212:	2302      	movs	r3, #2
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e0ef      	b.n	80043f8 <UART_SetConfig+0x348>
 8004218:	2304      	movs	r3, #4
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e0ec      	b.n	80043f8 <UART_SetConfig+0x348>
 800421e:	2308      	movs	r3, #8
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e0e9      	b.n	80043f8 <UART_SetConfig+0x348>
 8004224:	2310      	movs	r3, #16
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e0e6      	b.n	80043f8 <UART_SetConfig+0x348>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a56      	ldr	r2, [pc, #344]	@ (8004388 <UART_SetConfig+0x2d8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d120      	bne.n	8004276 <UART_SetConfig+0x1c6>
 8004234:	4b51      	ldr	r3, [pc, #324]	@ (800437c <UART_SetConfig+0x2cc>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800423e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004240:	d013      	beq.n	800426a <UART_SetConfig+0x1ba>
 8004242:	2bc0      	cmp	r3, #192	@ 0xc0
 8004244:	d814      	bhi.n	8004270 <UART_SetConfig+0x1c0>
 8004246:	2b80      	cmp	r3, #128	@ 0x80
 8004248:	d009      	beq.n	800425e <UART_SetConfig+0x1ae>
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d810      	bhi.n	8004270 <UART_SetConfig+0x1c0>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <UART_SetConfig+0x1a8>
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d006      	beq.n	8004264 <UART_SetConfig+0x1b4>
 8004256:	e00b      	b.n	8004270 <UART_SetConfig+0x1c0>
 8004258:	2300      	movs	r3, #0
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0cc      	b.n	80043f8 <UART_SetConfig+0x348>
 800425e:	2302      	movs	r3, #2
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0c9      	b.n	80043f8 <UART_SetConfig+0x348>
 8004264:	2304      	movs	r3, #4
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e0c6      	b.n	80043f8 <UART_SetConfig+0x348>
 800426a:	2308      	movs	r3, #8
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e0c3      	b.n	80043f8 <UART_SetConfig+0x348>
 8004270:	2310      	movs	r3, #16
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0c0      	b.n	80043f8 <UART_SetConfig+0x348>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a44      	ldr	r2, [pc, #272]	@ (800438c <UART_SetConfig+0x2dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d125      	bne.n	80042cc <UART_SetConfig+0x21c>
 8004280:	4b3e      	ldr	r3, [pc, #248]	@ (800437c <UART_SetConfig+0x2cc>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800428e:	d017      	beq.n	80042c0 <UART_SetConfig+0x210>
 8004290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004294:	d817      	bhi.n	80042c6 <UART_SetConfig+0x216>
 8004296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800429a:	d00b      	beq.n	80042b4 <UART_SetConfig+0x204>
 800429c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a0:	d811      	bhi.n	80042c6 <UART_SetConfig+0x216>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <UART_SetConfig+0x1fe>
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042aa:	d006      	beq.n	80042ba <UART_SetConfig+0x20a>
 80042ac:	e00b      	b.n	80042c6 <UART_SetConfig+0x216>
 80042ae:	2300      	movs	r3, #0
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e0a1      	b.n	80043f8 <UART_SetConfig+0x348>
 80042b4:	2302      	movs	r3, #2
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e09e      	b.n	80043f8 <UART_SetConfig+0x348>
 80042ba:	2304      	movs	r3, #4
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e09b      	b.n	80043f8 <UART_SetConfig+0x348>
 80042c0:	2308      	movs	r3, #8
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e098      	b.n	80043f8 <UART_SetConfig+0x348>
 80042c6:	2310      	movs	r3, #16
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e095      	b.n	80043f8 <UART_SetConfig+0x348>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004390 <UART_SetConfig+0x2e0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d125      	bne.n	8004322 <UART_SetConfig+0x272>
 80042d6:	4b29      	ldr	r3, [pc, #164]	@ (800437c <UART_SetConfig+0x2cc>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e4:	d017      	beq.n	8004316 <UART_SetConfig+0x266>
 80042e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ea:	d817      	bhi.n	800431c <UART_SetConfig+0x26c>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f0:	d00b      	beq.n	800430a <UART_SetConfig+0x25a>
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f6:	d811      	bhi.n	800431c <UART_SetConfig+0x26c>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <UART_SetConfig+0x254>
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x260>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x26c>
 8004304:	2301      	movs	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e076      	b.n	80043f8 <UART_SetConfig+0x348>
 800430a:	2302      	movs	r3, #2
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e073      	b.n	80043f8 <UART_SetConfig+0x348>
 8004310:	2304      	movs	r3, #4
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e070      	b.n	80043f8 <UART_SetConfig+0x348>
 8004316:	2308      	movs	r3, #8
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e06d      	b.n	80043f8 <UART_SetConfig+0x348>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e06a      	b.n	80043f8 <UART_SetConfig+0x348>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	@ (8004394 <UART_SetConfig+0x2e4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d138      	bne.n	800439e <UART_SetConfig+0x2ee>
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <UART_SetConfig+0x2cc>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004332:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800433a:	d017      	beq.n	800436c <UART_SetConfig+0x2bc>
 800433c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004340:	d82a      	bhi.n	8004398 <UART_SetConfig+0x2e8>
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004346:	d00b      	beq.n	8004360 <UART_SetConfig+0x2b0>
 8004348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434c:	d824      	bhi.n	8004398 <UART_SetConfig+0x2e8>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <UART_SetConfig+0x2aa>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004356:	d006      	beq.n	8004366 <UART_SetConfig+0x2b6>
 8004358:	e01e      	b.n	8004398 <UART_SetConfig+0x2e8>
 800435a:	2300      	movs	r3, #0
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e04b      	b.n	80043f8 <UART_SetConfig+0x348>
 8004360:	2302      	movs	r3, #2
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e048      	b.n	80043f8 <UART_SetConfig+0x348>
 8004366:	2304      	movs	r3, #4
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e045      	b.n	80043f8 <UART_SetConfig+0x348>
 800436c:	2308      	movs	r3, #8
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e042      	b.n	80043f8 <UART_SetConfig+0x348>
 8004372:	bf00      	nop
 8004374:	efff69f3 	.word	0xefff69f3
 8004378:	40011000 	.word	0x40011000
 800437c:	40023800 	.word	0x40023800
 8004380:	40004400 	.word	0x40004400
 8004384:	40004800 	.word	0x40004800
 8004388:	40004c00 	.word	0x40004c00
 800438c:	40005000 	.word	0x40005000
 8004390:	40011400 	.word	0x40011400
 8004394:	40007800 	.word	0x40007800
 8004398:	2310      	movs	r3, #16
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e02c      	b.n	80043f8 <UART_SetConfig+0x348>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a72      	ldr	r2, [pc, #456]	@ (800456c <UART_SetConfig+0x4bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0x344>
 80043a8:	4b71      	ldr	r3, [pc, #452]	@ (8004570 <UART_SetConfig+0x4c0>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043b6:	d017      	beq.n	80043e8 <UART_SetConfig+0x338>
 80043b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043bc:	d817      	bhi.n	80043ee <UART_SetConfig+0x33e>
 80043be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c2:	d00b      	beq.n	80043dc <UART_SetConfig+0x32c>
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d811      	bhi.n	80043ee <UART_SetConfig+0x33e>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <UART_SetConfig+0x326>
 80043ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d2:	d006      	beq.n	80043e2 <UART_SetConfig+0x332>
 80043d4:	e00b      	b.n	80043ee <UART_SetConfig+0x33e>
 80043d6:	2300      	movs	r3, #0
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e00d      	b.n	80043f8 <UART_SetConfig+0x348>
 80043dc:	2302      	movs	r3, #2
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e00a      	b.n	80043f8 <UART_SetConfig+0x348>
 80043e2:	2304      	movs	r3, #4
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e007      	b.n	80043f8 <UART_SetConfig+0x348>
 80043e8:	2308      	movs	r3, #8
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e004      	b.n	80043f8 <UART_SetConfig+0x348>
 80043ee:	2310      	movs	r3, #16
 80043f0:	77fb      	strb	r3, [r7, #31]
 80043f2:	e001      	b.n	80043f8 <UART_SetConfig+0x348>
 80043f4:	2310      	movs	r3, #16
 80043f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004400:	d15b      	bne.n	80044ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d828      	bhi.n	800445a <UART_SetConfig+0x3aa>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0x360>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	0800445b 	.word	0x0800445b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800445b 	.word	0x0800445b
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7ff f99e 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8004438:	61b8      	str	r0, [r7, #24]
        break;
 800443a:	e013      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7ff f9ae 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8004440:	61b8      	str	r0, [r7, #24]
        break;
 8004442:	e00f      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b4b      	ldr	r3, [pc, #300]	@ (8004574 <UART_SetConfig+0x4c4>)
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e00c      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7ff f881 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800444e:	61b8      	str	r0, [r7, #24]
        break;
 8004450:	e008      	b.n	8004464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004456:	61bb      	str	r3, [r7, #24]
        break;
 8004458:	e004      	b.n	8004464 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	77bb      	strb	r3, [r7, #30]
        break;
 8004462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d074      	beq.n	8004554 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	005a      	lsls	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	441a      	add	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d916      	bls.n	80044b4 <UART_SetConfig+0x404>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d212      	bcs.n	80044b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f023 030f 	bic.w	r3, r3, #15
 8004496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	89fb      	ldrh	r3, [r7, #14]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	89fa      	ldrh	r2, [r7, #14]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	e04f      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
 80044b8:	e04c      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d828      	bhi.n	8004512 <UART_SetConfig+0x462>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0x418>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004513 	.word	0x08004513
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004513 	.word	0x08004513
 80044e4:	08004513 	.word	0x08004513
 80044e8:	0800450b 	.word	0x0800450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ec:	f7ff f942 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80044f0:	61b8      	str	r0, [r7, #24]
        break;
 80044f2:	e013      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7ff f952 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 80044f8:	61b8      	str	r0, [r7, #24]
        break;
 80044fa:	e00f      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <UART_SetConfig+0x4c4>)
 80044fe:	61bb      	str	r3, [r7, #24]
        break;
 8004500:	e00c      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004502:	f7ff f825 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 8004506:	61b8      	str	r0, [r7, #24]
        break;
 8004508:	e008      	b.n	800451c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e004      	b.n	800451c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77bb      	strb	r3, [r7, #30]
        break;
 800451a:	bf00      	nop
    }

    if (pclk != 0U)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	085a      	lsrs	r2, r3, #1
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	441a      	add	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b0f      	cmp	r3, #15
 800453a:	d909      	bls.n	8004550 <UART_SetConfig+0x4a0>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d205      	bcs.n	8004550 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	e001      	b.n	8004554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004560:	7fbb      	ldrb	r3, [r7, #30]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40007c00 	.word	0x40007c00
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400

08004578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01a      	beq.n	800468e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004676:	d10a      	bne.n	800468e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b098      	sub	sp, #96	@ 0x60
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046cc:	f7fc fdfe 	bl	80012cc <HAL_GetTick>
 80046d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d12e      	bne.n	800473e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	2200      	movs	r2, #0
 80046ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f88c 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d021      	beq.n	800473e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004718:	647b      	str	r3, [r7, #68]	@ 0x44
 800471a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800471e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e062      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d149      	bne.n	80047e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f856 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d03c      	beq.n	80047e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	623b      	str	r3, [r7, #32]
   return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800477a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	617b      	str	r3, [r7, #20]
   return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e011      	b.n	8004804 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3758      	adds	r7, #88	@ 0x58
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	e04f      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004824:	d04b      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fc fd51 	bl	80012cc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e04e      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d037      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b80      	cmp	r3, #128	@ 0x80
 8004852:	d034      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b40      	cmp	r3, #64	@ 0x40
 8004858:	d031      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d110      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2208      	movs	r2, #8
 800486e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f838 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2208      	movs	r2, #8
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e029      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004898:	d111      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f81e 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0a0      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	@ 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40
 800490e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3308      	adds	r3, #8
 800493e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004958:	2b01      	cmp	r3, #1
 800495a:	d118      	bne.n	800498e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60bb      	str	r3, [r7, #8]
   return(result);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	647b      	str	r3, [r7, #68]	@ 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	613b      	str	r3, [r7, #16]
   return(result);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049a2:	bf00      	nop
 80049a4:	3754      	adds	r7, #84	@ 0x54
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b0:	b084      	sub	sp, #16
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	f107 001c 	add.w	r0, r7, #28
 80049be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d121      	bne.n	8004a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	4b21      	ldr	r3, [pc, #132]	@ (8004a60 <USB_CoreInit+0xb0>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d105      	bne.n	8004a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa92 	bl	8004f2c <USB_CoreReset>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e010      	b.n	8004a30 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa86 	bl	8004f2c <USB_CoreReset>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a30:	7fbb      	ldrb	r3, [r7, #30]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10b      	bne.n	8004a4e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f043 0206 	orr.w	r2, r3, #6
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	ffbdffbf 	.word	0xffbdffbf

08004a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 0201 	bic.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d115      	bne.n	8004ad4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ab4:	200a      	movs	r0, #10
 8004ab6:	f7fc fc15 	bl	80012e4 <HAL_Delay>
      ms += 10U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	330a      	adds	r3, #10
 8004abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa25 	bl	8004f10 <USB_GetMode>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d01e      	beq.n	8004b0a <USB_SetCurrentMode+0x84>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ad0:	d9f0      	bls.n	8004ab4 <USB_SetCurrentMode+0x2e>
 8004ad2:	e01a      	b.n	8004b0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d115      	bne.n	8004b06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	f7fc fbfc 	bl	80012e4 <HAL_Delay>
      ms += 10U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	330a      	adds	r3, #10
 8004af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa0c 	bl	8004f10 <USB_GetMode>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <USB_SetCurrentMode+0x84>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b02:	d9f0      	bls.n	8004ae6 <USB_SetCurrentMode+0x60>
 8004b04:	e001      	b.n	8004b0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e005      	b.n	8004b16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004b0e:	d101      	bne.n	8004b14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b20:	b084      	sub	sp, #16
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	e009      	b.n	8004b54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	3340      	adds	r3, #64	@ 0x40
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3301      	adds	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0e      	cmp	r3, #14
 8004b58:	d9f2      	bls.n	8004b40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11c      	bne.n	8004b9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e005      	b.n	8004ba8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10d      	bne.n	8004bd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f968 	bl	8004e9c <USB_SetDevSpeed>
 8004bcc:	e008      	b.n	8004be0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bce:	2101      	movs	r1, #1
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f963 	bl	8004e9c <USB_SetDevSpeed>
 8004bd6:	e003      	b.n	8004be0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bd8:	2103      	movs	r1, #3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f95e 	bl	8004e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004be0:	2110      	movs	r1, #16
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8fa 	bl	8004ddc <USB_FlushTxFifo>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f924 	bl	8004e40 <USB_FlushRxFifo>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c08:	461a      	mov	r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c14:	461a      	mov	r2, r3
 8004c16:	2300      	movs	r3, #0
 8004c18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c20:	461a      	mov	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e043      	b.n	8004cb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c42:	d118      	bne.n	8004c76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c56:	461a      	mov	r2, r3
 8004c58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e013      	b.n	8004c88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e008      	b.n	8004c88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c82:	461a      	mov	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	461a      	mov	r2, r3
 8004c96:	2300      	movs	r3, #0
 8004c98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cb8:	461a      	mov	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d3b5      	bcc.n	8004c2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e043      	b.n	8004d4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cdc:	d118      	bne.n	8004d10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e013      	b.n	8004d22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e008      	b.n	8004d22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d40:	461a      	mov	r2, r3
 8004d42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d52:	461a      	mov	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d3b5      	bcc.n	8004cc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f043 0210 	orr.w	r2, r3, #16
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <USB_DevInit+0x2b4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f043 0208 	orr.w	r2, r3, #8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004db0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <USB_DevInit+0x2b8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dd0:	b004      	add	sp, #16
 8004dd2:	4770      	bx	lr
 8004dd4:	803c3800 	.word	0x803c3800
 8004dd8:	40000004 	.word	0x40000004

08004ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004df6:	d901      	bls.n	8004dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e01b      	b.n	8004e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	daf2      	bge.n	8004dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	019b      	lsls	r3, r3, #6
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e20:	d901      	bls.n	8004e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e006      	b.n	8004e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d0f0      	beq.n	8004e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e58:	d901      	bls.n	8004e5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e018      	b.n	8004e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	daf2      	bge.n	8004e4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e7c:	d901      	bls.n	8004e82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e006      	b.n	8004e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0310 	and.w	r3, r3, #16
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d0f0      	beq.n	8004e70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f44:	d901      	bls.n	8004f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e01b      	b.n	8004f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	daf2      	bge.n	8004f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f6e:	d901      	bls.n	8004f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e006      	b.n	8004f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d0f0      	beq.n	8004f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004f96:	f002 f872 	bl	800707e <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004f9a:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <MX_LWIP_Init+0x54>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004fa0:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <MX_LWIP_Init+0x58>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <MX_LWIP_Init+0x5c>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004fac:	4b10      	ldr	r3, [pc, #64]	@ (8004ff0 <MX_LWIP_Init+0x60>)
 8004fae:	9302      	str	r3, [sp, #8]
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <MX_LWIP_Init+0x64>)
 8004fb2:	9301      	str	r3, [sp, #4]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <MX_LWIP_Init+0x5c>)
 8004fba:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe8 <MX_LWIP_Init+0x58>)
 8004fbc:	4909      	ldr	r1, [pc, #36]	@ (8004fe4 <MX_LWIP_Init+0x54>)
 8004fbe:	480e      	ldr	r0, [pc, #56]	@ (8004ff8 <MX_LWIP_Init+0x68>)
 8004fc0:	f002 fd44 	bl	8007a4c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004fc4:	480c      	ldr	r0, [pc, #48]	@ (8004ff8 <MX_LWIP_Init+0x68>)
 8004fc6:	f002 fefb 	bl	8007dc0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004fca:	480b      	ldr	r0, [pc, #44]	@ (8004ff8 <MX_LWIP_Init+0x68>)
 8004fcc:	f002 ff08 	bl	8007de0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004fd0:	490a      	ldr	r1, [pc, #40]	@ (8004ffc <MX_LWIP_Init+0x6c>)
 8004fd2:	4809      	ldr	r0, [pc, #36]	@ (8004ff8 <MX_LWIP_Init+0x68>)
 8004fd4:	f003 f80a 	bl	8007fec <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004fd8:	4807      	ldr	r0, [pc, #28]	@ (8004ff8 <MX_LWIP_Init+0x68>)
 8004fda:	f00a ffff 	bl	800ffdc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004fde:	bf00      	nop
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200007a8 	.word	0x200007a8
 8004fe8:	200007ac 	.word	0x200007ac
 8004fec:	200007b0 	.word	0x200007b0
 8004ff0:	08013a21 	.word	0x08013a21
 8004ff4:	08005375 	.word	0x08005375
 8004ff8:	20000770 	.word	0x20000770
 8004ffc:	08005051 	.word	0x08005051

08005000 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005008:	f7fc f960 	bl	80012cc <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <Ethernet_Link_Periodic_Handle+0x30>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b63      	cmp	r3, #99	@ 0x63
 8005016:	d907      	bls.n	8005028 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005018:	f7fc f958 	bl	80012cc <HAL_GetTick>
 800501c:	4603      	mov	r3, r0
 800501e:	4a04      	ldr	r2, [pc, #16]	@ (8005030 <Ethernet_Link_Periodic_Handle+0x30>)
 8005020:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fafc 	bl	8005620 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	2000076c 	.word	0x2000076c

08005034 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005038:	4804      	ldr	r0, [pc, #16]	@ (800504c <MX_LWIP_Process+0x18>)
 800503a:	f000 f97b 	bl	8005334 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800503e:	f009 ff51 	bl	800eee4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005042:	4802      	ldr	r0, [pc, #8]	@ (800504c <MX_LWIP_Process+0x18>)
 8005044:	f7ff ffdc 	bl	8005000 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000770 	.word	0x20000770

08005050 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <SCB_InvalidateDCache_by_Addr>:
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005076:	2320      	movs	r3, #32
 8005078:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800507a:	f3bf 8f4f 	dsb	sy
}
 800507e:	bf00      	nop
    while (op_size > 0) {
 8005080:	e00b      	b.n	800509a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005082:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dcf0      	bgt.n	8005082 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80050a0:	f3bf 8f4f 	dsb	sy
}
 80050a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050a6:	f3bf 8f6f 	isb	sy
}
 80050aa:	bf00      	nop
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80050c8:	4b44      	ldr	r3, [pc, #272]	@ (80051dc <low_level_init+0x120>)
 80050ca:	4a45      	ldr	r2, [pc, #276]	@ (80051e0 <low_level_init+0x124>)
 80050cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80050ce:	2300      	movs	r3, #0
 80050d0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80050d2:	2380      	movs	r3, #128	@ 0x80
 80050d4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80050d6:	23e1      	movs	r3, #225	@ 0xe1
 80050d8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80050da:	2300      	movs	r3, #0
 80050dc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80050de:	2300      	movs	r3, #0
 80050e0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <low_level_init+0x120>)
 80050e8:	f107 0308 	add.w	r3, r7, #8
 80050ec:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80050ee:	4b3b      	ldr	r3, [pc, #236]	@ (80051dc <low_level_init+0x120>)
 80050f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050f4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80050f6:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <low_level_init+0x120>)
 80050f8:	4a3a      	ldr	r2, [pc, #232]	@ (80051e4 <low_level_init+0x128>)
 80050fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80050fc:	4b37      	ldr	r3, [pc, #220]	@ (80051dc <low_level_init+0x120>)
 80050fe:	4a3a      	ldr	r2, [pc, #232]	@ (80051e8 <low_level_init+0x12c>)
 8005100:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005102:	4b36      	ldr	r3, [pc, #216]	@ (80051dc <low_level_init+0x120>)
 8005104:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005108:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800510a:	4834      	ldr	r0, [pc, #208]	@ (80051dc <low_level_init+0x120>)
 800510c:	f7fc f9f4 	bl	80014f8 <HAL_ETH_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005114:	2238      	movs	r2, #56	@ 0x38
 8005116:	2100      	movs	r1, #0
 8005118:	4834      	ldr	r0, [pc, #208]	@ (80051ec <low_level_init+0x130>)
 800511a:	f00e febc 	bl	8013e96 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800511e:	4b33      	ldr	r3, [pc, #204]	@ (80051ec <low_level_init+0x130>)
 8005120:	2221      	movs	r2, #33	@ 0x21
 8005122:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005124:	4b31      	ldr	r3, [pc, #196]	@ (80051ec <low_level_init+0x130>)
 8005126:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800512a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800512c:	4b2f      	ldr	r3, [pc, #188]	@ (80051ec <low_level_init+0x130>)
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005132:	482f      	ldr	r0, [pc, #188]	@ (80051f0 <low_level_init+0x134>)
 8005134:	f002 fb52 	bl	80077dc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2206      	movs	r2, #6
 800513c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005140:	4b26      	ldr	r3, [pc, #152]	@ (80051dc <low_level_init+0x120>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800514c:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <low_level_init+0x120>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	785a      	ldrb	r2, [r3, #1]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005158:	4b20      	ldr	r3, [pc, #128]	@ (80051dc <low_level_init+0x120>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	789a      	ldrb	r2, [r3, #2]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005164:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <low_level_init+0x120>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	78da      	ldrb	r2, [r3, #3]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005170:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <low_level_init+0x120>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	791a      	ldrb	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800517c:	4b17      	ldr	r3, [pc, #92]	@ (80051dc <low_level_init+0x120>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	795a      	ldrb	r2, [r3, #5]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800518e:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005196:	f043 030a 	orr.w	r3, r3, #10
 800519a:	b2da      	uxtb	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80051a2:	4914      	ldr	r1, [pc, #80]	@ (80051f4 <low_level_init+0x138>)
 80051a4:	4814      	ldr	r0, [pc, #80]	@ (80051f8 <low_level_init+0x13c>)
 80051a6:	f7fb ff3a 	bl	800101e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80051aa:	4813      	ldr	r0, [pc, #76]	@ (80051f8 <low_level_init+0x13c>)
 80051ac:	f7fb ff69 	bl	8001082 <LAN8742_Init>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f002 fee8 	bl	8007f8c <netif_set_link_down>
    netif_set_down(netif);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f002 fe7b 	bl	8007eb8 <netif_set_down>
 80051c2:	e008      	b.n	80051d6 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa28 	bl	8005620 <ethernet_link_check_state>
 80051d0:	e001      	b.n	80051d6 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80051d2:	f7fb fceb 	bl	8000bac <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20005140 	.word	0x20005140
 80051e0:	40028000 	.word	0x40028000
 80051e4:	20000134 	.word	0x20000134
 80051e8:	20000094 	.word	0x20000094
 80051ec:	200051f0 	.word	0x200051f0
 80051f0:	08017e00 	.word	0x08017e00
 80051f4:	20000014 	.word	0x20000014
 80051f8:	20005228 	.word	0x20005228

080051fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b092      	sub	sp, #72	@ 0x48
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	2230      	movs	r2, #48	@ 0x30
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f00e fe3a 	bl	8013e96 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	2230      	movs	r2, #48	@ 0x30
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f00e fe33 	bl	8013e96 <memset>

  for(q = p; q != NULL; q = q->next)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	643b      	str	r3, [r7, #64]	@ 0x40
 8005234:	e045      	b.n	80052c2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005238:	2b03      	cmp	r3, #3
 800523a:	d902      	bls.n	8005242 <low_level_output+0x46>
      return ERR_IF;
 800523c:	f06f 030b 	mvn.w	r3, #11
 8005240:	e055      	b.n	80052ee <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005244:	6859      	ldr	r1, [r3, #4]
 8005246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	3348      	adds	r3, #72	@ 0x48
 8005252:	443b      	add	r3, r7
 8005254:	3b3c      	subs	r3, #60	@ 0x3c
 8005256:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800525a:	895b      	ldrh	r3, [r3, #10]
 800525c:	4619      	mov	r1, r3
 800525e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	3348      	adds	r3, #72	@ 0x48
 800526a:	443b      	add	r3, r7
 800526c:	3b38      	subs	r3, #56	@ 0x38
 800526e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	f107 000c 	add.w	r0, r7, #12
 800527e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005280:	460b      	mov	r3, r1
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	440b      	add	r3, r1
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18c1      	adds	r1, r0, r3
 800528a:	4613      	mov	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	3348      	adds	r3, #72	@ 0x48
 8005294:	443b      	add	r3, r7
 8005296:	3b34      	subs	r3, #52	@ 0x34
 8005298:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800529a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	3348      	adds	r3, #72	@ 0x48
 80052ae:	443b      	add	r3, r7
 80052b0:	3b34      	subs	r3, #52	@ 0x34
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b8:	3301      	adds	r3, #1
 80052ba:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80052bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1b6      	bne.n	8005236 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	891b      	ldrh	r3, [r3, #8]
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <low_level_output+0xfc>)
 80052d0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80052d2:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <low_level_output+0xfc>)
 80052d4:	f107 030c 	add.w	r3, r7, #12
 80052d8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80052da:	4a07      	ldr	r2, [pc, #28]	@ (80052f8 <low_level_output+0xfc>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80052e0:	2214      	movs	r2, #20
 80052e2:	4905      	ldr	r1, [pc, #20]	@ (80052f8 <low_level_output+0xfc>)
 80052e4:	4805      	ldr	r0, [pc, #20]	@ (80052fc <low_level_output+0x100>)
 80052e6:	f7fc fa59 	bl	800179c <HAL_ETH_Transmit>

  return errval;
 80052ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3748      	adds	r7, #72	@ 0x48
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	200051f0 	.word	0x200051f0
 80052fc:	20005140 	.word	0x20005140

08005300 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <low_level_input+0x2c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	4619      	mov	r1, r3
 800531a:	4805      	ldr	r0, [pc, #20]	@ (8005330 <low_level_input+0x30>)
 800531c:	f7fc fad2 	bl	80018c4 <HAL_ETH_ReadData>
  }

  return p;
 8005320:	68fb      	ldr	r3, [r7, #12]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000513c 	.word	0x2000513c
 8005330:	20005140 	.word	0x20005140

08005334 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ffdd 	bl	8005300 <low_level_input>
 8005346:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	4798      	blx	r3
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f003 f9c4 	bl	80086ec <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ea      	bne.n	8005340 <ethernetif_input+0xc>
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <ethernetif_init+0x1c>
 8005382:	4b0e      	ldr	r3, [pc, #56]	@ (80053bc <ethernetif_init+0x48>)
 8005384:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005388:	490d      	ldr	r1, [pc, #52]	@ (80053c0 <ethernetif_init+0x4c>)
 800538a:	480e      	ldr	r0, [pc, #56]	@ (80053c4 <ethernetif_init+0x50>)
 800538c:	f00e fd1e 	bl	8013dcc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2273      	movs	r2, #115	@ 0x73
 8005394:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2274      	movs	r2, #116	@ 0x74
 800539c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a09      	ldr	r2, [pc, #36]	@ (80053c8 <ethernetif_init+0x54>)
 80053a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a08      	ldr	r2, [pc, #32]	@ (80053cc <ethernetif_init+0x58>)
 80053aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fe85 	bl	80050bc <low_level_init>

  return ERR_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08014d48 	.word	0x08014d48
 80053c0:	08014d64 	.word	0x08014d64
 80053c4:	08014d74 	.word	0x08014d74
 80053c8:	08011e9d 	.word	0x08011e9d
 80053cc:	080051fd 	.word	0x080051fd

080053d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	4807      	ldr	r0, [pc, #28]	@ (80053fc <pbuf_free_custom+0x2c>)
 80053e0:	f002 fade 	bl	80079a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <pbuf_free_custom+0x30>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d102      	bne.n	80053f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80053ec:	4b04      	ldr	r3, [pc, #16]	@ (8005400 <pbuf_free_custom+0x30>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
  }
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	08017e00 	.word	0x08017e00
 8005400:	2000513c 	.word	0x2000513c

08005404 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005408:	f7fb ff60 	bl	80012cc <HAL_GetTick>
 800540c:	4603      	mov	r3, r0
}
 800540e:	4618      	mov	r0, r3
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08e      	sub	sp, #56	@ 0x38
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a4e      	ldr	r2, [pc, #312]	@ (800556c <HAL_ETH_MspInit+0x158>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f040 8096 	bne.w	8005564 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005438:	4b4d      	ldr	r3, [pc, #308]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	4a4c      	ldr	r2, [pc, #304]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800543e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005442:	6313      	str	r3, [r2, #48]	@ 0x30
 8005444:	4b4a      	ldr	r3, [pc, #296]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544c:	623b      	str	r3, [r7, #32]
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	4b47      	ldr	r3, [pc, #284]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	4a46      	ldr	r2, [pc, #280]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800545a:	6313      	str	r3, [r2, #48]	@ 0x30
 800545c:	4b44      	ldr	r3, [pc, #272]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4b41      	ldr	r3, [pc, #260]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800546a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546c:	4a40      	ldr	r2, [pc, #256]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800546e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005472:	6313      	str	r3, [r2, #48]	@ 0x30
 8005474:	4b3e      	ldr	r3, [pc, #248]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005480:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005484:	4a3a      	ldr	r2, [pc, #232]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	6313      	str	r3, [r2, #48]	@ 0x30
 800548c:	4b38      	ldr	r3, [pc, #224]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005498:	4b35      	ldr	r3, [pc, #212]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054a4:	4b32      	ldr	r3, [pc, #200]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80054bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80054c8:	4b29      	ldr	r3, [pc, #164]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	4a28      	ldr	r2, [pc, #160]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80054d4:	4b26      	ldr	r3, [pc, #152]	@ (8005570 <HAL_ETH_MspInit+0x15c>)
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80054e0:	2332      	movs	r3, #50	@ 0x32
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e4:	2302      	movs	r3, #2
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ec:	2303      	movs	r3, #3
 80054ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054f0:	230b      	movs	r3, #11
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054f8:	4619      	mov	r1, r3
 80054fa:	481e      	ldr	r0, [pc, #120]	@ (8005574 <HAL_ETH_MspInit+0x160>)
 80054fc:	f7fd f92e 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005500:	2386      	movs	r3, #134	@ 0x86
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005508:	2300      	movs	r3, #0
 800550a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800550c:	2303      	movs	r3, #3
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005510:	230b      	movs	r3, #11
 8005512:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005518:	4619      	mov	r1, r3
 800551a:	4817      	ldr	r0, [pc, #92]	@ (8005578 <HAL_ETH_MspInit+0x164>)
 800551c:	f7fd f91e 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005520:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552e:	2303      	movs	r3, #3
 8005530:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005532:	230b      	movs	r3, #11
 8005534:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800553a:	4619      	mov	r1, r3
 800553c:	480f      	ldr	r0, [pc, #60]	@ (800557c <HAL_ETH_MspInit+0x168>)
 800553e:	f7fd f90d 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005542:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005548:	2302      	movs	r3, #2
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554c:	2300      	movs	r3, #0
 800554e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005550:	2303      	movs	r3, #3
 8005552:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005554:	230b      	movs	r3, #11
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800555c:	4619      	mov	r1, r3
 800555e:	4808      	ldr	r0, [pc, #32]	@ (8005580 <HAL_ETH_MspInit+0x16c>)
 8005560:	f7fd f8fc 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005564:	bf00      	nop
 8005566:	3738      	adds	r7, #56	@ 0x38
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40028000 	.word	0x40028000
 8005570:	40023800 	.word	0x40023800
 8005574:	40020800 	.word	0x40020800
 8005578:	40020000 	.word	0x40020000
 800557c:	40020400 	.word	0x40020400
 8005580:	40021800 	.word	0x40021800

08005584 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005588:	4802      	ldr	r0, [pc, #8]	@ (8005594 <ETH_PHY_IO_Init+0x10>)
 800558a:	f7fc fc85 	bl	8001e98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20005140 	.word	0x20005140

08005598 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return 0;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	4807      	ldr	r0, [pc, #28]	@ (80055d8 <ETH_PHY_IO_ReadReg+0x30>)
 80055bc:	f7fc fac6 	bl	8001b4c <HAL_ETH_ReadPHYRegister>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055ca:	e000      	b.n	80055ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20005140 	.word	0x20005140

080055dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	4807      	ldr	r0, [pc, #28]	@ (800560c <ETH_PHY_IO_WriteReg+0x30>)
 80055f0:	f7fc faf7 	bl	8001be2 <HAL_ETH_WritePHYRegister>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055fe:	e000      	b.n	8005602 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20005140 	.word	0x20005140

08005610 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005614:	f7fb fe5a 	bl	80012cc <HAL_GetTick>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b0a0      	sub	sp, #128	@ 0x80
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	2264      	movs	r2, #100	@ 0x64
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f00e fc30 	bl	8013e96 <memset>
  int32_t PHYLinkState = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800563e:	2300      	movs	r3, #0
 8005640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005642:	2300      	movs	r3, #0
 8005644:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005646:	483a      	ldr	r0, [pc, #232]	@ (8005730 <ethernet_link_check_state+0x110>)
 8005648:	f7fb fd68 	bl	800111c <LAN8742_GetLinkState>
 800564c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00c      	beq.n	800567a <ethernet_link_check_state+0x5a>
 8005660:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005662:	2b01      	cmp	r3, #1
 8005664:	dc09      	bgt.n	800567a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005666:	4833      	ldr	r0, [pc, #204]	@ (8005734 <ethernet_link_check_state+0x114>)
 8005668:	f7fc f83f 	bl	80016ea <HAL_ETH_Stop>
    netif_set_down(netif);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f002 fc23 	bl	8007eb8 <netif_set_down>
    netif_set_link_down(netif);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f002 fc8a 	bl	8007f8c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005678:	e055      	b.n	8005726 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d14e      	bne.n	8005726 <ethernet_link_check_state+0x106>
 8005688:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568a:	2b01      	cmp	r3, #1
 800568c:	dd4b      	ble.n	8005726 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800568e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005690:	3b02      	subs	r3, #2
 8005692:	2b03      	cmp	r3, #3
 8005694:	d82a      	bhi.n	80056ec <ethernet_link_check_state+0xcc>
 8005696:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <ethernet_link_check_state+0x7c>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056ad 	.word	0x080056ad
 80056a0:	080056bf 	.word	0x080056bf
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
      duplex = ETH_FULLDUPLEX_MODE;
 80056ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80056b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80056b8:	2301      	movs	r3, #1
 80056ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056bc:	e017      	b.n	80056ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80056be:	2300      	movs	r3, #0
 80056c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80056c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80056c8:	2301      	movs	r3, #1
 80056ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056cc:	e00f      	b.n	80056ee <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80056ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80056d4:	2300      	movs	r3, #0
 80056d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80056d8:	2301      	movs	r3, #1
 80056da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056dc:	e007      	b.n	80056ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80056de:	2300      	movs	r3, #0
 80056e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80056e2:	2300      	movs	r3, #0
 80056e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80056e6:	2301      	movs	r3, #1
 80056e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80056ea:	e000      	b.n	80056ee <ethernet_link_check_state+0xce>
      break;
 80056ec:	bf00      	nop
    if(linkchanged)
 80056ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d018      	beq.n	8005726 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	4619      	mov	r1, r3
 80056fa:	480e      	ldr	r0, [pc, #56]	@ (8005734 <ethernet_link_check_state+0x114>)
 80056fc:	f7fc faba 	bl	8001c74 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005700:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005704:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005706:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	4619      	mov	r1, r3
 800570e:	4809      	ldr	r0, [pc, #36]	@ (8005734 <ethernet_link_check_state+0x114>)
 8005710:	f7fc fba7 	bl	8001e62 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005714:	4807      	ldr	r0, [pc, #28]	@ (8005734 <ethernet_link_check_state+0x114>)
 8005716:	f7fb ff89 	bl	800162c <HAL_ETH_Start>
      netif_set_up(netif);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 fb60 	bl	8007de0 <netif_set_up>
      netif_set_link_up(netif);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f002 fbfb 	bl	8007f1c <netif_set_link_up>
}
 8005726:	bf00      	nop
 8005728:	3780      	adds	r7, #128	@ 0x80
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20005228 	.word	0x20005228
 8005734:	20005140 	.word	0x20005140

08005738 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005740:	4812      	ldr	r0, [pc, #72]	@ (800578c <HAL_ETH_RxAllocateCallback+0x54>)
 8005742:	f002 f8bf 	bl	80078c4 <memp_malloc_pool>
 8005746:	60f8      	str	r0, [r7, #12]
  if (p)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f103 0220 	add.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a0d      	ldr	r2, [pc, #52]	@ (8005790 <HAL_ETH_RxAllocateCallback+0x58>)
 800575c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005766:	9201      	str	r2, [sp, #4]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2241      	movs	r2, #65	@ 0x41
 800576e:	2100      	movs	r1, #0
 8005770:	2000      	movs	r0, #0
 8005772:	f002 fe01 	bl	8008378 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005776:	e005      	b.n	8005784 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005778:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_ETH_RxAllocateCallback+0x5c>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08017e00 	.word	0x08017e00
 8005790:	080053d1 	.word	0x080053d1
 8005794:	2000513c 	.word	0x2000513c

08005798 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3b20      	subs	r3, #32
 80057b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2200      	movs	r2, #0
 80057c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	887a      	ldrh	r2, [r7, #2]
 80057c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e003      	b.n	80057e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e009      	b.n	8005804 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	891a      	ldrh	r2, [r3, #8]
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	4413      	add	r3, r2
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f2      	bne.n	80057f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fc28 	bl	8005064 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005814:	bf00      	nop
 8005816:	3720      	adds	r7, #32
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <fs_open+0x16>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <fs_open+0x1c>
    return ERR_ARG;
 8005832:	f06f 030f 	mvn.w	r3, #15
 8005836:	e028      	b.n	800588a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005838:	4b16      	ldr	r3, [pc, #88]	@ (8005894 <fs_open+0x78>)
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e020      	b.n	8005880 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4619      	mov	r1, r3
 8005844:	6838      	ldr	r0, [r7, #0]
 8005846:	f7fa fcfb 	bl	8000240 <strcmp>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d114      	bne.n	800587a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	7c1a      	ldrb	r2, [r3, #16]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e007      	b.n	800588a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1db      	bne.n	800583e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8005886:	f06f 0305 	mvn.w	r3, #5
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	080180c4 	.word	0x080180c4

08005898 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80058d0:	20e8      	movs	r0, #232	@ 0xe8
 80058d2:	f001 fe89 	bl	80075e8 <mem_malloc>
 80058d6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80058de:	22e8      	movs	r2, #232	@ 0xe8
 80058e0:	2100      	movs	r1, #0
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f00e fad7 	bl	8013e96 <memset>
  }
  return ret;
 80058e8:	687b      	ldr	r3, [r7, #4]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fd0b 	bl	800731c <mem_free>
  }
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8005916:	22b0      	movs	r2, #176	@ 0xb0
 8005918:	2100      	movs	r1, #0
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00e fabb 	bl	8013e96 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800592e:	20b0      	movs	r0, #176	@ 0xb0
 8005930:	f001 fe5a 	bl	80075e8 <mem_malloc>
 8005934:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <http_state_alloc+0x1a>
    http_state_init(ret);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ffe6 	bl	800590e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005942:	687b      	ldr	r3, [r7, #4]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff99 	bl	8005898 <fs_close>
    hs->handle = NULL;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d007      	beq.n	8005984 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ffba 	bl	80058f2 <http_ssi_state_free>
    hs->ssi = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	4618      	mov	r0, r3
 8005992:	f002 feab 	bl	80086ec <pbuf_free>
    hs->req = NULL;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <http_state_free+0x1a>
    http_state_eof(hs);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ffca 	bl	800594c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fcaf 	bl	800731c <mem_free>
  }
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <http_write+0x22>
 80059dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <http_write+0xc8>)
 80059de:	f240 2219 	movw	r2, #537	@ 0x219
 80059e2:	492c      	ldr	r1, [pc, #176]	@ (8005a94 <http_write+0xcc>)
 80059e4:	482c      	ldr	r0, [pc, #176]	@ (8005a98 <http_write+0xd0>)
 80059e6:	f00e f9f1 	bl	8013dcc <iprintf>
  len = *length;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80059f0:	8afb      	ldrh	r3, [r7, #22]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <http_write+0x32>
    return ERR_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e045      	b.n	8005a86 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005a00:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005a02:	8aba      	ldrh	r2, [r7, #20]
 8005a04:	8afb      	ldrh	r3, [r7, #22]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d201      	bcs.n	8005a0e <http_write+0x46>
    len = max_len;
 8005a0a:	8abb      	ldrh	r3, [r7, #20]
 8005a0c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8005a16:	8afa      	ldrh	r2, [r7, #22]
 8005a18:	8abb      	ldrh	r3, [r7, #20]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d901      	bls.n	8005a22 <http_write+0x5a>
    len = max_len;
 8005a1e:	8abb      	ldrh	r3, [r7, #20]
 8005a20:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	8afa      	ldrh	r2, [r7, #22]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f007 fbf3 	bl	800d214 <tcp_write>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005a32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a3a:	d10f      	bne.n	8005a5c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d902      	bls.n	8005a56 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005a50:	2301      	movs	r3, #1
 8005a52:	82fb      	strh	r3, [r7, #22]
 8005a54:	e002      	b.n	8005a5c <http_write+0x94>
      } else {
        len /= 2;
 8005a56:	8afb      	ldrh	r3, [r7, #22]
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a64:	d102      	bne.n	8005a6c <http_write+0xa4>
 8005a66:	8afb      	ldrh	r3, [r7, #22]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d8da      	bhi.n	8005a22 <http_write+0x5a>

  if (err == ERR_OK) {
 8005a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8afa      	ldrh	r2, [r7, #22]
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005a82:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08014e18 	.word	0x08014e18
 8005a94:	08014e50 	.word	0x08014e50
 8005a98:	08014e60 	.word	0x08014e60

08005a9c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f004 fc75 	bl	800a39c <tcp_arg>
  altcp_recv(pcb, NULL);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f004 fc83 	bl	800a3c0 <tcp_recv>
  altcp_err(pcb, NULL);
 8005aba:	2100      	movs	r1, #0
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f004 fcc3 	bl	800a448 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f004 fcf8 	bl	800a4bc <tcp_poll>
  altcp_sent(pcb, NULL);
 8005acc:	2100      	movs	r1, #0
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f004 fc98 	bl	800a404 <tcp_sent>
  if (hs != NULL) {
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005ada:	68b8      	ldr	r0, [r7, #8]
 8005adc:	f7ff ff62 	bl	80059a4 <http_state_free>
  }

  if (abort_conn) {
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f003 fb98 	bl	800921c <tcp_abort>
    return ERR_OK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	e00f      	b.n	8005b10 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f003 faa9 	bl	8009048 <tcp_close>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005afa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005b02:	2204      	movs	r2, #4
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <http_close_or_abort_conn+0x7c>)
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f004 fcd8 	bl	800a4bc <tcp_poll>
  }
  return err;
 8005b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	08006b9b 	.word	0x08006b9b

08005b1c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff ffb6 	bl	8005a9c <http_close_or_abort_conn>
 8005b30:	4603      	mov	r3, r0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff ffe8 	bl	8005b1c <http_close_conn>
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <extract_uri_parameters+0x18>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <extract_uri_parameters+0x1c>
    return (0);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e04b      	b.n	8005c08 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	e03f      	b.n	8005bfa <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	320c      	adds	r2, #12
 8005b80:	6979      	ldr	r1, [r7, #20]
 8005b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005b8a:	2126      	movs	r1, #38	@ 0x26
 8005b8c:	6978      	ldr	r0, [r7, #20]
 8005b8e:	f00e f98a 	bl	8013ea6 <strchr>
 8005b92:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <extract_uri_parameters+0x54>
      *pair = '\0';
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
      pair++;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e00c      	b.n	8005bc2 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005ba8:	2120      	movs	r1, #32
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f00e f97b 	bl	8013ea6 <strchr>
 8005bb0:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <extract_uri_parameters+0x6a>
        *pair = '\0';
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005bc2:	213d      	movs	r1, #61	@ 0x3d
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f00e f96e 	bl	8013ea6 <strchr>
 8005bca:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <extract_uri_parameters+0x94>
      *equals = '\0';
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	321c      	adds	r2, #28
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005be6:	e005      	b.n	8005bf4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	321c      	adds	r2, #28
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b0f      	cmp	r3, #15
 8005bfe:	dc02      	bgt.n	8005c06 <extract_uri_parameters+0xb2>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1b9      	bne.n	8005b7a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005c06:	693b      	ldr	r3, [r7, #16]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <get_tag_insert+0x1c>
 8005c1e:	4b52      	ldr	r3, [pc, #328]	@ (8005d68 <get_tag_insert+0x158>)
 8005c20:	f44f 7241 	mov.w	r2, #772	@ 0x304
 8005c24:	4951      	ldr	r1, [pc, #324]	@ (8005d6c <get_tag_insert+0x15c>)
 8005c26:	4852      	ldr	r0, [pc, #328]	@ (8005d70 <get_tag_insert+0x160>)
 8005c28:	f00e f8d0 	bl	8013dcc <iprintf>
  ssi = hs->ssi;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c30:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <get_tag_insert+0x36>
 8005c38:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <get_tag_insert+0x158>)
 8005c3a:	f240 3206 	movw	r2, #774	@ 0x306
 8005c3e:	494d      	ldr	r1, [pc, #308]	@ (8005d74 <get_tag_insert+0x164>)
 8005c40:	484b      	ldr	r0, [pc, #300]	@ (8005d70 <get_tag_insert+0x160>)
 8005c42:	f00e f8c3 	bl	8013dcc <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8005c46:	4b4c      	ldr	r3, [pc, #304]	@ (8005d78 <get_tag_insert+0x168>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d02e      	beq.n	8005cac <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8005c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d7c <get_tag_insert+0x16c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d02a      	beq.n	8005cac <get_tag_insert+0x9c>
 8005c56:	4b4a      	ldr	r3, [pc, #296]	@ (8005d80 <get_tag_insert+0x170>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d026      	beq.n	8005cac <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e01e      	b.n	8005ca2 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f103 0012 	add.w	r0, r3, #18
 8005c6a:	4b44      	ldr	r3, [pc, #272]	@ (8005d7c <get_tag_insert+0x16c>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4619      	mov	r1, r3
 8005c78:	f7fa fae2 	bl	8000240 <strcmp>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10c      	bne.n	8005c9c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8005c82:	4b3d      	ldr	r3, [pc, #244]	@ (8005d78 <get_tag_insert+0x168>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	f102 0123 	add.w	r1, r2, #35	@ 0x23
 8005c8c:	22c0      	movs	r2, #192	@ 0xc0
 8005c8e:	6978      	ldr	r0, [r7, #20]
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8005c9a:	e061      	b.n	8005d60 <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	4b37      	ldr	r3, [pc, #220]	@ (8005d80 <get_tag_insert+0x170>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	dbdb      	blt.n	8005c64 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	3312      	adds	r3, #18
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa facf 	bl	8000254 <strlen>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2ba6      	cmp	r3, #166	@ 0xa6
 8005cba:	d818      	bhi.n	8005cee <get_tag_insert+0xde>
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3312      	adds	r3, #18
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fa fac7 	bl	8000254 <strlen>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b11      	cmp	r3, #17
 8005cca:	d810      	bhi.n	8005cee <get_tag_insert+0xde>
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3312      	adds	r3, #18
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7fa fabf 	bl	8000254 <strlen>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2ba6      	cmp	r3, #166	@ 0xa6
 8005cda:	d806      	bhi.n	8005cea <get_tag_insert+0xda>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3312      	adds	r3, #18
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fa fab7 	bl	8000254 <strlen>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	e002      	b.n	8005cf0 <get_tag_insert+0xe0>
 8005cea:	23a7      	movs	r3, #167	@ 0xa7
 8005cec:	e000      	b.n	8005cf0 <get_tag_insert+0xe0>
 8005cee:	2311      	movs	r3, #17
 8005cf0:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3323      	adds	r3, #35	@ 0x23
 8005cf6:	2212      	movs	r2, #18
 8005cf8:	4922      	ldr	r1, [pc, #136]	@ (8005d84 <get_tag_insert+0x174>)
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f00e f967 	bl	8013fce <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f103 0035 	add.w	r0, r3, #53	@ 0x35
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	3312      	adds	r3, #18
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f00e f95e 	bl	8013fce <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3312      	adds	r3, #18
 8005d16:	3320      	adds	r3, #32
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3303      	adds	r3, #3
 8005d1e:	2207      	movs	r2, #7
 8005d20:	4919      	ldr	r1, [pc, #100]	@ (8005d88 <get_tag_insert+0x178>)
 8005d22:	4618      	mov	r0, r3
 8005d24:	f00e f953 	bl	8013fce <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3319      	adds	r3, #25
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4413      	add	r3, r2
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  len = strlen(ssi->tag_insert);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3323      	adds	r3, #35	@ 0x23
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fa fa8a 	bl	8000254 <strlen>
 8005d40:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d48:	d306      	bcc.n	8005d58 <get_tag_insert+0x148>
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <get_tag_insert+0x158>)
 8005d4c:	f240 323f 	movw	r2, #831	@ 0x33f
 8005d50:	490e      	ldr	r1, [pc, #56]	@ (8005d8c <get_tag_insert+0x17c>)
 8005d52:	4807      	ldr	r0, [pc, #28]	@ (8005d70 <get_tag_insert+0x160>)
 8005d54:	f00e f83a 	bl	8013dcc <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	81da      	strh	r2, [r3, #14]
}
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	08014e18 	.word	0x08014e18
 8005d6c:	08014e88 	.word	0x08014e88
 8005d70:	08014e60 	.word	0x08014e60
 8005d74:	08014e94 	.word	0x08014e94
 8005d78:	20005688 	.word	0x20005688
 8005d7c:	20005690 	.word	0x20005690
 8005d80:	2000568c 	.word	0x2000568c
 8005d84:	08014ea0 	.word	0x08014ea0
 8005d88:	08014eb4 	.word	0x08014eb4
 8005d8c:	08014ebc 	.word	0x08014ebc

08005d90 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fec8 	bl	8005b3a <http_eof>
    return 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e016      	b.n	8005ddc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fd7a 	bl	80058ac <fs_bytes_left>
 8005db8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dc05      	bgt.n	8005dcc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff feb9 	bl	8005b3a <http_eof>
    return 0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e007      	b.n	8005ddc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <http_check_eof+0x54>)
 8005dce:	f240 429d 	movw	r2, #1181	@ 0x49d
 8005dd2:	4905      	ldr	r1, [pc, #20]	@ (8005de8 <http_check_eof+0x58>)
 8005dd4:	4805      	ldr	r0, [pc, #20]	@ (8005dec <http_check_eof+0x5c>)
 8005dd6:	f00d fff9 	bl	8013dcc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005dda:	2301      	movs	r3, #1
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08014e18 	.word	0x08014e18
 8005de8:	08014ecc 	.word	0x08014ecc
 8005dec:	08014e60 	.word	0x08014e60

08005df0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d803      	bhi.n	8005e12 <http_send_data_nonssi+0x22>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	e001      	b.n	8005e16 <http_send_data_nonssi+0x26>
 8005e12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e16:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6999      	ldr	r1, [r3, #24]
 8005e1c:	f107 020c 	add.w	r2, r7, #12
 8005e20:	2300      	movs	r3, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fdd0 	bl	80059c8 <http_write>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10d      	bne.n	8005e50 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	89ba      	ldrh	r2, [r7, #12]
 8005e3e:	441a      	add	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e48:	89ba      	ldrh	r2, [r7, #12]
 8005e4a:	1a9a      	subs	r2, r3, r2
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <http_send_data_ssi+0x2c>
 8005e7a:	4b87      	ldr	r3, [pc, #540]	@ (8006098 <http_send_data_ssi+0x23c>)
 8005e7c:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8005e80:	4986      	ldr	r1, [pc, #536]	@ (800609c <http_send_data_ssi+0x240>)
 8005e82:	4887      	ldr	r0, [pc, #540]	@ (80060a0 <http_send_data_ssi+0x244>)
 8005e84:	f00d ffa2 	bl	8013dcc <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005e8e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	f240 8273 	bls.w	8006384 <http_send_data_ssi+0x528>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005eac:	4293      	cmp	r3, r2
 8005eae:	dc06      	bgt.n	8005ebe <http_send_data_ssi+0x62>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	e001      	b.n	8005ec2 <http_send_data_ssi+0x66>
 8005ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ec2:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6999      	ldr	r1, [r3, #24]
 8005ec8:	f107 020e 	add.w	r2, r7, #14
 8005ecc:	2300      	movs	r3, #0
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fd7a 	bl	80059c8 <http_write>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10d      	bne.n	8005efc <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	89fa      	ldrh	r2, [r7, #14]
 8005eea:	441a      	add	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	89fa      	ldrh	r2, [r7, #14]
 8005ef6:	1a9a      	subs	r2, r3, r2
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 823e 	bne.w	8006384 <http_send_data_ssi+0x528>
      return data_to_send;
 8005f08:	7dbb      	ldrb	r3, [r7, #22]
 8005f0a:	e284      	b.n	8006416 <http_send_data_ssi+0x5ba>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <http_send_data_ssi+0xba>
      return data_to_send;
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	e27f      	b.n	8006416 <http_send_data_ssi+0x5ba>
    }
    switch (ssi->tag_state) {
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	f200 822c 	bhi.w	800637a <http_send_data_ssi+0x51e>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <http_send_data_ssi+0xcc>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f3d 	.word	0x08005f3d
 8005f2c:	08005f8f 	.word	0x08005f8f
 8005f30:	08006001 	.word	0x08006001
 8005f34:	08006149 	.word	0x08006149
 8005f38:	08006291 	.word	0x08006291
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	757b      	strb	r3, [r7, #21]
 8005f40:	e017      	b.n	8005f72 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781a      	ldrb	r2, [r3, #0]
 8005f48:	7d7b      	ldrb	r3, [r7, #21]
 8005f4a:	4956      	ldr	r1, [pc, #344]	@ (80060a4 <http_send_data_ssi+0x248>)
 8005f4c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d10a      	bne.n	8005f6c <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	7d7a      	ldrb	r2, [r7, #21]
 8005f5a:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            ssi->tag_index = 1;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2201      	movs	r2, #1
 8005f68:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8005f6a:	e005      	b.n	8005f78 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005f6c:	7d7b      	ldrb	r3, [r7, #21]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	757b      	strb	r3, [r7, #21]
 8005f72:	7d7b      	ldrb	r3, [r7, #21]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d9e4      	bls.n	8005f42 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	1e5a      	subs	r2, r3, #1
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	601a      	str	r2, [r3, #0]
        break;
 8005f8c:	e1fa      	b.n	8006384 <http_send_data_ssi+0x528>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	7c1b      	ldrb	r3, [r3, #16]
 8005f92:	461a      	mov	r2, r3
 8005f94:	4b43      	ldr	r3, [pc, #268]	@ (80060a4 <http_send_data_ssi+0x248>)
 8005f96:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	8992      	ldrh	r2, [r2, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 8005fb4:	e1e6      	b.n	8006384 <http_send_data_ssi+0x528>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4b38      	ldr	r3, [pc, #224]	@ (80060a4 <http_send_data_ssi+0x248>)
 8005fc4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	8989      	ldrh	r1, [r1, #12]
 8005fcc:	440b      	add	r3, r1
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d106      	bne.n	8005fe2 <http_send_data_ssi+0x186>
            ssi->tag_index++;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	899b      	ldrh	r3, [r3, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	819a      	strh	r2, [r3, #12]
 8005fe0:	e003      	b.n	8005fea <http_send_data_ssi+0x18e>
            ssi->tag_state = TAG_NONE;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
          ssi->parse_left--;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	601a      	str	r2, [r3, #0]
        break;
 8005ffe:	e1c1      	b.n	8006384 <http_send_data_ssi+0x528>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	899b      	ldrh	r3, [r3, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d11e      	bne.n	8006046 <http_send_data_ssi+0x1ea>
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b20      	cmp	r3, #32
 8006010:	d00e      	beq.n	8006030 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006018:	2b09      	cmp	r3, #9
 800601a:	d009      	beq.n	8006030 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b0a      	cmp	r3, #10
 8006024:	d004      	beq.n	8006030 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800602c:	2b0d      	cmp	r3, #13
 800602e:	d10a      	bne.n	8006046 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	1e5a      	subs	r2, r3, #1
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	601a      	str	r2, [r3, #0]
          break;
 8006044:	e19e      	b.n	8006384 <http_send_data_ssi+0x528>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	7c1b      	ldrb	r3, [r3, #16]
 8006050:	4914      	ldr	r1, [pc, #80]	@ (80060a4 <http_send_data_ssi+0x248>)
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	440b      	add	r3, r1
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d013      	beq.n	8006086 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8006064:	2b20      	cmp	r3, #32
 8006066:	d00e      	beq.n	8006086 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b09      	cmp	r3, #9
 8006070:	d009      	beq.n	8006086 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8006078:	2b0a      	cmp	r3, #10
 800607a:	d004      	beq.n	8006086 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b0d      	cmp	r3, #13
 8006084:	d13f      	bne.n	8006106 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	899b      	ldrh	r3, [r3, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10c      	bne.n	80060a8 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
          if (ssi->tag_index == 0) {
 8006096:	e04c      	b.n	8006132 <http_send_data_ssi+0x2d6>
 8006098:	08014e18 	.word	0x08014e18
 800609c:	08014e94 	.word	0x08014e94
 80060a0:	08014e60 	.word	0x08014e60
 80060a4:	08018114 	.word	0x08018114
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2203      	movs	r2, #3
 80060ac:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	899b      	ldrh	r3, [r3, #12]
 80060b4:	2bff      	cmp	r3, #255	@ 0xff
 80060b6:	d906      	bls.n	80060c6 <http_send_data_ssi+0x26a>
 80060b8:	4b93      	ldr	r3, [pc, #588]	@ (8006308 <http_send_data_ssi+0x4ac>)
 80060ba:	f240 523a 	movw	r2, #1338	@ 0x53a
 80060be:	4993      	ldr	r1, [pc, #588]	@ (800630c <http_send_data_ssi+0x4b0>)
 80060c0:	4893      	ldr	r0, [pc, #588]	@ (8006310 <http_send_data_ssi+0x4b4>)
 80060c2:	f00d fe83 	bl	8013dcc <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	899b      	ldrh	r3, [r3, #12]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	899b      	ldrh	r3, [r3, #12]
 80060d4:	461a      	mov	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	7c1b      	ldrb	r3, [r3, #16]
 80060e8:	498a      	ldr	r1, [pc, #552]	@ (8006314 <http_send_data_ssi+0x4b8>)
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	440b      	add	r3, r1
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d103      	bne.n	80060fe <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2201      	movs	r2, #1
 80060fa:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80060fc:	e019      	b.n	8006132 <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2200      	movs	r2, #0
 8006102:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8006104:	e015      	b.n	8006132 <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	899b      	ldrh	r3, [r3, #12]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d80d      	bhi.n	800612a <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	899b      	ldrh	r3, [r3, #12]
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	b288      	uxth	r0, r1
 800611a:	6939      	ldr	r1, [r7, #16]
 800611c:	8188      	strh	r0, [r1, #12]
 800611e:	4619      	mov	r1, r3
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	440b      	add	r3, r1
 8006126:	749a      	strb	r2, [r3, #18]
 8006128:	e003      	b.n	8006132 <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	1e5a      	subs	r2, r3, #1
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	601a      	str	r2, [r3, #0]

        break;
 8006146:	e11d      	b.n	8006384 <http_send_data_ssi+0x528>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	899b      	ldrh	r3, [r3, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11e      	bne.n	800618e <http_send_data_ssi+0x332>
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d00e      	beq.n	8006178 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8006160:	2b09      	cmp	r3, #9
 8006162:	d009      	beq.n	8006178 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b0a      	cmp	r3, #10
 800616c:	d004      	beq.n	8006178 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8006174:	2b0d      	cmp	r3, #13
 8006176:	d10a      	bne.n	800618e <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	601a      	str	r2, [r3, #0]
          break;
 800618c:	e0fa      	b.n	8006384 <http_send_data_ssi+0x528>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	7c1b      	ldrb	r3, [r3, #16]
 8006198:	495e      	ldr	r1, [pc, #376]	@ (8006314 <http_send_data_ssi+0x4b8>)
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	440b      	add	r3, r1
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	6939      	ldr	r1, [r7, #16]
 80061a2:	8989      	ldrh	r1, [r1, #12]
 80061a4:	440b      	add	r3, r1
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d162      	bne.n	8006272 <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	899b      	ldrh	r3, [r3, #12]
 80061c4:	3301      	adds	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	7c1b      	ldrb	r3, [r3, #16]
 80061d0:	4a50      	ldr	r2, [pc, #320]	@ (8006314 <http_send_data_ssi+0x4b8>)
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4413      	add	r3, r2
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	8992      	ldrh	r2, [r2, #12]
 80061dc:	4413      	add	r3, r2
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f040 80cc 	bne.w	800637e <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80061e6:	6838      	ldr	r0, [r7, #0]
 80061e8:	f7ff fd12 	bl	8005c10 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2200      	movs	r2, #0
 80061f0:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2204      	movs	r2, #4
 80061f6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            ssi->tag_end = ssi->parsed;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	f240 80b7 	bls.w	800637e <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800621e:	4293      	cmp	r3, r2
 8006220:	dc06      	bgt.n	8006230 <http_send_data_ssi+0x3d4>
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	b29b      	uxth	r3, r3
 800622e:	e001      	b.n	8006234 <http_send_data_ssi+0x3d8>
 8006230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006234:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6999      	ldr	r1, [r3, #24]
 800623a:	f107 020e 	add.w	r2, r7, #14
 800623e:	2300      	movs	r3, #0
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fbc1 	bl	80059c8 <http_write>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800624a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8095 	bne.w	800637e <http_send_data_ssi+0x522>
                data_to_send = 1;
 8006254:	2301      	movs	r3, #1
 8006256:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	89fa      	ldrh	r2, [r7, #14]
 800625e:	441a      	add	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	89fa      	ldrh	r2, [r7, #14]
 800626a:	1a9a      	subs	r2, r3, r2
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 8006270:	e085      	b.n	800637e <http_send_data_ssi+0x522>
          ssi->parse_left--;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        break;
 800628e:	e076      	b.n	800637e <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	429a      	cmp	r2, r3
 800629a:	d93d      	bls.n	8006318 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062aa:	4293      	cmp	r3, r2
 80062ac:	dc06      	bgt.n	80062bc <http_send_data_ssi+0x460>
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	e001      	b.n	80062c0 <http_send_data_ssi+0x464>
 80062bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062c0:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 80062c2:	89fb      	ldrh	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6999      	ldr	r1, [r3, #24]
 80062cc:	f107 020e 	add.w	r2, r7, #14
 80062d0:	2300      	movs	r3, #0
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff fb78 	bl	80059c8 <http_write>
 80062d8:	4603      	mov	r3, r0
 80062da:	75fb      	strb	r3, [r7, #23]
 80062dc:	e001      	b.n	80062e2 <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80062e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d14c      	bne.n	8006384 <http_send_data_ssi+0x528>
            data_to_send = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	89fa      	ldrh	r2, [r7, #14]
 80062f4:	441a      	add	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	89fa      	ldrh	r2, [r7, #14]
 8006300:	1a9a      	subs	r2, r3, r2
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	625a      	str	r2, [r3, #36]	@ 0x24
 8006306:	e03d      	b.n	8006384 <http_send_data_ssi+0x528>
 8006308:	08014e18 	.word	0x08014e18
 800630c:	08014f04 	.word	0x08014f04
 8006310:	08014e60 	.word	0x08014e60
 8006314:	08018114 	.word	0x08018114
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	899a      	ldrh	r2, [r3, #12]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	89db      	ldrh	r3, [r3, #14]
 8006320:	429a      	cmp	r2, r3
 8006322:	d222      	bcs.n	800636a <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	89da      	ldrh	r2, [r3, #14]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	899b      	ldrh	r3, [r3, #12]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	b29b      	uxth	r3, r3
 8006330:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	899b      	ldrh	r3, [r3, #12]
 8006336:	3320      	adds	r3, #32
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	1cd9      	adds	r1, r3, #3
 800633e:	f107 020e 	add.w	r2, r7, #14
 8006342:	2301      	movs	r3, #1
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fb3f 	bl	80059c8 <http_write>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800634e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d115      	bne.n	8006382 <http_send_data_ssi+0x526>
              data_to_send = 1;
 8006356:	2301      	movs	r3, #1
 8006358:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	899a      	ldrh	r2, [r3, #12]
 800635e:	89fb      	ldrh	r3, [r7, #14]
 8006360:	4413      	add	r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8006368:	e00b      	b.n	8006382 <http_send_data_ssi+0x526>
              ssi->tag_index = 0;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2200      	movs	r2, #0
 800636e:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
          break;
 8006378:	e003      	b.n	8006382 <http_send_data_ssi+0x526>
        default:
          break;
 800637a:	bf00      	nop
 800637c:	e002      	b.n	8006384 <http_send_data_ssi+0x528>
        break;
 800637e:	bf00      	nop
 8006380:	e000      	b.n	8006384 <http_send_data_ssi+0x528>
          break;
 8006382:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800638a:	2b04      	cmp	r3, #4
 800638c:	d003      	beq.n	8006396 <http_send_data_ssi+0x53a>
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <http_send_data_ssi+0x544>
 8006396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f43f adb6 	beq.w	8005f0c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d034      	beq.n	8006414 <http_send_data_ssi+0x5b8>
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d92e      	bls.n	8006414 <http_send_data_ssi+0x5b8>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80063c4:	4293      	cmp	r3, r2
 80063c6:	dc06      	bgt.n	80063d6 <http_send_data_ssi+0x57a>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	e001      	b.n	80063da <http_send_data_ssi+0x57e>
 80063d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80063da:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6999      	ldr	r1, [r3, #24]
 80063e0:	f107 020e 	add.w	r2, r7, #14
 80063e4:	2300      	movs	r3, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff faee 	bl	80059c8 <http_write>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80063f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10d      	bne.n	8006414 <http_send_data_ssi+0x5b8>
      data_to_send = 1;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	89fa      	ldrh	r2, [r7, #14]
 8006402:	441a      	add	r2, r3
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	89fa      	ldrh	r2, [r7, #14]
 800640e:	1a9a      	subs	r2, r3, r2
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 8006414:	7dbb      	ldrb	r3, [r7, #22]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop

08006420 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <http_send+0x18>
    return 0;
 8006434:	2300      	movs	r3, #0
 8006436:	e030      	b.n	800649a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fca4 	bl	8005d90 <http_check_eof>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <http_send+0x32>
      return 0;
 800644e:	2300      	movs	r3, #0
 8006450:	e023      	b.n	800649a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d006      	beq.n	8006468 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fcfd 	bl	8005e5c <http_send_data_ssi>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
 8006466:	e005      	b.n	8006474 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fcc0 	bl	8005df0 <http_send_data_nonssi>
 8006470:	4603      	mov	r3, r0
 8006472:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10d      	bne.n	8006498 <http_send+0x78>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fa13 	bl	80058ac <fs_bytes_left>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc05      	bgt.n	8006498 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff fb53 	bl	8005b3a <http_eof>
    return 0;
 8006494:	2300      	movs	r3, #0
 8006496:	e000      	b.n	800649a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006524 <http_get_404_file+0x80>)
 80064b2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7ff f9ad 	bl	800581c <fs_open>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d024      	beq.n	8006518 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	4a15      	ldr	r2, [pc, #84]	@ (8006528 <http_get_404_file+0x84>)
 80064d2:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f7ff f99d 	bl	800581c <fs_open>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80064e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d014      	beq.n	8006518 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	4a0e      	ldr	r2, [pc, #56]	@ (800652c <http_get_404_file+0x88>)
 80064f2:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7ff f98d 	bl	800581c <fs_open>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
        return NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	e000      	b.n	800651a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006518:	687b      	ldr	r3, [r7, #4]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	08014f1c 	.word	0x08014f1c
 8006528:	08014f28 	.word	0x08014f28
 800652c:	08014f34 	.word	0x08014f34

08006530 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	@ 0x38
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <http_parse_request+0x24>
 8006546:	4b65      	ldr	r3, [pc, #404]	@ (80066dc <http_parse_request+0x1ac>)
 8006548:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800654c:	4964      	ldr	r1, [pc, #400]	@ (80066e0 <http_parse_request+0x1b0>)
 800654e:	4865      	ldr	r0, [pc, #404]	@ (80066e4 <http_parse_request+0x1b4>)
 8006550:	f00d fc3c 	bl	8013dcc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <http_parse_request+0x38>
 800655a:	4b60      	ldr	r3, [pc, #384]	@ (80066dc <http_parse_request+0x1ac>)
 800655c:	f240 72af 	movw	r2, #1967	@ 0x7af
 8006560:	4961      	ldr	r1, [pc, #388]	@ (80066e8 <http_parse_request+0x1b8>)
 8006562:	4860      	ldr	r0, [pc, #384]	@ (80066e4 <http_parse_request+0x1b4>)
 8006564:	f00d fc32 	bl	8013dcc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d103      	bne.n	8006578 <http_parse_request+0x48>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006578:	f06f 0307 	mvn.w	r3, #7
 800657c:	e0a9      	b.n	80066d2 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658a:	621a      	str	r2, [r3, #32]
 800658c:	e005      	b.n	800659a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006594:	4618      	mov	r0, r3
 8006596:	f002 f96b 	bl	8008870 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800659a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800659c:	f002 f946 	bl	800882c <pbuf_ref>

  if (hs->req->next != NULL) {
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d012      	beq.n	80065d0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	891b      	ldrh	r3, [r3, #8]
 80065b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bf28      	it	cs
 80065b8:	4613      	movcs	r3, r2
 80065ba:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6a18      	ldr	r0, [r3, #32]
 80065c0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80065c2:	2300      	movs	r3, #0
 80065c4:	4949      	ldr	r1, [pc, #292]	@ (80066ec <http_parse_request+0x1bc>)
 80065c6:	f002 fa8b 	bl	8008ae0 <pbuf_copy_partial>
    data = httpd_req_buf;
 80065ca:	4b48      	ldr	r3, [pc, #288]	@ (80066ec <http_parse_request+0x1bc>)
 80065cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ce:	e005      	b.n	80065dc <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	895b      	ldrh	r3, [r3, #10]
 80065da:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80065dc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d962      	bls.n	80066a8 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80065e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80065e4:	461a      	mov	r2, r3
 80065e6:	4942      	ldr	r1, [pc, #264]	@ (80066f0 <http_parse_request+0x1c0>)
 80065e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80065ea:	f000 fcde 	bl	8006faa <lwip_strnstr>
 80065ee:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d058      	beq.n	80066a8 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80065fa:	2204      	movs	r2, #4
 80065fc:	493d      	ldr	r1, [pc, #244]	@ (80066f4 <http_parse_request+0x1c4>)
 80065fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006600:	f00d fc5e 	bl	8013ec0 <strncmp>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d116      	bne.n	8006638 <http_parse_request+0x108>
        sp1 = data + 3;
 800660a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660c:	3303      	adds	r3, #3
 800660e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	b29b      	uxth	r3, r3
 800661a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	8b7a      	ldrh	r2, [r7, #26]
 8006626:	4934      	ldr	r1, [pc, #208]	@ (80066f8 <http_parse_request+0x1c8>)
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fcbe 	bl	8006faa <lwip_strnstr>
 800662e:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d111      	bne.n	800665a <http_parse_request+0x12a>
 8006636:	e006      	b.n	8006646 <http_parse_request+0x116>
        data[4] = 0;
 8006638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663a:	3304      	adds	r3, #4
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006640:	f06f 030f 	mvn.w	r3, #15
 8006644:	e045      	b.n	80066d2 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3301      	adds	r3, #1
 800664a:	8b7a      	ldrh	r2, [r7, #26]
 800664c:	4928      	ldr	r1, [pc, #160]	@ (80066f0 <http_parse_request+0x1c0>)
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fcab 	bl	8006faa <lwip_strnstr>
 8006654:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8006656:	2301      	movs	r3, #1
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	3301      	adds	r3, #1
 800665e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01e      	beq.n	80066a8 <http_parse_request+0x178>
 800666a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	429a      	cmp	r2, r3
 8006670:	d91a      	bls.n	80066a8 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006672:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006674:	461a      	mov	r2, r3
 8006676:	4921      	ldr	r1, [pc, #132]	@ (80066fc <http_parse_request+0x1cc>)
 8006678:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800667a:	f000 fc96 	bl	8006faa <lwip_strnstr>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d011      	beq.n	80066a8 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006690:	8b3b      	ldrh	r3, [r7, #24]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	2200      	movs	r2, #0
 8006698:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800669a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800669c:	6979      	ldr	r1, [r7, #20]
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 f880 	bl	80067a4 <http_find_file>
 80066a4:	4603      	mov	r3, r0
 80066a6:	e014      	b.n	80066d2 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f002 f8a5 	bl	80087fc <pbuf_clen>
 80066b2:	4603      	mov	r3, r0
 80066b4:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	891b      	ldrh	r3, [r3, #8]
 80066bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c0:	d205      	bcs.n	80066ce <http_parse_request+0x19e>
 80066c2:	8a7b      	ldrh	r3, [r7, #18]
 80066c4:	2b05      	cmp	r3, #5
 80066c6:	d802      	bhi.n	80066ce <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80066c8:	f06f 0304 	mvn.w	r3, #4
 80066cc:	e001      	b.n	80066d2 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80066ce:	f06f 030f 	mvn.w	r3, #15
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3738      	adds	r7, #56	@ 0x38
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	08014e18 	.word	0x08014e18
 80066e0:	08014f40 	.word	0x08014f40
 80066e4:	08014e60 	.word	0x08014e60
 80066e8:	08014e88 	.word	0x08014e88
 80066ec:	20005248 	.word	0x20005248
 80066f0:	08014f4c 	.word	0x08014f4c
 80066f4:	08014f50 	.word	0x08014f50
 80066f8:	08014f58 	.word	0x08014f58
 80066fc:	08014f5c 	.word	0x08014f5c

08006700 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800670a:	2300      	movs	r3, #0
 800670c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d040      	beq.n	8006796 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8006718:	213f      	movs	r1, #63	@ 0x3f
 800671a:	6838      	ldr	r0, [r7, #0]
 800671c:	f00d fbc3 	bl	8013ea6 <strchr>
 8006720:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	613b      	str	r3, [r7, #16]
    ext = uri;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006736:	212e      	movs	r1, #46	@ 0x2e
 8006738:	6938      	ldr	r0, [r7, #16]
 800673a:	f00d fbb4 	bl	8013ea6 <strchr>
 800673e:	6138      	str	r0, [r7, #16]
 8006740:	e009      	b.n	8006756 <http_uri_is_ssi+0x56>
      ext = sub;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	617b      	str	r3, [r7, #20]
      sub++;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800674c:	212e      	movs	r1, #46	@ 0x2e
 800674e:	6938      	ldr	r0, [r7, #16]
 8006750:	f00d fba9 	bl	8013ea6 <strchr>
 8006754:	6138      	str	r0, [r7, #16]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1f2      	bne.n	8006742 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e010      	b.n	8006784 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8006762:	4a0f      	ldr	r2, [pc, #60]	@ (80067a0 <http_uri_is_ssi+0xa0>)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800676a:	4619      	mov	r1, r3
 800676c:	6978      	ldr	r0, [r7, #20]
 800676e:	f000 fc52 	bl	8007016 <lwip_stricmp>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006778:	2301      	movs	r3, #1
 800677a:	76fb      	strb	r3, [r7, #27]
        break;
 800677c:	e005      	b.n	800678a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3301      	adds	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d9eb      	bls.n	8006762 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <http_uri_is_ssi+0x96>
      *param = '?';
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	223f      	movs	r2, #63	@ 0x3f
 8006794:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8006796:	7efb      	ldrb	r3, [r7, #27]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	080180d8 	.word	0x080180d8

080067a4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b093      	sub	sp, #76	@ 0x4c
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7f9 fd47 	bl	8000254 <strlen>
 80067c6:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d072      	beq.n	80068b4 <http_find_file+0x110>
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	3b01      	subs	r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80067da:	d16b      	bne.n	80068b4 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80067dc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80067de:	4a80      	ldr	r2, [pc, #512]	@ (80069e0 <http_find_file+0x23c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d102      	bne.n	80067ea <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d164      	bne.n	80068b4 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80067f0:	bf28      	it	cs
 80067f2:	233f      	movcs	r3, #63	@ 0x3f
 80067f4:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	4619      	mov	r1, r3
 8006802:	4877      	ldr	r0, [pc, #476]	@ (80069e0 <http_find_file+0x23c>)
 8006804:	f00d fbe3 	bl	8013fce <memcpy>
      http_uri_buf[copy_len] = 0;
 8006808:	4a75      	ldr	r2, [pc, #468]	@ (80069e0 <http_find_file+0x23c>)
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	4413      	add	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006812:	2300      	movs	r3, #0
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006816:	e04a      	b.n	80068ae <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d028      	beq.n	8006870 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006824:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01e      	beq.n	800686a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800682c:	4a6d      	ldr	r2, [pc, #436]	@ (80069e4 <http_find_file+0x240>)
 800682e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006834:	4618      	mov	r0, r3
 8006836:	f7f9 fd0d 	bl	8000254 <strlen>
 800683a:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4293      	cmp	r3, r2
 8006842:	bf28      	it	cs
 8006844:	4613      	movcs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	4a65      	ldr	r2, [pc, #404]	@ (80069e0 <http_find_file+0x23c>)
 800684c:	1898      	adds	r0, r3, r2
 800684e:	4a65      	ldr	r2, [pc, #404]	@ (80069e4 <http_find_file+0x240>)
 8006850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006852:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4619      	mov	r1, r3
 800685a:	f00d fbb8 	bl	8013fce <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	4a5e      	ldr	r2, [pc, #376]	@ (80069e0 <http_find_file+0x23c>)
 8006866:	2100      	movs	r1, #0
 8006868:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800686a:	4b5d      	ldr	r3, [pc, #372]	@ (80069e0 <http_find_file+0x23c>)
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686e:	e004      	b.n	800687a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006870:	4a5c      	ldr	r2, [pc, #368]	@ (80069e4 <http_find_file+0x240>)
 8006872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006878:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe ffcc 	bl	800581c <fs_open>
 8006884:	4603      	mov	r3, r0
 8006886:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8006888:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <http_find_file+0x104>
        uri = file_name;
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8006898:	4a52      	ldr	r2, [pc, #328]	@ (80069e4 <http_find_file+0x240>)
 800689a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	4413      	add	r3, r2
 80068a0:	791b      	ldrb	r3, [r3, #4]
 80068a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 80068a6:	e005      	b.n	80068b4 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80068a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068aa:	3301      	adds	r3, #1
 80068ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d9b1      	bls.n	8006818 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d176      	bne.n	80069a8 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	213f      	movs	r1, #63	@ 0x3f
 80068be:	4618      	mov	r0, r3
 80068c0:	f00d faf1 	bl	8013ea6 <strchr>
 80068c4:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80068cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
      params++;
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d4:	3301      	adds	r3, #1
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80068d8:	4b43      	ldr	r3, [pc, #268]	@ (80069e8 <http_find_file+0x244>)
 80068da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068de:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80068e0:	4b42      	ldr	r3, [pc, #264]	@ (80069ec <http_find_file+0x248>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d034      	beq.n	8006952 <http_find_file+0x1ae>
 80068e8:	4b41      	ldr	r3, [pc, #260]	@ (80069f0 <http_find_file+0x24c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d030      	beq.n	8006952 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 80068f0:	2300      	movs	r3, #0
 80068f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f4:	e028      	b.n	8006948 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80068f6:	68b8      	ldr	r0, [r7, #8]
 80068f8:	4b3d      	ldr	r3, [pc, #244]	@ (80069f0 <http_find_file+0x24c>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	4413      	add	r3, r2
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	f7f9 fc9b 	bl	8000240 <strcmp>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d118      	bne.n	8006942 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006910:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff f91e 	bl	8005b54 <extract_uri_parameters>
 8006918:	4603      	mov	r3, r0
 800691a:	4a33      	ldr	r2, [pc, #204]	@ (80069e8 <http_find_file+0x244>)
 800691c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800691e:	4b34      	ldr	r3, [pc, #208]	@ (80069f0 <http_find_file+0x24c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	685c      	ldr	r4, [r3, #4]
 800692a:	4b2f      	ldr	r3, [pc, #188]	@ (80069e8 <http_find_file+0x244>)
 800692c:	6819      	ldr	r1, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                         hs->param_vals);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3370      	adds	r3, #112	@ 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800693a:	47a0      	blx	r4
 800693c:	4603      	mov	r3, r0
 800693e:	60bb      	str	r3, [r7, #8]
          break;
 8006940:	e007      	b.n	8006952 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	3301      	adds	r3, #1
 8006946:	633b      	str	r3, [r7, #48]	@ 0x30
 8006948:	4b28      	ldr	r3, [pc, #160]	@ (80069ec <http_find_file+0x248>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800694e:	429a      	cmp	r2, r3
 8006950:	dbd1      	blt.n	80068f6 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe ff5f 	bl	800581c <fs_open>
 800695e:	4603      	mov	r3, r0
 8006960:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800696e:	e006      	b.n	800697e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006970:	f107 0308 	add.w	r3, r7, #8
 8006974:	4619      	mov	r1, r3
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fd94 	bl	80064a4 <http_get_404_file>
 800697c:	63b8      	str	r0, [r7, #56]	@ 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800697e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d011      	beq.n	80069a8 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	7c1b      	ldrb	r3, [r3, #16]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <http_find_file+0x1f4>
        tag_check = 1;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006996:	e007      	b.n	80069a8 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4619      	mov	r1, r3
 800699c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800699e:	f7ff feaf 	bl	8006700 <http_uri_is_ssi>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fd75 	bl	80064a4 <http_get_404_file>
 80069ba:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f810 	bl	80069f4 <http_init_file>
 80069d4:	4603      	mov	r3, r0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3744      	adds	r7, #68	@ 0x44
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd90      	pop	{r4, r7, pc}
 80069de:	bf00      	nop
 80069e0:	20005648 	.word	0x20005648
 80069e4:	080180ec 	.word	0x080180ec
 80069e8:	2000569c 	.word	0x2000569c
 80069ec:	20005698 	.word	0x20005698
 80069f0:	20005694 	.word	0x20005694

080069f4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d07d      	beq.n	8006b04 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d106      	bne.n	8006a1e <http_init_file+0x2a>
 8006a10:	4b45      	ldr	r3, [pc, #276]	@ (8006b28 <http_init_file+0x134>)
 8006a12:	f640 120b 	movw	r2, #2315	@ 0x90b
 8006a16:	4945      	ldr	r1, [pc, #276]	@ (8006b2c <http_init_file+0x138>)
 8006a18:	4845      	ldr	r0, [pc, #276]	@ (8006b30 <http_init_file+0x13c>)
 8006a1a:	f00d f9d7 	bl	8013dcc <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8006a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01c      	beq.n	8006a60 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8006a26:	f7fe ff50 	bl	80058ca <http_ssi_state_alloc>
 8006a2a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2200      	movs	r2, #0
 8006a36:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        ssi->parsed = file->data;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da06      	bge.n	8006a84 <http_init_file+0x90>
 8006a76:	4b2c      	ldr	r3, [pc, #176]	@ (8006b28 <http_init_file+0x134>)
 8006a78:	f640 1234 	movw	r2, #2356	@ 0x934
 8006a7c:	492d      	ldr	r1, [pc, #180]	@ (8006b34 <http_init_file+0x140>)
 8006a7e:	482c      	ldr	r0, [pc, #176]	@ (8006b30 <http_init_file+0x13c>)
 8006a80:	f00d f9a4 	bl	8013dcc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	7c1b      	ldrb	r3, [r3, #16]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <http_init_file+0xbe>
 8006aa4:	4b20      	ldr	r3, [pc, #128]	@ (8006b28 <http_init_file+0x134>)
 8006aa6:	f640 1243 	movw	r2, #2371	@ 0x943
 8006aaa:	4923      	ldr	r1, [pc, #140]	@ (8006b38 <http_init_file+0x144>)
 8006aac:	4820      	ldr	r0, [pc, #128]	@ (8006b30 <http_init_file+0x13c>)
 8006aae:	f00d f98d 	bl	8013dcc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d032      	beq.n	8006b1e <http_init_file+0x12a>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	7c1b      	ldrb	r3, [r3, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d02b      	beq.n	8006b1e <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6998      	ldr	r0, [r3, #24]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	461a      	mov	r2, r3
 8006ad0:	491a      	ldr	r1, [pc, #104]	@ (8006b3c <http_init_file+0x148>)
 8006ad2:	f000 fa6a 	bl	8006faa <lwip_strnstr>
 8006ad6:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01f      	beq.n	8006b1e <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	1d1a      	adds	r2, r3, #4
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b02:	e00c      	b.n	8006b1e <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08014e18 	.word	0x08014e18
 8006b2c:	08014f64 	.word	0x08014f64
 8006b30:	08014e60 	.word	0x08014e60
 8006b34:	08014f78 	.word	0x08014f78
 8006b38:	08014f98 	.word	0x08014f98
 8006b3c:	08014f5c 	.word	0x08014f5c

08006b40 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <http_err+0x1c>
    http_state_free(hs);
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f7fe ff24 	bl	80059a4 <http_state_free>
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <http_sent+0x1c>
    return ERR_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e008      	b.n	8006b92 <http_sent+0x2e>
  }

  hs->retries = 0;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	68b8      	ldr	r0, [r7, #8]
 8006b8c:	f7ff fc48 	bl	8006420 <http_send>

  return ERR_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d107      	bne.n	8006bbe <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006bae:	2100      	movs	r1, #0
 8006bb0:	6838      	ldr	r0, [r7, #0]
 8006bb2:	f7fe ffb3 	bl	8005b1c <http_close_conn>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e021      	b.n	8006c02 <http_poll+0x68>
  } else {
    hs->retries++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d105      	bne.n	8006be4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	6838      	ldr	r0, [r7, #0]
 8006bdc:	f7fe ff9e 	bl	8005b1c <http_close_conn>
      return ERR_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e00e      	b.n	8006c02 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8006bec:	68f9      	ldr	r1, [r7, #12]
 8006bee:	6838      	ldr	r0, [r7, #0]
 8006bf0:	f7ff fc16 	bl	8006420 <http_send>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f007 f8f4 	bl	800dde8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <http_recv+0x26>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <http_recv+0x26>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d111      	bne.n	8006c56 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	891b      	ldrh	r3, [r3, #8]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	68b8      	ldr	r0, [r7, #8]
 8006c40:	f002 fcc6 	bl	80095d0 <tcp_recved>
      pbuf_free(p);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fd51 	bl	80086ec <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f7fe ff65 	bl	8005b1c <http_close_conn>
    return ERR_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e055      	b.n	8006d02 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	891b      	ldrh	r3, [r3, #8]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f002 fcb7 	bl	80095d0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d147      	bne.n	8006cfa <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	6979      	ldr	r1, [r7, #20]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fc5e 	bl	8006530 <http_parse_request>
 8006c74:	4603      	mov	r3, r0
 8006c76:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006c78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d015      	beq.n	8006cac <http_recv+0xa0>
 8006c80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c84:	f113 0f05 	cmn.w	r3, #5
 8006c88:	d010      	beq.n	8006cac <http_recv+0xa0>
 8006c8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c8e:	f113 0f10 	cmn.w	r3, #16
 8006c92:	d00b      	beq.n	8006cac <http_recv+0xa0>
 8006c94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c98:	f113 0f08 	cmn.w	r3, #8
 8006c9c:	d006      	beq.n	8006cac <http_recv+0xa0>
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d0c <http_recv+0x100>)
 8006ca0:	f640 2204 	movw	r2, #2564	@ 0xa04
 8006ca4:	491a      	ldr	r1, [pc, #104]	@ (8006d10 <http_recv+0x104>)
 8006ca6:	481b      	ldr	r0, [pc, #108]	@ (8006d14 <http_recv+0x108>)
 8006ca8:	f00d f890 	bl	8013dcc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cb0:	f113 0f05 	cmn.w	r3, #5
 8006cb4:	d00b      	beq.n	8006cce <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <http_recv+0xc2>
          pbuf_free(hs->req);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fd12 	bl	80086ec <pbuf_free>
          hs->req = NULL;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fd0c 	bl	80086ec <pbuf_free>
      if (parsed == ERR_OK) {
 8006cd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	68b8      	ldr	r0, [r7, #8]
 8006ce0:	f7ff fb9e 	bl	8006420 <http_send>
 8006ce4:	e00c      	b.n	8006d00 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8006ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006cea:	f113 0f10 	cmn.w	r3, #16
 8006cee:	d107      	bne.n	8006d00 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8006cf0:	6979      	ldr	r1, [r7, #20]
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f7fe ff12 	bl	8005b1c <http_close_conn>
 8006cf8:	e002      	b.n	8006d00 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fcf6 	bl	80086ec <pbuf_free>
    }
  }
  return ERR_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	08014e18 	.word	0x08014e18
 8006d10:	08014fc4 	.word	0x08014fc4
 8006d14:	08014e60 	.word	0x08014e60

08006d18 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <http_accept+0x1c>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <http_accept+0x22>
    return ERR_VAL;
 8006d34:	f06f 0305 	mvn.w	r3, #5
 8006d38:	e025      	b.n	8006d86 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	68b8      	ldr	r0, [r7, #8]
 8006d3e:	f003 f92d 	bl	8009f9c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8006d42:	f7fe fdf1 	bl	8005928 <http_state_alloc>
 8006d46:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d52:	e018      	b.n	8006d86 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006d5a:	6979      	ldr	r1, [r7, #20]
 8006d5c:	68b8      	ldr	r0, [r7, #8]
 8006d5e:	f003 fb1d 	bl	800a39c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006d62:	490b      	ldr	r1, [pc, #44]	@ (8006d90 <http_accept+0x78>)
 8006d64:	68b8      	ldr	r0, [r7, #8]
 8006d66:	f003 fb2b 	bl	800a3c0 <tcp_recv>
  altcp_err(pcb, http_err);
 8006d6a:	490a      	ldr	r1, [pc, #40]	@ (8006d94 <http_accept+0x7c>)
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	f003 fb6b 	bl	800a448 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006d72:	2204      	movs	r2, #4
 8006d74:	4908      	ldr	r1, [pc, #32]	@ (8006d98 <http_accept+0x80>)
 8006d76:	68b8      	ldr	r0, [r7, #8]
 8006d78:	f003 fba0 	bl	800a4bc <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006d7c:	4907      	ldr	r1, [pc, #28]	@ (8006d9c <http_accept+0x84>)
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f003 fb40 	bl	800a404 <tcp_sent>

  return ERR_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	08006c0d 	.word	0x08006c0d
 8006d94:	08006b41 	.word	0x08006b41
 8006d98:	08006b9b 	.word	0x08006b9b
 8006d9c:	08006b65 	.word	0x08006b65

08006da0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d029      	beq.n	8006e06 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006db2:	2101      	movs	r1, #1
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f003 f8f1 	bl	8009f9c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006dba:	887b      	ldrh	r3, [r7, #2]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4914      	ldr	r1, [pc, #80]	@ (8006e10 <httpd_init_pcb+0x70>)
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fa37 	bl	8009234 <tcp_bind>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <httpd_init_pcb+0x40>
 8006dd2:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <httpd_init_pcb+0x74>)
 8006dd4:	f640 2257 	movw	r2, #2647	@ 0xa57
 8006dd8:	490f      	ldr	r1, [pc, #60]	@ (8006e18 <httpd_init_pcb+0x78>)
 8006dda:	4810      	ldr	r0, [pc, #64]	@ (8006e1c <httpd_init_pcb+0x7c>)
 8006ddc:	f00c fff6 	bl	8013dcc <iprintf>
    pcb = altcp_listen(pcb);
 8006de0:	21ff      	movs	r1, #255	@ 0xff
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fade 	bl	80093a4 <tcp_listen_with_backlog>
 8006de8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <httpd_init_pcb+0x5e>
 8006df0:	4b08      	ldr	r3, [pc, #32]	@ (8006e14 <httpd_init_pcb+0x74>)
 8006df2:	f640 2259 	movw	r2, #2649	@ 0xa59
 8006df6:	490a      	ldr	r1, [pc, #40]	@ (8006e20 <httpd_init_pcb+0x80>)
 8006df8:	4808      	ldr	r0, [pc, #32]	@ (8006e1c <httpd_init_pcb+0x7c>)
 8006dfa:	f00c ffe7 	bl	8013dcc <iprintf>
    altcp_accept(pcb, http_accept);
 8006dfe:	4909      	ldr	r1, [pc, #36]	@ (8006e24 <httpd_init_pcb+0x84>)
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f003 fb43 	bl	800a48c <tcp_accept>
  }
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	08018204 	.word	0x08018204
 8006e14:	08014e18 	.word	0x08014e18
 8006e18:	08014ff0 	.word	0x08014ff0
 8006e1c:	08014e60 	.word	0x08014e60
 8006e20:	0801500c 	.word	0x0801500c
 8006e24:	08006d19 	.word	0x08006d19

08006e28 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006e2e:	202e      	movs	r0, #46	@ 0x2e
 8006e30:	f003 faa6 	bl	800a380 <tcp_new_ip_type>
 8006e34:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <httpd_init+0x22>
 8006e3c:	4b07      	ldr	r3, [pc, #28]	@ (8006e5c <httpd_init+0x34>)
 8006e3e:	f640 2272 	movw	r2, #2674	@ 0xa72
 8006e42:	4907      	ldr	r1, [pc, #28]	@ (8006e60 <httpd_init+0x38>)
 8006e44:	4807      	ldr	r0, [pc, #28]	@ (8006e64 <httpd_init+0x3c>)
 8006e46:	f00c ffc1 	bl	8013dcc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006e4a:	2150      	movs	r1, #80	@ 0x50
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ffa7 	bl	8006da0 <httpd_init_pcb>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08014e18 	.word	0x08014e18
 8006e60:	0801502c 	.word	0x0801502c
 8006e64:	08014e60 	.word	0x08014e60

08006e68 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <http_set_ssi_handler+0x20>
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <http_set_ssi_handler+0x64>)
 8006e7c:	f640 2297 	movw	r2, #2711	@ 0xa97
 8006e80:	4913      	ldr	r1, [pc, #76]	@ (8006ed0 <http_set_ssi_handler+0x68>)
 8006e82:	4814      	ldr	r0, [pc, #80]	@ (8006ed4 <http_set_ssi_handler+0x6c>)
 8006e84:	f00c ffa2 	bl	8013dcc <iprintf>
  httpd_ssi_handler = ssi_handler;
 8006e88:	4a13      	ldr	r2, [pc, #76]	@ (8006ed8 <http_set_ssi_handler+0x70>)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <http_set_ssi_handler+0x3a>
 8006e94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <http_set_ssi_handler+0x64>)
 8006e96:	f640 229e 	movw	r2, #2718	@ 0xa9e
 8006e9a:	4910      	ldr	r1, [pc, #64]	@ (8006edc <http_set_ssi_handler+0x74>)
 8006e9c:	480d      	ldr	r0, [pc, #52]	@ (8006ed4 <http_set_ssi_handler+0x6c>)
 8006e9e:	f00c ff95 	bl	8013dcc <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dc06      	bgt.n	8006eb6 <http_set_ssi_handler+0x4e>
 8006ea8:	4b08      	ldr	r3, [pc, #32]	@ (8006ecc <http_set_ssi_handler+0x64>)
 8006eaa:	f640 229f 	movw	r2, #2719	@ 0xa9f
 8006eae:	490c      	ldr	r1, [pc, #48]	@ (8006ee0 <http_set_ssi_handler+0x78>)
 8006eb0:	4808      	ldr	r0, [pc, #32]	@ (8006ed4 <http_set_ssi_handler+0x6c>)
 8006eb2:	f00c ff8b 	bl	8013dcc <iprintf>

  httpd_tags = tags;
 8006eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8006ee4 <http_set_ssi_handler+0x7c>)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8006ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee8 <http_set_ssi_handler+0x80>)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08014e18 	.word	0x08014e18
 8006ed0:	08015048 	.word	0x08015048
 8006ed4:	08014e60 	.word	0x08014e60
 8006ed8:	20005688 	.word	0x20005688
 8006edc:	08015060 	.word	0x08015060
 8006ee0:	08015070 	.word	0x08015070
 8006ee4:	20005690 	.word	0x20005690
 8006ee8:	2000568c 	.word	0x2000568c

08006eec <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <http_set_cgi_handlers+0x1e>
 8006efc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <http_set_cgi_handlers+0x48>)
 8006efe:	f640 22b2 	movw	r2, #2738	@ 0xab2
 8006f02:	490d      	ldr	r1, [pc, #52]	@ (8006f38 <http_set_cgi_handlers+0x4c>)
 8006f04:	480d      	ldr	r0, [pc, #52]	@ (8006f3c <http_set_cgi_handlers+0x50>)
 8006f06:	f00c ff61 	bl	8013dcc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc06      	bgt.n	8006f1e <http_set_cgi_handlers+0x32>
 8006f10:	4b08      	ldr	r3, [pc, #32]	@ (8006f34 <http_set_cgi_handlers+0x48>)
 8006f12:	f640 22b3 	movw	r2, #2739	@ 0xab3
 8006f16:	490a      	ldr	r1, [pc, #40]	@ (8006f40 <http_set_cgi_handlers+0x54>)
 8006f18:	4808      	ldr	r0, [pc, #32]	@ (8006f3c <http_set_cgi_handlers+0x50>)
 8006f1a:	f00c ff57 	bl	8013dcc <iprintf>

  httpd_cgis = cgis;
 8006f1e:	4a09      	ldr	r2, [pc, #36]	@ (8006f44 <http_set_cgi_handlers+0x58>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8006f24:	4a08      	ldr	r2, [pc, #32]	@ (8006f48 <http_set_cgi_handlers+0x5c>)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6013      	str	r3, [r2, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	08014e18 	.word	0x08014e18
 8006f38:	08015088 	.word	0x08015088
 8006f3c:	08014e60 	.word	0x08014e60
 8006f40:	08015098 	.word	0x08015098
 8006f44:	20005694 	.word	0x20005694
 8006f48:	20005698 	.word	0x20005698

08006f4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	b21a      	sxth	r2, r3
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	b21b      	sxth	r3, r3
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b21b      	sxth	r3, r3
 8006f6a:	b29b      	uxth	r3, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	061a      	lsls	r2, r3, #24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	0e1b      	lsrs	r3, r3, #24
 8006f9c:	4313      	orrs	r3, r2
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8006fb6:	68b8      	ldr	r0, [r7, #8]
 8006fb8:	f7f9 f94c 	bl	8000254 <strlen>
 8006fbc:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	e022      	b.n	800700e <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e012      	b.n	8006ff4 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	781a      	ldrb	r2, [r3, #0]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d109      	bne.n	8006fee <lwip_strnstr+0x44>
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	6978      	ldr	r0, [r7, #20]
 8006fe0:	f00c ff6e 	bl	8013ec0 <strncmp>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	e00f      	b.n	800700e <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <lwip_strnstr+0x62>
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	441a      	add	r2, r3
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	440b      	add	r3, r1
 8007008:	429a      	cmp	r2, r3
 800700a:	d9e0      	bls.n	8006fce <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	603a      	str	r2, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8007034:	7bfa      	ldrb	r2, [r7, #15]
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	429a      	cmp	r2, r3
 800703a:	d016      	beq.n	800706a <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	f043 0320 	orr.w	r3, r3, #32
 8007042:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8007044:	7b7b      	ldrb	r3, [r7, #13]
 8007046:	2b60      	cmp	r3, #96	@ 0x60
 8007048:	d90c      	bls.n	8007064 <lwip_stricmp+0x4e>
 800704a:	7b7b      	ldrb	r3, [r7, #13]
 800704c:	2b7a      	cmp	r3, #122	@ 0x7a
 800704e:	d809      	bhi.n	8007064 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	f043 0320 	orr.w	r3, r3, #32
 8007056:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8007058:	7b7a      	ldrb	r2, [r7, #13]
 800705a:	7b3b      	ldrb	r3, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d003      	beq.n	8007068 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8007060:	2301      	movs	r3, #1
 8007062:	e006      	b.n	8007072 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8007064:	2301      	movs	r3, #1
 8007066:	e004      	b.n	8007072 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8007068:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1d7      	bne.n	8007020 <lwip_stricmp+0xa>
  return 0;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007088:	f000 f8d4 	bl	8007234 <mem_init>
  memp_init();
 800708c:	f000 fbd6 	bl	800783c <memp_init>
  pbuf_init();
  netif_init();
 8007090:	f000 fcd4 	bl	8007a3c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007094:	f007 ff68 	bl	800ef68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007098:	f001 fdc6 	bl	8008c28 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800709c:	f007 feda 	bl	800ee54 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80070b2:	4b05      	ldr	r3, [pc, #20]	@ (80070c8 <ptr_to_mem+0x20>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	4413      	add	r3, r2
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	200056b8 	.word	0x200056b8

080070cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80070d4:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <mem_to_ptr+0x20>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	b29b      	uxth	r3, r3
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	200056b8 	.word	0x200056b8

080070f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80070f8:	4b45      	ldr	r3, [pc, #276]	@ (8007210 <plug_holes+0x120>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d206      	bcs.n	8007110 <plug_holes+0x20>
 8007102:	4b44      	ldr	r3, [pc, #272]	@ (8007214 <plug_holes+0x124>)
 8007104:	f240 12df 	movw	r2, #479	@ 0x1df
 8007108:	4943      	ldr	r1, [pc, #268]	@ (8007218 <plug_holes+0x128>)
 800710a:	4844      	ldr	r0, [pc, #272]	@ (800721c <plug_holes+0x12c>)
 800710c:	f00c fe5e 	bl	8013dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007110:	4b43      	ldr	r3, [pc, #268]	@ (8007220 <plug_holes+0x130>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d306      	bcc.n	8007128 <plug_holes+0x38>
 800711a:	4b3e      	ldr	r3, [pc, #248]	@ (8007214 <plug_holes+0x124>)
 800711c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007120:	4940      	ldr	r1, [pc, #256]	@ (8007224 <plug_holes+0x134>)
 8007122:	483e      	ldr	r0, [pc, #248]	@ (800721c <plug_holes+0x12c>)
 8007124:	f00c fe52 	bl	8013dcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <plug_holes+0x4e>
 8007130:	4b38      	ldr	r3, [pc, #224]	@ (8007214 <plug_holes+0x124>)
 8007132:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007136:	493c      	ldr	r1, [pc, #240]	@ (8007228 <plug_holes+0x138>)
 8007138:	4838      	ldr	r0, [pc, #224]	@ (800721c <plug_holes+0x12c>)
 800713a:	f00c fe47 	bl	8013dcc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007146:	d906      	bls.n	8007156 <plug_holes+0x66>
 8007148:	4b32      	ldr	r3, [pc, #200]	@ (8007214 <plug_holes+0x124>)
 800714a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800714e:	4937      	ldr	r1, [pc, #220]	@ (800722c <plug_holes+0x13c>)
 8007150:	4832      	ldr	r0, [pc, #200]	@ (800721c <plug_holes+0x12c>)
 8007152:	f00c fe3b 	bl	8013dcc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff ffa4 	bl	80070a8 <ptr_to_mem>
 8007160:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	429a      	cmp	r2, r3
 8007168:	d024      	beq.n	80071b4 <plug_holes+0xc4>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d120      	bne.n	80071b4 <plug_holes+0xc4>
 8007172:	4b2b      	ldr	r3, [pc, #172]	@ (8007220 <plug_holes+0x130>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	429a      	cmp	r2, r3
 800717a:	d01b      	beq.n	80071b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800717c:	4b2c      	ldr	r3, [pc, #176]	@ (8007230 <plug_holes+0x140>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	429a      	cmp	r2, r3
 8007184:	d102      	bne.n	800718c <plug_holes+0x9c>
      lfree = mem;
 8007186:	4a2a      	ldr	r2, [pc, #168]	@ (8007230 <plug_holes+0x140>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	881a      	ldrh	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800719c:	d00a      	beq.n	80071b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff ff80 	bl	80070a8 <ptr_to_mem>
 80071a8:	4604      	mov	r4, r0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff ff8e 	bl	80070cc <mem_to_ptr>
 80071b0:	4603      	mov	r3, r0
 80071b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff ff75 	bl	80070a8 <ptr_to_mem>
 80071be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d01f      	beq.n	8007208 <plug_holes+0x118>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	791b      	ldrb	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11b      	bne.n	8007208 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80071d0:	4b17      	ldr	r3, [pc, #92]	@ (8007230 <plug_holes+0x140>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d102      	bne.n	80071e0 <plug_holes+0xf0>
      lfree = pmem;
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <plug_holes+0x140>)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071f0:	d00a      	beq.n	8007208 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff ff56 	bl	80070a8 <ptr_to_mem>
 80071fc:	4604      	mov	r4, r0
 80071fe:	68b8      	ldr	r0, [r7, #8]
 8007200:	f7ff ff64 	bl	80070cc <mem_to_ptr>
 8007204:	4603      	mov	r3, r0
 8007206:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bd90      	pop	{r4, r7, pc}
 8007210:	200056b8 	.word	0x200056b8
 8007214:	080150b4 	.word	0x080150b4
 8007218:	080150e4 	.word	0x080150e4
 800721c:	080150fc 	.word	0x080150fc
 8007220:	200056bc 	.word	0x200056bc
 8007224:	08015124 	.word	0x08015124
 8007228:	08015140 	.word	0x08015140
 800722c:	0801515c 	.word	0x0801515c
 8007230:	200056c0 	.word	0x200056c0

08007234 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800723a:	4b16      	ldr	r3, [pc, #88]	@ (8007294 <mem_init+0x60>)
 800723c:	4a16      	ldr	r2, [pc, #88]	@ (8007298 <mem_init+0x64>)
 800723e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007240:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <mem_init+0x60>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800724c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800725a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800725e:	f7ff ff23 	bl	80070a8 <ptr_to_mem>
 8007262:	4603      	mov	r3, r0
 8007264:	4a0d      	ldr	r2, [pc, #52]	@ (800729c <mem_init+0x68>)
 8007266:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007268:	4b0c      	ldr	r3, [pc, #48]	@ (800729c <mem_init+0x68>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2201      	movs	r2, #1
 800726e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007270:	4b0a      	ldr	r3, [pc, #40]	@ (800729c <mem_init+0x68>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007278:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800727a:	4b08      	ldr	r3, [pc, #32]	@ (800729c <mem_init+0x68>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007282:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007284:	4b03      	ldr	r3, [pc, #12]	@ (8007294 <mem_init+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a05      	ldr	r2, [pc, #20]	@ (80072a0 <mem_init+0x6c>)
 800728a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800728c:	bf00      	nop
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	200056b8 	.word	0x200056b8
 8007298:	20048000 	.word	0x20048000
 800729c:	200056bc 	.word	0x200056bc
 80072a0:	200056c0 	.word	0x200056c0

080072a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff0d 	bl	80070cc <mem_to_ptr>
 80072b2:	4603      	mov	r3, r0
 80072b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff fef4 	bl	80070a8 <ptr_to_mem>
 80072c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff feee 	bl	80070a8 <ptr_to_mem>
 80072cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072d6:	d818      	bhi.n	800730a <mem_link_valid+0x66>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	885b      	ldrh	r3, [r3, #2]
 80072dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072e0:	d813      	bhi.n	800730a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80072e6:	8afa      	ldrh	r2, [r7, #22]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d004      	beq.n	80072f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	8afa      	ldrh	r2, [r7, #22]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d109      	bne.n	800730a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80072f6:	4b08      	ldr	r3, [pc, #32]	@ (8007318 <mem_link_valid+0x74>)
 80072f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d006      	beq.n	800730e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	885b      	ldrh	r3, [r3, #2]
 8007304:	8afa      	ldrh	r2, [r7, #22]
 8007306:	429a      	cmp	r2, r3
 8007308:	d001      	beq.n	800730e <mem_link_valid+0x6a>
    return 0;
 800730a:	2300      	movs	r3, #0
 800730c:	e000      	b.n	8007310 <mem_link_valid+0x6c>
  }
  return 1;
 800730e:	2301      	movs	r3, #1
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	200056bc 	.word	0x200056bc

0800731c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04c      	beq.n	80073c4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d007      	beq.n	8007344 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007334:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <mem_free+0xb0>)
 8007336:	f240 2273 	movw	r2, #627	@ 0x273
 800733a:	4925      	ldr	r1, [pc, #148]	@ (80073d0 <mem_free+0xb4>)
 800733c:	4825      	ldr	r0, [pc, #148]	@ (80073d4 <mem_free+0xb8>)
 800733e:	f00c fd45 	bl	8013dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007342:	e040      	b.n	80073c6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3b08      	subs	r3, #8
 8007348:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800734a:	4b23      	ldr	r3, [pc, #140]	@ (80073d8 <mem_free+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	d306      	bcc.n	8007362 <mem_free+0x46>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f103 020c 	add.w	r2, r3, #12
 800735a:	4b20      	ldr	r3, [pc, #128]	@ (80073dc <mem_free+0xc0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d907      	bls.n	8007372 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007362:	4b1a      	ldr	r3, [pc, #104]	@ (80073cc <mem_free+0xb0>)
 8007364:	f240 227f 	movw	r2, #639	@ 0x27f
 8007368:	491d      	ldr	r1, [pc, #116]	@ (80073e0 <mem_free+0xc4>)
 800736a:	481a      	ldr	r0, [pc, #104]	@ (80073d4 <mem_free+0xb8>)
 800736c:	f00c fd2e 	bl	8013dcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007370:	e029      	b.n	80073c6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800737a:	4b14      	ldr	r3, [pc, #80]	@ (80073cc <mem_free+0xb0>)
 800737c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007380:	4918      	ldr	r1, [pc, #96]	@ (80073e4 <mem_free+0xc8>)
 8007382:	4814      	ldr	r0, [pc, #80]	@ (80073d4 <mem_free+0xb8>)
 8007384:	f00c fd22 	bl	8013dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007388:	e01d      	b.n	80073c6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff ff8a 	bl	80072a4 <mem_link_valid>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <mem_free+0xb0>)
 8007398:	f240 2295 	movw	r2, #661	@ 0x295
 800739c:	4912      	ldr	r1, [pc, #72]	@ (80073e8 <mem_free+0xcc>)
 800739e:	480d      	ldr	r0, [pc, #52]	@ (80073d4 <mem_free+0xb8>)
 80073a0:	f00c fd14 	bl	8013dcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80073a4:	e00f      	b.n	80073c6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80073ac:	4b0f      	ldr	r3, [pc, #60]	@ (80073ec <mem_free+0xd0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d202      	bcs.n	80073bc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80073b6:	4a0d      	ldr	r2, [pc, #52]	@ (80073ec <mem_free+0xd0>)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fe97 	bl	80070f0 <plug_holes>
 80073c2:	e000      	b.n	80073c6 <mem_free+0xaa>
    return;
 80073c4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	080150b4 	.word	0x080150b4
 80073d0:	08015188 	.word	0x08015188
 80073d4:	080150fc 	.word	0x080150fc
 80073d8:	200056b8 	.word	0x200056b8
 80073dc:	200056bc 	.word	0x200056bc
 80073e0:	080151ac 	.word	0x080151ac
 80073e4:	080151c8 	.word	0x080151c8
 80073e8:	080151f0 	.word	0x080151f0
 80073ec:	200056c0 	.word	0x200056c0

080073f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80073fc:	887b      	ldrh	r3, [r7, #2]
 80073fe:	3303      	adds	r3, #3
 8007400:	b29b      	uxth	r3, r3
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007408:	8bfb      	ldrh	r3, [r7, #30]
 800740a:	2b0b      	cmp	r3, #11
 800740c:	d801      	bhi.n	8007412 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800740e:	230c      	movs	r3, #12
 8007410:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007412:	8bfb      	ldrh	r3, [r7, #30]
 8007414:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007418:	d803      	bhi.n	8007422 <mem_trim+0x32>
 800741a:	8bfa      	ldrh	r2, [r7, #30]
 800741c:	887b      	ldrh	r3, [r7, #2]
 800741e:	429a      	cmp	r2, r3
 8007420:	d201      	bcs.n	8007426 <mem_trim+0x36>
    return NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	e0cc      	b.n	80075c0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007426:	4b68      	ldr	r3, [pc, #416]	@ (80075c8 <mem_trim+0x1d8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d304      	bcc.n	800743a <mem_trim+0x4a>
 8007430:	4b66      	ldr	r3, [pc, #408]	@ (80075cc <mem_trim+0x1dc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	429a      	cmp	r2, r3
 8007438:	d306      	bcc.n	8007448 <mem_trim+0x58>
 800743a:	4b65      	ldr	r3, [pc, #404]	@ (80075d0 <mem_trim+0x1e0>)
 800743c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007440:	4964      	ldr	r1, [pc, #400]	@ (80075d4 <mem_trim+0x1e4>)
 8007442:	4865      	ldr	r0, [pc, #404]	@ (80075d8 <mem_trim+0x1e8>)
 8007444:	f00c fcc2 	bl	8013dcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007448:	4b5f      	ldr	r3, [pc, #380]	@ (80075c8 <mem_trim+0x1d8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d304      	bcc.n	800745c <mem_trim+0x6c>
 8007452:	4b5e      	ldr	r3, [pc, #376]	@ (80075cc <mem_trim+0x1dc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d301      	bcc.n	8007460 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	e0af      	b.n	80075c0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3b08      	subs	r3, #8
 8007464:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007466:	69b8      	ldr	r0, [r7, #24]
 8007468:	f7ff fe30 	bl	80070cc <mem_to_ptr>
 800746c:	4603      	mov	r3, r0
 800746e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	881a      	ldrh	r2, [r3, #0]
 8007474:	8afb      	ldrh	r3, [r7, #22]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b08      	subs	r3, #8
 800747c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800747e:	8bfa      	ldrh	r2, [r7, #30]
 8007480:	8abb      	ldrh	r3, [r7, #20]
 8007482:	429a      	cmp	r2, r3
 8007484:	d906      	bls.n	8007494 <mem_trim+0xa4>
 8007486:	4b52      	ldr	r3, [pc, #328]	@ (80075d0 <mem_trim+0x1e0>)
 8007488:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800748c:	4953      	ldr	r1, [pc, #332]	@ (80075dc <mem_trim+0x1ec>)
 800748e:	4852      	ldr	r0, [pc, #328]	@ (80075d8 <mem_trim+0x1e8>)
 8007490:	f00c fc9c 	bl	8013dcc <iprintf>
  if (newsize > size) {
 8007494:	8bfa      	ldrh	r2, [r7, #30]
 8007496:	8abb      	ldrh	r3, [r7, #20]
 8007498:	429a      	cmp	r2, r3
 800749a:	d901      	bls.n	80074a0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	e08f      	b.n	80075c0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80074a0:	8bfa      	ldrh	r2, [r7, #30]
 80074a2:	8abb      	ldrh	r3, [r7, #20]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d101      	bne.n	80074ac <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	e089      	b.n	80075c0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fdf9 	bl	80070a8 <ptr_to_mem>
 80074b6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	791b      	ldrb	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13f      	bne.n	8007540 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80074c8:	d106      	bne.n	80074d8 <mem_trim+0xe8>
 80074ca:	4b41      	ldr	r3, [pc, #260]	@ (80075d0 <mem_trim+0x1e0>)
 80074cc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80074d0:	4943      	ldr	r1, [pc, #268]	@ (80075e0 <mem_trim+0x1f0>)
 80074d2:	4841      	ldr	r0, [pc, #260]	@ (80075d8 <mem_trim+0x1e8>)
 80074d4:	f00c fc7a 	bl	8013dcc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	8bfb      	ldrh	r3, [r7, #30]
 80074e2:	4413      	add	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3308      	adds	r3, #8
 80074e8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80074ea:	4b3e      	ldr	r3, [pc, #248]	@ (80075e4 <mem_trim+0x1f4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d106      	bne.n	8007502 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80074f4:	89fb      	ldrh	r3, [r7, #14]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fdd6 	bl	80070a8 <ptr_to_mem>
 80074fc:	4603      	mov	r3, r0
 80074fe:	4a39      	ldr	r2, [pc, #228]	@ (80075e4 <mem_trim+0x1f4>)
 8007500:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff fdcf 	bl	80070a8 <ptr_to_mem>
 800750a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	2200      	movs	r2, #0
 8007510:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	89ba      	ldrh	r2, [r7, #12]
 8007516:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	8afa      	ldrh	r2, [r7, #22]
 800751c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	89fa      	ldrh	r2, [r7, #14]
 8007522:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800752c:	d047      	beq.n	80075be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fdb8 	bl	80070a8 <ptr_to_mem>
 8007538:	4602      	mov	r2, r0
 800753a:	89fb      	ldrh	r3, [r7, #14]
 800753c:	8053      	strh	r3, [r2, #2]
 800753e:	e03e      	b.n	80075be <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007540:	8bfb      	ldrh	r3, [r7, #30]
 8007542:	f103 0214 	add.w	r2, r3, #20
 8007546:	8abb      	ldrh	r3, [r7, #20]
 8007548:	429a      	cmp	r2, r3
 800754a:	d838      	bhi.n	80075be <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800754c:	8afa      	ldrh	r2, [r7, #22]
 800754e:	8bfb      	ldrh	r3, [r7, #30]
 8007550:	4413      	add	r3, r2
 8007552:	b29b      	uxth	r3, r3
 8007554:	3308      	adds	r3, #8
 8007556:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	881b      	ldrh	r3, [r3, #0]
 800755c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007560:	d106      	bne.n	8007570 <mem_trim+0x180>
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <mem_trim+0x1e0>)
 8007564:	f240 3216 	movw	r2, #790	@ 0x316
 8007568:	491d      	ldr	r1, [pc, #116]	@ (80075e0 <mem_trim+0x1f0>)
 800756a:	481b      	ldr	r0, [pc, #108]	@ (80075d8 <mem_trim+0x1e8>)
 800756c:	f00c fc2e 	bl	8013dcc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff fd98 	bl	80070a8 <ptr_to_mem>
 8007578:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800757a:	4b1a      	ldr	r3, [pc, #104]	@ (80075e4 <mem_trim+0x1f4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	429a      	cmp	r2, r3
 8007582:	d202      	bcs.n	800758a <mem_trim+0x19a>
      lfree = mem2;
 8007584:	4a17      	ldr	r2, [pc, #92]	@ (80075e4 <mem_trim+0x1f4>)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	2200      	movs	r2, #0
 800758e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	8afa      	ldrh	r2, [r7, #22]
 800759c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	89fa      	ldrh	r2, [r7, #14]
 80075a2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80075ac:	d007      	beq.n	80075be <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fd78 	bl	80070a8 <ptr_to_mem>
 80075b8:	4602      	mov	r2, r0
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80075be:	687b      	ldr	r3, [r7, #4]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	200056b8 	.word	0x200056b8
 80075cc:	200056bc 	.word	0x200056bc
 80075d0:	080150b4 	.word	0x080150b4
 80075d4:	08015224 	.word	0x08015224
 80075d8:	080150fc 	.word	0x080150fc
 80075dc:	0801523c 	.word	0x0801523c
 80075e0:	0801525c 	.word	0x0801525c
 80075e4:	200056c0 	.word	0x200056c0

080075e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80075f2:	88fb      	ldrh	r3, [r7, #6]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <mem_malloc+0x14>
    return NULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e0d9      	b.n	80077b0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	3303      	adds	r3, #3
 8007600:	b29b      	uxth	r3, r3
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007608:	8bbb      	ldrh	r3, [r7, #28]
 800760a:	2b0b      	cmp	r3, #11
 800760c:	d801      	bhi.n	8007612 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800760e:	230c      	movs	r3, #12
 8007610:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007612:	8bbb      	ldrh	r3, [r7, #28]
 8007614:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007618:	d803      	bhi.n	8007622 <mem_malloc+0x3a>
 800761a:	8bba      	ldrh	r2, [r7, #28]
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	429a      	cmp	r2, r3
 8007620:	d201      	bcs.n	8007626 <mem_malloc+0x3e>
    return NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	e0c4      	b.n	80077b0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007626:	4b64      	ldr	r3, [pc, #400]	@ (80077b8 <mem_malloc+0x1d0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fd4e 	bl	80070cc <mem_to_ptr>
 8007630:	4603      	mov	r3, r0
 8007632:	83fb      	strh	r3, [r7, #30]
 8007634:	e0b4      	b.n	80077a0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007636:	8bfb      	ldrh	r3, [r7, #30]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd35 	bl	80070a8 <ptr_to_mem>
 800763e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	791b      	ldrb	r3, [r3, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 80a4 	bne.w	8007792 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	8bfb      	ldrh	r3, [r7, #30]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f1a3 0208 	sub.w	r2, r3, #8
 8007658:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800765a:	429a      	cmp	r2, r3
 800765c:	f0c0 8099 	bcc.w	8007792 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	461a      	mov	r2, r3
 8007666:	8bfb      	ldrh	r3, [r7, #30]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f1a3 0208 	sub.w	r2, r3, #8
 800766e:	8bbb      	ldrh	r3, [r7, #28]
 8007670:	3314      	adds	r3, #20
 8007672:	429a      	cmp	r2, r3
 8007674:	d333      	bcc.n	80076de <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007676:	8bfa      	ldrh	r2, [r7, #30]
 8007678:	8bbb      	ldrh	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	3308      	adds	r3, #8
 8007680:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007682:	8a7b      	ldrh	r3, [r7, #18]
 8007684:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007688:	d106      	bne.n	8007698 <mem_malloc+0xb0>
 800768a:	4b4c      	ldr	r3, [pc, #304]	@ (80077bc <mem_malloc+0x1d4>)
 800768c:	f240 3287 	movw	r2, #903	@ 0x387
 8007690:	494b      	ldr	r1, [pc, #300]	@ (80077c0 <mem_malloc+0x1d8>)
 8007692:	484c      	ldr	r0, [pc, #304]	@ (80077c4 <mem_malloc+0x1dc>)
 8007694:	f00c fb9a 	bl	8013dcc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007698:	8a7b      	ldrh	r3, [r7, #18]
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fd04 	bl	80070a8 <ptr_to_mem>
 80076a0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	881a      	ldrh	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8bfa      	ldrh	r2, [r7, #30]
 80076b4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	8a7a      	ldrh	r2, [r7, #18]
 80076ba:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2201      	movs	r2, #1
 80076c0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076ca:	d00b      	beq.n	80076e4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fce9 	bl	80070a8 <ptr_to_mem>
 80076d6:	4602      	mov	r2, r0
 80076d8:	8a7b      	ldrh	r3, [r7, #18]
 80076da:	8053      	strh	r3, [r2, #2]
 80076dc:	e002      	b.n	80076e4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2201      	movs	r2, #1
 80076e2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80076e4:	4b34      	ldr	r3, [pc, #208]	@ (80077b8 <mem_malloc+0x1d0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d127      	bne.n	800773e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80076ee:	4b32      	ldr	r3, [pc, #200]	@ (80077b8 <mem_malloc+0x1d0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80076f4:	e005      	b.n	8007702 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fcd4 	bl	80070a8 <ptr_to_mem>
 8007700:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	791b      	ldrb	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <mem_malloc+0x12c>
 800770a:	4b2f      	ldr	r3, [pc, #188]	@ (80077c8 <mem_malloc+0x1e0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	429a      	cmp	r2, r3
 8007712:	d1f0      	bne.n	80076f6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8007714:	4a28      	ldr	r2, [pc, #160]	@ (80077b8 <mem_malloc+0x1d0>)
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800771a:	4b27      	ldr	r3, [pc, #156]	@ (80077b8 <mem_malloc+0x1d0>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4b2a      	ldr	r3, [pc, #168]	@ (80077c8 <mem_malloc+0x1e0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d00b      	beq.n	800773e <mem_malloc+0x156>
 8007726:	4b24      	ldr	r3, [pc, #144]	@ (80077b8 <mem_malloc+0x1d0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <mem_malloc+0x156>
 8007730:	4b22      	ldr	r3, [pc, #136]	@ (80077bc <mem_malloc+0x1d4>)
 8007732:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007736:	4925      	ldr	r1, [pc, #148]	@ (80077cc <mem_malloc+0x1e4>)
 8007738:	4822      	ldr	r0, [pc, #136]	@ (80077c4 <mem_malloc+0x1dc>)
 800773a:	f00c fb47 	bl	8013dcc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800773e:	8bba      	ldrh	r2, [r7, #28]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	3308      	adds	r3, #8
 8007746:	4a20      	ldr	r2, [pc, #128]	@ (80077c8 <mem_malloc+0x1e0>)
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	4293      	cmp	r3, r2
 800774c:	d906      	bls.n	800775c <mem_malloc+0x174>
 800774e:	4b1b      	ldr	r3, [pc, #108]	@ (80077bc <mem_malloc+0x1d4>)
 8007750:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007754:	491e      	ldr	r1, [pc, #120]	@ (80077d0 <mem_malloc+0x1e8>)
 8007756:	481b      	ldr	r0, [pc, #108]	@ (80077c4 <mem_malloc+0x1dc>)
 8007758:	f00c fb38 	bl	8013dcc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <mem_malloc+0x18c>
 8007766:	4b15      	ldr	r3, [pc, #84]	@ (80077bc <mem_malloc+0x1d4>)
 8007768:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800776c:	4919      	ldr	r1, [pc, #100]	@ (80077d4 <mem_malloc+0x1ec>)
 800776e:	4815      	ldr	r0, [pc, #84]	@ (80077c4 <mem_malloc+0x1dc>)
 8007770:	f00c fb2c 	bl	8013dcc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <mem_malloc+0x1a4>
 800777e:	4b0f      	ldr	r3, [pc, #60]	@ (80077bc <mem_malloc+0x1d4>)
 8007780:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007784:	4914      	ldr	r1, [pc, #80]	@ (80077d8 <mem_malloc+0x1f0>)
 8007786:	480f      	ldr	r0, [pc, #60]	@ (80077c4 <mem_malloc+0x1dc>)
 8007788:	f00c fb20 	bl	8013dcc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	3308      	adds	r3, #8
 8007790:	e00e      	b.n	80077b0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007792:	8bfb      	ldrh	r3, [r7, #30]
 8007794:	4618      	mov	r0, r3
 8007796:	f7ff fc87 	bl	80070a8 <ptr_to_mem>
 800779a:	4603      	mov	r3, r0
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80077a0:	8bfa      	ldrh	r2, [r7, #30]
 80077a2:	8bbb      	ldrh	r3, [r7, #28]
 80077a4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80077a8:	429a      	cmp	r2, r3
 80077aa:	f4ff af44 	bcc.w	8007636 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	200056c0 	.word	0x200056c0
 80077bc:	080150b4 	.word	0x080150b4
 80077c0:	0801525c 	.word	0x0801525c
 80077c4:	080150fc 	.word	0x080150fc
 80077c8:	200056bc 	.word	0x200056bc
 80077cc:	08015270 	.word	0x08015270
 80077d0:	0801528c 	.word	0x0801528c
 80077d4:	080152bc 	.word	0x080152bc
 80077d8:	080152ec 	.word	0x080152ec

080077dc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	3303      	adds	r3, #3
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e011      	b.n	8007822 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4413      	add	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	885b      	ldrh	r3, [r3, #2]
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4293      	cmp	r3, r2
 800782c:	dbe7      	blt.n	80077fe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007842:	2300      	movs	r3, #0
 8007844:	80fb      	strh	r3, [r7, #6]
 8007846:	e009      	b.n	800785c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007848:	88fb      	ldrh	r3, [r7, #6]
 800784a:	4a08      	ldr	r2, [pc, #32]	@ (800786c <memp_init+0x30>)
 800784c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff ffc3 	bl	80077dc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	3301      	adds	r3, #1
 800785a:	80fb      	strh	r3, [r7, #6]
 800785c:	88fb      	ldrh	r3, [r7, #6]
 800785e:	2b08      	cmp	r3, #8
 8007860:	d9f2      	bls.n	8007848 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	08018190 	.word	0x08018190

08007870 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d012      	beq.n	80078ac <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d006      	beq.n	80078a8 <do_memp_malloc_pool+0x38>
 800789a:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <do_memp_malloc_pool+0x48>)
 800789c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80078a0:	4906      	ldr	r1, [pc, #24]	@ (80078bc <do_memp_malloc_pool+0x4c>)
 80078a2:	4807      	ldr	r0, [pc, #28]	@ (80078c0 <do_memp_malloc_pool+0x50>)
 80078a4:	f00c fa92 	bl	8013dcc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	e000      	b.n	80078ae <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	08015310 	.word	0x08015310
 80078bc:	08015340 	.word	0x08015340
 80078c0:	08015364 	.word	0x08015364

080078c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <memp_malloc_pool+0x1c>
 80078d2:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <memp_malloc_pool+0x38>)
 80078d4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80078d8:	4909      	ldr	r1, [pc, #36]	@ (8007900 <memp_malloc_pool+0x3c>)
 80078da:	480a      	ldr	r0, [pc, #40]	@ (8007904 <memp_malloc_pool+0x40>)
 80078dc:	f00c fa76 	bl	8013dcc <iprintf>
  if (desc == NULL) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <memp_malloc_pool+0x26>
    return NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e003      	b.n	80078f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff ffc0 	bl	8007870 <do_memp_malloc_pool>
 80078f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	08015310 	.word	0x08015310
 8007900:	0801538c 	.word	0x0801538c
 8007904:	08015364 	.word	0x08015364

08007908 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	2b08      	cmp	r3, #8
 8007916:	d908      	bls.n	800792a <memp_malloc+0x22>
 8007918:	4b0a      	ldr	r3, [pc, #40]	@ (8007944 <memp_malloc+0x3c>)
 800791a:	f240 1257 	movw	r2, #343	@ 0x157
 800791e:	490a      	ldr	r1, [pc, #40]	@ (8007948 <memp_malloc+0x40>)
 8007920:	480a      	ldr	r0, [pc, #40]	@ (800794c <memp_malloc+0x44>)
 8007922:	f00c fa53 	bl	8013dcc <iprintf>
 8007926:	2300      	movs	r3, #0
 8007928:	e008      	b.n	800793c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	4a08      	ldr	r2, [pc, #32]	@ (8007950 <memp_malloc+0x48>)
 800792e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff ff9c 	bl	8007870 <do_memp_malloc_pool>
 8007938:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	08015310 	.word	0x08015310
 8007948:	080153a0 	.word	0x080153a0
 800794c:	08015364 	.word	0x08015364
 8007950:	08018190 	.word	0x08018190

08007954 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <do_memp_free_pool+0x22>
 8007968:	4b0a      	ldr	r3, [pc, #40]	@ (8007994 <do_memp_free_pool+0x40>)
 800796a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800796e:	490a      	ldr	r1, [pc, #40]	@ (8007998 <do_memp_free_pool+0x44>)
 8007970:	480a      	ldr	r0, [pc, #40]	@ (800799c <do_memp_free_pool+0x48>)
 8007972:	f00c fa2b 	bl	8013dcc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08015310 	.word	0x08015310
 8007998:	080153c0 	.word	0x080153c0
 800799c:	08015364 	.word	0x08015364

080079a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <memp_free_pool+0x1e>
 80079b0:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <memp_free_pool+0x3c>)
 80079b2:	f240 1295 	movw	r2, #405	@ 0x195
 80079b6:	490a      	ldr	r1, [pc, #40]	@ (80079e0 <memp_free_pool+0x40>)
 80079b8:	480a      	ldr	r0, [pc, #40]	@ (80079e4 <memp_free_pool+0x44>)
 80079ba:	f00c fa07 	bl	8013dcc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <memp_free_pool+0x34>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ffc1 	bl	8007954 <do_memp_free_pool>
 80079d2:	e000      	b.n	80079d6 <memp_free_pool+0x36>
    return;
 80079d4:	bf00      	nop
}
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	08015310 	.word	0x08015310
 80079e0:	0801538c 	.word	0x0801538c
 80079e4:	08015364 	.word	0x08015364

080079e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	6039      	str	r1, [r7, #0]
 80079f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d907      	bls.n	8007a0a <memp_free+0x22>
 80079fa:	4b0c      	ldr	r3, [pc, #48]	@ (8007a2c <memp_free+0x44>)
 80079fc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007a00:	490b      	ldr	r1, [pc, #44]	@ (8007a30 <memp_free+0x48>)
 8007a02:	480c      	ldr	r0, [pc, #48]	@ (8007a34 <memp_free+0x4c>)
 8007a04:	f00c f9e2 	bl	8013dcc <iprintf>
 8007a08:	e00c      	b.n	8007a24 <memp_free+0x3c>

  if (mem == NULL) {
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	4a09      	ldr	r2, [pc, #36]	@ (8007a38 <memp_free+0x50>)
 8007a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff ff9a 	bl	8007954 <do_memp_free_pool>
 8007a20:	e000      	b.n	8007a24 <memp_free+0x3c>
    return;
 8007a22:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08015310 	.word	0x08015310
 8007a30:	080153e0 	.word	0x080153e0
 8007a34:	08015364 	.word	0x08015364
 8007a38:	08018190 	.word	0x08018190

08007a3c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007a40:	bf00      	nop
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d108      	bne.n	8007a72 <netif_add+0x26>
 8007a60:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd0 <netif_add+0x184>)
 8007a62:	f240 1227 	movw	r2, #295	@ 0x127
 8007a66:	495b      	ldr	r1, [pc, #364]	@ (8007bd4 <netif_add+0x188>)
 8007a68:	485b      	ldr	r0, [pc, #364]	@ (8007bd8 <netif_add+0x18c>)
 8007a6a:	f00c f9af 	bl	8013dcc <iprintf>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e0a9      	b.n	8007bc6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d108      	bne.n	8007a8a <netif_add+0x3e>
 8007a78:	4b55      	ldr	r3, [pc, #340]	@ (8007bd0 <netif_add+0x184>)
 8007a7a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007a7e:	4957      	ldr	r1, [pc, #348]	@ (8007bdc <netif_add+0x190>)
 8007a80:	4855      	ldr	r0, [pc, #340]	@ (8007bd8 <netif_add+0x18c>)
 8007a82:	f00c f9a3 	bl	8013dcc <iprintf>
 8007a86:	2300      	movs	r3, #0
 8007a88:	e09d      	b.n	8007bc6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007a90:	4b53      	ldr	r3, [pc, #332]	@ (8007be0 <netif_add+0x194>)
 8007a92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007a9a:	4b51      	ldr	r3, [pc, #324]	@ (8007be0 <netif_add+0x194>)
 8007a9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8007be0 <netif_add+0x194>)
 8007aa6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a49      	ldr	r2, [pc, #292]	@ (8007be4 <netif_add+0x198>)
 8007abe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3324      	adds	r3, #36	@ 0x24
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f00c f9dd 	bl	8013e96 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8007be8 <netif_add+0x19c>)
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f914 	bl	8007d2c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	4798      	blx	r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <netif_add+0xc8>
    return NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e058      	b.n	8007bc6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b1a:	2bff      	cmp	r3, #255	@ 0xff
 8007b1c:	d103      	bne.n	8007b26 <netif_add+0xda>
        netif->num = 0;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b2a:	4b30      	ldr	r3, [pc, #192]	@ (8007bec <netif_add+0x1a0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e02b      	b.n	8007b8a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d106      	bne.n	8007b48 <netif_add+0xfc>
 8007b3a:	4b25      	ldr	r3, [pc, #148]	@ (8007bd0 <netif_add+0x184>)
 8007b3c:	f240 128b 	movw	r2, #395	@ 0x18b
 8007b40:	492b      	ldr	r1, [pc, #172]	@ (8007bf0 <netif_add+0x1a4>)
 8007b42:	4825      	ldr	r0, [pc, #148]	@ (8007bd8 <netif_add+0x18c>)
 8007b44:	f00c f942 	bl	8013dcc <iprintf>
        num_netifs++;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2bff      	cmp	r3, #255	@ 0xff
 8007b52:	dd06      	ble.n	8007b62 <netif_add+0x116>
 8007b54:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd0 <netif_add+0x184>)
 8007b56:	f240 128d 	movw	r2, #397	@ 0x18d
 8007b5a:	4926      	ldr	r1, [pc, #152]	@ (8007bf4 <netif_add+0x1a8>)
 8007b5c:	481e      	ldr	r0, [pc, #120]	@ (8007bd8 <netif_add+0x18c>)
 8007b5e:	f00c f935 	bl	8013dcc <iprintf>
        if (netif2->num == netif->num) {
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d108      	bne.n	8007b84 <netif_add+0x138>
          netif->num++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8007b82:	e005      	b.n	8007b90 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1d0      	bne.n	8007b32 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1be      	bne.n	8007b14 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b9e:	d103      	bne.n	8007ba8 <netif_add+0x15c>
    netif_num = 0;
 8007ba0:	4b11      	ldr	r3, [pc, #68]	@ (8007be8 <netif_add+0x19c>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e006      	b.n	8007bb6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007be8 <netif_add+0x19c>)
 8007bb4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bec <netif_add+0x1a0>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8007bec <netif_add+0x1a0>)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	080153fc 	.word	0x080153fc
 8007bd4:	08015490 	.word	0x08015490
 8007bd8:	0801544c 	.word	0x0801544c
 8007bdc:	080154ac 	.word	0x080154ac
 8007be0:	08018204 	.word	0x08018204
 8007be4:	0800800f 	.word	0x0800800f
 8007be8:	200085d8 	.word	0x200085d8
 8007bec:	200085d0 	.word	0x200085d0
 8007bf0:	080154d0 	.word	0x080154d0
 8007bf4:	080154e4 	.word	0x080154e4

08007bf8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f002 fdff 	bl	800a808 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f007 fe37 	bl	800f880 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <netif_do_set_ipaddr+0x20>
 8007c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca4 <netif_do_set_ipaddr+0x88>)
 8007c30:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007c34:	491c      	ldr	r1, [pc, #112]	@ (8007ca8 <netif_do_set_ipaddr+0x8c>)
 8007c36:	481d      	ldr	r0, [pc, #116]	@ (8007cac <netif_do_set_ipaddr+0x90>)
 8007c38:	f00c f8c8 	bl	8013dcc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <netif_do_set_ipaddr+0x34>
 8007c42:	4b18      	ldr	r3, [pc, #96]	@ (8007ca4 <netif_do_set_ipaddr+0x88>)
 8007c44:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007c48:	4917      	ldr	r1, [pc, #92]	@ (8007ca8 <netif_do_set_ipaddr+0x8c>)
 8007c4a:	4818      	ldr	r0, [pc, #96]	@ (8007cac <netif_do_set_ipaddr+0x90>)
 8007c4c:	f00c f8be 	bl	8013dcc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3304      	adds	r3, #4
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d01c      	beq.n	8007c98 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3304      	adds	r3, #4
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007c6e:	f107 0314 	add.w	r3, r7, #20
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff ffbf 	bl	8007bf8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <netif_do_set_ipaddr+0x6a>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	e000      	b.n	8007c88 <netif_do_set_ipaddr+0x6c>
 8007c86:	2300      	movs	r3, #0
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f8d2 	bl	8007e38 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	080153fc 	.word	0x080153fc
 8007ca8:	08015514 	.word	0x08015514
 8007cac:	0801544c 	.word	0x0801544c

08007cb0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d00a      	beq.n	8007ce0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <netif_do_set_netmask+0x26>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	e000      	b.n	8007cd8 <netif_do_set_netmask+0x28>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e000      	b.n	8007ce2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	330c      	adds	r3, #12
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d00a      	beq.n	8007d1e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <netif_do_set_gw+0x26>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	e000      	b.n	8007d16 <netif_do_set_gw+0x28>
 8007d14:	2300      	movs	r3, #0
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e000      	b.n	8007d20 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007d48:	4b1c      	ldr	r3, [pc, #112]	@ (8007dbc <netif_set_addr+0x90>)
 8007d4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007d52:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <netif_set_addr+0x90>)
 8007d54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007d5c:	4b17      	ldr	r3, [pc, #92]	@ (8007dbc <netif_set_addr+0x90>)
 8007d5e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <netif_set_addr+0x42>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <netif_set_addr+0x46>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <netif_set_addr+0x48>
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007d7c:	f107 0310 	add.w	r3, r7, #16
 8007d80:	461a      	mov	r2, r3
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ff49 	bl	8007c1c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007d8a:	69fa      	ldr	r2, [r7, #28]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff ff8e 	bl	8007cb0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff ffa8 	bl	8007cee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	461a      	mov	r2, r3
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff35 	bl	8007c1c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007db2:	bf00      	nop
 8007db4:	3720      	adds	r7, #32
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	08018204 	.word	0x08018204

08007dc0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007dc8:	4a04      	ldr	r2, [pc, #16]	@ (8007ddc <netif_set_default+0x1c>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	200085d4 	.word	0x200085d4

08007de0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <netif_set_up+0x1e>
 8007dee:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <netif_set_up+0x4c>)
 8007df0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007df4:	490e      	ldr	r1, [pc, #56]	@ (8007e30 <netif_set_up+0x50>)
 8007df6:	480f      	ldr	r0, [pc, #60]	@ (8007e34 <netif_set_up+0x54>)
 8007df8:	f00b ffe8 	bl	8013dcc <iprintf>
 8007dfc:	e013      	b.n	8007e26 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007e1e:	2103      	movs	r1, #3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f809 	bl	8007e38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	080153fc 	.word	0x080153fc
 8007e30:	08015584 	.word	0x08015584
 8007e34:	0801544c 	.word	0x0801544c

08007e38 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <netif_issue_reports+0x20>
 8007e4a:	4b18      	ldr	r3, [pc, #96]	@ (8007eac <netif_issue_reports+0x74>)
 8007e4c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007e50:	4917      	ldr	r1, [pc, #92]	@ (8007eb0 <netif_issue_reports+0x78>)
 8007e52:	4818      	ldr	r0, [pc, #96]	@ (8007eb4 <netif_issue_reports+0x7c>)
 8007e54:	f00b ffba 	bl	8013dcc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e5e:	f003 0304 	and.w	r3, r3, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01e      	beq.n	8007ea4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e6c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d013      	beq.n	8007ea6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3304      	adds	r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f00a faeb 	bl	8012478 <etharp_request>
 8007ea2:	e000      	b.n	8007ea6 <netif_issue_reports+0x6e>
    return;
 8007ea4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	080153fc 	.word	0x080153fc
 8007eb0:	080155a0 	.word	0x080155a0
 8007eb4:	0801544c 	.word	0x0801544c

08007eb8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <netif_set_down+0x1e>
 8007ec6:	4b12      	ldr	r3, [pc, #72]	@ (8007f10 <netif_set_down+0x58>)
 8007ec8:	f240 329b 	movw	r2, #923	@ 0x39b
 8007ecc:	4911      	ldr	r1, [pc, #68]	@ (8007f14 <netif_set_down+0x5c>)
 8007ece:	4812      	ldr	r0, [pc, #72]	@ (8007f18 <netif_set_down+0x60>)
 8007ed0:	f00b ff7c 	bl	8013dcc <iprintf>
 8007ed4:	e019      	b.n	8007f0a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d012      	beq.n	8007f0a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007eea:	f023 0301 	bic.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f009 fe71 	bl	8011bec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	080153fc 	.word	0x080153fc
 8007f14:	080155c4 	.word	0x080155c4
 8007f18:	0801544c 	.word	0x0801544c

08007f1c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <netif_set_link_up+0x1e>
 8007f2a:	4b15      	ldr	r3, [pc, #84]	@ (8007f80 <netif_set_link_up+0x64>)
 8007f2c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007f30:	4914      	ldr	r1, [pc, #80]	@ (8007f84 <netif_set_link_up+0x68>)
 8007f32:	4815      	ldr	r0, [pc, #84]	@ (8007f88 <netif_set_link_up+0x6c>)
 8007f34:	f00b ff4a 	bl	8013dcc <iprintf>
 8007f38:	e01e      	b.n	8007f78 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d117      	bne.n	8007f78 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007f4e:	f043 0304 	orr.w	r3, r3, #4
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f008 f8bc 	bl	80100d8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007f60:	2103      	movs	r1, #3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff ff68 	bl	8007e38 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <netif_set_link_up+0x5c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	080153fc 	.word	0x080153fc
 8007f84:	080155e4 	.word	0x080155e4
 8007f88:	0801544c 	.word	0x0801544c

08007f8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d107      	bne.n	8007faa <netif_set_link_down+0x1e>
 8007f9a:	4b11      	ldr	r3, [pc, #68]	@ (8007fe0 <netif_set_link_down+0x54>)
 8007f9c:	f240 4206 	movw	r2, #1030	@ 0x406
 8007fa0:	4910      	ldr	r1, [pc, #64]	@ (8007fe4 <netif_set_link_down+0x58>)
 8007fa2:	4811      	ldr	r0, [pc, #68]	@ (8007fe8 <netif_set_link_down+0x5c>)
 8007fa4:	f00b ff12 	bl	8013dcc <iprintf>
 8007fa8:	e017      	b.n	8007fda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007fbe:	f023 0304 	bic.w	r3, r3, #4
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <netif_set_link_down+0x4e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	080153fc 	.word	0x080153fc
 8007fe4:	08015608 	.word	0x08015608
 8007fe8:	0801544c 	.word	0x0801544c

08007fec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	61da      	str	r2, [r3, #28]
  }
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800801a:	f06f 030b 	mvn.w	r3, #11
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d013      	beq.n	8008064 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800803c:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <netif_get_by_index+0x48>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	e00c      	b.n	800805e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800804a:	3301      	adds	r3, #1
 800804c:	b2db      	uxtb	r3, r3
 800804e:	79fa      	ldrb	r2, [r7, #7]
 8008050:	429a      	cmp	r2, r3
 8008052:	d101      	bne.n	8008058 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	e006      	b.n	8008066 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1ef      	bne.n	8008044 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	200085d0 	.word	0x200085d0

08008078 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800807e:	4b0c      	ldr	r3, [pc, #48]	@ (80080b0 <pbuf_free_ooseq+0x38>)
 8008080:	2200      	movs	r2, #0
 8008082:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008084:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <pbuf_free_ooseq+0x3c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	e00a      	b.n	80080a2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f002 fbf5 	bl	800a884 <tcp_free_ooseq>
      return;
 800809a:	e005      	b.n	80080a8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f1      	bne.n	800808c <pbuf_free_ooseq+0x14>
    }
  }
}
 80080a8:	3708      	adds	r7, #8
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200085d9 	.word	0x200085d9
 80080b4:	200085e8 	.word	0x200085e8

080080b8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80080bc:	4b03      	ldr	r3, [pc, #12]	@ (80080cc <pbuf_pool_is_empty+0x14>)
 80080be:	2201      	movs	r2, #1
 80080c0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80080c2:	bf00      	nop
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	200085d9 	.word	0x200085d9

080080d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	460b      	mov	r3, r1
 80080e0:	80fb      	strh	r3, [r7, #6]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	88fa      	ldrh	r2, [r7, #6]
 80080f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88ba      	ldrh	r2, [r7, #4]
 80080fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80080fe:	8b3b      	ldrh	r3, [r7, #24]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	7f3a      	ldrb	r2, [r7, #28]
 800810a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	73da      	strb	r2, [r3, #15]
}
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08c      	sub	sp, #48	@ 0x30
 8008128:	af02      	add	r7, sp, #8
 800812a:	4603      	mov	r3, r0
 800812c:	71fb      	strb	r3, [r7, #7]
 800812e:	460b      	mov	r3, r1
 8008130:	80bb      	strh	r3, [r7, #4]
 8008132:	4613      	mov	r3, r2
 8008134:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800813a:	887b      	ldrh	r3, [r7, #2]
 800813c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008140:	d07f      	beq.n	8008242 <pbuf_alloc+0x11e>
 8008142:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008146:	f300 80c8 	bgt.w	80082da <pbuf_alloc+0x1b6>
 800814a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800814e:	d010      	beq.n	8008172 <pbuf_alloc+0x4e>
 8008150:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008154:	f300 80c1 	bgt.w	80082da <pbuf_alloc+0x1b6>
 8008158:	2b01      	cmp	r3, #1
 800815a:	d002      	beq.n	8008162 <pbuf_alloc+0x3e>
 800815c:	2b41      	cmp	r3, #65	@ 0x41
 800815e:	f040 80bc 	bne.w	80082da <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	88bb      	ldrh	r3, [r7, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	2000      	movs	r0, #0
 800816a:	f000 f8d1 	bl	8008310 <pbuf_alloc_reference>
 800816e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008170:	e0bd      	b.n	80082ee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800817a:	88bb      	ldrh	r3, [r7, #4]
 800817c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800817e:	2008      	movs	r0, #8
 8008180:	f7ff fbc2 	bl	8007908 <memp_malloc>
 8008184:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800818c:	f7ff ff94 	bl	80080b8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008198:	f000 faa8 	bl	80086ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800819c:	2300      	movs	r3, #0
 800819e:	e0a7      	b.n	80082f0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80081a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081a2:	3303      	adds	r3, #3
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8b7a      	ldrh	r2, [r7, #26]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bf28      	it	cs
 80081b8:	4613      	movcs	r3, r2
 80081ba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80081bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081be:	3310      	adds	r3, #16
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4413      	add	r3, r2
 80081c4:	3303      	adds	r3, #3
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	4618      	mov	r0, r3
 80081cc:	89f9      	ldrh	r1, [r7, #14]
 80081ce:	8b7a      	ldrh	r2, [r7, #26]
 80081d0:	2300      	movs	r3, #0
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	887b      	ldrh	r3, [r7, #2]
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	460b      	mov	r3, r1
 80081da:	4601      	mov	r1, r0
 80081dc:	6938      	ldr	r0, [r7, #16]
 80081de:	f7ff ff77 	bl	80080d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <pbuf_alloc+0xd8>
 80081ee:	4b42      	ldr	r3, [pc, #264]	@ (80082f8 <pbuf_alloc+0x1d4>)
 80081f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081f4:	4941      	ldr	r1, [pc, #260]	@ (80082fc <pbuf_alloc+0x1d8>)
 80081f6:	4842      	ldr	r0, [pc, #264]	@ (8008300 <pbuf_alloc+0x1dc>)
 80081f8:	f00b fde8 	bl	8013dcc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80081fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081fe:	3303      	adds	r3, #3
 8008200:	f023 0303 	bic.w	r3, r3, #3
 8008204:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8008208:	d106      	bne.n	8008218 <pbuf_alloc+0xf4>
 800820a:	4b3b      	ldr	r3, [pc, #236]	@ (80082f8 <pbuf_alloc+0x1d4>)
 800820c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8008210:	493c      	ldr	r1, [pc, #240]	@ (8008304 <pbuf_alloc+0x1e0>)
 8008212:	483b      	ldr	r0, [pc, #236]	@ (8008300 <pbuf_alloc+0x1dc>)
 8008214:	f00b fdda 	bl	8013dcc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
 8008222:	e002      	b.n	800822a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800822e:	8b7a      	ldrh	r2, [r7, #26]
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800823a:	8b7b      	ldrh	r3, [r7, #26]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d19e      	bne.n	800817e <pbuf_alloc+0x5a>
      break;
 8008240:	e055      	b.n	80082ee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008242:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008244:	3303      	adds	r3, #3
 8008246:	b29b      	uxth	r3, r3
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	b29a      	uxth	r2, r3
 800824e:	88bb      	ldrh	r3, [r7, #4]
 8008250:	3303      	adds	r3, #3
 8008252:	b29b      	uxth	r3, r3
 8008254:	f023 0303 	bic.w	r3, r3, #3
 8008258:	b29b      	uxth	r3, r3
 800825a:	4413      	add	r3, r2
 800825c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800825e:	8b3b      	ldrh	r3, [r7, #24]
 8008260:	3310      	adds	r3, #16
 8008262:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008264:	8b3a      	ldrh	r2, [r7, #24]
 8008266:	88bb      	ldrh	r3, [r7, #4]
 8008268:	3303      	adds	r3, #3
 800826a:	f023 0303 	bic.w	r3, r3, #3
 800826e:	429a      	cmp	r2, r3
 8008270:	d306      	bcc.n	8008280 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008272:	8afa      	ldrh	r2, [r7, #22]
 8008274:	88bb      	ldrh	r3, [r7, #4]
 8008276:	3303      	adds	r3, #3
 8008278:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800827c:	429a      	cmp	r2, r3
 800827e:	d201      	bcs.n	8008284 <pbuf_alloc+0x160>
        return NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	e035      	b.n	80082f0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008284:	8afb      	ldrh	r3, [r7, #22]
 8008286:	4618      	mov	r0, r3
 8008288:	f7ff f9ae 	bl	80075e8 <mem_malloc>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <pbuf_alloc+0x174>
        return NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	e02b      	b.n	80082f0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008298:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800829a:	3310      	adds	r3, #16
 800829c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829e:	4413      	add	r3, r2
 80082a0:	3303      	adds	r3, #3
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	4618      	mov	r0, r3
 80082a8:	88b9      	ldrh	r1, [r7, #4]
 80082aa:	88ba      	ldrh	r2, [r7, #4]
 80082ac:	2300      	movs	r3, #0
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	887b      	ldrh	r3, [r7, #2]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	460b      	mov	r3, r1
 80082b6:	4601      	mov	r1, r0
 80082b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082ba:	f7ff ff09 	bl	80080d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d010      	beq.n	80082ec <pbuf_alloc+0x1c8>
 80082ca:	4b0b      	ldr	r3, [pc, #44]	@ (80082f8 <pbuf_alloc+0x1d4>)
 80082cc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80082d0:	490d      	ldr	r1, [pc, #52]	@ (8008308 <pbuf_alloc+0x1e4>)
 80082d2:	480b      	ldr	r0, [pc, #44]	@ (8008300 <pbuf_alloc+0x1dc>)
 80082d4:	f00b fd7a 	bl	8013dcc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80082d8:	e008      	b.n	80082ec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80082da:	4b07      	ldr	r3, [pc, #28]	@ (80082f8 <pbuf_alloc+0x1d4>)
 80082dc:	f240 1227 	movw	r2, #295	@ 0x127
 80082e0:	490a      	ldr	r1, [pc, #40]	@ (800830c <pbuf_alloc+0x1e8>)
 80082e2:	4807      	ldr	r0, [pc, #28]	@ (8008300 <pbuf_alloc+0x1dc>)
 80082e4:	f00b fd72 	bl	8013dcc <iprintf>
      return NULL;
 80082e8:	2300      	movs	r3, #0
 80082ea:	e001      	b.n	80082f0 <pbuf_alloc+0x1cc>
      break;
 80082ec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3728      	adds	r7, #40	@ 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	0801562c 	.word	0x0801562c
 80082fc:	0801565c 	.word	0x0801565c
 8008300:	0801568c 	.word	0x0801568c
 8008304:	080156b4 	.word	0x080156b4
 8008308:	080156e8 	.word	0x080156e8
 800830c:	08015714 	.word	0x08015714

08008310 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af02      	add	r7, sp, #8
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	807b      	strh	r3, [r7, #2]
 800831c:	4613      	mov	r3, r2
 800831e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008320:	883b      	ldrh	r3, [r7, #0]
 8008322:	2b41      	cmp	r3, #65	@ 0x41
 8008324:	d009      	beq.n	800833a <pbuf_alloc_reference+0x2a>
 8008326:	883b      	ldrh	r3, [r7, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d006      	beq.n	800833a <pbuf_alloc_reference+0x2a>
 800832c:	4b0f      	ldr	r3, [pc, #60]	@ (800836c <pbuf_alloc_reference+0x5c>)
 800832e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008332:	490f      	ldr	r1, [pc, #60]	@ (8008370 <pbuf_alloc_reference+0x60>)
 8008334:	480f      	ldr	r0, [pc, #60]	@ (8008374 <pbuf_alloc_reference+0x64>)
 8008336:	f00b fd49 	bl	8013dcc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800833a:	2007      	movs	r0, #7
 800833c:	f7ff fae4 	bl	8007908 <memp_malloc>
 8008340:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008348:	2300      	movs	r3, #0
 800834a:	e00b      	b.n	8008364 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800834c:	8879      	ldrh	r1, [r7, #2]
 800834e:	887a      	ldrh	r2, [r7, #2]
 8008350:	2300      	movs	r3, #0
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	883b      	ldrh	r3, [r7, #0]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	460b      	mov	r3, r1
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff feb7 	bl	80080d0 <pbuf_init_alloced_pbuf>
  return p;
 8008362:	68fb      	ldr	r3, [r7, #12]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	0801562c 	.word	0x0801562c
 8008370:	08015730 	.word	0x08015730
 8008374:	0801568c 	.word	0x0801568c

08008378 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	607b      	str	r3, [r7, #4]
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
 8008384:	460b      	mov	r3, r1
 8008386:	81bb      	strh	r3, [r7, #12]
 8008388:	4613      	mov	r3, r2
 800838a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008390:	8a7b      	ldrh	r3, [r7, #18]
 8008392:	3303      	adds	r3, #3
 8008394:	f023 0203 	bic.w	r2, r3, #3
 8008398:	89bb      	ldrh	r3, [r7, #12]
 800839a:	441a      	add	r2, r3
 800839c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800839e:	429a      	cmp	r2, r3
 80083a0:	d901      	bls.n	80083a6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e018      	b.n	80083d8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d007      	beq.n	80083bc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80083ac:	8a7b      	ldrh	r3, [r7, #18]
 80083ae:	3303      	adds	r3, #3
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	6a3a      	ldr	r2, [r7, #32]
 80083b6:	4413      	add	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e001      	b.n	80083c0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	89b9      	ldrh	r1, [r7, #12]
 80083c4:	89ba      	ldrh	r2, [r7, #12]
 80083c6:	2302      	movs	r3, #2
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	897b      	ldrh	r3, [r7, #10]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	460b      	mov	r3, r1
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	f7ff fe7d 	bl	80080d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80083d6:	687b      	ldr	r3, [r7, #4]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <pbuf_realloc+0x20>
 80083f2:	4b3a      	ldr	r3, [pc, #232]	@ (80084dc <pbuf_realloc+0xfc>)
 80083f4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80083f8:	4939      	ldr	r1, [pc, #228]	@ (80084e0 <pbuf_realloc+0x100>)
 80083fa:	483a      	ldr	r0, [pc, #232]	@ (80084e4 <pbuf_realloc+0x104>)
 80083fc:	f00b fce6 	bl	8013dcc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	891b      	ldrh	r3, [r3, #8]
 8008404:	887a      	ldrh	r2, [r7, #2]
 8008406:	429a      	cmp	r2, r3
 8008408:	d263      	bcs.n	80084d2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	891a      	ldrh	r2, [r3, #8]
 800840e:	887b      	ldrh	r3, [r7, #2]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008414:	887b      	ldrh	r3, [r7, #2]
 8008416:	817b      	strh	r3, [r7, #10]
  q = p;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800841c:	e018      	b.n	8008450 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	895b      	ldrh	r3, [r3, #10]
 8008422:	897a      	ldrh	r2, [r7, #10]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	891a      	ldrh	r2, [r3, #8]
 800842c:	893b      	ldrh	r3, [r7, #8]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <pbuf_realloc+0x70>
 8008442:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <pbuf_realloc+0xfc>)
 8008444:	f240 12af 	movw	r2, #431	@ 0x1af
 8008448:	4927      	ldr	r1, [pc, #156]	@ (80084e8 <pbuf_realloc+0x108>)
 800844a:	4826      	ldr	r0, [pc, #152]	@ (80084e4 <pbuf_realloc+0x104>)
 800844c:	f00b fcbe 	bl	8013dcc <iprintf>
  while (rem_len > q->len) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	895b      	ldrh	r3, [r3, #10]
 8008454:	897a      	ldrh	r2, [r7, #10]
 8008456:	429a      	cmp	r2, r3
 8008458:	d8e1      	bhi.n	800841e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	7b1b      	ldrb	r3, [r3, #12]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	2b00      	cmp	r3, #0
 8008464:	d121      	bne.n	80084aa <pbuf_realloc+0xca>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	895b      	ldrh	r3, [r3, #10]
 800846a:	897a      	ldrh	r2, [r7, #10]
 800846c:	429a      	cmp	r2, r3
 800846e:	d01c      	beq.n	80084aa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	7b5b      	ldrb	r3, [r3, #13]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d116      	bne.n	80084aa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	b29a      	uxth	r2, r3
 8008486:	897b      	ldrh	r3, [r7, #10]
 8008488:	4413      	add	r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	4619      	mov	r1, r3
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7fe ffae 	bl	80073f0 <mem_trim>
 8008494:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <pbuf_realloc+0xca>
 800849c:	4b0f      	ldr	r3, [pc, #60]	@ (80084dc <pbuf_realloc+0xfc>)
 800849e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80084a2:	4912      	ldr	r1, [pc, #72]	@ (80084ec <pbuf_realloc+0x10c>)
 80084a4:	480f      	ldr	r0, [pc, #60]	@ (80084e4 <pbuf_realloc+0x104>)
 80084a6:	f00b fc91 	bl	8013dcc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	897a      	ldrh	r2, [r7, #10]
 80084ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	895a      	ldrh	r2, [r3, #10]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 f911 	bl	80086ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	e000      	b.n	80084d4 <pbuf_realloc+0xf4>
    return;
 80084d2:	bf00      	nop

}
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	0801562c 	.word	0x0801562c
 80084e0:	08015744 	.word	0x08015744
 80084e4:	0801568c 	.word	0x0801568c
 80084e8:	0801575c 	.word	0x0801575c
 80084ec:	08015774 	.word	0x08015774

080084f0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d106      	bne.n	8008512 <pbuf_add_header_impl+0x22>
 8008504:	4b2b      	ldr	r3, [pc, #172]	@ (80085b4 <pbuf_add_header_impl+0xc4>)
 8008506:	f240 12df 	movw	r2, #479	@ 0x1df
 800850a:	492b      	ldr	r1, [pc, #172]	@ (80085b8 <pbuf_add_header_impl+0xc8>)
 800850c:	482b      	ldr	r0, [pc, #172]	@ (80085bc <pbuf_add_header_impl+0xcc>)
 800850e:	f00b fc5d 	bl	8013dcc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <pbuf_add_header_impl+0x30>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800851e:	d301      	bcc.n	8008524 <pbuf_add_header_impl+0x34>
    return 1;
 8008520:	2301      	movs	r3, #1
 8008522:	e043      	b.n	80085ac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <pbuf_add_header_impl+0x3e>
    return 0;
 800852a:	2300      	movs	r3, #0
 800852c:	e03e      	b.n	80085ac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	891a      	ldrh	r2, [r3, #8]
 8008536:	8a7b      	ldrh	r3, [r7, #18]
 8008538:	4413      	add	r3, r2
 800853a:	b29b      	uxth	r3, r3
 800853c:	8a7a      	ldrh	r2, [r7, #18]
 800853e:	429a      	cmp	r2, r3
 8008540:	d901      	bls.n	8008546 <pbuf_add_header_impl+0x56>
    return 1;
 8008542:	2301      	movs	r3, #1
 8008544:	e032      	b.n	80085ac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	7b1b      	ldrb	r3, [r3, #12]
 800854a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800854c:	8a3b      	ldrh	r3, [r7, #16]
 800854e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	425b      	negs	r3, r3
 800855e:	4413      	add	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3310      	adds	r3, #16
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	429a      	cmp	r2, r3
 800856a:	d20d      	bcs.n	8008588 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800856c:	2301      	movs	r3, #1
 800856e:	e01d      	b.n	80085ac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	425b      	negs	r3, r3
 800857e:	4413      	add	r3, r2
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e001      	b.n	8008588 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008584:	2301      	movs	r3, #1
 8008586:	e011      	b.n	80085ac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	895a      	ldrh	r2, [r3, #10]
 8008592:	8a7b      	ldrh	r3, [r7, #18]
 8008594:	4413      	add	r3, r2
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	891a      	ldrh	r2, [r3, #8]
 80085a0:	8a7b      	ldrh	r3, [r7, #18]
 80085a2:	4413      	add	r3, r2
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	811a      	strh	r2, [r3, #8]


  return 0;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	0801562c 	.word	0x0801562c
 80085b8:	08015790 	.word	0x08015790
 80085bc:	0801568c 	.word	0x0801568c

080085c0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80085ca:	2200      	movs	r2, #0
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ff8e 	bl	80084f0 <pbuf_add_header_impl>
 80085d4:	4603      	mov	r3, r0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <pbuf_remove_header+0x1e>
 80085f0:	4b20      	ldr	r3, [pc, #128]	@ (8008674 <pbuf_remove_header+0x94>)
 80085f2:	f240 224b 	movw	r2, #587	@ 0x24b
 80085f6:	4920      	ldr	r1, [pc, #128]	@ (8008678 <pbuf_remove_header+0x98>)
 80085f8:	4820      	ldr	r0, [pc, #128]	@ (800867c <pbuf_remove_header+0x9c>)
 80085fa:	f00b fbe7 	bl	8013dcc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <pbuf_remove_header+0x2c>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800860a:	d301      	bcc.n	8008610 <pbuf_remove_header+0x30>
    return 1;
 800860c:	2301      	movs	r3, #1
 800860e:	e02c      	b.n	800866a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <pbuf_remove_header+0x3a>
    return 0;
 8008616:	2300      	movs	r3, #0
 8008618:	e027      	b.n	800866a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	895b      	ldrh	r3, [r3, #10]
 8008622:	89fa      	ldrh	r2, [r7, #14]
 8008624:	429a      	cmp	r2, r3
 8008626:	d908      	bls.n	800863a <pbuf_remove_header+0x5a>
 8008628:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <pbuf_remove_header+0x94>)
 800862a:	f240 2255 	movw	r2, #597	@ 0x255
 800862e:	4914      	ldr	r1, [pc, #80]	@ (8008680 <pbuf_remove_header+0xa0>)
 8008630:	4812      	ldr	r0, [pc, #72]	@ (800867c <pbuf_remove_header+0x9c>)
 8008632:	f00b fbcb 	bl	8013dcc <iprintf>
 8008636:	2301      	movs	r3, #1
 8008638:	e017      	b.n	800866a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	441a      	add	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	895a      	ldrh	r2, [r3, #10]
 8008650:	89fb      	ldrh	r3, [r7, #14]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	b29a      	uxth	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	891a      	ldrh	r2, [r3, #8]
 800865e:	89fb      	ldrh	r3, [r7, #14]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	b29a      	uxth	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	0801562c 	.word	0x0801562c
 8008678:	08015790 	.word	0x08015790
 800867c:	0801568c 	.word	0x0801568c
 8008680:	0801579c 	.word	0x0801579c

08008684 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
 8008690:	4613      	mov	r3, r2
 8008692:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008694:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008698:	2b00      	cmp	r3, #0
 800869a:	da08      	bge.n	80086ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800869c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086a0:	425b      	negs	r3, r3
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff ff9b 	bl	80085e0 <pbuf_remove_header>
 80086aa:	4603      	mov	r3, r0
 80086ac:	e007      	b.n	80086be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80086ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086b2:	787a      	ldrb	r2, [r7, #1]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff ff1a 	bl	80084f0 <pbuf_add_header_impl>
 80086bc:	4603      	mov	r3, r0
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80086d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff ffd2 	bl	8008684 <pbuf_header_impl>
 80086e0:	4603      	mov	r3, r0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <pbuf_free+0x22>
 8008700:	4b38      	ldr	r3, [pc, #224]	@ (80087e4 <pbuf_free+0xf8>)
 8008702:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008706:	4938      	ldr	r1, [pc, #224]	@ (80087e8 <pbuf_free+0xfc>)
 8008708:	4838      	ldr	r0, [pc, #224]	@ (80087ec <pbuf_free+0x100>)
 800870a:	f00b fb5f 	bl	8013dcc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800870e:	2300      	movs	r3, #0
 8008710:	e063      	b.n	80087da <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008716:	e05c      	b.n	80087d2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7b9b      	ldrb	r3, [r3, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <pbuf_free+0x42>
 8008720:	4b30      	ldr	r3, [pc, #192]	@ (80087e4 <pbuf_free+0xf8>)
 8008722:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008726:	4932      	ldr	r1, [pc, #200]	@ (80087f0 <pbuf_free+0x104>)
 8008728:	4830      	ldr	r0, [pc, #192]	@ (80087ec <pbuf_free+0x100>)
 800872a:	f00b fb4f 	bl	8013dcc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7b9b      	ldrb	r3, [r3, #14]
 8008732:	3b01      	subs	r3, #1
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	739a      	strb	r2, [r3, #14]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7b9b      	ldrb	r3, [r3, #14]
 800873e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008740:	7dbb      	ldrb	r3, [r7, #22]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d143      	bne.n	80087ce <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7b1b      	ldrb	r3, [r3, #12]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	7b5b      	ldrb	r3, [r3, #13]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d011      	beq.n	8008786 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <pbuf_free+0x90>
 800876e:	4b1d      	ldr	r3, [pc, #116]	@ (80087e4 <pbuf_free+0xf8>)
 8008770:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008774:	491f      	ldr	r1, [pc, #124]	@ (80087f4 <pbuf_free+0x108>)
 8008776:	481d      	ldr	r0, [pc, #116]	@ (80087ec <pbuf_free+0x100>)
 8008778:	f00b fb28 	bl	8013dcc <iprintf>
        pc->custom_free_function(p);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
 8008784:	e01d      	b.n	80087c2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d104      	bne.n	8008796 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	2008      	movs	r0, #8
 8008790:	f7ff f92a 	bl	80079e8 <memp_free>
 8008794:	e015      	b.n	80087c2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d104      	bne.n	80087a6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	2007      	movs	r0, #7
 80087a0:	f7ff f922 	bl	80079e8 <memp_free>
 80087a4:	e00d      	b.n	80087c2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <pbuf_free+0xc8>
          mem_free(p);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7fe fdb5 	bl	800731c <mem_free>
 80087b2:	e006      	b.n	80087c2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80087b4:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <pbuf_free+0xf8>)
 80087b6:	f240 320f 	movw	r2, #783	@ 0x30f
 80087ba:	490f      	ldr	r1, [pc, #60]	@ (80087f8 <pbuf_free+0x10c>)
 80087bc:	480b      	ldr	r0, [pc, #44]	@ (80087ec <pbuf_free+0x100>)
 80087be:	f00b fb05 	bl	8013dcc <iprintf>
        }
      }
      count++;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	e001      	b.n	80087d2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d19f      	bne.n	8008718 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	0801562c 	.word	0x0801562c
 80087e8:	08015790 	.word	0x08015790
 80087ec:	0801568c 	.word	0x0801568c
 80087f0:	080157bc 	.word	0x080157bc
 80087f4:	080157d4 	.word	0x080157d4
 80087f8:	080157f8 	.word	0x080157f8

080087fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008808:	e005      	b.n	8008816 <pbuf_clen+0x1a>
    ++len;
 800880a:	89fb      	ldrh	r3, [r7, #14]
 800880c:	3301      	adds	r3, #1
 800880e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f6      	bne.n	800880a <pbuf_clen+0xe>
  }
  return len;
 800881c:	89fb      	ldrh	r3, [r7, #14]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d010      	beq.n	800885c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7b9b      	ldrb	r3, [r3, #14]
 800883e:	3301      	adds	r3, #1
 8008840:	b2da      	uxtb	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7b9b      	ldrb	r3, [r3, #14]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <pbuf_ref+0x30>
 800884e:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <pbuf_ref+0x38>)
 8008850:	f240 3242 	movw	r2, #834	@ 0x342
 8008854:	4904      	ldr	r1, [pc, #16]	@ (8008868 <pbuf_ref+0x3c>)
 8008856:	4805      	ldr	r0, [pc, #20]	@ (800886c <pbuf_ref+0x40>)
 8008858:	f00b fab8 	bl	8013dcc <iprintf>
  }
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	0801562c 	.word	0x0801562c
 8008868:	0801580c 	.word	0x0801580c
 800886c:	0801568c 	.word	0x0801568c

08008870 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <pbuf_cat+0x16>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <pbuf_cat+0x26>
 8008886:	4b20      	ldr	r3, [pc, #128]	@ (8008908 <pbuf_cat+0x98>)
 8008888:	f240 3259 	movw	r2, #857	@ 0x359
 800888c:	491f      	ldr	r1, [pc, #124]	@ (800890c <pbuf_cat+0x9c>)
 800888e:	4820      	ldr	r0, [pc, #128]	@ (8008910 <pbuf_cat+0xa0>)
 8008890:	f00b fa9c 	bl	8013dcc <iprintf>
 8008894:	e034      	b.n	8008900 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	e00a      	b.n	80088b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	891a      	ldrh	r2, [r3, #8]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	891b      	ldrh	r3, [r3, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	891a      	ldrh	r2, [r3, #8]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	895b      	ldrh	r3, [r3, #10]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d006      	beq.n	80088d4 <pbuf_cat+0x64>
 80088c6:	4b10      	ldr	r3, [pc, #64]	@ (8008908 <pbuf_cat+0x98>)
 80088c8:	f240 3262 	movw	r2, #866	@ 0x362
 80088cc:	4911      	ldr	r1, [pc, #68]	@ (8008914 <pbuf_cat+0xa4>)
 80088ce:	4810      	ldr	r0, [pc, #64]	@ (8008910 <pbuf_cat+0xa0>)
 80088d0:	f00b fa7c 	bl	8013dcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <pbuf_cat+0x7a>
 80088dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <pbuf_cat+0x98>)
 80088de:	f240 3263 	movw	r2, #867	@ 0x363
 80088e2:	490d      	ldr	r1, [pc, #52]	@ (8008918 <pbuf_cat+0xa8>)
 80088e4:	480a      	ldr	r0, [pc, #40]	@ (8008910 <pbuf_cat+0xa0>)
 80088e6:	f00b fa71 	bl	8013dcc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	891a      	ldrh	r2, [r3, #8]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	891b      	ldrh	r3, [r3, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	0801562c 	.word	0x0801562c
 800890c:	08015820 	.word	0x08015820
 8008910:	0801568c 	.word	0x0801568c
 8008914:	08015858 	.word	0x08015858
 8008918:	08015888 	.word	0x08015888

0800891c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff ffa1 	bl	8008870 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f7ff ff7c 	bl	800882c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d008      	beq.n	8008966 <pbuf_copy+0x2a>
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <pbuf_copy+0x2a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	891a      	ldrh	r2, [r3, #8]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	891b      	ldrh	r3, [r3, #8]
 8008962:	429a      	cmp	r2, r3
 8008964:	d209      	bcs.n	800897a <pbuf_copy+0x3e>
 8008966:	4b57      	ldr	r3, [pc, #348]	@ (8008ac4 <pbuf_copy+0x188>)
 8008968:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800896c:	4956      	ldr	r1, [pc, #344]	@ (8008ac8 <pbuf_copy+0x18c>)
 800896e:	4857      	ldr	r0, [pc, #348]	@ (8008acc <pbuf_copy+0x190>)
 8008970:	f00b fa2c 	bl	8013dcc <iprintf>
 8008974:	f06f 030f 	mvn.w	r3, #15
 8008978:	e09f      	b.n	8008aba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	895b      	ldrh	r3, [r3, #10]
 800897e:	461a      	mov	r2, r3
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	895b      	ldrh	r3, [r3, #10]
 8008988:	4619      	mov	r1, r3
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1acb      	subs	r3, r1, r3
 800898e:	429a      	cmp	r2, r3
 8008990:	d306      	bcc.n	80089a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	895b      	ldrh	r3, [r3, #10]
 8008996:	461a      	mov	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e005      	b.n	80089ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	895b      	ldrh	r3, [r3, #10]
 80089a4:	461a      	mov	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	18d0      	adds	r0, r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4413      	add	r3, r2
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4619      	mov	r1, r3
 80089c0:	f00b fb05 	bl	8013fce <memcpy>
    offset_to += len;
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4413      	add	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	895b      	ldrh	r3, [r3, #10]
 80089d8:	461a      	mov	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4293      	cmp	r3, r2
 80089de:	d906      	bls.n	80089ee <pbuf_copy+0xb2>
 80089e0:	4b38      	ldr	r3, [pc, #224]	@ (8008ac4 <pbuf_copy+0x188>)
 80089e2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80089e6:	493a      	ldr	r1, [pc, #232]	@ (8008ad0 <pbuf_copy+0x194>)
 80089e8:	4838      	ldr	r0, [pc, #224]	@ (8008acc <pbuf_copy+0x190>)
 80089ea:	f00b f9ef 	bl	8013dcc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	895b      	ldrh	r3, [r3, #10]
 80089f2:	461a      	mov	r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d906      	bls.n	8008a08 <pbuf_copy+0xcc>
 80089fa:	4b32      	ldr	r3, [pc, #200]	@ (8008ac4 <pbuf_copy+0x188>)
 80089fc:	f240 32da 	movw	r2, #986	@ 0x3da
 8008a00:	4934      	ldr	r1, [pc, #208]	@ (8008ad4 <pbuf_copy+0x198>)
 8008a02:	4832      	ldr	r0, [pc, #200]	@ (8008acc <pbuf_copy+0x190>)
 8008a04:	f00b f9e2 	bl	8013dcc <iprintf>
    if (offset_from >= p_from->len) {
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	895b      	ldrh	r3, [r3, #10]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d304      	bcc.n	8008a1e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	895b      	ldrh	r3, [r3, #10]
 8008a22:	461a      	mov	r2, r3
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d114      	bne.n	8008a54 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10c      	bne.n	8008a54 <pbuf_copy+0x118>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <pbuf_copy+0x118>
 8008a40:	4b20      	ldr	r3, [pc, #128]	@ (8008ac4 <pbuf_copy+0x188>)
 8008a42:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008a46:	4924      	ldr	r1, [pc, #144]	@ (8008ad8 <pbuf_copy+0x19c>)
 8008a48:	4820      	ldr	r0, [pc, #128]	@ (8008acc <pbuf_copy+0x190>)
 8008a4a:	f00b f9bf 	bl	8013dcc <iprintf>
 8008a4e:	f06f 030f 	mvn.w	r3, #15
 8008a52:	e032      	b.n	8008aba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d013      	beq.n	8008a82 <pbuf_copy+0x146>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	895a      	ldrh	r2, [r3, #10]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	891b      	ldrh	r3, [r3, #8]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d10d      	bne.n	8008a82 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <pbuf_copy+0x146>
 8008a6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ac4 <pbuf_copy+0x188>)
 8008a70:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008a74:	4919      	ldr	r1, [pc, #100]	@ (8008adc <pbuf_copy+0x1a0>)
 8008a76:	4815      	ldr	r0, [pc, #84]	@ (8008acc <pbuf_copy+0x190>)
 8008a78:	f00b f9a8 	bl	8013dcc <iprintf>
 8008a7c:	f06f 0305 	mvn.w	r3, #5
 8008a80:	e01b      	b.n	8008aba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d013      	beq.n	8008ab0 <pbuf_copy+0x174>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	895a      	ldrh	r2, [r3, #10]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	891b      	ldrh	r3, [r3, #8]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d10d      	bne.n	8008ab0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d009      	beq.n	8008ab0 <pbuf_copy+0x174>
 8008a9c:	4b09      	ldr	r3, [pc, #36]	@ (8008ac4 <pbuf_copy+0x188>)
 8008a9e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008aa2:	490e      	ldr	r1, [pc, #56]	@ (8008adc <pbuf_copy+0x1a0>)
 8008aa4:	4809      	ldr	r0, [pc, #36]	@ (8008acc <pbuf_copy+0x190>)
 8008aa6:	f00b f991 	bl	8013dcc <iprintf>
 8008aaa:	f06f 0305 	mvn.w	r3, #5
 8008aae:	e004      	b.n	8008aba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f47f af61 	bne.w	800897a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	0801562c 	.word	0x0801562c
 8008ac8:	080158d4 	.word	0x080158d4
 8008acc:	0801568c 	.word	0x0801568c
 8008ad0:	08015904 	.word	0x08015904
 8008ad4:	0801591c 	.word	0x0801591c
 8008ad8:	08015938 	.word	0x08015938
 8008adc:	08015948 	.word	0x08015948

08008ae0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4611      	mov	r1, r2
 8008aec:	461a      	mov	r2, r3
 8008aee:	460b      	mov	r3, r1
 8008af0:	80fb      	strh	r3, [r7, #6]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d108      	bne.n	8008b16 <pbuf_copy_partial+0x36>
 8008b04:	4b2b      	ldr	r3, [pc, #172]	@ (8008bb4 <pbuf_copy_partial+0xd4>)
 8008b06:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008b0a:	492b      	ldr	r1, [pc, #172]	@ (8008bb8 <pbuf_copy_partial+0xd8>)
 8008b0c:	482b      	ldr	r0, [pc, #172]	@ (8008bbc <pbuf_copy_partial+0xdc>)
 8008b0e:	f00b f95d 	bl	8013dcc <iprintf>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e04a      	b.n	8008bac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d108      	bne.n	8008b2e <pbuf_copy_partial+0x4e>
 8008b1c:	4b25      	ldr	r3, [pc, #148]	@ (8008bb4 <pbuf_copy_partial+0xd4>)
 8008b1e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008b22:	4927      	ldr	r1, [pc, #156]	@ (8008bc0 <pbuf_copy_partial+0xe0>)
 8008b24:	4825      	ldr	r0, [pc, #148]	@ (8008bbc <pbuf_copy_partial+0xdc>)
 8008b26:	f00b f951 	bl	8013dcc <iprintf>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e03e      	b.n	8008bac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	e034      	b.n	8008b9e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008b34:	88bb      	ldrh	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <pbuf_copy_partial+0x70>
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	895b      	ldrh	r3, [r3, #10]
 8008b3e:	88ba      	ldrh	r2, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d305      	bcc.n	8008b50 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	88ba      	ldrh	r2, [r7, #4]
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	80bb      	strh	r3, [r7, #4]
 8008b4e:	e023      	b.n	8008b98 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	895a      	ldrh	r2, [r3, #10]
 8008b54:	88bb      	ldrh	r3, [r7, #4]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008b5a:	8b3a      	ldrh	r2, [r7, #24]
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d901      	bls.n	8008b66 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008b62:	88fb      	ldrh	r3, [r7, #6]
 8008b64:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008b66:	8b7b      	ldrh	r3, [r7, #26]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	18d0      	adds	r0, r2, r3
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	88bb      	ldrh	r3, [r7, #4]
 8008b72:	4413      	add	r3, r2
 8008b74:	8b3a      	ldrh	r2, [r7, #24]
 8008b76:	4619      	mov	r1, r3
 8008b78:	f00b fa29 	bl	8013fce <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008b7c:	8afa      	ldrh	r2, [r7, #22]
 8008b7e:	8b3b      	ldrh	r3, [r7, #24]
 8008b80:	4413      	add	r3, r2
 8008b82:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008b84:	8b7a      	ldrh	r2, [r7, #26]
 8008b86:	8b3b      	ldrh	r3, [r7, #24]
 8008b88:	4413      	add	r3, r2
 8008b8a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	8b3b      	ldrh	r3, [r7, #24]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	61fb      	str	r3, [r7, #28]
 8008b9e:	88fb      	ldrh	r3, [r7, #6]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <pbuf_copy_partial+0xca>
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1c4      	bne.n	8008b34 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008baa:	8afb      	ldrh	r3, [r7, #22]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	0801562c 	.word	0x0801562c
 8008bb8:	08015974 	.word	0x08015974
 8008bbc:	0801568c 	.word	0x0801568c
 8008bc0:	08015994 	.word	0x08015994

08008bc4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	603a      	str	r2, [r7, #0]
 8008bce:	71fb      	strb	r3, [r7, #7]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	8919      	ldrh	r1, [r3, #8]
 8008bd8:	88ba      	ldrh	r2, [r7, #4]
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff faa1 	bl	8008124 <pbuf_alloc>
 8008be2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <pbuf_clone+0x2a>
    return NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e011      	b.n	8008c12 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff fea3 	bl	800893c <pbuf_copy>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008bfa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <pbuf_clone+0x4c>
 8008c02:	4b06      	ldr	r3, [pc, #24]	@ (8008c1c <pbuf_clone+0x58>)
 8008c04:	f240 5224 	movw	r2, #1316	@ 0x524
 8008c08:	4905      	ldr	r1, [pc, #20]	@ (8008c20 <pbuf_clone+0x5c>)
 8008c0a:	4806      	ldr	r0, [pc, #24]	@ (8008c24 <pbuf_clone+0x60>)
 8008c0c:	f00b f8de 	bl	8013dcc <iprintf>
  return q;
 8008c10:	68fb      	ldr	r3, [r7, #12]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	0801562c 	.word	0x0801562c
 8008c20:	08015aa0 	.word	0x08015aa0
 8008c24:	0801568c 	.word	0x0801568c

08008c28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008c2c:	f00a ffce 	bl	8013bcc <rand>
 8008c30:	4603      	mov	r3, r0
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	4b01      	ldr	r3, [pc, #4]	@ (8008c48 <tcp_init+0x20>)
 8008c42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008c44:	bf00      	nop
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000028 	.word	0x20000028

08008c4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	7d1b      	ldrb	r3, [r3, #20]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d105      	bne.n	8008c68 <tcp_free+0x1c>
 8008c5c:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <tcp_free+0x2c>)
 8008c5e:	22d4      	movs	r2, #212	@ 0xd4
 8008c60:	4906      	ldr	r1, [pc, #24]	@ (8008c7c <tcp_free+0x30>)
 8008c62:	4807      	ldr	r0, [pc, #28]	@ (8008c80 <tcp_free+0x34>)
 8008c64:	f00b f8b2 	bl	8013dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	f7fe febc 	bl	80079e8 <memp_free>
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	08015b2c 	.word	0x08015b2c
 8008c7c:	08015b5c 	.word	0x08015b5c
 8008c80:	08015b70 	.word	0x08015b70

08008c84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	7d1b      	ldrb	r3, [r3, #20]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d105      	bne.n	8008ca0 <tcp_free_listen+0x1c>
 8008c94:	4b06      	ldr	r3, [pc, #24]	@ (8008cb0 <tcp_free_listen+0x2c>)
 8008c96:	22df      	movs	r2, #223	@ 0xdf
 8008c98:	4906      	ldr	r1, [pc, #24]	@ (8008cb4 <tcp_free_listen+0x30>)
 8008c9a:	4807      	ldr	r0, [pc, #28]	@ (8008cb8 <tcp_free_listen+0x34>)
 8008c9c:	f00b f896 	bl	8013dcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	2002      	movs	r0, #2
 8008ca4:	f7fe fea0 	bl	80079e8 <memp_free>
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	08015b2c 	.word	0x08015b2c
 8008cb4:	08015b98 	.word	0x08015b98
 8008cb8:	08015b70 	.word	0x08015b70

08008cbc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008cc0:	f001 f85e 	bl	8009d80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008cc4:	4b07      	ldr	r3, [pc, #28]	@ (8008ce4 <tcp_tmr+0x28>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	4b05      	ldr	r3, [pc, #20]	@ (8008ce4 <tcp_tmr+0x28>)
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <tcp_tmr+0x28>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	f003 0301 	and.w	r3, r3, #1
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008cdc:	f000 fd0e 	bl	80096fc <tcp_slowtmr>
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200085f1 	.word	0x200085f1

08008ce8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <tcp_remove_listener+0x1c>
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <tcp_remove_listener+0x48>)
 8008cfa:	22ff      	movs	r2, #255	@ 0xff
 8008cfc:	490d      	ldr	r1, [pc, #52]	@ (8008d34 <tcp_remove_listener+0x4c>)
 8008cfe:	480e      	ldr	r0, [pc, #56]	@ (8008d38 <tcp_remove_listener+0x50>)
 8008d00:	f00b f864 	bl	8013dcc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	e00a      	b.n	8008d20 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d102      	bne.n	8008d1a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1f1      	bne.n	8008d0a <tcp_remove_listener+0x22>
    }
  }
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	08015b2c 	.word	0x08015b2c
 8008d34:	08015bb4 	.word	0x08015bb4
 8008d38:	08015b70 	.word	0x08015b70

08008d3c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <tcp_listen_closed+0x1c>
 8008d4a:	4b14      	ldr	r3, [pc, #80]	@ (8008d9c <tcp_listen_closed+0x60>)
 8008d4c:	f240 1211 	movw	r2, #273	@ 0x111
 8008d50:	4913      	ldr	r1, [pc, #76]	@ (8008da0 <tcp_listen_closed+0x64>)
 8008d52:	4814      	ldr	r0, [pc, #80]	@ (8008da4 <tcp_listen_closed+0x68>)
 8008d54:	f00b f83a 	bl	8013dcc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7d1b      	ldrb	r3, [r3, #20]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d006      	beq.n	8008d6e <tcp_listen_closed+0x32>
 8008d60:	4b0e      	ldr	r3, [pc, #56]	@ (8008d9c <tcp_listen_closed+0x60>)
 8008d62:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008d66:	4910      	ldr	r1, [pc, #64]	@ (8008da8 <tcp_listen_closed+0x6c>)
 8008d68:	480e      	ldr	r0, [pc, #56]	@ (8008da4 <tcp_listen_closed+0x68>)
 8008d6a:	f00b f82f 	bl	8013dcc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d6e:	2301      	movs	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e00b      	b.n	8008d8c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008d74:	4a0d      	ldr	r2, [pc, #52]	@ (8008dac <tcp_listen_closed+0x70>)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff ffb1 	bl	8008ce8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d9f0      	bls.n	8008d74 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	08015b2c 	.word	0x08015b2c
 8008da0:	08015bdc 	.word	0x08015bdc
 8008da4:	08015b70 	.word	0x08015b70
 8008da8:	08015be8 	.word	0x08015be8
 8008dac:	080181cc 	.word	0x080181cc

08008db0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008db0:	b5b0      	push	{r4, r5, r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af04      	add	r7, sp, #16
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <tcp_close_shutdown+0x20>
 8008dc2:	4b63      	ldr	r3, [pc, #396]	@ (8008f50 <tcp_close_shutdown+0x1a0>)
 8008dc4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008dc8:	4962      	ldr	r1, [pc, #392]	@ (8008f54 <tcp_close_shutdown+0x1a4>)
 8008dca:	4863      	ldr	r0, [pc, #396]	@ (8008f58 <tcp_close_shutdown+0x1a8>)
 8008dcc:	f00a fffe 	bl	8013dcc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d066      	beq.n	8008ea4 <tcp_close_shutdown+0xf4>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7d1b      	ldrb	r3, [r3, #20]
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d003      	beq.n	8008de6 <tcp_close_shutdown+0x36>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7d1b      	ldrb	r3, [r3, #20]
 8008de2:	2b07      	cmp	r3, #7
 8008de4:	d15e      	bne.n	8008ea4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <tcp_close_shutdown+0x48>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008df6:	d055      	beq.n	8008ea4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8b5b      	ldrh	r3, [r3, #26]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <tcp_close_shutdown+0x62>
 8008e04:	4b52      	ldr	r3, [pc, #328]	@ (8008f50 <tcp_close_shutdown+0x1a0>)
 8008e06:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008e0a:	4954      	ldr	r1, [pc, #336]	@ (8008f5c <tcp_close_shutdown+0x1ac>)
 8008e0c:	4852      	ldr	r0, [pc, #328]	@ (8008f58 <tcp_close_shutdown+0x1a8>)
 8008e0e:	f00a ffdd 	bl	8013dcc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008e1a:	687d      	ldr	r5, [r7, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	8ad2      	ldrh	r2, [r2, #22]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	8b09      	ldrh	r1, [r1, #24]
 8008e28:	9102      	str	r1, [sp, #8]
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462b      	mov	r3, r5
 8008e30:	4622      	mov	r2, r4
 8008e32:	4601      	mov	r1, r0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f005 fd8b 	bl	800e950 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 fb6e 	bl	800a51c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008e40:	4b47      	ldr	r3, [pc, #284]	@ (8008f60 <tcp_close_shutdown+0x1b0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d105      	bne.n	8008e56 <tcp_close_shutdown+0xa6>
 8008e4a:	4b45      	ldr	r3, [pc, #276]	@ (8008f60 <tcp_close_shutdown+0x1b0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	4a43      	ldr	r2, [pc, #268]	@ (8008f60 <tcp_close_shutdown+0x1b0>)
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	e013      	b.n	8008e7e <tcp_close_shutdown+0xce>
 8008e56:	4b42      	ldr	r3, [pc, #264]	@ (8008f60 <tcp_close_shutdown+0x1b0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e00c      	b.n	8008e78 <tcp_close_shutdown+0xc8>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d104      	bne.n	8008e72 <tcp_close_shutdown+0xc2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	60da      	str	r2, [r3, #12]
 8008e70:	e005      	b.n	8008e7e <tcp_close_shutdown+0xce>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1ef      	bne.n	8008e5e <tcp_close_shutdown+0xae>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	60da      	str	r2, [r3, #12]
 8008e84:	4b37      	ldr	r3, [pc, #220]	@ (8008f64 <tcp_close_shutdown+0x1b4>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008e8a:	4b37      	ldr	r3, [pc, #220]	@ (8008f68 <tcp_close_shutdown+0x1b8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d102      	bne.n	8008e9a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008e94:	f004 f802 	bl	800ce9c <tcp_trigger_input_pcb_close>
 8008e98:	e002      	b.n	8008ea0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fed6 	bl	8008c4c <tcp_free>
      }
      return ERR_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e050      	b.n	8008f46 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7d1b      	ldrb	r3, [r3, #20]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d03b      	beq.n	8008f24 <tcp_close_shutdown+0x174>
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	dc44      	bgt.n	8008f3a <tcp_close_shutdown+0x18a>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <tcp_close_shutdown+0x10a>
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d02a      	beq.n	8008f0e <tcp_close_shutdown+0x15e>
 8008eb8:	e03f      	b.n	8008f3a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	8adb      	ldrh	r3, [r3, #22]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d021      	beq.n	8008f06 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f6c <tcp_close_shutdown+0x1bc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d105      	bne.n	8008ed8 <tcp_close_shutdown+0x128>
 8008ecc:	4b27      	ldr	r3, [pc, #156]	@ (8008f6c <tcp_close_shutdown+0x1bc>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	4a26      	ldr	r2, [pc, #152]	@ (8008f6c <tcp_close_shutdown+0x1bc>)
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	e013      	b.n	8008f00 <tcp_close_shutdown+0x150>
 8008ed8:	4b24      	ldr	r3, [pc, #144]	@ (8008f6c <tcp_close_shutdown+0x1bc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	e00c      	b.n	8008efa <tcp_close_shutdown+0x14a>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d104      	bne.n	8008ef4 <tcp_close_shutdown+0x144>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	e005      	b.n	8008f00 <tcp_close_shutdown+0x150>
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1ef      	bne.n	8008ee0 <tcp_close_shutdown+0x130>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff fea0 	bl	8008c4c <tcp_free>
      break;
 8008f0c:	e01a      	b.n	8008f44 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff ff14 	bl	8008d3c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008f14:	6879      	ldr	r1, [r7, #4]
 8008f16:	4816      	ldr	r0, [pc, #88]	@ (8008f70 <tcp_close_shutdown+0x1c0>)
 8008f18:	f001 fb50 	bl	800a5bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff feb1 	bl	8008c84 <tcp_free_listen>
      break;
 8008f22:	e00f      	b.n	8008f44 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	480e      	ldr	r0, [pc, #56]	@ (8008f60 <tcp_close_shutdown+0x1b0>)
 8008f28:	f001 fb48 	bl	800a5bc <tcp_pcb_remove>
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f64 <tcp_close_shutdown+0x1b4>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff fe8a 	bl	8008c4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008f38:	e004      	b.n	8008f44 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f81a 	bl	8008f74 <tcp_close_shutdown_fin>
 8008f40:	4603      	mov	r3, r0
 8008f42:	e000      	b.n	8008f46 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	08015b2c 	.word	0x08015b2c
 8008f54:	08015c00 	.word	0x08015c00
 8008f58:	08015b70 	.word	0x08015b70
 8008f5c:	08015c20 	.word	0x08015c20
 8008f60:	200085e8 	.word	0x200085e8
 8008f64:	200085f0 	.word	0x200085f0
 8008f68:	20008628 	.word	0x20008628
 8008f6c:	200085e0 	.word	0x200085e0
 8008f70:	200085e4 	.word	0x200085e4

08008f74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d106      	bne.n	8008f90 <tcp_close_shutdown_fin+0x1c>
 8008f82:	4b2e      	ldr	r3, [pc, #184]	@ (800903c <tcp_close_shutdown_fin+0xc8>)
 8008f84:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008f88:	492d      	ldr	r1, [pc, #180]	@ (8009040 <tcp_close_shutdown_fin+0xcc>)
 8008f8a:	482e      	ldr	r0, [pc, #184]	@ (8009044 <tcp_close_shutdown_fin+0xd0>)
 8008f8c:	f00a ff1e 	bl	8013dcc <iprintf>

  switch (pcb->state) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7d1b      	ldrb	r3, [r3, #20]
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	d020      	beq.n	8008fda <tcp_close_shutdown_fin+0x66>
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	dc2b      	bgt.n	8008ff4 <tcp_close_shutdown_fin+0x80>
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d002      	beq.n	8008fa6 <tcp_close_shutdown_fin+0x32>
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d00d      	beq.n	8008fc0 <tcp_close_shutdown_fin+0x4c>
 8008fa4:	e026      	b.n	8008ff4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f004 fde0 	bl	800db6c <tcp_send_fin>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11f      	bne.n	8008ff8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2205      	movs	r2, #5
 8008fbc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fbe:	e01b      	b.n	8008ff8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f004 fdd3 	bl	800db6c <tcp_send_fin>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d114      	bne.n	8008ffc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2205      	movs	r2, #5
 8008fd6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fd8:	e010      	b.n	8008ffc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f004 fdc6 	bl	800db6c <tcp_send_fin>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2209      	movs	r2, #9
 8008ff0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ff2:	e005      	b.n	8009000 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e01c      	b.n	8009032 <tcp_close_shutdown_fin+0xbe>
      break;
 8008ff8:	bf00      	nop
 8008ffa:	e002      	b.n	8009002 <tcp_close_shutdown_fin+0x8e>
      break;
 8008ffc:	bf00      	nop
 8008ffe:	e000      	b.n	8009002 <tcp_close_shutdown_fin+0x8e>
      break;
 8009000:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f004 feec 	bl	800dde8 <tcp_output>
 8009010:	e00d      	b.n	800902e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800901a:	d108      	bne.n	800902e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	8b5b      	ldrh	r3, [r3, #26]
 8009020:	f043 0308 	orr.w	r3, r3, #8
 8009024:	b29a      	uxth	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e001      	b.n	8009032 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800902e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	08015b2c 	.word	0x08015b2c
 8009040:	08015bdc 	.word	0x08015bdc
 8009044:	08015b70 	.word	0x08015b70

08009048 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d109      	bne.n	800906a <tcp_close+0x22>
 8009056:	4b0f      	ldr	r3, [pc, #60]	@ (8009094 <tcp_close+0x4c>)
 8009058:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800905c:	490e      	ldr	r1, [pc, #56]	@ (8009098 <tcp_close+0x50>)
 800905e:	480f      	ldr	r0, [pc, #60]	@ (800909c <tcp_close+0x54>)
 8009060:	f00a feb4 	bl	8013dcc <iprintf>
 8009064:	f06f 030f 	mvn.w	r3, #15
 8009068:	e00f      	b.n	800908a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7d1b      	ldrb	r3, [r3, #20]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d006      	beq.n	8009080 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8b5b      	ldrh	r3, [r3, #26]
 8009076:	f043 0310 	orr.w	r3, r3, #16
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009080:	2101      	movs	r1, #1
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fe94 	bl	8008db0 <tcp_close_shutdown>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	08015b2c 	.word	0x08015b2c
 8009098:	08015c3c 	.word	0x08015c3c
 800909c:	08015b70 	.word	0x08015b70

080090a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08e      	sub	sp, #56	@ 0x38
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d107      	bne.n	80090c0 <tcp_abandon+0x20>
 80090b0:	4b52      	ldr	r3, [pc, #328]	@ (80091fc <tcp_abandon+0x15c>)
 80090b2:	f240 223d 	movw	r2, #573	@ 0x23d
 80090b6:	4952      	ldr	r1, [pc, #328]	@ (8009200 <tcp_abandon+0x160>)
 80090b8:	4852      	ldr	r0, [pc, #328]	@ (8009204 <tcp_abandon+0x164>)
 80090ba:	f00a fe87 	bl	8013dcc <iprintf>
 80090be:	e099      	b.n	80091f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7d1b      	ldrb	r3, [r3, #20]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d106      	bne.n	80090d6 <tcp_abandon+0x36>
 80090c8:	4b4c      	ldr	r3, [pc, #304]	@ (80091fc <tcp_abandon+0x15c>)
 80090ca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80090ce:	494e      	ldr	r1, [pc, #312]	@ (8009208 <tcp_abandon+0x168>)
 80090d0:	484c      	ldr	r0, [pc, #304]	@ (8009204 <tcp_abandon+0x164>)
 80090d2:	f00a fe7b 	bl	8013dcc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	2b0a      	cmp	r3, #10
 80090dc:	d107      	bne.n	80090ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	484a      	ldr	r0, [pc, #296]	@ (800920c <tcp_abandon+0x16c>)
 80090e2:	f001 fa6b 	bl	800a5bc <tcp_pcb_remove>
    tcp_free(pcb);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fdb0 	bl	8008c4c <tcp_free>
 80090ec:	e082      	b.n	80091f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009108:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7d1b      	ldrb	r3, [r3, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d126      	bne.n	8009166 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8adb      	ldrh	r3, [r3, #22]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d02e      	beq.n	800917e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009120:	4b3b      	ldr	r3, [pc, #236]	@ (8009210 <tcp_abandon+0x170>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d105      	bne.n	8009136 <tcp_abandon+0x96>
 800912a:	4b39      	ldr	r3, [pc, #228]	@ (8009210 <tcp_abandon+0x170>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	4a37      	ldr	r2, [pc, #220]	@ (8009210 <tcp_abandon+0x170>)
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	e013      	b.n	800915e <tcp_abandon+0xbe>
 8009136:	4b36      	ldr	r3, [pc, #216]	@ (8009210 <tcp_abandon+0x170>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	e00c      	b.n	8009158 <tcp_abandon+0xb8>
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d104      	bne.n	8009152 <tcp_abandon+0xb2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	e005      	b.n	800915e <tcp_abandon+0xbe>
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1ef      	bne.n	800913e <tcp_abandon+0x9e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	60da      	str	r2, [r3, #12]
 8009164:	e00b      	b.n	800917e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8adb      	ldrh	r3, [r3, #22]
 800916e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4828      	ldr	r0, [pc, #160]	@ (8009214 <tcp_abandon+0x174>)
 8009174:	f001 fa22 	bl	800a5bc <tcp_pcb_remove>
 8009178:	4b27      	ldr	r3, [pc, #156]	@ (8009218 <tcp_abandon+0x178>)
 800917a:	2201      	movs	r2, #1
 800917c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009182:	2b00      	cmp	r3, #0
 8009184:	d004      	beq.n	8009190 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fed8 	bl	8009f40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009194:	2b00      	cmp	r3, #0
 8009196:	d004      	beq.n	80091a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fecf 	bl	8009f40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d004      	beq.n	80091b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fec6 	bl	8009f40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00e      	beq.n	80091d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	8b12      	ldrh	r2, [r2, #24]
 80091c4:	9202      	str	r2, [sp, #8]
 80091c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80091c8:	9201      	str	r2, [sp, #4]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	460b      	mov	r3, r1
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	69b9      	ldr	r1, [r7, #24]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f005 fbbc 	bl	800e950 <tcp_rst>
    }
    last_state = pcb->state;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7d1b      	ldrb	r3, [r3, #20]
 80091dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff fd34 	bl	8008c4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <tcp_abandon+0x154>
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f06f 010c 	mvn.w	r1, #12
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	4798      	blx	r3
  }
}
 80091f4:	3728      	adds	r7, #40	@ 0x28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08015b2c 	.word	0x08015b2c
 8009200:	08015c70 	.word	0x08015c70
 8009204:	08015b70 	.word	0x08015b70
 8009208:	08015c8c 	.word	0x08015c8c
 800920c:	200085ec 	.word	0x200085ec
 8009210:	200085e0 	.word	0x200085e0
 8009214:	200085e8 	.word	0x200085e8
 8009218:	200085f0 	.word	0x200085f0

0800921c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff ff3a 	bl	80090a0 <tcp_abandon>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009242:	2304      	movs	r3, #4
 8009244:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800924c:	4b3e      	ldr	r3, [pc, #248]	@ (8009348 <tcp_bind+0x114>)
 800924e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <tcp_bind+0x36>
 8009256:	4b3d      	ldr	r3, [pc, #244]	@ (800934c <tcp_bind+0x118>)
 8009258:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800925c:	493c      	ldr	r1, [pc, #240]	@ (8009350 <tcp_bind+0x11c>)
 800925e:	483d      	ldr	r0, [pc, #244]	@ (8009354 <tcp_bind+0x120>)
 8009260:	f00a fdb4 	bl	8013dcc <iprintf>
 8009264:	f06f 030f 	mvn.w	r3, #15
 8009268:	e06a      	b.n	8009340 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	7d1b      	ldrb	r3, [r3, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <tcp_bind+0x52>
 8009272:	4b36      	ldr	r3, [pc, #216]	@ (800934c <tcp_bind+0x118>)
 8009274:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8009278:	4937      	ldr	r1, [pc, #220]	@ (8009358 <tcp_bind+0x124>)
 800927a:	4836      	ldr	r0, [pc, #216]	@ (8009354 <tcp_bind+0x120>)
 800927c:	f00a fda6 	bl	8013dcc <iprintf>
 8009280:	f06f 0305 	mvn.w	r3, #5
 8009284:	e05c      	b.n	8009340 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d109      	bne.n	80092a0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800928c:	f000 f9f0 	bl	8009670 <tcp_new_port>
 8009290:	4603      	mov	r3, r0
 8009292:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009294:	88fb      	ldrh	r3, [r7, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d135      	bne.n	8009306 <tcp_bind+0xd2>
      return ERR_BUF;
 800929a:	f06f 0301 	mvn.w	r3, #1
 800929e:	e04f      	b.n	8009340 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80092a0:	2300      	movs	r3, #0
 80092a2:	61fb      	str	r3, [r7, #28]
 80092a4:	e02b      	b.n	80092fe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80092a6:	4a2d      	ldr	r2, [pc, #180]	@ (800935c <tcp_bind+0x128>)
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	e01e      	b.n	80092f2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	8adb      	ldrh	r3, [r3, #22]
 80092b8:	88fa      	ldrh	r2, [r7, #6]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d116      	bne.n	80092ec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80092be:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d010      	beq.n	80092e6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <tcp_bind+0xb2>
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d102      	bne.n	80092ec <tcp_bind+0xb8>
              return ERR_USE;
 80092e6:	f06f 0307 	mvn.w	r3, #7
 80092ea:	e029      	b.n	8009340 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1dd      	bne.n	80092b4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	429a      	cmp	r2, r3
 8009304:	dbcf      	blt.n	80092a6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <tcp_bind+0xf2>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <tcp_bind+0xec>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	e000      	b.n	8009322 <tcp_bind+0xee>
 8009320:	2300      	movs	r3, #0
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	88fa      	ldrh	r2, [r7, #6]
 800932a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800932c:	4b0c      	ldr	r3, [pc, #48]	@ (8009360 <tcp_bind+0x12c>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	60da      	str	r2, [r3, #12]
 8009334:	4a0a      	ldr	r2, [pc, #40]	@ (8009360 <tcp_bind+0x12c>)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	f005 fccb 	bl	800ecd4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	08018204 	.word	0x08018204
 800934c:	08015b2c 	.word	0x08015b2c
 8009350:	08015cc0 	.word	0x08015cc0
 8009354:	08015b70 	.word	0x08015b70
 8009358:	08015cd8 	.word	0x08015cd8
 800935c:	080181cc 	.word	0x080181cc
 8009360:	200085e0 	.word	0x200085e0

08009364 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <tcp_accept_null+0x22>
 8009378:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <tcp_accept_null+0x34>)
 800937a:	f240 320f 	movw	r2, #783	@ 0x30f
 800937e:	4907      	ldr	r1, [pc, #28]	@ (800939c <tcp_accept_null+0x38>)
 8009380:	4807      	ldr	r0, [pc, #28]	@ (80093a0 <tcp_accept_null+0x3c>)
 8009382:	f00a fd23 	bl	8013dcc <iprintf>

  tcp_abort(pcb);
 8009386:	68b8      	ldr	r0, [r7, #8]
 8009388:	f7ff ff48 	bl	800921c <tcp_abort>

  return ERR_ABRT;
 800938c:	f06f 030c 	mvn.w	r3, #12
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	08015b2c 	.word	0x08015b2c
 800939c:	08015d00 	.word	0x08015d00
 80093a0:	08015b70 	.word	0x08015b70

080093a4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	2200      	movs	r2, #0
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f806 	bl	80093c8 <tcp_listen_with_backlog_and_err>
 80093bc:	4603      	mov	r3, r0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	460b      	mov	r3, r1
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <tcp_listen_with_backlog_and_err+0x2c>
 80093e0:	4b47      	ldr	r3, [pc, #284]	@ (8009500 <tcp_listen_with_backlog_and_err+0x138>)
 80093e2:	f240 3259 	movw	r2, #857	@ 0x359
 80093e6:	4947      	ldr	r1, [pc, #284]	@ (8009504 <tcp_listen_with_backlog_and_err+0x13c>)
 80093e8:	4847      	ldr	r0, [pc, #284]	@ (8009508 <tcp_listen_with_backlog_and_err+0x140>)
 80093ea:	f00a fcef 	bl	8013dcc <iprintf>
 80093ee:	23f0      	movs	r3, #240	@ 0xf0
 80093f0:	76fb      	strb	r3, [r7, #27]
 80093f2:	e079      	b.n	80094e8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	7d1b      	ldrb	r3, [r3, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <tcp_listen_with_backlog_and_err+0x48>
 80093fc:	4b40      	ldr	r3, [pc, #256]	@ (8009500 <tcp_listen_with_backlog_and_err+0x138>)
 80093fe:	f240 325a 	movw	r2, #858	@ 0x35a
 8009402:	4942      	ldr	r1, [pc, #264]	@ (800950c <tcp_listen_with_backlog_and_err+0x144>)
 8009404:	4840      	ldr	r0, [pc, #256]	@ (8009508 <tcp_listen_with_backlog_and_err+0x140>)
 8009406:	f00a fce1 	bl	8013dcc <iprintf>
 800940a:	23f1      	movs	r3, #241	@ 0xf1
 800940c:	76fb      	strb	r3, [r7, #27]
 800940e:	e06b      	b.n	80094e8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	7d1b      	ldrb	r3, [r3, #20]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d104      	bne.n	8009422 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800941c:	23f7      	movs	r3, #247	@ 0xf7
 800941e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009420:	e062      	b.n	80094e8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009422:	2002      	movs	r0, #2
 8009424:	f7fe fa70 	bl	8007908 <memp_malloc>
 8009428:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009430:	23ff      	movs	r3, #255	@ 0xff
 8009432:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009434:	e058      	b.n	80094e8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8ada      	ldrh	r2, [r3, #22]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	2201      	movs	r2, #1
 800944a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	7d5a      	ldrb	r2, [r3, #21]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	7a5a      	ldrb	r2, [r3, #9]
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	2200      	movs	r2, #0
 8009460:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	7ada      	ldrb	r2, [r3, #11]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	7a9a      	ldrb	r2, [r3, #10]
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8adb      	ldrh	r3, [r3, #22]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d021      	beq.n	80094c6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009482:	4b23      	ldr	r3, [pc, #140]	@ (8009510 <tcp_listen_with_backlog_and_err+0x148>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	429a      	cmp	r2, r3
 800948a:	d105      	bne.n	8009498 <tcp_listen_with_backlog_and_err+0xd0>
 800948c:	4b20      	ldr	r3, [pc, #128]	@ (8009510 <tcp_listen_with_backlog_and_err+0x148>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	4a1f      	ldr	r2, [pc, #124]	@ (8009510 <tcp_listen_with_backlog_and_err+0x148>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	e013      	b.n	80094c0 <tcp_listen_with_backlog_and_err+0xf8>
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <tcp_listen_with_backlog_and_err+0x148>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	e00c      	b.n	80094ba <tcp_listen_with_backlog_and_err+0xf2>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d104      	bne.n	80094b4 <tcp_listen_with_backlog_and_err+0xec>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	e005      	b.n	80094c0 <tcp_listen_with_backlog_and_err+0xf8>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ef      	bne.n	80094a0 <tcp_listen_with_backlog_and_err+0xd8>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fbc0 	bl	8008c4c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4a11      	ldr	r2, [pc, #68]	@ (8009514 <tcp_listen_with_backlog_and_err+0x14c>)
 80094d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80094d2:	4b11      	ldr	r3, [pc, #68]	@ (8009518 <tcp_listen_with_backlog_and_err+0x150>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	4a0f      	ldr	r2, [pc, #60]	@ (8009518 <tcp_listen_with_backlog_and_err+0x150>)
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	f005 fbf8 	bl	800ecd4 <tcp_timer_needed>
  res = ERR_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7efa      	ldrb	r2, [r7, #27]
 80094f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80094f4:	69fb      	ldr	r3, [r7, #28]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	08015b2c 	.word	0x08015b2c
 8009504:	08015d20 	.word	0x08015d20
 8009508:	08015b70 	.word	0x08015b70
 800950c:	08015d50 	.word	0x08015d50
 8009510:	200085e0 	.word	0x200085e0
 8009514:	08009365 	.word	0x08009365
 8009518:	200085e4 	.word	0x200085e4

0800951c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d106      	bne.n	8009538 <tcp_update_rcv_ann_wnd+0x1c>
 800952a:	4b25      	ldr	r3, [pc, #148]	@ (80095c0 <tcp_update_rcv_ann_wnd+0xa4>)
 800952c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009530:	4924      	ldr	r1, [pc, #144]	@ (80095c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009532:	4825      	ldr	r0, [pc, #148]	@ (80095c8 <tcp_update_rcv_ann_wnd+0xac>)
 8009534:	f00a fc4a 	bl	8013dcc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009540:	4413      	add	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800954c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009550:	bf28      	it	cs
 8009552:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009556:	b292      	uxth	r2, r2
 8009558:	4413      	add	r3, r2
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	db08      	blt.n	8009574 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	e020      	b.n	80095b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd03      	ble.n	800958a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009588:	e014      	b.n	80095b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800959c:	d306      	bcc.n	80095ac <tcp_update_rcv_ann_wnd+0x90>
 800959e:	4b08      	ldr	r3, [pc, #32]	@ (80095c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80095a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80095a4:	4909      	ldr	r1, [pc, #36]	@ (80095cc <tcp_update_rcv_ann_wnd+0xb0>)
 80095a6:	4808      	ldr	r0, [pc, #32]	@ (80095c8 <tcp_update_rcv_ann_wnd+0xac>)
 80095a8:	f00a fc10 	bl	8013dcc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80095b4:	2300      	movs	r3, #0
  }
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	08015b2c 	.word	0x08015b2c
 80095c4:	08015d88 	.word	0x08015d88
 80095c8:	08015b70 	.word	0x08015b70
 80095cc:	08015dac 	.word	0x08015dac

080095d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d107      	bne.n	80095f2 <tcp_recved+0x22>
 80095e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009660 <tcp_recved+0x90>)
 80095e4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80095e8:	491e      	ldr	r1, [pc, #120]	@ (8009664 <tcp_recved+0x94>)
 80095ea:	481f      	ldr	r0, [pc, #124]	@ (8009668 <tcp_recved+0x98>)
 80095ec:	f00a fbee 	bl	8013dcc <iprintf>
 80095f0:	e032      	b.n	8009658 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7d1b      	ldrb	r3, [r3, #20]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d106      	bne.n	8009608 <tcp_recved+0x38>
 80095fa:	4b19      	ldr	r3, [pc, #100]	@ (8009660 <tcp_recved+0x90>)
 80095fc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009600:	491a      	ldr	r1, [pc, #104]	@ (800966c <tcp_recved+0x9c>)
 8009602:	4819      	ldr	r0, [pc, #100]	@ (8009668 <tcp_recved+0x98>)
 8009604:	f00a fbe2 	bl	8013dcc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800960c:	887b      	ldrh	r3, [r7, #2]
 800960e:	4413      	add	r3, r2
 8009610:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009612:	89fb      	ldrh	r3, [r7, #14]
 8009614:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009618:	d804      	bhi.n	8009624 <tcp_recved+0x54>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800961e:	89fa      	ldrh	r2, [r7, #14]
 8009620:	429a      	cmp	r2, r3
 8009622:	d204      	bcs.n	800962e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800962a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800962c:	e002      	b.n	8009634 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	89fa      	ldrh	r2, [r7, #14]
 8009632:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff71 	bl	800951c <tcp_update_rcv_ann_wnd>
 800963a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009642:	d309      	bcc.n	8009658 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8b5b      	ldrh	r3, [r3, #26]
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f004 fbc8 	bl	800dde8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	08015b2c 	.word	0x08015b2c
 8009664:	08015dc8 	.word	0x08015dc8
 8009668:	08015b70 	.word	0x08015b70
 800966c:	08015de0 	.word	0x08015de0

08009670 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800967a:	4b1e      	ldr	r3, [pc, #120]	@ (80096f4 <tcp_new_port+0x84>)
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	3301      	adds	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	4b1c      	ldr	r3, [pc, #112]	@ (80096f4 <tcp_new_port+0x84>)
 8009684:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009686:	4b1b      	ldr	r3, [pc, #108]	@ (80096f4 <tcp_new_port+0x84>)
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800968e:	4293      	cmp	r3, r2
 8009690:	d103      	bne.n	800969a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009692:	4b18      	ldr	r3, [pc, #96]	@ (80096f4 <tcp_new_port+0x84>)
 8009694:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8009698:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800969a:	2300      	movs	r3, #0
 800969c:	71fb      	strb	r3, [r7, #7]
 800969e:	e01e      	b.n	80096de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	4a15      	ldr	r2, [pc, #84]	@ (80096f8 <tcp_new_port+0x88>)
 80096a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	e011      	b.n	80096d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	8ada      	ldrh	r2, [r3, #22]
 80096b2:	4b10      	ldr	r3, [pc, #64]	@ (80096f4 <tcp_new_port+0x84>)
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d108      	bne.n	80096cc <tcp_new_port+0x5c>
        n++;
 80096ba:	88bb      	ldrh	r3, [r7, #4]
 80096bc:	3301      	adds	r3, #1
 80096be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80096c0:	88bb      	ldrh	r3, [r7, #4]
 80096c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096c6:	d3d8      	bcc.n	800967a <tcp_new_port+0xa>
          return 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	e00d      	b.n	80096e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	603b      	str	r3, [r7, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1ea      	bne.n	80096ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	3301      	adds	r3, #1
 80096dc:	71fb      	strb	r3, [r7, #7]
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d9dd      	bls.n	80096a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80096e4:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <tcp_new_port+0x84>)
 80096e6:	881b      	ldrh	r3, [r3, #0]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	20000028 	.word	0x20000028
 80096f8:	080181cc 	.word	0x080181cc

080096fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80096fc:	b5b0      	push	{r4, r5, r7, lr}
 80096fe:	b090      	sub	sp, #64	@ 0x40
 8009700:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009708:	4b95      	ldr	r3, [pc, #596]	@ (8009960 <tcp_slowtmr+0x264>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3301      	adds	r3, #1
 800970e:	4a94      	ldr	r2, [pc, #592]	@ (8009960 <tcp_slowtmr+0x264>)
 8009710:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009712:	4b94      	ldr	r3, [pc, #592]	@ (8009964 <tcp_slowtmr+0x268>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	3301      	adds	r3, #1
 8009718:	b2da      	uxtb	r2, r3
 800971a:	4b92      	ldr	r3, [pc, #584]	@ (8009964 <tcp_slowtmr+0x268>)
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e000      	b.n	8009722 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009720:	bf00      	nop
  prev = NULL;
 8009722:	2300      	movs	r3, #0
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009726:	4b90      	ldr	r3, [pc, #576]	@ (8009968 <tcp_slowtmr+0x26c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800972c:	e29d      	b.n	8009c6a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	7d1b      	ldrb	r3, [r3, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <tcp_slowtmr+0x48>
 8009736:	4b8d      	ldr	r3, [pc, #564]	@ (800996c <tcp_slowtmr+0x270>)
 8009738:	f240 42be 	movw	r2, #1214	@ 0x4be
 800973c:	498c      	ldr	r1, [pc, #560]	@ (8009970 <tcp_slowtmr+0x274>)
 800973e:	488d      	ldr	r0, [pc, #564]	@ (8009974 <tcp_slowtmr+0x278>)
 8009740:	f00a fb44 	bl	8013dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009746:	7d1b      	ldrb	r3, [r3, #20]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d106      	bne.n	800975a <tcp_slowtmr+0x5e>
 800974c:	4b87      	ldr	r3, [pc, #540]	@ (800996c <tcp_slowtmr+0x270>)
 800974e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009752:	4989      	ldr	r1, [pc, #548]	@ (8009978 <tcp_slowtmr+0x27c>)
 8009754:	4887      	ldr	r0, [pc, #540]	@ (8009974 <tcp_slowtmr+0x278>)
 8009756:	f00a fb39 	bl	8013dcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	7d1b      	ldrb	r3, [r3, #20]
 800975e:	2b0a      	cmp	r3, #10
 8009760:	d106      	bne.n	8009770 <tcp_slowtmr+0x74>
 8009762:	4b82      	ldr	r3, [pc, #520]	@ (800996c <tcp_slowtmr+0x270>)
 8009764:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009768:	4984      	ldr	r1, [pc, #528]	@ (800997c <tcp_slowtmr+0x280>)
 800976a:	4882      	ldr	r0, [pc, #520]	@ (8009974 <tcp_slowtmr+0x278>)
 800976c:	f00a fb2e 	bl	8013dcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	7f9a      	ldrb	r2, [r3, #30]
 8009774:	4b7b      	ldr	r3, [pc, #492]	@ (8009964 <tcp_slowtmr+0x268>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d105      	bne.n	8009788 <tcp_slowtmr+0x8c>
      prev = pcb;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009786:	e270      	b.n	8009c6a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009788:	4b76      	ldr	r3, [pc, #472]	@ (8009964 <tcp_slowtmr+0x268>)
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	7d1b      	ldrb	r3, [r3, #20]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d10a      	bne.n	80097ba <tcp_slowtmr+0xbe>
 80097a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d905      	bls.n	80097ba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80097ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097b2:	3301      	adds	r3, #1
 80097b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097b8:	e11e      	b.n	80099f8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097c0:	2b0b      	cmp	r3, #11
 80097c2:	d905      	bls.n	80097d0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80097c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097c8:	3301      	adds	r3, #1
 80097ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097ce:	e113      	b.n	80099f8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80097d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d075      	beq.n	80098c6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <tcp_slowtmr+0xf4>
 80097e2:	4b62      	ldr	r3, [pc, #392]	@ (800996c <tcp_slowtmr+0x270>)
 80097e4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80097e8:	4965      	ldr	r1, [pc, #404]	@ (8009980 <tcp_slowtmr+0x284>)
 80097ea:	4862      	ldr	r0, [pc, #392]	@ (8009974 <tcp_slowtmr+0x278>)
 80097ec:	f00a faee 	bl	8013dcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80097f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d106      	bne.n	8009806 <tcp_slowtmr+0x10a>
 80097f8:	4b5c      	ldr	r3, [pc, #368]	@ (800996c <tcp_slowtmr+0x270>)
 80097fa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80097fe:	4961      	ldr	r1, [pc, #388]	@ (8009984 <tcp_slowtmr+0x288>)
 8009800:	485c      	ldr	r0, [pc, #368]	@ (8009974 <tcp_slowtmr+0x278>)
 8009802:	f00a fae3 	bl	8013dcc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009808:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800980c:	2b0b      	cmp	r3, #11
 800980e:	d905      	bls.n	800981c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009814:	3301      	adds	r3, #1
 8009816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800981a:	e0ed      	b.n	80099f8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800981c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009822:	3b01      	subs	r3, #1
 8009824:	4a58      	ldr	r2, [pc, #352]	@ (8009988 <tcp_slowtmr+0x28c>)
 8009826:	5cd3      	ldrb	r3, [r2, r3]
 8009828:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800982a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009830:	7c7a      	ldrb	r2, [r7, #17]
 8009832:	429a      	cmp	r2, r3
 8009834:	d907      	bls.n	8009846 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009838:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800983c:	3301      	adds	r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009842:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009848:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800984c:	7c7a      	ldrb	r2, [r7, #17]
 800984e:	429a      	cmp	r2, r3
 8009850:	f200 80d2 	bhi.w	80099f8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009854:	2301      	movs	r3, #1
 8009856:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800985e:	2b00      	cmp	r3, #0
 8009860:	d108      	bne.n	8009874 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009862:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009864:	f005 f968 	bl	800eb38 <tcp_zero_window_probe>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d014      	beq.n	8009898 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800986e:	2300      	movs	r3, #0
 8009870:	623b      	str	r3, [r7, #32]
 8009872:	e011      	b.n	8009898 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800987a:	4619      	mov	r1, r3
 800987c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800987e:	f004 f82d 	bl	800d8dc <tcp_split_unsent_seg>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800988a:	f004 faad 	bl	800dde8 <tcp_output>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80ac 	beq.w	80099f8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80098a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80098a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80098ae:	2b06      	cmp	r3, #6
 80098b0:	f200 80a2 	bhi.w	80099f8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80098ba:	3301      	adds	r3, #1
 80098bc:	b2da      	uxtb	r2, r3
 80098be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80098c4:	e098      	b.n	80099f8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80098c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db0f      	blt.n	80098f0 <tcp_slowtmr+0x1f4>
 80098d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80098da:	4293      	cmp	r3, r2
 80098dc:	d008      	beq.n	80098f0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3301      	adds	r3, #1
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	b21a      	sxth	r2, r3
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80098f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80098f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80098fc:	429a      	cmp	r2, r3
 80098fe:	db7b      	blt.n	80099f8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009900:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009902:	f004 fd65 	bl	800e3d0 <tcp_rexmit_rto_prepare>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d007      	beq.n	800991c <tcp_slowtmr+0x220>
 800990c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009910:	2b00      	cmp	r3, #0
 8009912:	d171      	bne.n	80099f8 <tcp_slowtmr+0x2fc>
 8009914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d06d      	beq.n	80099f8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b02      	cmp	r3, #2
 8009922:	d03a      	beq.n	800999a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800992a:	2b0c      	cmp	r3, #12
 800992c:	bf28      	it	cs
 800992e:	230c      	movcs	r3, #12
 8009930:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009934:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009938:	10db      	asrs	r3, r3, #3
 800993a:	b21b      	sxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009940:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009944:	4413      	add	r3, r2
 8009946:	7efa      	ldrb	r2, [r7, #27]
 8009948:	4910      	ldr	r1, [pc, #64]	@ (800998c <tcp_slowtmr+0x290>)
 800994a:	5c8a      	ldrb	r2, [r1, r2]
 800994c:	4093      	lsls	r3, r2
 800994e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009956:	4293      	cmp	r3, r2
 8009958:	dc1a      	bgt.n	8009990 <tcp_slowtmr+0x294>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	b21a      	sxth	r2, r3
 800995e:	e019      	b.n	8009994 <tcp_slowtmr+0x298>
 8009960:	200085dc 	.word	0x200085dc
 8009964:	200085f2 	.word	0x200085f2
 8009968:	200085e8 	.word	0x200085e8
 800996c:	08015b2c 	.word	0x08015b2c
 8009970:	08015e70 	.word	0x08015e70
 8009974:	08015b70 	.word	0x08015b70
 8009978:	08015e9c 	.word	0x08015e9c
 800997c:	08015ec8 	.word	0x08015ec8
 8009980:	08015ef8 	.word	0x08015ef8
 8009984:	08015f2c 	.word	0x08015f2c
 8009988:	080181c4 	.word	0x080181c4
 800998c:	080181b4 	.word	0x080181b4
 8009990:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800999a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999c:	2200      	movs	r2, #0
 800999e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80099ac:	4293      	cmp	r3, r2
 80099ae:	bf28      	it	cs
 80099b0:	4613      	movcs	r3, r2
 80099b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80099b4:	8a7b      	ldrh	r3, [r7, #18]
 80099b6:	085b      	lsrs	r3, r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d206      	bcs.n	80099e0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80099d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80099e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80099f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099f4:	f004 fd5c 	bl	800e4b0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80099f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
 80099fc:	2b06      	cmp	r3, #6
 80099fe:	d111      	bne.n	8009a24 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	8b5b      	ldrh	r3, [r3, #26]
 8009a04:	f003 0310 	and.w	r3, r3, #16
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00b      	beq.n	8009a24 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b28      	cmp	r3, #40	@ 0x28
 8009a18:	d904      	bls.n	8009a24 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	7a5b      	ldrb	r3, [r3, #9]
 8009a28:	f003 0308 	and.w	r3, r3, #8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d04a      	beq.n	8009ac6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a34:	2b04      	cmp	r3, #4
 8009a36:	d003      	beq.n	8009a40 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009a3c:	2b07      	cmp	r3, #7
 8009a3e:	d142      	bne.n	8009ac6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a40:	4b8f      	ldr	r3, [pc, #572]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009a50:	4b8c      	ldr	r3, [pc, #560]	@ (8009c84 <tcp_slowtmr+0x588>)
 8009a52:	440b      	add	r3, r1
 8009a54:	498c      	ldr	r1, [pc, #560]	@ (8009c88 <tcp_slowtmr+0x58c>)
 8009a56:	fba1 1303 	umull	r1, r3, r1, r3
 8009a5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d90a      	bls.n	8009a76 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a64:	3301      	adds	r3, #1
 8009a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009a74:	e027      	b.n	8009ac6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a76:	4b82      	ldr	r3, [pc, #520]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a82:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a88:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8009c8c <tcp_slowtmr+0x590>)
 8009a90:	fb00 f303 	mul.w	r3, r0, r3
 8009a94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009a96:	497c      	ldr	r1, [pc, #496]	@ (8009c88 <tcp_slowtmr+0x58c>)
 8009a98:	fba1 1303 	umull	r1, r3, r1, r3
 8009a9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d911      	bls.n	8009ac6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009aa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009aa4:	f005 f808 	bl	800eab8 <tcp_keepalive>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009aae:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d107      	bne.n	8009ac6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009abc:	3301      	adds	r3, #1
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d011      	beq.n	8009af2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009ace:	4b6c      	ldr	r3, [pc, #432]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ada:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009ade:	4619      	mov	r1, r3
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	440b      	add	r3, r1
 8009ae6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d302      	bcc.n	8009af2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009aee:	f000 fec9 	bl	800a884 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	7d1b      	ldrb	r3, [r3, #20]
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d10b      	bne.n	8009b12 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009afa:	4b61      	ldr	r3, [pc, #388]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b28      	cmp	r3, #40	@ 0x28
 8009b06:	d904      	bls.n	8009b12 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b14:	7d1b      	ldrb	r3, [r3, #20]
 8009b16:	2b09      	cmp	r3, #9
 8009b18:	d10b      	bne.n	8009b32 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b1a:	4b59      	ldr	r3, [pc, #356]	@ (8009c80 <tcp_slowtmr+0x584>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2bf0      	cmp	r3, #240	@ 0xf0
 8009b26:	d904      	bls.n	8009b32 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d060      	beq.n	8009bfc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b40:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009b42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b44:	f000 fcea 	bl	800a51c <tcp_pcb_purge>
      if (prev != NULL) {
 8009b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d010      	beq.n	8009b70 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009b4e:	4b50      	ldr	r3, [pc, #320]	@ (8009c90 <tcp_slowtmr+0x594>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d106      	bne.n	8009b66 <tcp_slowtmr+0x46a>
 8009b58:	4b4e      	ldr	r3, [pc, #312]	@ (8009c94 <tcp_slowtmr+0x598>)
 8009b5a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009b5e:	494e      	ldr	r1, [pc, #312]	@ (8009c98 <tcp_slowtmr+0x59c>)
 8009b60:	484e      	ldr	r0, [pc, #312]	@ (8009c9c <tcp_slowtmr+0x5a0>)
 8009b62:	f00a f933 	bl	8013dcc <iprintf>
        prev->next = pcb->next;
 8009b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	e00f      	b.n	8009b90 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009b70:	4b47      	ldr	r3, [pc, #284]	@ (8009c90 <tcp_slowtmr+0x594>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d006      	beq.n	8009b88 <tcp_slowtmr+0x48c>
 8009b7a:	4b46      	ldr	r3, [pc, #280]	@ (8009c94 <tcp_slowtmr+0x598>)
 8009b7c:	f240 5271 	movw	r2, #1393	@ 0x571
 8009b80:	4947      	ldr	r1, [pc, #284]	@ (8009ca0 <tcp_slowtmr+0x5a4>)
 8009b82:	4846      	ldr	r0, [pc, #280]	@ (8009c9c <tcp_slowtmr+0x5a0>)
 8009b84:	f00a f922 	bl	8013dcc <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	4a40      	ldr	r2, [pc, #256]	@ (8009c90 <tcp_slowtmr+0x594>)
 8009b8e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009ba0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ba8:	8ad2      	ldrh	r2, [r2, #22]
 8009baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bac:	8b09      	ldrh	r1, [r1, #24]
 8009bae:	9102      	str	r1, [sp, #8]
 8009bb0:	9201      	str	r2, [sp, #4]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4601      	mov	r1, r0
 8009bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bbc:	f004 fec8 	bl	800e950 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc8:	7d1b      	ldrb	r3, [r3, #20]
 8009bca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009bd6:	6838      	ldr	r0, [r7, #0]
 8009bd8:	f7ff f838 	bl	8008c4c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009bdc:	4b31      	ldr	r3, [pc, #196]	@ (8009ca4 <tcp_slowtmr+0x5a8>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <tcp_slowtmr+0x4f6>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f06f 010c 	mvn.w	r1, #12
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca4 <tcp_slowtmr+0x5a8>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d037      	beq.n	8009c6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009bfa:	e592      	b.n	8009722 <tcp_slowtmr+0x26>
      prev = pcb;
 8009bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	7f1b      	ldrb	r3, [r3, #28]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c14:	7f1a      	ldrb	r2, [r3, #28]
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	7f5b      	ldrb	r3, [r3, #29]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d325      	bcc.n	8009c6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009c24:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca4 <tcp_slowtmr+0x5a8>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00b      	beq.n	8009c4c <tcp_slowtmr+0x550>
 8009c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c3c:	6912      	ldr	r2, [r2, #16]
 8009c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	4603      	mov	r3, r0
 8009c46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009c4a:	e002      	b.n	8009c52 <tcp_slowtmr+0x556>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009c52:	4b14      	ldr	r3, [pc, #80]	@ (8009ca4 <tcp_slowtmr+0x5a8>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f ad62 	bne.w	8009720 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009c5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c66:	f004 f8bf 	bl	800dde8 <tcp_output>
  while (pcb != NULL) {
 8009c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f47f ad5e 	bne.w	800972e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009c76:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca8 <tcp_slowtmr+0x5ac>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009c7c:	e069      	b.n	8009d52 <tcp_slowtmr+0x656>
 8009c7e:	bf00      	nop
 8009c80:	200085dc 	.word	0x200085dc
 8009c84:	000a4cb8 	.word	0x000a4cb8
 8009c88:	10624dd3 	.word	0x10624dd3
 8009c8c:	000124f8 	.word	0x000124f8
 8009c90:	200085e8 	.word	0x200085e8
 8009c94:	08015b2c 	.word	0x08015b2c
 8009c98:	08015f64 	.word	0x08015f64
 8009c9c:	08015b70 	.word	0x08015b70
 8009ca0:	08015f90 	.word	0x08015f90
 8009ca4:	200085f0 	.word	0x200085f0
 8009ca8:	200085ec 	.word	0x200085ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	7d1b      	ldrb	r3, [r3, #20]
 8009cb0:	2b0a      	cmp	r3, #10
 8009cb2:	d006      	beq.n	8009cc2 <tcp_slowtmr+0x5c6>
 8009cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8009d64 <tcp_slowtmr+0x668>)
 8009cb6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009cba:	492b      	ldr	r1, [pc, #172]	@ (8009d68 <tcp_slowtmr+0x66c>)
 8009cbc:	482b      	ldr	r0, [pc, #172]	@ (8009d6c <tcp_slowtmr+0x670>)
 8009cbe:	f00a f885 	bl	8013dcc <iprintf>
    pcb_remove = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009cc8:	4b29      	ldr	r3, [pc, #164]	@ (8009d70 <tcp_slowtmr+0x674>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2bf0      	cmp	r3, #240	@ 0xf0
 8009cd4:	d904      	bls.n	8009ce0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cda:	3301      	adds	r3, #1
 8009cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02f      	beq.n	8009d48 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009ce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cea:	f000 fc17 	bl	800a51c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d010      	beq.n	8009d16 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d74 <tcp_slowtmr+0x678>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d106      	bne.n	8009d0c <tcp_slowtmr+0x610>
 8009cfe:	4b19      	ldr	r3, [pc, #100]	@ (8009d64 <tcp_slowtmr+0x668>)
 8009d00:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009d04:	491c      	ldr	r1, [pc, #112]	@ (8009d78 <tcp_slowtmr+0x67c>)
 8009d06:	4819      	ldr	r0, [pc, #100]	@ (8009d6c <tcp_slowtmr+0x670>)
 8009d08:	f00a f860 	bl	8013dcc <iprintf>
        prev->next = pcb->next;
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	60da      	str	r2, [r3, #12]
 8009d14:	e00f      	b.n	8009d36 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009d16:	4b17      	ldr	r3, [pc, #92]	@ (8009d74 <tcp_slowtmr+0x678>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d006      	beq.n	8009d2e <tcp_slowtmr+0x632>
 8009d20:	4b10      	ldr	r3, [pc, #64]	@ (8009d64 <tcp_slowtmr+0x668>)
 8009d22:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009d26:	4915      	ldr	r1, [pc, #84]	@ (8009d7c <tcp_slowtmr+0x680>)
 8009d28:	4810      	ldr	r0, [pc, #64]	@ (8009d6c <tcp_slowtmr+0x670>)
 8009d2a:	f00a f84f 	bl	8013dcc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	4a10      	ldr	r2, [pc, #64]	@ (8009d74 <tcp_slowtmr+0x678>)
 8009d34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009d40:	69f8      	ldr	r0, [r7, #28]
 8009d42:	f7fe ff83 	bl	8008c4c <tcp_free>
 8009d46:	e004      	b.n	8009d52 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1a9      	bne.n	8009cac <tcp_slowtmr+0x5b0>
    }
  }
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	3730      	adds	r7, #48	@ 0x30
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bdb0      	pop	{r4, r5, r7, pc}
 8009d62:	bf00      	nop
 8009d64:	08015b2c 	.word	0x08015b2c
 8009d68:	08015fbc 	.word	0x08015fbc
 8009d6c:	08015b70 	.word	0x08015b70
 8009d70:	200085dc 	.word	0x200085dc
 8009d74:	200085ec 	.word	0x200085ec
 8009d78:	08015fec 	.word	0x08015fec
 8009d7c:	08016014 	.word	0x08016014

08009d80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d86:	4b2d      	ldr	r3, [pc, #180]	@ (8009e3c <tcp_fasttmr+0xbc>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8009e3c <tcp_fasttmr+0xbc>)
 8009d90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d92:	4b2b      	ldr	r3, [pc, #172]	@ (8009e40 <tcp_fasttmr+0xc0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d98:	e048      	b.n	8009e2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	7f9a      	ldrb	r2, [r3, #30]
 8009d9e:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <tcp_fasttmr+0xbc>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d03f      	beq.n	8009e26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009da6:	4b25      	ldr	r3, [pc, #148]	@ (8009e3c <tcp_fasttmr+0xbc>)
 8009da8:	781a      	ldrb	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8b5b      	ldrh	r3, [r3, #26]
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d010      	beq.n	8009ddc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	8b5b      	ldrh	r3, [r3, #26]
 8009dbe:	f043 0302 	orr.w	r3, r3, #2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f004 f80d 	bl	800dde8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8b5b      	ldrh	r3, [r3, #26]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	8b5b      	ldrh	r3, [r3, #26]
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	8b5b      	ldrh	r3, [r3, #26]
 8009dec:	f023 0308 	bic.w	r3, r3, #8
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff f8bc 	bl	8008f74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <tcp_fasttmr+0xc4>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f819 	bl	8009e48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009e16:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <tcp_fasttmr+0xc4>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d000      	beq.n	8009e20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009e1e:	e7b8      	b.n	8009d92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	607b      	str	r3, [r7, #4]
 8009e24:	e002      	b.n	8009e2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1b3      	bne.n	8009d9a <tcp_fasttmr+0x1a>
    }
  }
}
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	200085f2 	.word	0x200085f2
 8009e40:	200085e8 	.word	0x200085e8
 8009e44:	200085f0 	.word	0x200085f0

08009e48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009e48:	b590      	push	{r4, r7, lr}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d109      	bne.n	8009e6a <tcp_process_refused_data+0x22>
 8009e56:	4b37      	ldr	r3, [pc, #220]	@ (8009f34 <tcp_process_refused_data+0xec>)
 8009e58:	f240 6209 	movw	r2, #1545	@ 0x609
 8009e5c:	4936      	ldr	r1, [pc, #216]	@ (8009f38 <tcp_process_refused_data+0xf0>)
 8009e5e:	4837      	ldr	r0, [pc, #220]	@ (8009f3c <tcp_process_refused_data+0xf4>)
 8009e60:	f009 ffb4 	bl	8013dcc <iprintf>
 8009e64:	f06f 030f 	mvn.w	r3, #15
 8009e68:	e060      	b.n	8009f2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e6e:	7b5b      	ldrb	r3, [r3, #13]
 8009e70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <tcp_process_refused_data+0x58>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6918      	ldr	r0, [r3, #16]
 8009e92:	2300      	movs	r3, #0
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	47a0      	blx	r4
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73fb      	strb	r3, [r7, #15]
 8009e9e:	e007      	b.n	8009eb0 <tcp_process_refused_data+0x68>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f000 f8c2 	bl	800a030 <tcp_recv_null>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d12a      	bne.n	8009f0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	f003 0320 	and.w	r3, r3, #32
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d033      	beq.n	8009f2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ec6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009eca:	d005      	beq.n	8009ed8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <tcp_process_refused_data+0xb2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6918      	ldr	r0, [r3, #16]
 8009eec:	2300      	movs	r3, #0
 8009eee:	2200      	movs	r2, #0
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	47a0      	blx	r4
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
 8009ef8:	e001      	b.n	8009efe <tcp_process_refused_data+0xb6>
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f02:	f113 0f0d 	cmn.w	r3, #13
 8009f06:	d110      	bne.n	8009f2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009f08:	f06f 030c 	mvn.w	r3, #12
 8009f0c:	e00e      	b.n	8009f2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f12:	f113 0f0d 	cmn.w	r3, #13
 8009f16:	d102      	bne.n	8009f1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009f18:	f06f 030c 	mvn.w	r3, #12
 8009f1c:	e006      	b.n	8009f2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009f24:	f06f 0304 	mvn.w	r3, #4
 8009f28:	e000      	b.n	8009f2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd90      	pop	{r4, r7, pc}
 8009f34:	08015b2c 	.word	0x08015b2c
 8009f38:	0801603c 	.word	0x0801603c
 8009f3c:	08015b70 	.word	0x08015b70

08009f40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009f48:	e007      	b.n	8009f5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f80a 	bl	8009f6a <tcp_seg_free>
    seg = next;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f4      	bne.n	8009f4a <tcp_segs_free+0xa>
  }
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00c      	beq.n	8009f92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fbb1 	bl	80086ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	2003      	movs	r0, #3
 8009f8e:	f7fd fd2b 	bl	80079e8 <memp_free>
  }
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d107      	bne.n	8009fbe <tcp_setprio+0x22>
 8009fae:	4b07      	ldr	r3, [pc, #28]	@ (8009fcc <tcp_setprio+0x30>)
 8009fb0:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009fb4:	4906      	ldr	r1, [pc, #24]	@ (8009fd0 <tcp_setprio+0x34>)
 8009fb6:	4807      	ldr	r0, [pc, #28]	@ (8009fd4 <tcp_setprio+0x38>)
 8009fb8:	f009 ff08 	bl	8013dcc <iprintf>
 8009fbc:	e002      	b.n	8009fc4 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	755a      	strb	r2, [r3, #21]
}
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	08015b2c 	.word	0x08015b2c
 8009fd0:	08016064 	.word	0x08016064
 8009fd4:	08015b70 	.word	0x08015b70

08009fd8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <tcp_seg_copy+0x1c>
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <tcp_seg_copy+0x4c>)
 8009fe8:	f240 6282 	movw	r2, #1666	@ 0x682
 8009fec:	490e      	ldr	r1, [pc, #56]	@ (800a028 <tcp_seg_copy+0x50>)
 8009fee:	480f      	ldr	r0, [pc, #60]	@ (800a02c <tcp_seg_copy+0x54>)
 8009ff0:	f009 feec 	bl	8013dcc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009ff4:	2003      	movs	r0, #3
 8009ff6:	f7fd fc87 	bl	8007908 <memp_malloc>
 8009ffa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <tcp_seg_copy+0x2e>
    return NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	e00a      	b.n	800a01c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a006:	2210      	movs	r2, #16
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f009 ffdf 	bl	8013fce <memcpy>
  pbuf_ref(cseg->p);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fc09 	bl	800882c <pbuf_ref>
  return cseg;
 800a01a:	68fb      	ldr	r3, [r7, #12]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	08015b2c 	.word	0x08015b2c
 800a028:	08016080 	.word	0x08016080
 800a02c:	08015b70 	.word	0x08015b70

0800a030 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d109      	bne.n	800a058 <tcp_recv_null+0x28>
 800a044:	4b12      	ldr	r3, [pc, #72]	@ (800a090 <tcp_recv_null+0x60>)
 800a046:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a04a:	4912      	ldr	r1, [pc, #72]	@ (800a094 <tcp_recv_null+0x64>)
 800a04c:	4812      	ldr	r0, [pc, #72]	@ (800a098 <tcp_recv_null+0x68>)
 800a04e:	f009 febd 	bl	8013dcc <iprintf>
 800a052:	f06f 030f 	mvn.w	r3, #15
 800a056:	e016      	b.n	800a086 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d009      	beq.n	800a072 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	891b      	ldrh	r3, [r3, #8]
 800a062:	4619      	mov	r1, r3
 800a064:	68b8      	ldr	r0, [r7, #8]
 800a066:	f7ff fab3 	bl	80095d0 <tcp_recved>
    pbuf_free(p);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe fb3e 	bl	80086ec <pbuf_free>
 800a070:	e008      	b.n	800a084 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d104      	bne.n	800a084 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a07a:	68b8      	ldr	r0, [r7, #8]
 800a07c:	f7fe ffe4 	bl	8009048 <tcp_close>
 800a080:	4603      	mov	r3, r0
 800a082:	e000      	b.n	800a086 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	08015b2c 	.word	0x08015b2c
 800a094:	0801609c 	.word	0x0801609c
 800a098:	08015b70 	.word	0x08015b70

0800a09c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db01      	blt.n	800a0b2 <tcp_kill_prio+0x16>
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	e000      	b.n	800a0b4 <tcp_kill_prio+0x18>
 800a0b2:	237f      	movs	r3, #127	@ 0x7f
 800a0b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d034      	beq.n	800a126 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0ca:	4b19      	ldr	r3, [pc, #100]	@ (800a130 <tcp_kill_prio+0x94>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	e01f      	b.n	800a112 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	7d5b      	ldrb	r3, [r3, #21]
 800a0d6:	7afa      	ldrb	r2, [r7, #11]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d80c      	bhi.n	800a0f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a0e0:	7afa      	ldrb	r2, [r7, #11]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d112      	bne.n	800a10c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a0e6:	4b13      	ldr	r3, [pc, #76]	@ (800a134 <tcp_kill_prio+0x98>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d80a      	bhi.n	800a10c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a134 <tcp_kill_prio+0x98>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	7d5b      	ldrb	r3, [r3, #21]
 800a10a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1dc      	bne.n	800a0d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a11e:	6938      	ldr	r0, [r7, #16]
 800a120:	f7ff f87c 	bl	800921c <tcp_abort>
 800a124:	e000      	b.n	800a128 <tcp_kill_prio+0x8c>
    return;
 800a126:	bf00      	nop
  }
}
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	200085e8 	.word	0x200085e8
 800a134:	200085dc 	.word	0x200085dc

0800a138 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d009      	beq.n	800a15c <tcp_kill_state+0x24>
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d006      	beq.n	800a15c <tcp_kill_state+0x24>
 800a14e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b8 <tcp_kill_state+0x80>)
 800a150:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a154:	4919      	ldr	r1, [pc, #100]	@ (800a1bc <tcp_kill_state+0x84>)
 800a156:	481a      	ldr	r0, [pc, #104]	@ (800a1c0 <tcp_kill_state+0x88>)
 800a158:	f009 fe38 	bl	8013dcc <iprintf>

  inactivity = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a160:	2300      	movs	r3, #0
 800a162:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a164:	4b17      	ldr	r3, [pc, #92]	@ (800a1c4 <tcp_kill_state+0x8c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	e017      	b.n	800a19c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	7d1b      	ldrb	r3, [r3, #20]
 800a170:	79fa      	ldrb	r2, [r7, #7]
 800a172:	429a      	cmp	r2, r3
 800a174:	d10f      	bne.n	800a196 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a176:	4b14      	ldr	r3, [pc, #80]	@ (800a1c8 <tcp_kill_state+0x90>)
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	429a      	cmp	r2, r3
 800a184:	d807      	bhi.n	800a196 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a186:	4b10      	ldr	r3, [pc, #64]	@ (800a1c8 <tcp_kill_state+0x90>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e4      	bne.n	800a16c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d003      	beq.n	800a1b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6938      	ldr	r0, [r7, #16]
 800a1ac:	f7fe ff78 	bl	80090a0 <tcp_abandon>
  }
}
 800a1b0:	bf00      	nop
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	08015b2c 	.word	0x08015b2c
 800a1bc:	080160b8 	.word	0x080160b8
 800a1c0:	08015b70 	.word	0x08015b70
 800a1c4:	200085e8 	.word	0x200085e8
 800a1c8:	200085dc 	.word	0x200085dc

0800a1cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1da:	4b12      	ldr	r3, [pc, #72]	@ (800a224 <tcp_kill_timewait+0x58>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	e012      	b.n	800a208 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a1e2:	4b11      	ldr	r3, [pc, #68]	@ (800a228 <tcp_kill_timewait+0x5c>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d807      	bhi.n	800a202 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <tcp_kill_timewait+0x5c>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e9      	bne.n	800a1e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a214:	68b8      	ldr	r0, [r7, #8]
 800a216:	f7ff f801 	bl	800921c <tcp_abort>
  }
}
 800a21a:	bf00      	nop
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	200085ec 	.word	0x200085ec
 800a228:	200085dc 	.word	0x200085dc

0800a22c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a232:	4b10      	ldr	r3, [pc, #64]	@ (800a274 <tcp_handle_closepend+0x48>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a238:	e014      	b.n	800a264 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	8b5b      	ldrh	r3, [r3, #26]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d009      	beq.n	800a260 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	8b5b      	ldrh	r3, [r3, #26]
 800a250:	f023 0308 	bic.w	r3, r3, #8
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7fe fe8a 	bl	8008f74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e7      	bne.n	800a23a <tcp_handle_closepend+0xe>
  }
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200085e8 	.word	0x200085e8

0800a278 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a282:	2001      	movs	r0, #1
 800a284:	f7fd fb40 	bl	8007908 <memp_malloc>
 800a288:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d126      	bne.n	800a2de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a290:	f7ff ffcc 	bl	800a22c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a294:	f7ff ff9a 	bl	800a1cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a298:	2001      	movs	r0, #1
 800a29a:	f7fd fb35 	bl	8007908 <memp_malloc>
 800a29e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d11b      	bne.n	800a2de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a2a6:	2009      	movs	r0, #9
 800a2a8:	f7ff ff46 	bl	800a138 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2ac:	2001      	movs	r0, #1
 800a2ae:	f7fd fb2b 	bl	8007908 <memp_malloc>
 800a2b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d111      	bne.n	800a2de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a2ba:	2008      	movs	r0, #8
 800a2bc:	f7ff ff3c 	bl	800a138 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2c0:	2001      	movs	r0, #1
 800a2c2:	f7fd fb21 	bl	8007908 <memp_malloc>
 800a2c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d107      	bne.n	800a2de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff fee3 	bl	800a09c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f7fd fb16 	bl	8007908 <memp_malloc>
 800a2dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d03f      	beq.n	800a364 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a2e4:	229c      	movs	r2, #156	@ 0x9c
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f009 fdd4 	bl	8013e96 <memset>
    pcb->prio = prio;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	79fa      	ldrb	r2, [r7, #7]
 800a2f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a2fa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a304:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	22ff      	movs	r2, #255	@ 0xff
 800a312:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a31a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2206      	movs	r2, #6
 800a320:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2206      	movs	r2, #6
 800a328:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a330:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a33a:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <tcp_alloc+0xf8>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a342:	4b0c      	ldr	r3, [pc, #48]	@ (800a374 <tcp_alloc+0xfc>)
 800a344:	781a      	ldrb	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a350:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a08      	ldr	r2, [pc, #32]	@ (800a378 <tcp_alloc+0x100>)
 800a358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4a07      	ldr	r2, [pc, #28]	@ (800a37c <tcp_alloc+0x104>)
 800a360:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a364:	68fb      	ldr	r3, [r7, #12]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	200085dc 	.word	0x200085dc
 800a374:	200085f2 	.word	0x200085f2
 800a378:	0800a031 	.word	0x0800a031
 800a37c:	006ddd00 	.word	0x006ddd00

0800a380 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800a38a:	2040      	movs	r0, #64	@ 0x40
 800a38c:	f7ff ff74 	bl	800a278 <tcp_alloc>
 800a390:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800a392:	68fb      	ldr	r3, [r7, #12]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	611a      	str	r2, [r3, #16]
  }
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00e      	beq.n	800a3ee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7d1b      	ldrb	r3, [r3, #20]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d106      	bne.n	800a3e6 <tcp_recv+0x26>
 800a3d8:	4b07      	ldr	r3, [pc, #28]	@ (800a3f8 <tcp_recv+0x38>)
 800a3da:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a3de:	4907      	ldr	r1, [pc, #28]	@ (800a3fc <tcp_recv+0x3c>)
 800a3e0:	4807      	ldr	r0, [pc, #28]	@ (800a400 <tcp_recv+0x40>)
 800a3e2:	f009 fcf3 	bl	8013dcc <iprintf>
    pcb->recv = recv;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a3ee:	bf00      	nop
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	08015b2c 	.word	0x08015b2c
 800a3fc:	080160c8 	.word	0x080160c8
 800a400:	08015b70 	.word	0x08015b70

0800a404 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00e      	beq.n	800a432 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7d1b      	ldrb	r3, [r3, #20]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d106      	bne.n	800a42a <tcp_sent+0x26>
 800a41c:	4b07      	ldr	r3, [pc, #28]	@ (800a43c <tcp_sent+0x38>)
 800a41e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a422:	4907      	ldr	r1, [pc, #28]	@ (800a440 <tcp_sent+0x3c>)
 800a424:	4807      	ldr	r0, [pc, #28]	@ (800a444 <tcp_sent+0x40>)
 800a426:	f009 fcd1 	bl	8013dcc <iprintf>
    pcb->sent = sent;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a432:	bf00      	nop
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	08015b2c 	.word	0x08015b2c
 800a440:	080160f0 	.word	0x080160f0
 800a444:	08015b70 	.word	0x08015b70

0800a448 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00e      	beq.n	800a476 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	7d1b      	ldrb	r3, [r3, #20]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d106      	bne.n	800a46e <tcp_err+0x26>
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <tcp_err+0x38>)
 800a462:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a466:	4907      	ldr	r1, [pc, #28]	@ (800a484 <tcp_err+0x3c>)
 800a468:	4807      	ldr	r0, [pc, #28]	@ (800a488 <tcp_err+0x40>)
 800a46a:	f009 fcaf 	bl	8013dcc <iprintf>
    pcb->errf = err;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	08015b2c 	.word	0x08015b2c
 800a484:	08016118 	.word	0x08016118
 800a488:	08015b70 	.word	0x08015b70

0800a48c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d008      	beq.n	800a4ae <tcp_accept+0x22>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7d1b      	ldrb	r3, [r3, #20]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d104      	bne.n	800a4ae <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	619a      	str	r2, [r3, #24]
  }
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d107      	bne.n	800a4e0 <tcp_poll+0x24>
 800a4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a50c <tcp_poll+0x50>)
 800a4d2:	f640 023d 	movw	r2, #2109	@ 0x83d
 800a4d6:	490e      	ldr	r1, [pc, #56]	@ (800a510 <tcp_poll+0x54>)
 800a4d8:	480e      	ldr	r0, [pc, #56]	@ (800a514 <tcp_poll+0x58>)
 800a4da:	f009 fc77 	bl	8013dcc <iprintf>
 800a4de:	e011      	b.n	800a504 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	7d1b      	ldrb	r3, [r3, #20]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d106      	bne.n	800a4f6 <tcp_poll+0x3a>
 800a4e8:	4b08      	ldr	r3, [pc, #32]	@ (800a50c <tcp_poll+0x50>)
 800a4ea:	f640 023e 	movw	r2, #2110	@ 0x83e
 800a4ee:	490a      	ldr	r1, [pc, #40]	@ (800a518 <tcp_poll+0x5c>)
 800a4f0:	4808      	ldr	r0, [pc, #32]	@ (800a514 <tcp_poll+0x58>)
 800a4f2:	f009 fc6b 	bl	8013dcc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	79fa      	ldrb	r2, [r7, #7]
 800a502:	775a      	strb	r2, [r3, #29]
}
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	08015b2c 	.word	0x08015b2c
 800a510:	08016140 	.word	0x08016140
 800a514:	08015b70 	.word	0x08015b70
 800a518:	08016158 	.word	0x08016158

0800a51c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d107      	bne.n	800a53a <tcp_pcb_purge+0x1e>
 800a52a:	4b21      	ldr	r3, [pc, #132]	@ (800a5b0 <tcp_pcb_purge+0x94>)
 800a52c:	f640 0251 	movw	r2, #2129	@ 0x851
 800a530:	4920      	ldr	r1, [pc, #128]	@ (800a5b4 <tcp_pcb_purge+0x98>)
 800a532:	4821      	ldr	r0, [pc, #132]	@ (800a5b8 <tcp_pcb_purge+0x9c>)
 800a534:	f009 fc4a 	bl	8013dcc <iprintf>
 800a538:	e037      	b.n	800a5aa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7d1b      	ldrb	r3, [r3, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d033      	beq.n	800a5aa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a546:	2b0a      	cmp	r3, #10
 800a548:	d02f      	beq.n	800a5aa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d02b      	beq.n	800a5aa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe f8c4 	bl	80086ec <pbuf_free>
      pcb->refused_data = NULL;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f986 	bl	800a884 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a57e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fcdb 	bl	8009f40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fcd6 	bl	8009f40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	08015b2c 	.word	0x08015b2c
 800a5b4:	08016178 	.word	0x08016178
 800a5b8:	08015b70 	.word	0x08015b70

0800a5bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <tcp_pcb_remove+0x1e>
 800a5cc:	4b3e      	ldr	r3, [pc, #248]	@ (800a6c8 <tcp_pcb_remove+0x10c>)
 800a5ce:	f640 0283 	movw	r2, #2179	@ 0x883
 800a5d2:	493e      	ldr	r1, [pc, #248]	@ (800a6cc <tcp_pcb_remove+0x110>)
 800a5d4:	483e      	ldr	r0, [pc, #248]	@ (800a6d0 <tcp_pcb_remove+0x114>)
 800a5d6:	f009 fbf9 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d106      	bne.n	800a5ee <tcp_pcb_remove+0x32>
 800a5e0:	4b39      	ldr	r3, [pc, #228]	@ (800a6c8 <tcp_pcb_remove+0x10c>)
 800a5e2:	f640 0284 	movw	r2, #2180	@ 0x884
 800a5e6:	493b      	ldr	r1, [pc, #236]	@ (800a6d4 <tcp_pcb_remove+0x118>)
 800a5e8:	4839      	ldr	r0, [pc, #228]	@ (800a6d0 <tcp_pcb_remove+0x114>)
 800a5ea:	f009 fbef 	bl	8013dcc <iprintf>

  TCP_RMV(pcblist, pcb);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d105      	bne.n	800a604 <tcp_pcb_remove+0x48>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	e013      	b.n	800a62c <tcp_pcb_remove+0x70>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	e00c      	b.n	800a626 <tcp_pcb_remove+0x6a>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d104      	bne.n	800a620 <tcp_pcb_remove+0x64>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68da      	ldr	r2, [r3, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	60da      	str	r2, [r3, #12]
 800a61e:	e005      	b.n	800a62c <tcp_pcb_remove+0x70>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1ef      	bne.n	800a60c <tcp_pcb_remove+0x50>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a632:	6838      	ldr	r0, [r7, #0]
 800a634:	f7ff ff72 	bl	800a51c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	7d1b      	ldrb	r3, [r3, #20]
 800a63c:	2b0a      	cmp	r3, #10
 800a63e:	d013      	beq.n	800a668 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a644:	2b01      	cmp	r3, #1
 800a646:	d00f      	beq.n	800a668 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	8b5b      	ldrh	r3, [r3, #26]
 800a64c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	8b5b      	ldrh	r3, [r3, #26]
 800a658:	f043 0302 	orr.w	r3, r3, #2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a662:	6838      	ldr	r0, [r7, #0]
 800a664:	f003 fbc0 	bl	800dde8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	7d1b      	ldrb	r3, [r3, #20]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d020      	beq.n	800a6b2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <tcp_pcb_remove+0xca>
 800a678:	4b13      	ldr	r3, [pc, #76]	@ (800a6c8 <tcp_pcb_remove+0x10c>)
 800a67a:	f640 0293 	movw	r2, #2195	@ 0x893
 800a67e:	4916      	ldr	r1, [pc, #88]	@ (800a6d8 <tcp_pcb_remove+0x11c>)
 800a680:	4813      	ldr	r0, [pc, #76]	@ (800a6d0 <tcp_pcb_remove+0x114>)
 800a682:	f009 fba3 	bl	8013dcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d006      	beq.n	800a69c <tcp_pcb_remove+0xe0>
 800a68e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c8 <tcp_pcb_remove+0x10c>)
 800a690:	f640 0294 	movw	r2, #2196	@ 0x894
 800a694:	4911      	ldr	r1, [pc, #68]	@ (800a6dc <tcp_pcb_remove+0x120>)
 800a696:	480e      	ldr	r0, [pc, #56]	@ (800a6d0 <tcp_pcb_remove+0x114>)
 800a698:	f009 fb98 	bl	8013dcc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d006      	beq.n	800a6b2 <tcp_pcb_remove+0xf6>
 800a6a4:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <tcp_pcb_remove+0x10c>)
 800a6a6:	f640 0296 	movw	r2, #2198	@ 0x896
 800a6aa:	490d      	ldr	r1, [pc, #52]	@ (800a6e0 <tcp_pcb_remove+0x124>)
 800a6ac:	4808      	ldr	r0, [pc, #32]	@ (800a6d0 <tcp_pcb_remove+0x114>)
 800a6ae:	f009 fb8d 	bl	8013dcc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a6be:	bf00      	nop
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	08015b2c 	.word	0x08015b2c
 800a6cc:	08016194 	.word	0x08016194
 800a6d0:	08015b70 	.word	0x08015b70
 800a6d4:	080161b0 	.word	0x080161b0
 800a6d8:	080161d0 	.word	0x080161d0
 800a6dc:	080161e8 	.word	0x080161e8
 800a6e0:	08016204 	.word	0x08016204

0800a6e4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <tcp_next_iss+0x1c>
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <tcp_next_iss+0x38>)
 800a6f4:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a6f8:	4909      	ldr	r1, [pc, #36]	@ (800a720 <tcp_next_iss+0x3c>)
 800a6fa:	480a      	ldr	r0, [pc, #40]	@ (800a724 <tcp_next_iss+0x40>)
 800a6fc:	f009 fb66 	bl	8013dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a700:	4b09      	ldr	r3, [pc, #36]	@ (800a728 <tcp_next_iss+0x44>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	4b09      	ldr	r3, [pc, #36]	@ (800a72c <tcp_next_iss+0x48>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4413      	add	r3, r2
 800a70a:	4a07      	ldr	r2, [pc, #28]	@ (800a728 <tcp_next_iss+0x44>)
 800a70c:	6013      	str	r3, [r2, #0]
  return iss;
 800a70e:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <tcp_next_iss+0x44>)
 800a710:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a712:	4618      	mov	r0, r3
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	08015b2c 	.word	0x08015b2c
 800a720:	0801621c 	.word	0x0801621c
 800a724:	08015b70 	.word	0x08015b70
 800a728:	2000002c 	.word	0x2000002c
 800a72c:	200085dc 	.word	0x200085dc

0800a730 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d106      	bne.n	800a752 <tcp_eff_send_mss_netif+0x22>
 800a744:	4b14      	ldr	r3, [pc, #80]	@ (800a798 <tcp_eff_send_mss_netif+0x68>)
 800a746:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a74a:	4914      	ldr	r1, [pc, #80]	@ (800a79c <tcp_eff_send_mss_netif+0x6c>)
 800a74c:	4814      	ldr	r0, [pc, #80]	@ (800a7a0 <tcp_eff_send_mss_netif+0x70>)
 800a74e:	f009 fb3d 	bl	8013dcc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a758:	89fb      	ldrh	r3, [r7, #14]
 800a75a:	e019      	b.n	800a790 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a760:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a762:	8afb      	ldrh	r3, [r7, #22]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d012      	beq.n	800a78e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a768:	2328      	movs	r3, #40	@ 0x28
 800a76a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a76c:	8afa      	ldrh	r2, [r7, #22]
 800a76e:	8abb      	ldrh	r3, [r7, #20]
 800a770:	429a      	cmp	r2, r3
 800a772:	d904      	bls.n	800a77e <tcp_eff_send_mss_netif+0x4e>
 800a774:	8afa      	ldrh	r2, [r7, #22]
 800a776:	8abb      	ldrh	r3, [r7, #20]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	e000      	b.n	800a780 <tcp_eff_send_mss_netif+0x50>
 800a77e:	2300      	movs	r3, #0
 800a780:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a782:	8a7a      	ldrh	r2, [r7, #18]
 800a784:	89fb      	ldrh	r3, [r7, #14]
 800a786:	4293      	cmp	r3, r2
 800a788:	bf28      	it	cs
 800a78a:	4613      	movcs	r3, r2
 800a78c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a78e:	89fb      	ldrh	r3, [r7, #14]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	08015b2c 	.word	0x08015b2c
 800a79c:	08016238 	.word	0x08016238
 800a7a0:	08015b70 	.word	0x08015b70

0800a7a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d119      	bne.n	800a7ec <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a7b8:	4b10      	ldr	r3, [pc, #64]	@ (800a7fc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a7ba:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a7be:	4910      	ldr	r1, [pc, #64]	@ (800a800 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a7c0:	4810      	ldr	r0, [pc, #64]	@ (800a804 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a7c2:	f009 fb03 	bl	8013dcc <iprintf>

  while (pcb != NULL) {
 800a7c6:	e011      	b.n	800a7ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d108      	bne.n	800a7e6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7fe fd1e 	bl	800921c <tcp_abort>
      pcb = next;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	e002      	b.n	800a7ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1ea      	bne.n	800a7c8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a7f2:	bf00      	nop
 800a7f4:	bf00      	nop
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	08015b2c 	.word	0x08015b2c
 800a800:	08016260 	.word	0x08016260
 800a804:	08015b70 	.word	0x08015b70

0800a808 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d02a      	beq.n	800a86e <tcp_netif_ip_addr_changed+0x66>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d026      	beq.n	800a86e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a820:	4b15      	ldr	r3, [pc, #84]	@ (800a878 <tcp_netif_ip_addr_changed+0x70>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff ffbc 	bl	800a7a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a82c:	4b13      	ldr	r3, [pc, #76]	@ (800a87c <tcp_netif_ip_addr_changed+0x74>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff ffb6 	bl	800a7a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d017      	beq.n	800a86e <tcp_netif_ip_addr_changed+0x66>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d013      	beq.n	800a86e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a846:	4b0e      	ldr	r3, [pc, #56]	@ (800a880 <tcp_netif_ip_addr_changed+0x78>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e00c      	b.n	800a868 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d103      	bne.n	800a862 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1ef      	bne.n	800a84e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	200085e8 	.word	0x200085e8
 800a87c:	200085e0 	.word	0x200085e0
 800a880:	200085e4 	.word	0x200085e4

0800a884 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff fb51 	bl	8009f40 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a8a4:	bf00      	nop
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a8ac:	b590      	push	{r4, r7, lr}
 800a8ae:	b08d      	sub	sp, #52	@ 0x34
 800a8b0:	af04      	add	r7, sp, #16
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d105      	bne.n	800a8c8 <tcp_input+0x1c>
 800a8bc:	4b9b      	ldr	r3, [pc, #620]	@ (800ab2c <tcp_input+0x280>)
 800a8be:	2283      	movs	r2, #131	@ 0x83
 800a8c0:	499b      	ldr	r1, [pc, #620]	@ (800ab30 <tcp_input+0x284>)
 800a8c2:	489c      	ldr	r0, [pc, #624]	@ (800ab34 <tcp_input+0x288>)
 800a8c4:	f009 fa82 	bl	8013dcc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4a9a      	ldr	r2, [pc, #616]	@ (800ab38 <tcp_input+0x28c>)
 800a8ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	2b13      	cmp	r3, #19
 800a8d6:	f240 83d1 	bls.w	800b07c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8da:	4b98      	ldr	r3, [pc, #608]	@ (800ab3c <tcp_input+0x290>)
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	4a97      	ldr	r2, [pc, #604]	@ (800ab3c <tcp_input+0x290>)
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f008 fa1b 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f040 83c7 	bne.w	800b080 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a8f2:	4b92      	ldr	r3, [pc, #584]	@ (800ab3c <tcp_input+0x290>)
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8fa:	2be0      	cmp	r3, #224	@ 0xe0
 800a8fc:	f000 83c0 	beq.w	800b080 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a900:	4b8d      	ldr	r3, [pc, #564]	@ (800ab38 <tcp_input+0x28c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	b29b      	uxth	r3, r3
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fc fb1f 	bl	8006f4c <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	0b1b      	lsrs	r3, r3, #12
 800a912:	b29b      	uxth	r3, r3
 800a914:	b2db      	uxtb	r3, r3
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a91a:	7cbb      	ldrb	r3, [r7, #18]
 800a91c:	2b13      	cmp	r3, #19
 800a91e:	f240 83b1 	bls.w	800b084 <tcp_input+0x7d8>
 800a922:	7cbb      	ldrb	r3, [r7, #18]
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	891b      	ldrh	r3, [r3, #8]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	f200 83aa 	bhi.w	800b084 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a930:	7cbb      	ldrb	r3, [r7, #18]
 800a932:	b29b      	uxth	r3, r3
 800a934:	3b14      	subs	r3, #20
 800a936:	b29a      	uxth	r2, r3
 800a938:	4b81      	ldr	r3, [pc, #516]	@ (800ab40 <tcp_input+0x294>)
 800a93a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a93c:	4b81      	ldr	r3, [pc, #516]	@ (800ab44 <tcp_input+0x298>)
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	895a      	ldrh	r2, [r3, #10]
 800a946:	7cbb      	ldrb	r3, [r7, #18]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d309      	bcc.n	800a962 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a94e:	4b7c      	ldr	r3, [pc, #496]	@ (800ab40 <tcp_input+0x294>)
 800a950:	881a      	ldrh	r2, [r3, #0]
 800a952:	4b7d      	ldr	r3, [pc, #500]	@ (800ab48 <tcp_input+0x29c>)
 800a954:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a956:	7cbb      	ldrb	r3, [r7, #18]
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fd fe40 	bl	80085e0 <pbuf_remove_header>
 800a960:	e04e      	b.n	800aa00 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d105      	bne.n	800a976 <tcp_input+0xca>
 800a96a:	4b70      	ldr	r3, [pc, #448]	@ (800ab2c <tcp_input+0x280>)
 800a96c:	22c2      	movs	r2, #194	@ 0xc2
 800a96e:	4977      	ldr	r1, [pc, #476]	@ (800ab4c <tcp_input+0x2a0>)
 800a970:	4870      	ldr	r0, [pc, #448]	@ (800ab34 <tcp_input+0x288>)
 800a972:	f009 fa2b 	bl	8013dcc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a976:	2114      	movs	r1, #20
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7fd fe31 	bl	80085e0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	895a      	ldrh	r2, [r3, #10]
 800a982:	4b71      	ldr	r3, [pc, #452]	@ (800ab48 <tcp_input+0x29c>)
 800a984:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a986:	4b6e      	ldr	r3, [pc, #440]	@ (800ab40 <tcp_input+0x294>)
 800a988:	881a      	ldrh	r2, [r3, #0]
 800a98a:	4b6f      	ldr	r3, [pc, #444]	@ (800ab48 <tcp_input+0x29c>)
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a992:	4b6d      	ldr	r3, [pc, #436]	@ (800ab48 <tcp_input+0x29c>)
 800a994:	881b      	ldrh	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7fd fe21 	bl	80085e0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	895b      	ldrh	r3, [r3, #10]
 800a9a4:	8a3a      	ldrh	r2, [r7, #16]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	f200 836e 	bhi.w	800b088 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	4a64      	ldr	r2, [pc, #400]	@ (800ab44 <tcp_input+0x298>)
 800a9b4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	8a3a      	ldrh	r2, [r7, #16]
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fe0e 	bl	80085e0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	891a      	ldrh	r2, [r3, #8]
 800a9c8:	8a3b      	ldrh	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	895b      	ldrh	r3, [r3, #10]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <tcp_input+0x13a>
 800a9da:	4b54      	ldr	r3, [pc, #336]	@ (800ab2c <tcp_input+0x280>)
 800a9dc:	22df      	movs	r2, #223	@ 0xdf
 800a9de:	495c      	ldr	r1, [pc, #368]	@ (800ab50 <tcp_input+0x2a4>)
 800a9e0:	4854      	ldr	r0, [pc, #336]	@ (800ab34 <tcp_input+0x288>)
 800a9e2:	f009 f9f3 	bl	8013dcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	891a      	ldrh	r2, [r3, #8]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	891b      	ldrh	r3, [r3, #8]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d005      	beq.n	800aa00 <tcp_input+0x154>
 800a9f4:	4b4d      	ldr	r3, [pc, #308]	@ (800ab2c <tcp_input+0x280>)
 800a9f6:	22e0      	movs	r2, #224	@ 0xe0
 800a9f8:	4956      	ldr	r1, [pc, #344]	@ (800ab54 <tcp_input+0x2a8>)
 800a9fa:	484e      	ldr	r0, [pc, #312]	@ (800ab34 <tcp_input+0x288>)
 800a9fc:	f009 f9e6 	bl	8013dcc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aa00:	4b4d      	ldr	r3, [pc, #308]	@ (800ab38 <tcp_input+0x28c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4a4b      	ldr	r2, [pc, #300]	@ (800ab38 <tcp_input+0x28c>)
 800aa0a:	6814      	ldr	r4, [r2, #0]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fc fa9d 	bl	8006f4c <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aa16:	4b48      	ldr	r3, [pc, #288]	@ (800ab38 <tcp_input+0x28c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	885b      	ldrh	r3, [r3, #2]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	4a46      	ldr	r2, [pc, #280]	@ (800ab38 <tcp_input+0x28c>)
 800aa20:	6814      	ldr	r4, [r2, #0]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fc fa92 	bl	8006f4c <lwip_htons>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aa2c:	4b42      	ldr	r3, [pc, #264]	@ (800ab38 <tcp_input+0x28c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	4a41      	ldr	r2, [pc, #260]	@ (800ab38 <tcp_input+0x28c>)
 800aa34:	6814      	ldr	r4, [r2, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fc fa9e 	bl	8006f78 <lwip_htonl>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	6063      	str	r3, [r4, #4]
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	4a45      	ldr	r2, [pc, #276]	@ (800ab58 <tcp_input+0x2ac>)
 800aa44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aa46:	4b3c      	ldr	r3, [pc, #240]	@ (800ab38 <tcp_input+0x28c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	4a3a      	ldr	r2, [pc, #232]	@ (800ab38 <tcp_input+0x28c>)
 800aa4e:	6814      	ldr	r4, [r2, #0]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fc fa91 	bl	8006f78 <lwip_htonl>
 800aa56:	4603      	mov	r3, r0
 800aa58:	60a3      	str	r3, [r4, #8]
 800aa5a:	68a3      	ldr	r3, [r4, #8]
 800aa5c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab5c <tcp_input+0x2b0>)
 800aa5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aa60:	4b35      	ldr	r3, [pc, #212]	@ (800ab38 <tcp_input+0x28c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	89db      	ldrh	r3, [r3, #14]
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	4a33      	ldr	r2, [pc, #204]	@ (800ab38 <tcp_input+0x28c>)
 800aa6a:	6814      	ldr	r4, [r2, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fc fa6d 	bl	8006f4c <lwip_htons>
 800aa72:	4603      	mov	r3, r0
 800aa74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aa76:	4b30      	ldr	r3, [pc, #192]	@ (800ab38 <tcp_input+0x28c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	899b      	ldrh	r3, [r3, #12]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fc fa64 	bl	8006f4c <lwip_htons>
 800aa84:	4603      	mov	r3, r0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b34      	ldr	r3, [pc, #208]	@ (800ab60 <tcp_input+0x2b4>)
 800aa90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	891a      	ldrh	r2, [r3, #8]
 800aa96:	4b33      	ldr	r3, [pc, #204]	@ (800ab64 <tcp_input+0x2b8>)
 800aa98:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aa9a:	4b31      	ldr	r3, [pc, #196]	@ (800ab60 <tcp_input+0x2b4>)
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <tcp_input+0x214>
    tcplen++;
 800aaa6:	4b2f      	ldr	r3, [pc, #188]	@ (800ab64 <tcp_input+0x2b8>)
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	4b2d      	ldr	r3, [pc, #180]	@ (800ab64 <tcp_input+0x2b8>)
 800aab0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	891a      	ldrh	r2, [r3, #8]
 800aab6:	4b2b      	ldr	r3, [pc, #172]	@ (800ab64 <tcp_input+0x2b8>)
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	f200 82e6 	bhi.w	800b08c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aac4:	4b28      	ldr	r3, [pc, #160]	@ (800ab68 <tcp_input+0x2bc>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	61fb      	str	r3, [r7, #28]
 800aaca:	e09d      	b.n	800ac08 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	7d1b      	ldrb	r3, [r3, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <tcp_input+0x234>
 800aad4:	4b15      	ldr	r3, [pc, #84]	@ (800ab2c <tcp_input+0x280>)
 800aad6:	22fb      	movs	r2, #251	@ 0xfb
 800aad8:	4924      	ldr	r1, [pc, #144]	@ (800ab6c <tcp_input+0x2c0>)
 800aada:	4816      	ldr	r0, [pc, #88]	@ (800ab34 <tcp_input+0x288>)
 800aadc:	f009 f976 	bl	8013dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	7d1b      	ldrb	r3, [r3, #20]
 800aae4:	2b0a      	cmp	r3, #10
 800aae6:	d105      	bne.n	800aaf4 <tcp_input+0x248>
 800aae8:	4b10      	ldr	r3, [pc, #64]	@ (800ab2c <tcp_input+0x280>)
 800aaea:	22fc      	movs	r2, #252	@ 0xfc
 800aaec:	4920      	ldr	r1, [pc, #128]	@ (800ab70 <tcp_input+0x2c4>)
 800aaee:	4811      	ldr	r0, [pc, #68]	@ (800ab34 <tcp_input+0x288>)
 800aaf0:	f009 f96c 	bl	8013dcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	7d1b      	ldrb	r3, [r3, #20]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d105      	bne.n	800ab08 <tcp_input+0x25c>
 800aafc:	4b0b      	ldr	r3, [pc, #44]	@ (800ab2c <tcp_input+0x280>)
 800aafe:	22fd      	movs	r2, #253	@ 0xfd
 800ab00:	491c      	ldr	r1, [pc, #112]	@ (800ab74 <tcp_input+0x2c8>)
 800ab02:	480c      	ldr	r0, [pc, #48]	@ (800ab34 <tcp_input+0x288>)
 800ab04:	f009 f962 	bl	8013dcc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	7a1b      	ldrb	r3, [r3, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d033      	beq.n	800ab78 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	7a1a      	ldrb	r2, [r3, #8]
 800ab14:	4b09      	ldr	r3, [pc, #36]	@ (800ab3c <tcp_input+0x290>)
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d029      	beq.n	800ab78 <tcp_input+0x2cc>
      prev = pcb;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	61bb      	str	r3, [r7, #24]
      continue;
 800ab28:	e06b      	b.n	800ac02 <tcp_input+0x356>
 800ab2a:	bf00      	nop
 800ab2c:	08016294 	.word	0x08016294
 800ab30:	080162c8 	.word	0x080162c8
 800ab34:	080162e0 	.word	0x080162e0
 800ab38:	20008604 	.word	0x20008604
 800ab3c:	200056a0 	.word	0x200056a0
 800ab40:	20008608 	.word	0x20008608
 800ab44:	2000860c 	.word	0x2000860c
 800ab48:	2000860a 	.word	0x2000860a
 800ab4c:	08016308 	.word	0x08016308
 800ab50:	08016318 	.word	0x08016318
 800ab54:	08016324 	.word	0x08016324
 800ab58:	20008614 	.word	0x20008614
 800ab5c:	20008618 	.word	0x20008618
 800ab60:	20008620 	.word	0x20008620
 800ab64:	2000861e 	.word	0x2000861e
 800ab68:	200085e8 	.word	0x200085e8
 800ab6c:	08016344 	.word	0x08016344
 800ab70:	0801636c 	.word	0x0801636c
 800ab74:	08016398 	.word	0x08016398
    }

    if (pcb->remote_port == tcphdr->src &&
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	8b1a      	ldrh	r2, [r3, #24]
 800ab7c:	4b72      	ldr	r3, [pc, #456]	@ (800ad48 <tcp_input+0x49c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d13a      	bne.n	800abfe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	8ada      	ldrh	r2, [r3, #22]
 800ab8c:	4b6e      	ldr	r3, [pc, #440]	@ (800ad48 <tcp_input+0x49c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d132      	bne.n	800abfe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	4b6b      	ldr	r3, [pc, #428]	@ (800ad4c <tcp_input+0x4a0>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d12c      	bne.n	800abfe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	4b68      	ldr	r3, [pc, #416]	@ (800ad4c <tcp_input+0x4a0>)
 800abaa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abac:	429a      	cmp	r2, r3
 800abae:	d126      	bne.n	800abfe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	69fa      	ldr	r2, [r7, #28]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d106      	bne.n	800abc8 <tcp_input+0x31c>
 800abba:	4b65      	ldr	r3, [pc, #404]	@ (800ad50 <tcp_input+0x4a4>)
 800abbc:	f240 120d 	movw	r2, #269	@ 0x10d
 800abc0:	4964      	ldr	r1, [pc, #400]	@ (800ad54 <tcp_input+0x4a8>)
 800abc2:	4865      	ldr	r0, [pc, #404]	@ (800ad58 <tcp_input+0x4ac>)
 800abc4:	f009 f902 	bl	8013dcc <iprintf>
      if (prev != NULL) {
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <tcp_input+0x338>
        prev->next = pcb->next;
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800abd6:	4b61      	ldr	r3, [pc, #388]	@ (800ad5c <tcp_input+0x4b0>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800abde:	4a5f      	ldr	r2, [pc, #380]	@ (800ad5c <tcp_input+0x4b0>)
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	69fa      	ldr	r2, [r7, #28]
 800abea:	429a      	cmp	r2, r3
 800abec:	d111      	bne.n	800ac12 <tcp_input+0x366>
 800abee:	4b58      	ldr	r3, [pc, #352]	@ (800ad50 <tcp_input+0x4a4>)
 800abf0:	f240 1215 	movw	r2, #277	@ 0x115
 800abf4:	495a      	ldr	r1, [pc, #360]	@ (800ad60 <tcp_input+0x4b4>)
 800abf6:	4858      	ldr	r0, [pc, #352]	@ (800ad58 <tcp_input+0x4ac>)
 800abf8:	f009 f8e8 	bl	8013dcc <iprintf>
      break;
 800abfc:	e009      	b.n	800ac12 <tcp_input+0x366>
    }
    prev = pcb;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f47f af5e 	bne.w	800aacc <tcp_input+0x220>
 800ac10:	e000      	b.n	800ac14 <tcp_input+0x368>
      break;
 800ac12:	bf00      	nop
  }

  if (pcb == NULL) {
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 80aa 	bne.w	800ad70 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac1c:	4b51      	ldr	r3, [pc, #324]	@ (800ad64 <tcp_input+0x4b8>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	61fb      	str	r3, [r7, #28]
 800ac22:	e03f      	b.n	800aca4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
 800ac28:	2b0a      	cmp	r3, #10
 800ac2a:	d006      	beq.n	800ac3a <tcp_input+0x38e>
 800ac2c:	4b48      	ldr	r3, [pc, #288]	@ (800ad50 <tcp_input+0x4a4>)
 800ac2e:	f240 121f 	movw	r2, #287	@ 0x11f
 800ac32:	494d      	ldr	r1, [pc, #308]	@ (800ad68 <tcp_input+0x4bc>)
 800ac34:	4848      	ldr	r0, [pc, #288]	@ (800ad58 <tcp_input+0x4ac>)
 800ac36:	f009 f8c9 	bl	8013dcc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	7a1b      	ldrb	r3, [r3, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	7a1a      	ldrb	r2, [r3, #8]
 800ac46:	4b41      	ldr	r3, [pc, #260]	@ (800ad4c <tcp_input+0x4a0>)
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d122      	bne.n	800ac9c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	8b1a      	ldrh	r2, [r3, #24]
 800ac5a:	4b3b      	ldr	r3, [pc, #236]	@ (800ad48 <tcp_input+0x49c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d11b      	bne.n	800ac9e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	8ada      	ldrh	r2, [r3, #22]
 800ac6a:	4b37      	ldr	r3, [pc, #220]	@ (800ad48 <tcp_input+0x49c>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	885b      	ldrh	r3, [r3, #2]
 800ac70:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d113      	bne.n	800ac9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	4b34      	ldr	r3, [pc, #208]	@ (800ad4c <tcp_input+0x4a0>)
 800ac7c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d10d      	bne.n	800ac9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	4b31      	ldr	r3, [pc, #196]	@ (800ad4c <tcp_input+0x4a0>)
 800ac88:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d107      	bne.n	800ac9e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ac8e:	69f8      	ldr	r0, [r7, #28]
 800ac90:	f000 fb56 	bl	800b340 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7fd fd29 	bl	80086ec <pbuf_free>
        return;
 800ac9a:	e1fd      	b.n	800b098 <tcp_input+0x7ec>
        continue;
 800ac9c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	61fb      	str	r3, [r7, #28]
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1bc      	bne.n	800ac24 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800acaa:	2300      	movs	r3, #0
 800acac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acae:	4b2f      	ldr	r3, [pc, #188]	@ (800ad6c <tcp_input+0x4c0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	e02a      	b.n	800ad0c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	7a1b      	ldrb	r3, [r3, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	7a1a      	ldrb	r2, [r3, #8]
 800acc2:	4b22      	ldr	r3, [pc, #136]	@ (800ad4c <tcp_input+0x4a0>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800acca:	3301      	adds	r3, #1
 800accc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acce:	429a      	cmp	r2, r3
 800acd0:	d002      	beq.n	800acd8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	61bb      	str	r3, [r7, #24]
        continue;
 800acd6:	e016      	b.n	800ad06 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	8ada      	ldrh	r2, [r3, #22]
 800acdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad48 <tcp_input+0x49c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	885b      	ldrh	r3, [r3, #2]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d10c      	bne.n	800ad02 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	4b17      	ldr	r3, [pc, #92]	@ (800ad4c <tcp_input+0x4a0>)
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d00f      	beq.n	800ad14 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00d      	beq.n	800ad16 <tcp_input+0x46a>
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	617b      	str	r3, [r7, #20]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1d1      	bne.n	800acb6 <tcp_input+0x40a>
 800ad12:	e000      	b.n	800ad16 <tcp_input+0x46a>
            break;
 800ad14:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d029      	beq.n	800ad70 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ad2a:	4b10      	ldr	r3, [pc, #64]	@ (800ad6c <tcp_input+0x4c0>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ad32:	4a0e      	ldr	r2, [pc, #56]	@ (800ad6c <tcp_input+0x4c0>)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ad38:	6978      	ldr	r0, [r7, #20]
 800ad3a:	f000 fa03 	bl	800b144 <tcp_listen_input>
      }
      pbuf_free(p);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7fd fcd4 	bl	80086ec <pbuf_free>
      return;
 800ad44:	e1a8      	b.n	800b098 <tcp_input+0x7ec>
 800ad46:	bf00      	nop
 800ad48:	20008604 	.word	0x20008604
 800ad4c:	200056a0 	.word	0x200056a0
 800ad50:	08016294 	.word	0x08016294
 800ad54:	080163c0 	.word	0x080163c0
 800ad58:	080162e0 	.word	0x080162e0
 800ad5c:	200085e8 	.word	0x200085e8
 800ad60:	080163ec 	.word	0x080163ec
 800ad64:	200085ec 	.word	0x200085ec
 800ad68:	08016418 	.word	0x08016418
 800ad6c:	200085e4 	.word	0x200085e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 8158 	beq.w	800b028 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ad78:	4b95      	ldr	r3, [pc, #596]	@ (800afd0 <tcp_input+0x724>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	891a      	ldrh	r2, [r3, #8]
 800ad82:	4b93      	ldr	r3, [pc, #588]	@ (800afd0 <tcp_input+0x724>)
 800ad84:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ad86:	4a92      	ldr	r2, [pc, #584]	@ (800afd0 <tcp_input+0x724>)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ad8c:	4b91      	ldr	r3, [pc, #580]	@ (800afd4 <tcp_input+0x728>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a8f      	ldr	r2, [pc, #572]	@ (800afd0 <tcp_input+0x724>)
 800ad92:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ad94:	4b90      	ldr	r3, [pc, #576]	@ (800afd8 <tcp_input+0x72c>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ad9a:	4b90      	ldr	r3, [pc, #576]	@ (800afdc <tcp_input+0x730>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ada0:	4b8f      	ldr	r3, [pc, #572]	@ (800afe0 <tcp_input+0x734>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ada6:	4b8f      	ldr	r3, [pc, #572]	@ (800afe4 <tcp_input+0x738>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	f003 0308 	and.w	r3, r3, #8
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d006      	beq.n	800adc0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	7b5b      	ldrb	r3, [r3, #13]
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d017      	beq.n	800adf8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adc8:	69f8      	ldr	r0, [r7, #28]
 800adca:	f7ff f83d 	bl	8009e48 <tcp_process_refused_data>
 800adce:	4603      	mov	r3, r0
 800add0:	f113 0f0d 	cmn.w	r3, #13
 800add4:	d007      	beq.n	800ade6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800adde:	4b82      	ldr	r3, [pc, #520]	@ (800afe8 <tcp_input+0x73c>)
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d008      	beq.n	800adf8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 80e3 	bne.w	800afb6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800adf0:	69f8      	ldr	r0, [r7, #28]
 800adf2:	f003 fdff 	bl	800e9f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800adf6:	e0de      	b.n	800afb6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800adf8:	4a7c      	ldr	r2, [pc, #496]	@ (800afec <tcp_input+0x740>)
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800adfe:	69f8      	ldr	r0, [r7, #28]
 800ae00:	f000 fb18 	bl	800b434 <tcp_process>
 800ae04:	4603      	mov	r3, r0
 800ae06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ae08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae0c:	f113 0f0d 	cmn.w	r3, #13
 800ae10:	f000 80d3 	beq.w	800afba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ae14:	4b71      	ldr	r3, [pc, #452]	@ (800afdc <tcp_input+0x730>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	f003 0308 	and.w	r3, r3, #8
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d015      	beq.n	800ae4c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d008      	beq.n	800ae3c <tcp_input+0x590>
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	6912      	ldr	r2, [r2, #16]
 800ae34:	f06f 010d 	mvn.w	r1, #13
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae3c:	69f9      	ldr	r1, [r7, #28]
 800ae3e:	486c      	ldr	r0, [pc, #432]	@ (800aff0 <tcp_input+0x744>)
 800ae40:	f7ff fbbc 	bl	800a5bc <tcp_pcb_remove>
        tcp_free(pcb);
 800ae44:	69f8      	ldr	r0, [r7, #28]
 800ae46:	f7fd ff01 	bl	8008c4c <tcp_free>
 800ae4a:	e0da      	b.n	800b002 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ae50:	4b63      	ldr	r3, [pc, #396]	@ (800afe0 <tcp_input+0x734>)
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01d      	beq.n	800ae94 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ae58:	4b61      	ldr	r3, [pc, #388]	@ (800afe0 <tcp_input+0x734>)
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00a      	beq.n	800ae7e <tcp_input+0x5d2>
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	6910      	ldr	r0, [r2, #16]
 800ae72:	89fa      	ldrh	r2, [r7, #14]
 800ae74:	69f9      	ldr	r1, [r7, #28]
 800ae76:	4798      	blx	r3
 800ae78:	4603      	mov	r3, r0
 800ae7a:	74fb      	strb	r3, [r7, #19]
 800ae7c:	e001      	b.n	800ae82 <tcp_input+0x5d6>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ae82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae86:	f113 0f0d 	cmn.w	r3, #13
 800ae8a:	f000 8098 	beq.w	800afbe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ae8e:	4b54      	ldr	r3, [pc, #336]	@ (800afe0 <tcp_input+0x734>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ae94:	69f8      	ldr	r0, [r7, #28]
 800ae96:	f000 f915 	bl	800b0c4 <tcp_input_delayed_close>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f040 8090 	bne.w	800afc2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800aea2:	4b4d      	ldr	r3, [pc, #308]	@ (800afd8 <tcp_input+0x72c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d041      	beq.n	800af2e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <tcp_input+0x614>
 800aeb2:	4b50      	ldr	r3, [pc, #320]	@ (800aff4 <tcp_input+0x748>)
 800aeb4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800aeb8:	494f      	ldr	r1, [pc, #316]	@ (800aff8 <tcp_input+0x74c>)
 800aeba:	4850      	ldr	r0, [pc, #320]	@ (800affc <tcp_input+0x750>)
 800aebc:	f008 ff86 	bl	8013dcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	8b5b      	ldrh	r3, [r3, #26]
 800aec4:	f003 0310 	and.w	r3, r3, #16
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aecc:	4b42      	ldr	r3, [pc, #264]	@ (800afd8 <tcp_input+0x72c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7fd fc0b 	bl	80086ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aed6:	69f8      	ldr	r0, [r7, #28]
 800aed8:	f7fe f9a0 	bl	800921c <tcp_abort>
            goto aborted;
 800aedc:	e091      	b.n	800b002 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00c      	beq.n	800af02 <tcp_input+0x656>
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	6918      	ldr	r0, [r3, #16]
 800aef2:	4b39      	ldr	r3, [pc, #228]	@ (800afd8 <tcp_input+0x72c>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	2300      	movs	r3, #0
 800aef8:	69f9      	ldr	r1, [r7, #28]
 800aefa:	47a0      	blx	r4
 800aefc:	4603      	mov	r3, r0
 800aefe:	74fb      	strb	r3, [r7, #19]
 800af00:	e008      	b.n	800af14 <tcp_input+0x668>
 800af02:	4b35      	ldr	r3, [pc, #212]	@ (800afd8 <tcp_input+0x72c>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	2300      	movs	r3, #0
 800af08:	69f9      	ldr	r1, [r7, #28]
 800af0a:	2000      	movs	r0, #0
 800af0c:	f7ff f890 	bl	800a030 <tcp_recv_null>
 800af10:	4603      	mov	r3, r0
 800af12:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800af14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af18:	f113 0f0d 	cmn.w	r3, #13
 800af1c:	d053      	beq.n	800afc6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800af1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800af26:	4b2c      	ldr	r3, [pc, #176]	@ (800afd8 <tcp_input+0x72c>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800af2e:	4b2b      	ldr	r3, [pc, #172]	@ (800afdc <tcp_input+0x730>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	f003 0320 	and.w	r3, r3, #32
 800af36:	2b00      	cmp	r3, #0
 800af38:	d030      	beq.n	800af9c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af46:	7b5a      	ldrb	r2, [r3, #13]
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af4c:	f042 0220 	orr.w	r2, r2, #32
 800af50:	b2d2      	uxtb	r2, r2
 800af52:	735a      	strb	r2, [r3, #13]
 800af54:	e022      	b.n	800af9c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800af5e:	d005      	beq.n	800af6c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af64:	3301      	adds	r3, #1
 800af66:	b29a      	uxth	r2, r3
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00b      	beq.n	800af8e <tcp_input+0x6e2>
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	6918      	ldr	r0, [r3, #16]
 800af80:	2300      	movs	r3, #0
 800af82:	2200      	movs	r2, #0
 800af84:	69f9      	ldr	r1, [r7, #28]
 800af86:	47a0      	blx	r4
 800af88:	4603      	mov	r3, r0
 800af8a:	74fb      	strb	r3, [r7, #19]
 800af8c:	e001      	b.n	800af92 <tcp_input+0x6e6>
 800af8e:	2300      	movs	r3, #0
 800af90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800af92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af96:	f113 0f0d 	cmn.w	r3, #13
 800af9a:	d016      	beq.n	800afca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800af9c:	4b13      	ldr	r3, [pc, #76]	@ (800afec <tcp_input+0x740>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800afa2:	69f8      	ldr	r0, [r7, #28]
 800afa4:	f000 f88e 	bl	800b0c4 <tcp_input_delayed_close>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d128      	bne.n	800b000 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800afae:	69f8      	ldr	r0, [r7, #28]
 800afb0:	f002 ff1a 	bl	800dde8 <tcp_output>
 800afb4:	e025      	b.n	800b002 <tcp_input+0x756>
        goto aborted;
 800afb6:	bf00      	nop
 800afb8:	e023      	b.n	800b002 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800afba:	bf00      	nop
 800afbc:	e021      	b.n	800b002 <tcp_input+0x756>
              goto aborted;
 800afbe:	bf00      	nop
 800afc0:	e01f      	b.n	800b002 <tcp_input+0x756>
          goto aborted;
 800afc2:	bf00      	nop
 800afc4:	e01d      	b.n	800b002 <tcp_input+0x756>
            goto aborted;
 800afc6:	bf00      	nop
 800afc8:	e01b      	b.n	800b002 <tcp_input+0x756>
              goto aborted;
 800afca:	bf00      	nop
 800afcc:	e019      	b.n	800b002 <tcp_input+0x756>
 800afce:	bf00      	nop
 800afd0:	200085f4 	.word	0x200085f4
 800afd4:	20008604 	.word	0x20008604
 800afd8:	20008624 	.word	0x20008624
 800afdc:	20008621 	.word	0x20008621
 800afe0:	2000861c 	.word	0x2000861c
 800afe4:	20008620 	.word	0x20008620
 800afe8:	2000861e 	.word	0x2000861e
 800afec:	20008628 	.word	0x20008628
 800aff0:	200085e8 	.word	0x200085e8
 800aff4:	08016294 	.word	0x08016294
 800aff8:	08016448 	.word	0x08016448
 800affc:	080162e0 	.word	0x080162e0
          goto aborted;
 800b000:	bf00      	nop
    tcp_input_pcb = NULL;
 800b002:	4b27      	ldr	r3, [pc, #156]	@ (800b0a0 <tcp_input+0x7f4>)
 800b004:	2200      	movs	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b008:	4b26      	ldr	r3, [pc, #152]	@ (800b0a4 <tcp_input+0x7f8>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b00e:	4b26      	ldr	r3, [pc, #152]	@ (800b0a8 <tcp_input+0x7fc>)
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d03f      	beq.n	800b096 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b016:	4b24      	ldr	r3, [pc, #144]	@ (800b0a8 <tcp_input+0x7fc>)
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd fb66 	bl	80086ec <pbuf_free>
      inseg.p = NULL;
 800b020:	4b21      	ldr	r3, [pc, #132]	@ (800b0a8 <tcp_input+0x7fc>)
 800b022:	2200      	movs	r2, #0
 800b024:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b026:	e036      	b.n	800b096 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b028:	4b20      	ldr	r3, [pc, #128]	@ (800b0ac <tcp_input+0x800>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	899b      	ldrh	r3, [r3, #12]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	4618      	mov	r0, r3
 800b032:	f7fb ff8b 	bl	8006f4c <lwip_htons>
 800b036:	4603      	mov	r3, r0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d118      	bne.n	800b074 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b042:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b0 <tcp_input+0x804>)
 800b044:	6819      	ldr	r1, [r3, #0]
 800b046:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b4 <tcp_input+0x808>)
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	4b1a      	ldr	r3, [pc, #104]	@ (800b0b8 <tcp_input+0x80c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b052:	4b16      	ldr	r3, [pc, #88]	@ (800b0ac <tcp_input+0x800>)
 800b054:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b056:	885b      	ldrh	r3, [r3, #2]
 800b058:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b05a:	4a14      	ldr	r2, [pc, #80]	@ (800b0ac <tcp_input+0x800>)
 800b05c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b05e:	8812      	ldrh	r2, [r2, #0]
 800b060:	b292      	uxth	r2, r2
 800b062:	9202      	str	r2, [sp, #8]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	4b15      	ldr	r3, [pc, #84]	@ (800b0bc <tcp_input+0x810>)
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4b15      	ldr	r3, [pc, #84]	@ (800b0c0 <tcp_input+0x814>)
 800b06c:	4602      	mov	r2, r0
 800b06e:	2000      	movs	r0, #0
 800b070:	f003 fc6e 	bl	800e950 <tcp_rst>
    pbuf_free(p);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7fd fb39 	bl	80086ec <pbuf_free>
  return;
 800b07a:	e00c      	b.n	800b096 <tcp_input+0x7ea>
    goto dropped;
 800b07c:	bf00      	nop
 800b07e:	e006      	b.n	800b08e <tcp_input+0x7e2>
    goto dropped;
 800b080:	bf00      	nop
 800b082:	e004      	b.n	800b08e <tcp_input+0x7e2>
    goto dropped;
 800b084:	bf00      	nop
 800b086:	e002      	b.n	800b08e <tcp_input+0x7e2>
      goto dropped;
 800b088:	bf00      	nop
 800b08a:	e000      	b.n	800b08e <tcp_input+0x7e2>
      goto dropped;
 800b08c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7fd fb2c 	bl	80086ec <pbuf_free>
 800b094:	e000      	b.n	800b098 <tcp_input+0x7ec>
  return;
 800b096:	bf00      	nop
}
 800b098:	3724      	adds	r7, #36	@ 0x24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd90      	pop	{r4, r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	20008628 	.word	0x20008628
 800b0a4:	20008624 	.word	0x20008624
 800b0a8:	200085f4 	.word	0x200085f4
 800b0ac:	20008604 	.word	0x20008604
 800b0b0:	20008618 	.word	0x20008618
 800b0b4:	2000861e 	.word	0x2000861e
 800b0b8:	20008614 	.word	0x20008614
 800b0bc:	200056b0 	.word	0x200056b0
 800b0c0:	200056b4 	.word	0x200056b4

0800b0c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <tcp_input_delayed_close+0x1c>
 800b0d2:	4b17      	ldr	r3, [pc, #92]	@ (800b130 <tcp_input_delayed_close+0x6c>)
 800b0d4:	f240 225a 	movw	r2, #602	@ 0x25a
 800b0d8:	4916      	ldr	r1, [pc, #88]	@ (800b134 <tcp_input_delayed_close+0x70>)
 800b0da:	4817      	ldr	r0, [pc, #92]	@ (800b138 <tcp_input_delayed_close+0x74>)
 800b0dc:	f008 fe76 	bl	8013dcc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b0e0:	4b16      	ldr	r3, [pc, #88]	@ (800b13c <tcp_input_delayed_close+0x78>)
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	f003 0310 	and.w	r3, r3, #16
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01c      	beq.n	800b126 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	8b5b      	ldrh	r3, [r3, #26]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10d      	bne.n	800b114 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d008      	beq.n	800b114 <tcp_input_delayed_close+0x50>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6912      	ldr	r2, [r2, #16]
 800b10c:	f06f 010e 	mvn.w	r1, #14
 800b110:	4610      	mov	r0, r2
 800b112:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	480a      	ldr	r0, [pc, #40]	@ (800b140 <tcp_input_delayed_close+0x7c>)
 800b118:	f7ff fa50 	bl	800a5bc <tcp_pcb_remove>
    tcp_free(pcb);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7fd fd95 	bl	8008c4c <tcp_free>
    return 1;
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	08016294 	.word	0x08016294
 800b134:	08016464 	.word	0x08016464
 800b138:	080162e0 	.word	0x080162e0
 800b13c:	20008621 	.word	0x20008621
 800b140:	200085e8 	.word	0x200085e8

0800b144 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b08b      	sub	sp, #44	@ 0x2c
 800b148:	af04      	add	r7, sp, #16
 800b14a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b14c:	4b6f      	ldr	r3, [pc, #444]	@ (800b30c <tcp_listen_input+0x1c8>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	f040 80d2 	bne.w	800b2fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <tcp_listen_input+0x2a>
 800b160:	4b6b      	ldr	r3, [pc, #428]	@ (800b310 <tcp_listen_input+0x1cc>)
 800b162:	f240 2281 	movw	r2, #641	@ 0x281
 800b166:	496b      	ldr	r1, [pc, #428]	@ (800b314 <tcp_listen_input+0x1d0>)
 800b168:	486b      	ldr	r0, [pc, #428]	@ (800b318 <tcp_listen_input+0x1d4>)
 800b16a:	f008 fe2f 	bl	8013dcc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b16e:	4b67      	ldr	r3, [pc, #412]	@ (800b30c <tcp_listen_input+0x1c8>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f003 0310 	and.w	r3, r3, #16
 800b176:	2b00      	cmp	r3, #0
 800b178:	d019      	beq.n	800b1ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b17a:	4b68      	ldr	r3, [pc, #416]	@ (800b31c <tcp_listen_input+0x1d8>)
 800b17c:	6819      	ldr	r1, [r3, #0]
 800b17e:	4b68      	ldr	r3, [pc, #416]	@ (800b320 <tcp_listen_input+0x1dc>)
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	4b67      	ldr	r3, [pc, #412]	@ (800b324 <tcp_listen_input+0x1e0>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18a:	4b67      	ldr	r3, [pc, #412]	@ (800b328 <tcp_listen_input+0x1e4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b18e:	885b      	ldrh	r3, [r3, #2]
 800b190:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b192:	4a65      	ldr	r2, [pc, #404]	@ (800b328 <tcp_listen_input+0x1e4>)
 800b194:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b196:	8812      	ldrh	r2, [r2, #0]
 800b198:	b292      	uxth	r2, r2
 800b19a:	9202      	str	r2, [sp, #8]
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	4b63      	ldr	r3, [pc, #396]	@ (800b32c <tcp_listen_input+0x1e8>)
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	4b63      	ldr	r3, [pc, #396]	@ (800b330 <tcp_listen_input+0x1ec>)
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f003 fbd2 	bl	800e950 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b1ac:	e0a9      	b.n	800b302 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b1ae:	4b57      	ldr	r3, [pc, #348]	@ (800b30c <tcp_listen_input+0x1c8>)
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f000 80a3 	beq.w	800b302 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7d5b      	ldrb	r3, [r3, #21]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff f859 	bl	800a278 <tcp_alloc>
 800b1c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d111      	bne.n	800b1f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <tcp_listen_input+0xa8>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	6910      	ldr	r0, [r2, #16]
 800b1de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	4798      	blx	r3
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]
      return;
 800b1ea:	e08b      	b.n	800b304 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1ec:	23f0      	movs	r3, #240	@ 0xf0
 800b1ee:	73bb      	strb	r3, [r7, #14]
      return;
 800b1f0:	e088      	b.n	800b304 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b1f2:	4b50      	ldr	r3, [pc, #320]	@ (800b334 <tcp_listen_input+0x1f0>)
 800b1f4:	695a      	ldr	r2, [r3, #20]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b1fa:	4b4e      	ldr	r3, [pc, #312]	@ (800b334 <tcp_listen_input+0x1f0>)
 800b1fc:	691a      	ldr	r2, [r3, #16]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	8ada      	ldrh	r2, [r3, #22]
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b20a:	4b47      	ldr	r3, [pc, #284]	@ (800b328 <tcp_listen_input+0x1e4>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	b29a      	uxth	r2, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	2203      	movs	r2, #3
 800b21a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b21c:	4b41      	ldr	r3, [pc, #260]	@ (800b324 <tcp_listen_input+0x1e0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b22e:	6978      	ldr	r0, [r7, #20]
 800b230:	f7ff fa58 	bl	800a6e4 <tcp_next_iss>
 800b234:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b24e:	4b35      	ldr	r3, [pc, #212]	@ (800b324 <tcp_listen_input+0x1e0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	1e5a      	subs	r2, r3, #1
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	7a5b      	ldrb	r3, [r3, #9]
 800b26a:	f003 030c 	and.w	r3, r3, #12
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7a1a      	ldrb	r2, [r3, #8]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b27c:	4b2e      	ldr	r3, [pc, #184]	@ (800b338 <tcp_listen_input+0x1f4>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	60da      	str	r2, [r3, #12]
 800b284:	4a2c      	ldr	r2, [pc, #176]	@ (800b338 <tcp_listen_input+0x1f4>)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	6013      	str	r3, [r2, #0]
 800b28a:	f003 fd23 	bl	800ecd4 <tcp_timer_needed>
 800b28e:	4b2b      	ldr	r3, [pc, #172]	@ (800b33c <tcp_listen_input+0x1f8>)
 800b290:	2201      	movs	r2, #1
 800b292:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b294:	6978      	ldr	r0, [r7, #20]
 800b296:	f001 fd8b 	bl	800cdb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b29a:	4b23      	ldr	r3, [pc, #140]	@ (800b328 <tcp_listen_input+0x1e4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	89db      	ldrh	r3, [r3, #14]
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f007 fa7b 	bl	80127b8 <ip4_route>
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7ff fa30 	bl	800a730 <tcp_eff_send_mss_netif>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2d8:	2112      	movs	r1, #18
 800b2da:	6978      	ldr	r0, [r7, #20]
 800b2dc:	f002 fc96 	bl	800dc0c <tcp_enqueue_flags>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d004      	beq.n	800b2f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	6978      	ldr	r0, [r7, #20]
 800b2f0:	f7fd fed6 	bl	80090a0 <tcp_abandon>
      return;
 800b2f4:	e006      	b.n	800b304 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b2f6:	6978      	ldr	r0, [r7, #20]
 800b2f8:	f002 fd76 	bl	800dde8 <tcp_output>
  return;
 800b2fc:	e001      	b.n	800b302 <tcp_listen_input+0x1be>
    return;
 800b2fe:	bf00      	nop
 800b300:	e000      	b.n	800b304 <tcp_listen_input+0x1c0>
  return;
 800b302:	bf00      	nop
}
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	bd90      	pop	{r4, r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20008620 	.word	0x20008620
 800b310:	08016294 	.word	0x08016294
 800b314:	0801648c 	.word	0x0801648c
 800b318:	080162e0 	.word	0x080162e0
 800b31c:	20008618 	.word	0x20008618
 800b320:	2000861e 	.word	0x2000861e
 800b324:	20008614 	.word	0x20008614
 800b328:	20008604 	.word	0x20008604
 800b32c:	200056b0 	.word	0x200056b0
 800b330:	200056b4 	.word	0x200056b4
 800b334:	200056a0 	.word	0x200056a0
 800b338:	200085e8 	.word	0x200085e8
 800b33c:	200085f0 	.word	0x200085f0

0800b340 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af04      	add	r7, sp, #16
 800b346:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b348:	4b2f      	ldr	r3, [pc, #188]	@ (800b408 <tcp_timewait_input+0xc8>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d153      	bne.n	800b3fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <tcp_timewait_input+0x28>
 800b35a:	4b2c      	ldr	r3, [pc, #176]	@ (800b40c <tcp_timewait_input+0xcc>)
 800b35c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b360:	492b      	ldr	r1, [pc, #172]	@ (800b410 <tcp_timewait_input+0xd0>)
 800b362:	482c      	ldr	r0, [pc, #176]	@ (800b414 <tcp_timewait_input+0xd4>)
 800b364:	f008 fd32 	bl	8013dcc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b368:	4b27      	ldr	r3, [pc, #156]	@ (800b408 <tcp_timewait_input+0xc8>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d02a      	beq.n	800b3ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b374:	4b28      	ldr	r3, [pc, #160]	@ (800b418 <tcp_timewait_input+0xd8>)
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	db2d      	blt.n	800b3de <tcp_timewait_input+0x9e>
 800b382:	4b25      	ldr	r3, [pc, #148]	@ (800b418 <tcp_timewait_input+0xd8>)
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b38e:	440b      	add	r3, r1
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	dc23      	bgt.n	800b3de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b396:	4b21      	ldr	r3, [pc, #132]	@ (800b41c <tcp_timewait_input+0xdc>)
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	4b21      	ldr	r3, [pc, #132]	@ (800b420 <tcp_timewait_input+0xe0>)
 800b39c:	881b      	ldrh	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b418 <tcp_timewait_input+0xd8>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b424 <tcp_timewait_input+0xe4>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3aa:	885b      	ldrh	r3, [r3, #2]
 800b3ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3ae:	4a1d      	ldr	r2, [pc, #116]	@ (800b424 <tcp_timewait_input+0xe4>)
 800b3b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3b2:	8812      	ldrh	r2, [r2, #0]
 800b3b4:	b292      	uxth	r2, r2
 800b3b6:	9202      	str	r2, [sp, #8]
 800b3b8:	9301      	str	r3, [sp, #4]
 800b3ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b428 <tcp_timewait_input+0xe8>)
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	4b1b      	ldr	r3, [pc, #108]	@ (800b42c <tcp_timewait_input+0xec>)
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f003 fac4 	bl	800e950 <tcp_rst>
      return;
 800b3c8:	e01b      	b.n	800b402 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b408 <tcp_timewait_input+0xc8>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b3d6:	4b16      	ldr	r3, [pc, #88]	@ (800b430 <tcp_timewait_input+0xf0>)
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b3de:	4b10      	ldr	r3, [pc, #64]	@ (800b420 <tcp_timewait_input+0xe0>)
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00c      	beq.n	800b400 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f043 0302 	orr.w	r3, r3, #2
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f002 fcf7 	bl	800dde8 <tcp_output>
  }
  return;
 800b3fa:	e001      	b.n	800b400 <tcp_timewait_input+0xc0>
    return;
 800b3fc:	bf00      	nop
 800b3fe:	e000      	b.n	800b402 <tcp_timewait_input+0xc2>
  return;
 800b400:	bf00      	nop
}
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20008620 	.word	0x20008620
 800b40c:	08016294 	.word	0x08016294
 800b410:	080164ac 	.word	0x080164ac
 800b414:	080162e0 	.word	0x080162e0
 800b418:	20008614 	.word	0x20008614
 800b41c:	20008618 	.word	0x20008618
 800b420:	2000861e 	.word	0x2000861e
 800b424:	20008604 	.word	0x20008604
 800b428:	200056b0 	.word	0x200056b0
 800b42c:	200056b4 	.word	0x200056b4
 800b430:	200085dc 	.word	0x200085dc

0800b434 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b08d      	sub	sp, #52	@ 0x34
 800b438:	af04      	add	r7, sp, #16
 800b43a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <tcp_process+0x24>
 800b44a:	4b9d      	ldr	r3, [pc, #628]	@ (800b6c0 <tcp_process+0x28c>)
 800b44c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b450:	499c      	ldr	r1, [pc, #624]	@ (800b6c4 <tcp_process+0x290>)
 800b452:	489d      	ldr	r0, [pc, #628]	@ (800b6c8 <tcp_process+0x294>)
 800b454:	f008 fcba 	bl	8013dcc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b458:	4b9c      	ldr	r3, [pc, #624]	@ (800b6cc <tcp_process+0x298>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	f003 0304 	and.w	r3, r3, #4
 800b460:	2b00      	cmp	r3, #0
 800b462:	d04e      	beq.n	800b502 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	7d1b      	ldrb	r3, [r3, #20]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d108      	bne.n	800b47e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b470:	4b97      	ldr	r3, [pc, #604]	@ (800b6d0 <tcp_process+0x29c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d123      	bne.n	800b4c0 <tcp_process+0x8c>
        acceptable = 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	76fb      	strb	r3, [r7, #27]
 800b47c:	e020      	b.n	800b4c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b482:	4b94      	ldr	r3, [pc, #592]	@ (800b6d4 <tcp_process+0x2a0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d102      	bne.n	800b490 <tcp_process+0x5c>
        acceptable = 1;
 800b48a:	2301      	movs	r3, #1
 800b48c:	76fb      	strb	r3, [r7, #27]
 800b48e:	e017      	b.n	800b4c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b490:	4b90      	ldr	r3, [pc, #576]	@ (800b6d4 <tcp_process+0x2a0>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	db10      	blt.n	800b4c0 <tcp_process+0x8c>
 800b49e:	4b8d      	ldr	r3, [pc, #564]	@ (800b6d4 <tcp_process+0x2a0>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b4aa:	440b      	add	r3, r1
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	dc06      	bgt.n	800b4c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	8b5b      	ldrh	r3, [r3, #26]
 800b4b6:	f043 0302 	orr.w	r3, r3, #2
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b4c0:	7efb      	ldrb	r3, [r7, #27]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d01b      	beq.n	800b4fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7d1b      	ldrb	r3, [r3, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <tcp_process+0xa8>
 800b4ce:	4b7c      	ldr	r3, [pc, #496]	@ (800b6c0 <tcp_process+0x28c>)
 800b4d0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b4d4:	4980      	ldr	r1, [pc, #512]	@ (800b6d8 <tcp_process+0x2a4>)
 800b4d6:	487c      	ldr	r0, [pc, #496]	@ (800b6c8 <tcp_process+0x294>)
 800b4d8:	f008 fc78 	bl	8013dcc <iprintf>
      recv_flags |= TF_RESET;
 800b4dc:	4b7f      	ldr	r3, [pc, #508]	@ (800b6dc <tcp_process+0x2a8>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f043 0308 	orr.w	r3, r3, #8
 800b4e4:	b2da      	uxtb	r2, r3
 800b4e6:	4b7d      	ldr	r3, [pc, #500]	@ (800b6dc <tcp_process+0x2a8>)
 800b4e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	8b5b      	ldrh	r3, [r3, #26]
 800b4ee:	f023 0301 	bic.w	r3, r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b4f8:	f06f 030d 	mvn.w	r3, #13
 800b4fc:	e37a      	b.n	800bbf4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e378      	b.n	800bbf4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b502:	4b72      	ldr	r3, [pc, #456]	@ (800b6cc <tcp_process+0x298>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d010      	beq.n	800b530 <tcp_process+0xfc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7d1b      	ldrb	r3, [r3, #20]
 800b512:	2b02      	cmp	r3, #2
 800b514:	d00c      	beq.n	800b530 <tcp_process+0xfc>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7d1b      	ldrb	r3, [r3, #20]
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d008      	beq.n	800b530 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	8b5b      	ldrh	r3, [r3, #26]
 800b522:	f043 0302 	orr.w	r3, r3, #2
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	e361      	b.n	800bbf4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8b5b      	ldrh	r3, [r3, #26]
 800b534:	f003 0310 	and.w	r3, r3, #16
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d103      	bne.n	800b544 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b53c:	4b68      	ldr	r3, [pc, #416]	@ (800b6e0 <tcp_process+0x2ac>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 fc2b 	bl	800cdb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	7d1b      	ldrb	r3, [r3, #20]
 800b55e:	3b02      	subs	r3, #2
 800b560:	2b07      	cmp	r3, #7
 800b562:	f200 8337 	bhi.w	800bbd4 <tcp_process+0x7a0>
 800b566:	a201      	add	r2, pc, #4	@ (adr r2, 800b56c <tcp_process+0x138>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b58d 	.word	0x0800b58d
 800b570:	0800b7bd 	.word	0x0800b7bd
 800b574:	0800b935 	.word	0x0800b935
 800b578:	0800b95f 	.word	0x0800b95f
 800b57c:	0800ba83 	.word	0x0800ba83
 800b580:	0800b935 	.word	0x0800b935
 800b584:	0800bb0f 	.word	0x0800bb0f
 800b588:	0800bb9f 	.word	0x0800bb9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b58c:	4b4f      	ldr	r3, [pc, #316]	@ (800b6cc <tcp_process+0x298>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	2b00      	cmp	r3, #0
 800b596:	f000 80e4 	beq.w	800b762 <tcp_process+0x32e>
 800b59a:	4b4c      	ldr	r3, [pc, #304]	@ (800b6cc <tcp_process+0x298>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 80dd 	beq.w	800b762 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	4b48      	ldr	r3, [pc, #288]	@ (800b6d0 <tcp_process+0x29c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	f040 80d5 	bne.w	800b762 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b5b8:	4b46      	ldr	r3, [pc, #280]	@ (800b6d4 <tcp_process+0x2a0>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b5ca:	4b41      	ldr	r3, [pc, #260]	@ (800b6d0 <tcp_process+0x29c>)
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b5d2:	4b44      	ldr	r3, [pc, #272]	@ (800b6e4 <tcp_process+0x2b0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	89db      	ldrh	r3, [r3, #14]
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b5ec:	4b39      	ldr	r3, [pc, #228]	@ (800b6d4 <tcp_process+0x2a0>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	1e5a      	subs	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2204      	movs	r2, #4
 800b5fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3304      	adds	r3, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f007 f8d7 	bl	80127b8 <ip4_route>
 800b60a:	4601      	mov	r1, r0
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	461a      	mov	r2, r3
 800b612:	4620      	mov	r0, r4
 800b614:	f7ff f88c 	bl	800a730 <tcp_eff_send_mss_netif>
 800b618:	4603      	mov	r3, r0
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b624:	009a      	lsls	r2, r3, #2
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b630:	428b      	cmp	r3, r1
 800b632:	bf38      	it	cc
 800b634:	460b      	movcc	r3, r1
 800b636:	429a      	cmp	r2, r3
 800b638:	d204      	bcs.n	800b644 <tcp_process+0x210>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	b29b      	uxth	r3, r3
 800b642:	e00d      	b.n	800b660 <tcp_process+0x22c>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b64e:	4293      	cmp	r3, r2
 800b650:	d904      	bls.n	800b65c <tcp_process+0x228>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	b29b      	uxth	r3, r3
 800b65a:	e001      	b.n	800b660 <tcp_process+0x22c>
 800b65c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <tcp_process+0x24a>
 800b670:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <tcp_process+0x28c>)
 800b672:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b676:	491c      	ldr	r1, [pc, #112]	@ (800b6e8 <tcp_process+0x2b4>)
 800b678:	4813      	ldr	r0, [pc, #76]	@ (800b6c8 <tcp_process+0x294>)
 800b67a:	f008 fba7 	bl	8013dcc <iprintf>
        --pcb->snd_queuelen;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b684:	3b01      	subs	r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b692:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d12a      	bne.n	800b6f0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b69e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <tcp_process+0x280>
 800b6a6:	4b06      	ldr	r3, [pc, #24]	@ (800b6c0 <tcp_process+0x28c>)
 800b6a8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b6ac:	490f      	ldr	r1, [pc, #60]	@ (800b6ec <tcp_process+0x2b8>)
 800b6ae:	4806      	ldr	r0, [pc, #24]	@ (800b6c8 <tcp_process+0x294>)
 800b6b0:	f008 fb8c 	bl	8013dcc <iprintf>
          pcb->unsent = rseg->next;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b6bc:	e01c      	b.n	800b6f8 <tcp_process+0x2c4>
 800b6be:	bf00      	nop
 800b6c0:	08016294 	.word	0x08016294
 800b6c4:	080164cc 	.word	0x080164cc
 800b6c8:	080162e0 	.word	0x080162e0
 800b6cc:	20008620 	.word	0x20008620
 800b6d0:	20008618 	.word	0x20008618
 800b6d4:	20008614 	.word	0x20008614
 800b6d8:	080164e8 	.word	0x080164e8
 800b6dc:	20008621 	.word	0x20008621
 800b6e0:	200085dc 	.word	0x200085dc
 800b6e4:	20008604 	.word	0x20008604
 800b6e8:	08016508 	.word	0x08016508
 800b6ec:	08016520 	.word	0x08016520
        } else {
          pcb->unacked = rseg->next;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b6f8:	69f8      	ldr	r0, [r7, #28]
 800b6fa:	f7fe fc36 	bl	8009f6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b702:	2b00      	cmp	r3, #0
 800b704:	d104      	bne.n	800b710 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b70c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b70e:	e006      	b.n	800b71e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00a      	beq.n	800b73e <tcp_process+0x30a>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	6910      	ldr	r0, [r2, #16]
 800b732:	2200      	movs	r2, #0
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4798      	blx	r3
 800b738:	4603      	mov	r3, r0
 800b73a:	76bb      	strb	r3, [r7, #26]
 800b73c:	e001      	b.n	800b742 <tcp_process+0x30e>
 800b73e:	2300      	movs	r3, #0
 800b740:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b742:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b746:	f113 0f0d 	cmn.w	r3, #13
 800b74a:	d102      	bne.n	800b752 <tcp_process+0x31e>
          return ERR_ABRT;
 800b74c:	f06f 030c 	mvn.w	r3, #12
 800b750:	e250      	b.n	800bbf4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	8b5b      	ldrh	r3, [r3, #26]
 800b756:	f043 0302 	orr.w	r3, r3, #2
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b760:	e23a      	b.n	800bbd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b762:	4b98      	ldr	r3, [pc, #608]	@ (800b9c4 <tcp_process+0x590>)
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	f003 0310 	and.w	r3, r3, #16
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	f000 8234 	beq.w	800bbd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b770:	4b95      	ldr	r3, [pc, #596]	@ (800b9c8 <tcp_process+0x594>)
 800b772:	6819      	ldr	r1, [r3, #0]
 800b774:	4b95      	ldr	r3, [pc, #596]	@ (800b9cc <tcp_process+0x598>)
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	461a      	mov	r2, r3
 800b77a:	4b95      	ldr	r3, [pc, #596]	@ (800b9d0 <tcp_process+0x59c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b780:	4b94      	ldr	r3, [pc, #592]	@ (800b9d4 <tcp_process+0x5a0>)
 800b782:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b784:	885b      	ldrh	r3, [r3, #2]
 800b786:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b788:	4a92      	ldr	r2, [pc, #584]	@ (800b9d4 <tcp_process+0x5a0>)
 800b78a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b78c:	8812      	ldrh	r2, [r2, #0]
 800b78e:	b292      	uxth	r2, r2
 800b790:	9202      	str	r2, [sp, #8]
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	4b90      	ldr	r3, [pc, #576]	@ (800b9d8 <tcp_process+0x5a4>)
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	4b90      	ldr	r3, [pc, #576]	@ (800b9dc <tcp_process+0x5a8>)
 800b79a:	4602      	mov	r2, r0
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f003 f8d7 	bl	800e950 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b7a8:	2b05      	cmp	r3, #5
 800b7aa:	f200 8215 	bhi.w	800bbd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f002 fea3 	bl	800e500 <tcp_rexmit_rto>
      break;
 800b7ba:	e20d      	b.n	800bbd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b7bc:	4b81      	ldr	r3, [pc, #516]	@ (800b9c4 <tcp_process+0x590>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	f003 0310 	and.w	r3, r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 80a1 	beq.w	800b90c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7ca:	4b7f      	ldr	r3, [pc, #508]	@ (800b9c8 <tcp_process+0x594>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	db7e      	blt.n	800b8d8 <tcp_process+0x4a4>
 800b7da:	4b7b      	ldr	r3, [pc, #492]	@ (800b9c8 <tcp_process+0x594>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dc77      	bgt.n	800b8d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2204      	movs	r2, #4
 800b7ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d102      	bne.n	800b7fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b7f6:	23fa      	movs	r3, #250	@ 0xfa
 800b7f8:	76bb      	strb	r3, [r7, #26]
 800b7fa:	e01d      	b.n	800b838 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <tcp_process+0x3e0>
 800b806:	4b76      	ldr	r3, [pc, #472]	@ (800b9e0 <tcp_process+0x5ac>)
 800b808:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b80c:	4975      	ldr	r1, [pc, #468]	@ (800b9e4 <tcp_process+0x5b0>)
 800b80e:	4876      	ldr	r0, [pc, #472]	@ (800b9e8 <tcp_process+0x5b4>)
 800b810:	f008 fadc 	bl	8013dcc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <tcp_process+0x400>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	6910      	ldr	r0, [r2, #16]
 800b828:	2200      	movs	r2, #0
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	4798      	blx	r3
 800b82e:	4603      	mov	r3, r0
 800b830:	76bb      	strb	r3, [r7, #26]
 800b832:	e001      	b.n	800b838 <tcp_process+0x404>
 800b834:	23f0      	movs	r3, #240	@ 0xf0
 800b836:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b838:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00a      	beq.n	800b856 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b840:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b844:	f113 0f0d 	cmn.w	r3, #13
 800b848:	d002      	beq.n	800b850 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fd fce6 	bl	800921c <tcp_abort>
            }
            return ERR_ABRT;
 800b850:	f06f 030c 	mvn.w	r3, #12
 800b854:	e1ce      	b.n	800bbf4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fae0 	bl	800be1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b85c:	4b63      	ldr	r3, [pc, #396]	@ (800b9ec <tcp_process+0x5b8>)
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <tcp_process+0x43c>
            recv_acked--;
 800b864:	4b61      	ldr	r3, [pc, #388]	@ (800b9ec <tcp_process+0x5b8>)
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	4b5f      	ldr	r3, [pc, #380]	@ (800b9ec <tcp_process+0x5b8>)
 800b86e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b874:	009a      	lsls	r2, r3, #2
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b880:	428b      	cmp	r3, r1
 800b882:	bf38      	it	cc
 800b884:	460b      	movcc	r3, r1
 800b886:	429a      	cmp	r2, r3
 800b888:	d204      	bcs.n	800b894 <tcp_process+0x460>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	b29b      	uxth	r3, r3
 800b892:	e00d      	b.n	800b8b0 <tcp_process+0x47c>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d904      	bls.n	800b8ac <tcp_process+0x478>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	e001      	b.n	800b8b0 <tcp_process+0x47c>
 800b8ac:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b8b6:	4b4e      	ldr	r3, [pc, #312]	@ (800b9f0 <tcp_process+0x5bc>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	f003 0320 	and.w	r3, r3, #32
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d037      	beq.n	800b932 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	8b5b      	ldrh	r3, [r3, #26]
 800b8c6:	f043 0302 	orr.w	r3, r3, #2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2207      	movs	r2, #7
 800b8d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b8d6:	e02c      	b.n	800b932 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b9c8 <tcp_process+0x594>)
 800b8da:	6819      	ldr	r1, [r3, #0]
 800b8dc:	4b3b      	ldr	r3, [pc, #236]	@ (800b9cc <tcp_process+0x598>)
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b9d0 <tcp_process+0x59c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e8:	4b3a      	ldr	r3, [pc, #232]	@ (800b9d4 <tcp_process+0x5a0>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ec:	885b      	ldrh	r3, [r3, #2]
 800b8ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8f0:	4a38      	ldr	r2, [pc, #224]	@ (800b9d4 <tcp_process+0x5a0>)
 800b8f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8f4:	8812      	ldrh	r2, [r2, #0]
 800b8f6:	b292      	uxth	r2, r2
 800b8f8:	9202      	str	r2, [sp, #8]
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	4b36      	ldr	r3, [pc, #216]	@ (800b9d8 <tcp_process+0x5a4>)
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	4b36      	ldr	r3, [pc, #216]	@ (800b9dc <tcp_process+0x5a8>)
 800b902:	4602      	mov	r2, r0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f003 f823 	bl	800e950 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b90a:	e167      	b.n	800bbdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b90c:	4b2d      	ldr	r3, [pc, #180]	@ (800b9c4 <tcp_process+0x590>)
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 8161 	beq.w	800bbdc <tcp_process+0x7a8>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b91e:	1e5a      	subs	r2, r3, #1
 800b920:	4b2b      	ldr	r3, [pc, #172]	@ (800b9d0 <tcp_process+0x59c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	f040 8159 	bne.w	800bbdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f002 fe0a 	bl	800e544 <tcp_rexmit>
      break;
 800b930:	e154      	b.n	800bbdc <tcp_process+0x7a8>
 800b932:	e153      	b.n	800bbdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa71 	bl	800be1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b93a:	4b2d      	ldr	r3, [pc, #180]	@ (800b9f0 <tcp_process+0x5bc>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 814c 	beq.w	800bbe0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	8b5b      	ldrh	r3, [r3, #26]
 800b94c:	f043 0302 	orr.w	r3, r3, #2
 800b950:	b29a      	uxth	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2207      	movs	r2, #7
 800b95a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b95c:	e140      	b.n	800bbe0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa5c 	bl	800be1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b964:	4b22      	ldr	r3, [pc, #136]	@ (800b9f0 <tcp_process+0x5bc>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	f003 0320 	and.w	r3, r3, #32
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d071      	beq.n	800ba54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b970:	4b14      	ldr	r3, [pc, #80]	@ (800b9c4 <tcp_process+0x590>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d060      	beq.n	800ba3e <tcp_process+0x60a>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b980:	4b11      	ldr	r3, [pc, #68]	@ (800b9c8 <tcp_process+0x594>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	429a      	cmp	r2, r3
 800b986:	d15a      	bne.n	800ba3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d156      	bne.n	800ba3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	8b5b      	ldrh	r3, [r3, #26]
 800b994:	f043 0302 	orr.w	r3, r3, #2
 800b998:	b29a      	uxth	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7fe fdbc 	bl	800a51c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b9a4:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <tcp_process+0x5c0>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d105      	bne.n	800b9ba <tcp_process+0x586>
 800b9ae:	4b11      	ldr	r3, [pc, #68]	@ (800b9f4 <tcp_process+0x5c0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	4a0f      	ldr	r2, [pc, #60]	@ (800b9f4 <tcp_process+0x5c0>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	e02e      	b.n	800ba18 <tcp_process+0x5e4>
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f4 <tcp_process+0x5c0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e027      	b.n	800ba12 <tcp_process+0x5de>
 800b9c2:	bf00      	nop
 800b9c4:	20008620 	.word	0x20008620
 800b9c8:	20008618 	.word	0x20008618
 800b9cc:	2000861e 	.word	0x2000861e
 800b9d0:	20008614 	.word	0x20008614
 800b9d4:	20008604 	.word	0x20008604
 800b9d8:	200056b0 	.word	0x200056b0
 800b9dc:	200056b4 	.word	0x200056b4
 800b9e0:	08016294 	.word	0x08016294
 800b9e4:	08016534 	.word	0x08016534
 800b9e8:	080162e0 	.word	0x080162e0
 800b9ec:	2000861c 	.word	0x2000861c
 800b9f0:	20008621 	.word	0x20008621
 800b9f4:	200085e8 	.word	0x200085e8
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d104      	bne.n	800ba0c <tcp_process+0x5d8>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	60da      	str	r2, [r3, #12]
 800ba0a:	e005      	b.n	800ba18 <tcp_process+0x5e4>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1ef      	bne.n	800b9f8 <tcp_process+0x5c4>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	4b77      	ldr	r3, [pc, #476]	@ (800bbfc <tcp_process+0x7c8>)
 800ba20:	2201      	movs	r2, #1
 800ba22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	220a      	movs	r2, #10
 800ba28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ba2a:	4b75      	ldr	r3, [pc, #468]	@ (800bc00 <tcp_process+0x7cc>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60da      	str	r2, [r3, #12]
 800ba32:	4a73      	ldr	r2, [pc, #460]	@ (800bc00 <tcp_process+0x7cc>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6013      	str	r3, [r2, #0]
 800ba38:	f003 f94c 	bl	800ecd4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ba3c:	e0d2      	b.n	800bbe4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	8b5b      	ldrh	r3, [r3, #26]
 800ba42:	f043 0302 	orr.w	r3, r3, #2
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2208      	movs	r2, #8
 800ba50:	751a      	strb	r2, [r3, #20]
      break;
 800ba52:	e0c7      	b.n	800bbe4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba54:	4b6b      	ldr	r3, [pc, #428]	@ (800bc04 <tcp_process+0x7d0>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 0310 	and.w	r3, r3, #16
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f000 80c1 	beq.w	800bbe4 <tcp_process+0x7b0>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba66:	4b68      	ldr	r3, [pc, #416]	@ (800bc08 <tcp_process+0x7d4>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	f040 80ba 	bne.w	800bbe4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f040 80b5 	bne.w	800bbe4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2206      	movs	r2, #6
 800ba7e:	751a      	strb	r2, [r3, #20]
      break;
 800ba80:	e0b0      	b.n	800bbe4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f9ca 	bl	800be1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba88:	4b60      	ldr	r3, [pc, #384]	@ (800bc0c <tcp_process+0x7d8>)
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80a9 	beq.w	800bbe8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8b5b      	ldrh	r3, [r3, #26]
 800ba9a:	f043 0302 	orr.w	r3, r3, #2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7fe fd39 	bl	800a51c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800baaa:	4b59      	ldr	r3, [pc, #356]	@ (800bc10 <tcp_process+0x7dc>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d105      	bne.n	800bac0 <tcp_process+0x68c>
 800bab4:	4b56      	ldr	r3, [pc, #344]	@ (800bc10 <tcp_process+0x7dc>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4a55      	ldr	r2, [pc, #340]	@ (800bc10 <tcp_process+0x7dc>)
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	e013      	b.n	800bae8 <tcp_process+0x6b4>
 800bac0:	4b53      	ldr	r3, [pc, #332]	@ (800bc10 <tcp_process+0x7dc>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	e00c      	b.n	800bae2 <tcp_process+0x6ae>
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d104      	bne.n	800badc <tcp_process+0x6a8>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	60da      	str	r2, [r3, #12]
 800bada:	e005      	b.n	800bae8 <tcp_process+0x6b4>
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1ef      	bne.n	800bac8 <tcp_process+0x694>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	60da      	str	r2, [r3, #12]
 800baee:	4b43      	ldr	r3, [pc, #268]	@ (800bbfc <tcp_process+0x7c8>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	220a      	movs	r2, #10
 800baf8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bafa:	4b41      	ldr	r3, [pc, #260]	@ (800bc00 <tcp_process+0x7cc>)
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	4a3f      	ldr	r2, [pc, #252]	@ (800bc00 <tcp_process+0x7cc>)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	f003 f8e4 	bl	800ecd4 <tcp_timer_needed>
      }
      break;
 800bb0c:	e06c      	b.n	800bbe8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f984 	bl	800be1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb14:	4b3b      	ldr	r3, [pc, #236]	@ (800bc04 <tcp_process+0x7d0>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	f003 0310 	and.w	r3, r3, #16
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d065      	beq.n	800bbec <tcp_process+0x7b8>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb24:	4b38      	ldr	r3, [pc, #224]	@ (800bc08 <tcp_process+0x7d4>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d15f      	bne.n	800bbec <tcp_process+0x7b8>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d15b      	bne.n	800bbec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7fe fcf1 	bl	800a51c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb3a:	4b35      	ldr	r3, [pc, #212]	@ (800bc10 <tcp_process+0x7dc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d105      	bne.n	800bb50 <tcp_process+0x71c>
 800bb44:	4b32      	ldr	r3, [pc, #200]	@ (800bc10 <tcp_process+0x7dc>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	4a31      	ldr	r2, [pc, #196]	@ (800bc10 <tcp_process+0x7dc>)
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e013      	b.n	800bb78 <tcp_process+0x744>
 800bb50:	4b2f      	ldr	r3, [pc, #188]	@ (800bc10 <tcp_process+0x7dc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	e00c      	b.n	800bb72 <tcp_process+0x73e>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d104      	bne.n	800bb6c <tcp_process+0x738>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	60da      	str	r2, [r3, #12]
 800bb6a:	e005      	b.n	800bb78 <tcp_process+0x744>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1ef      	bne.n	800bb58 <tcp_process+0x724>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	60da      	str	r2, [r3, #12]
 800bb7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbfc <tcp_process+0x7c8>)
 800bb80:	2201      	movs	r2, #1
 800bb82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	220a      	movs	r2, #10
 800bb88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb8a:	4b1d      	ldr	r3, [pc, #116]	@ (800bc00 <tcp_process+0x7cc>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60da      	str	r2, [r3, #12]
 800bb92:	4a1b      	ldr	r2, [pc, #108]	@ (800bc00 <tcp_process+0x7cc>)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	f003 f89c 	bl	800ecd4 <tcp_timer_needed>
      }
      break;
 800bb9c:	e026      	b.n	800bbec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f93c 	bl	800be1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bba4:	4b17      	ldr	r3, [pc, #92]	@ (800bc04 <tcp_process+0x7d0>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	f003 0310 	and.w	r3, r3, #16
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01f      	beq.n	800bbf0 <tcp_process+0x7bc>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbb4:	4b14      	ldr	r3, [pc, #80]	@ (800bc08 <tcp_process+0x7d4>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d119      	bne.n	800bbf0 <tcp_process+0x7bc>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d115      	bne.n	800bbf0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bbc4:	4b11      	ldr	r3, [pc, #68]	@ (800bc0c <tcp_process+0x7d8>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	f043 0310 	orr.w	r3, r3, #16
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4b0f      	ldr	r3, [pc, #60]	@ (800bc0c <tcp_process+0x7d8>)
 800bbd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bbd2:	e00d      	b.n	800bbf0 <tcp_process+0x7bc>
    default:
      break;
 800bbd4:	bf00      	nop
 800bbd6:	e00c      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbd8:	bf00      	nop
 800bbda:	e00a      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbdc:	bf00      	nop
 800bbde:	e008      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbe0:	bf00      	nop
 800bbe2:	e006      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbe4:	bf00      	nop
 800bbe6:	e004      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbe8:	bf00      	nop
 800bbea:	e002      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbec:	bf00      	nop
 800bbee:	e000      	b.n	800bbf2 <tcp_process+0x7be>
      break;
 800bbf0:	bf00      	nop
  }
  return ERR_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3724      	adds	r7, #36	@ 0x24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd90      	pop	{r4, r7, pc}
 800bbfc:	200085f0 	.word	0x200085f0
 800bc00:	200085ec 	.word	0x200085ec
 800bc04:	20008620 	.word	0x20008620
 800bc08:	20008618 	.word	0x20008618
 800bc0c:	20008621 	.word	0x20008621
 800bc10:	200085e8 	.word	0x200085e8

0800bc14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bc14:	b590      	push	{r4, r7, lr}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <tcp_oos_insert_segment+0x1e>
 800bc24:	4b3b      	ldr	r3, [pc, #236]	@ (800bd14 <tcp_oos_insert_segment+0x100>)
 800bc26:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bc2a:	493b      	ldr	r1, [pc, #236]	@ (800bd18 <tcp_oos_insert_segment+0x104>)
 800bc2c:	483b      	ldr	r0, [pc, #236]	@ (800bd1c <tcp_oos_insert_segment+0x108>)
 800bc2e:	f008 f8cd 	bl	8013dcc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	899b      	ldrh	r3, [r3, #12]
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fb f986 	bl	8006f4c <lwip_htons>
 800bc40:	4603      	mov	r3, r0
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d028      	beq.n	800bc9e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bc4c:	6838      	ldr	r0, [r7, #0]
 800bc4e:	f7fe f977 	bl	8009f40 <tcp_segs_free>
    next = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	e056      	b.n	800bd06 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	899b      	ldrh	r3, [r3, #12]
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fb f973 	bl	8006f4c <lwip_htons>
 800bc66:	4603      	mov	r3, r0
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00d      	beq.n	800bc8e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	899b      	ldrh	r3, [r3, #12]
 800bc78:	b29c      	uxth	r4, r3
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	f7fb f966 	bl	8006f4c <lwip_htons>
 800bc80:	4603      	mov	r3, r0
 800bc82:	461a      	mov	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	4322      	orrs	r2, r4
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f7fe f966 	bl	8009f6a <tcp_seg_free>
    while (next &&
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00e      	beq.n	800bcc2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	891b      	ldrh	r3, [r3, #8]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <tcp_oos_insert_segment+0x10c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	441a      	add	r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	6839      	ldr	r1, [r7, #0]
 800bcb8:	8909      	ldrh	r1, [r1, #8]
 800bcba:	440b      	add	r3, r1
 800bcbc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	daca      	bge.n	800bc58 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d01e      	beq.n	800bd06 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	891b      	ldrh	r3, [r3, #8]
 800bccc:	461a      	mov	r2, r3
 800bcce:	4b14      	ldr	r3, [pc, #80]	@ (800bd20 <tcp_oos_insert_segment+0x10c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	441a      	add	r2, r3
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd12      	ble.n	800bd06 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <tcp_oos_insert_segment+0x10c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f7fc fb6d 	bl	80083e0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
}
 800bd0c:	bf00      	nop
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd90      	pop	{r4, r7, pc}
 800bd14:	08016294 	.word	0x08016294
 800bd18:	08016554 	.word	0x08016554
 800bd1c:	080162e0 	.word	0x080162e0
 800bd20:	20008614 	.word	0x20008614

0800bd24 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bd24:	b5b0      	push	{r4, r5, r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bd32:	e03e      	b.n	800bdb2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fc fd5a 	bl	80087fc <pbuf_clen>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd52:	8a7a      	ldrh	r2, [r7, #18]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d906      	bls.n	800bd66 <tcp_free_acked_segments+0x42>
 800bd58:	4b2a      	ldr	r3, [pc, #168]	@ (800be04 <tcp_free_acked_segments+0xe0>)
 800bd5a:	f240 4257 	movw	r2, #1111	@ 0x457
 800bd5e:	492a      	ldr	r1, [pc, #168]	@ (800be08 <tcp_free_acked_segments+0xe4>)
 800bd60:	482a      	ldr	r0, [pc, #168]	@ (800be0c <tcp_free_acked_segments+0xe8>)
 800bd62:	f008 f833 	bl	8013dcc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bd6c:	8a7b      	ldrh	r3, [r7, #18]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	891a      	ldrh	r2, [r3, #8]
 800bd7c:	4b24      	ldr	r3, [pc, #144]	@ (800be10 <tcp_free_acked_segments+0xec>)
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	4413      	add	r3, r2
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	4b22      	ldr	r3, [pc, #136]	@ (800be10 <tcp_free_acked_segments+0xec>)
 800bd86:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bd88:	6978      	ldr	r0, [r7, #20]
 800bd8a:	f7fe f8ee 	bl	8009f6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00c      	beq.n	800bdb2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d109      	bne.n	800bdb2 <tcp_free_acked_segments+0x8e>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d106      	bne.n	800bdb2 <tcp_free_acked_segments+0x8e>
 800bda4:	4b17      	ldr	r3, [pc, #92]	@ (800be04 <tcp_free_acked_segments+0xe0>)
 800bda6:	f240 4261 	movw	r2, #1121	@ 0x461
 800bdaa:	491a      	ldr	r1, [pc, #104]	@ (800be14 <tcp_free_acked_segments+0xf0>)
 800bdac:	4817      	ldr	r0, [pc, #92]	@ (800be0c <tcp_free_acked_segments+0xe8>)
 800bdae:	f008 f80d 	bl	8013dcc <iprintf>
  while (seg_list != NULL &&
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d020      	beq.n	800bdfa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fb f8da 	bl	8006f78 <lwip_htonl>
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	891b      	ldrh	r3, [r3, #8]
 800bdca:	461d      	mov	r5, r3
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	899b      	ldrh	r3, [r3, #12]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fb f8b9 	bl	8006f4c <lwip_htons>
 800bdda:	4603      	mov	r3, r0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <tcp_free_acked_segments+0xc6>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <tcp_free_acked_segments+0xc8>
 800bdea:	2300      	movs	r3, #0
 800bdec:	442b      	add	r3, r5
 800bdee:	18e2      	adds	r2, r4, r3
 800bdf0:	4b09      	ldr	r3, [pc, #36]	@ (800be18 <tcp_free_acked_segments+0xf4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd9c      	ble.n	800bd34 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bdb0      	pop	{r4, r5, r7, pc}
 800be04:	08016294 	.word	0x08016294
 800be08:	0801657c 	.word	0x0801657c
 800be0c:	080162e0 	.word	0x080162e0
 800be10:	2000861c 	.word	0x2000861c
 800be14:	080165a4 	.word	0x080165a4
 800be18:	20008618 	.word	0x20008618

0800be1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be1c:	b5b0      	push	{r4, r5, r7, lr}
 800be1e:	b094      	sub	sp, #80	@ 0x50
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800be24:	2300      	movs	r3, #0
 800be26:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <tcp_receive+0x20>
 800be2e:	4b91      	ldr	r3, [pc, #580]	@ (800c074 <tcp_receive+0x258>)
 800be30:	f240 427b 	movw	r2, #1147	@ 0x47b
 800be34:	4990      	ldr	r1, [pc, #576]	@ (800c078 <tcp_receive+0x25c>)
 800be36:	4891      	ldr	r0, [pc, #580]	@ (800c07c <tcp_receive+0x260>)
 800be38:	f007 ffc8 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7d1b      	ldrb	r3, [r3, #20]
 800be40:	2b03      	cmp	r3, #3
 800be42:	d806      	bhi.n	800be52 <tcp_receive+0x36>
 800be44:	4b8b      	ldr	r3, [pc, #556]	@ (800c074 <tcp_receive+0x258>)
 800be46:	f240 427c 	movw	r2, #1148	@ 0x47c
 800be4a:	498d      	ldr	r1, [pc, #564]	@ (800c080 <tcp_receive+0x264>)
 800be4c:	488b      	ldr	r0, [pc, #556]	@ (800c07c <tcp_receive+0x260>)
 800be4e:	f007 ffbd 	bl	8013dcc <iprintf>

  if (flags & TCP_ACK) {
 800be52:	4b8c      	ldr	r3, [pc, #560]	@ (800c084 <tcp_receive+0x268>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	f003 0310 	and.w	r3, r3, #16
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 8264 	beq.w	800c328 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be66:	461a      	mov	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be6c:	4413      	add	r3, r2
 800be6e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be74:	4b84      	ldr	r3, [pc, #528]	@ (800c088 <tcp_receive+0x26c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	db1b      	blt.n	800beb6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be82:	4b81      	ldr	r3, [pc, #516]	@ (800c088 <tcp_receive+0x26c>)
 800be84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be86:	429a      	cmp	r2, r3
 800be88:	d106      	bne.n	800be98 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be8e:	4b7f      	ldr	r3, [pc, #508]	@ (800c08c <tcp_receive+0x270>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	db0e      	blt.n	800beb6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be9c:	4b7b      	ldr	r3, [pc, #492]	@ (800c08c <tcp_receive+0x270>)
 800be9e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d125      	bne.n	800bef0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bea4:	4b7a      	ldr	r3, [pc, #488]	@ (800c090 <tcp_receive+0x274>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	89db      	ldrh	r3, [r3, #14]
 800beaa:	b29a      	uxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d91c      	bls.n	800bef0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800beb6:	4b76      	ldr	r3, [pc, #472]	@ (800c090 <tcp_receive+0x274>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	89db      	ldrh	r3, [r3, #14]
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d205      	bcs.n	800bee0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bee0:	4b69      	ldr	r3, [pc, #420]	@ (800c088 <tcp_receive+0x26c>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bee8:	4b68      	ldr	r3, [pc, #416]	@ (800c08c <tcp_receive+0x270>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bef0:	4b66      	ldr	r3, [pc, #408]	@ (800c08c <tcp_receive+0x270>)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	dc58      	bgt.n	800bfb0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800befe:	4b65      	ldr	r3, [pc, #404]	@ (800c094 <tcp_receive+0x278>)
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d14b      	bne.n	800bf9e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bf10:	4413      	add	r3, r2
 800bf12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d142      	bne.n	800bf9e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	db3d      	blt.n	800bf9e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf26:	4b59      	ldr	r3, [pc, #356]	@ (800c08c <tcp_receive+0x270>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d137      	bne.n	800bf9e <tcp_receive+0x182>
              found_dupack = 1;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf38:	2bff      	cmp	r3, #255	@ 0xff
 800bf3a:	d007      	beq.n	800bf4c <tcp_receive+0x130>
                ++pcb->dupacks;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf42:	3301      	adds	r3, #1
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d91b      	bls.n	800bf8e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf60:	4413      	add	r3, r2
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d30a      	bcc.n	800bf84 <tcp_receive+0x168>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf78:	4413      	add	r3, r2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bf82:	e004      	b.n	800bf8e <tcp_receive+0x172>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d902      	bls.n	800bf9e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f002 fb3f 	bl	800e61c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bf9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f040 8161 	bne.w	800c268 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfae:	e15b      	b.n	800c268 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfb0:	4b36      	ldr	r3, [pc, #216]	@ (800c08c <tcp_receive+0x270>)
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f2c0 814e 	blt.w	800c25e <tcp_receive+0x442>
 800bfc2:	4b32      	ldr	r3, [pc, #200]	@ (800c08c <tcp_receive+0x270>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	f300 8146 	bgt.w	800c25e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	8b5b      	ldrh	r3, [r3, #26]
 800bfd6:	f003 0304 	and.w	r3, r3, #4
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d010      	beq.n	800c000 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	8b5b      	ldrh	r3, [r3, #26]
 800bfe2:	f023 0304 	bic.w	r3, r3, #4
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c00e:	10db      	asrs	r3, r3, #3
 800c010:	b21b      	sxth	r3, r3
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	4413      	add	r3, r2
 800c01e:	b29b      	uxth	r3, r3
 800c020:	b21a      	sxth	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c028:	4b18      	ldr	r3, [pc, #96]	@ (800c08c <tcp_receive+0x270>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c032:	b29b      	uxth	r3, r3
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c040:	4b12      	ldr	r3, [pc, #72]	@ (800c08c <tcp_receive+0x270>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b03      	cmp	r3, #3
 800c04e:	f240 8097 	bls.w	800c180 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c05e:	429a      	cmp	r2, r3
 800c060:	d245      	bcs.n	800c0ee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	8b5b      	ldrh	r3, [r3, #26]
 800c066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d014      	beq.n	800c098 <tcp_receive+0x27c>
 800c06e:	2301      	movs	r3, #1
 800c070:	e013      	b.n	800c09a <tcp_receive+0x27e>
 800c072:	bf00      	nop
 800c074:	08016294 	.word	0x08016294
 800c078:	080165c4 	.word	0x080165c4
 800c07c:	080162e0 	.word	0x080162e0
 800c080:	080165e0 	.word	0x080165e0
 800c084:	20008620 	.word	0x20008620
 800c088:	20008614 	.word	0x20008614
 800c08c:	20008618 	.word	0x20008618
 800c090:	20008604 	.word	0x20008604
 800c094:	2000861e 	.word	0x2000861e
 800c098:	2302      	movs	r3, #2
 800c09a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c09e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c0a8:	fb12 f303 	smulbb	r3, r2, r3
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	bf28      	it	cs
 800c0b4:	4613      	movcs	r3, r2
 800c0b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c0be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0c0:	4413      	add	r3, r2
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d309      	bcc.n	800c0e2 <tcp_receive+0x2c6>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c0d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0d6:	4413      	add	r3, r2
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c0e0:	e04e      	b.n	800c180 <tcp_receive+0x364>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c0ec:	e048      	b.n	800c180 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c0f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c0f6:	4413      	add	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c100:	429a      	cmp	r2, r3
 800c102:	d309      	bcc.n	800c118 <tcp_receive+0x2fc>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c10a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c10c:	4413      	add	r3, r2
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c116:	e004      	b.n	800c122 <tcp_receive+0x306>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c11e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c12e:	429a      	cmp	r2, r3
 800c130:	d326      	bcc.n	800c180 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	b29a      	uxth	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c152:	4413      	add	r3, r2
 800c154:	b29a      	uxth	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d30a      	bcc.n	800c176 <tcp_receive+0x35a>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c16a:	4413      	add	r3, r2
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c174:	e004      	b.n	800c180 <tcp_receive+0x364>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c17c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c188:	4a98      	ldr	r2, [pc, #608]	@ (800c3ec <tcp_receive+0x5d0>)
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff fdca 	bl	800bd24 <tcp_free_acked_segments>
 800c190:	4602      	mov	r2, r0
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c19e:	4a94      	ldr	r2, [pc, #592]	@ (800c3f0 <tcp_receive+0x5d4>)
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fdbf 	bl	800bd24 <tcp_free_acked_segments>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d104      	bne.n	800c1be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1ba:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c1bc:	e002      	b.n	800c1c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d103      	bne.n	800c1da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c1e0:	4b84      	ldr	r3, [pc, #528]	@ (800c3f4 <tcp_receive+0x5d8>)
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8b5b      	ldrh	r3, [r3, #26]
 800c1f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d035      	beq.n	800c266 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d118      	bne.n	800c234 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00c      	beq.n	800c224 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	4618      	mov	r0, r3
 800c218:	f7fa feae 	bl	8006f78 <lwip_htonl>
 800c21c:	4603      	mov	r3, r0
 800c21e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c220:	2b00      	cmp	r3, #0
 800c222:	dc20      	bgt.n	800c266 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	8b5b      	ldrh	r3, [r3, #26]
 800c228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c232:	e018      	b.n	800c266 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	f7fa fe99 	bl	8006f78 <lwip_htonl>
 800c246:	4603      	mov	r3, r0
 800c248:	1ae3      	subs	r3, r4, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dc0b      	bgt.n	800c266 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8b5b      	ldrh	r3, [r3, #26]
 800c252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c25c:	e003      	b.n	800c266 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f002 fbc8 	bl	800e9f4 <tcp_send_empty_ack>
 800c264:	e000      	b.n	800c268 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c266:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d05b      	beq.n	800c328 <tcp_receive+0x50c>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c274:	4b60      	ldr	r3, [pc, #384]	@ (800c3f8 <tcp_receive+0x5dc>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	da54      	bge.n	800c328 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c27e:	4b5f      	ldr	r3, [pc, #380]	@ (800c3fc <tcp_receive+0x5e0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	b29a      	uxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c288:	b29b      	uxth	r3, r3
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c292:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c29c:	10db      	asrs	r3, r3, #3
 800c29e:	b21b      	sxth	r3, r3
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2b6:	4413      	add	r3, r2
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	b21a      	sxth	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c2c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da05      	bge.n	800c2d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c2c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2cc:	425b      	negs	r3, r3
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c2d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c2de:	109b      	asrs	r3, r3, #2
 800c2e0:	b21b      	sxth	r3, r3
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2f8:	4413      	add	r3, r2
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	b21a      	sxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c308:	10db      	asrs	r3, r3, #3
 800c30a:	b21b      	sxth	r3, r3
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c314:	b29b      	uxth	r3, r3
 800c316:	4413      	add	r3, r2
 800c318:	b29b      	uxth	r3, r3
 800c31a:	b21a      	sxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c328:	4b35      	ldr	r3, [pc, #212]	@ (800c400 <tcp_receive+0x5e4>)
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 84df 	beq.w	800ccf0 <tcp_receive+0xed4>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	7d1b      	ldrb	r3, [r3, #20]
 800c336:	2b06      	cmp	r3, #6
 800c338:	f200 84da 	bhi.w	800ccf0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c340:	4b30      	ldr	r3, [pc, #192]	@ (800c404 <tcp_receive+0x5e8>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	3b01      	subs	r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f2c0 808f 	blt.w	800c46c <tcp_receive+0x650>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c352:	4b2b      	ldr	r3, [pc, #172]	@ (800c400 <tcp_receive+0x5e4>)
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	4619      	mov	r1, r3
 800c358:	4b2a      	ldr	r3, [pc, #168]	@ (800c404 <tcp_receive+0x5e8>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	440b      	add	r3, r1
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	3301      	adds	r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	f300 8082 	bgt.w	800c46c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c368:	4b27      	ldr	r3, [pc, #156]	@ (800c408 <tcp_receive+0x5ec>)
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c372:	4b24      	ldr	r3, [pc, #144]	@ (800c404 <tcp_receive+0x5e8>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c37a:	4b23      	ldr	r3, [pc, #140]	@ (800c408 <tcp_receive+0x5ec>)
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d106      	bne.n	800c390 <tcp_receive+0x574>
 800c382:	4b22      	ldr	r3, [pc, #136]	@ (800c40c <tcp_receive+0x5f0>)
 800c384:	f240 5294 	movw	r2, #1428	@ 0x594
 800c388:	4921      	ldr	r1, [pc, #132]	@ (800c410 <tcp_receive+0x5f4>)
 800c38a:	4822      	ldr	r0, [pc, #136]	@ (800c414 <tcp_receive+0x5f8>)
 800c38c:	f007 fd1e 	bl	8013dcc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c396:	4293      	cmp	r3, r2
 800c398:	d906      	bls.n	800c3a8 <tcp_receive+0x58c>
 800c39a:	4b1c      	ldr	r3, [pc, #112]	@ (800c40c <tcp_receive+0x5f0>)
 800c39c:	f240 5295 	movw	r2, #1429	@ 0x595
 800c3a0:	491d      	ldr	r1, [pc, #116]	@ (800c418 <tcp_receive+0x5fc>)
 800c3a2:	481c      	ldr	r0, [pc, #112]	@ (800c414 <tcp_receive+0x5f8>)
 800c3a4:	f007 fd12 	bl	8013dcc <iprintf>
      off = (u16_t)off32;
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c3ae:	4b16      	ldr	r3, [pc, #88]	@ (800c408 <tcp_receive+0x5ec>)
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	891b      	ldrh	r3, [r3, #8]
 800c3b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d906      	bls.n	800c3ca <tcp_receive+0x5ae>
 800c3bc:	4b13      	ldr	r3, [pc, #76]	@ (800c40c <tcp_receive+0x5f0>)
 800c3be:	f240 5297 	movw	r2, #1431	@ 0x597
 800c3c2:	4916      	ldr	r1, [pc, #88]	@ (800c41c <tcp_receive+0x600>)
 800c3c4:	4813      	ldr	r0, [pc, #76]	@ (800c414 <tcp_receive+0x5f8>)
 800c3c6:	f007 fd01 	bl	8013dcc <iprintf>
      inseg.len -= off;
 800c3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c408 <tcp_receive+0x5ec>)
 800c3cc:	891a      	ldrh	r2, [r3, #8]
 800c3ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <tcp_receive+0x5ec>)
 800c3d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c3da:	4b0b      	ldr	r3, [pc, #44]	@ (800c408 <tcp_receive+0x5ec>)
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	891a      	ldrh	r2, [r3, #8]
 800c3e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c3e8:	e02a      	b.n	800c440 <tcp_receive+0x624>
 800c3ea:	bf00      	nop
 800c3ec:	080165fc 	.word	0x080165fc
 800c3f0:	08016604 	.word	0x08016604
 800c3f4:	2000861c 	.word	0x2000861c
 800c3f8:	20008618 	.word	0x20008618
 800c3fc:	200085dc 	.word	0x200085dc
 800c400:	2000861e 	.word	0x2000861e
 800c404:	20008614 	.word	0x20008614
 800c408:	200085f4 	.word	0x200085f4
 800c40c:	08016294 	.word	0x08016294
 800c410:	0801660c 	.word	0x0801660c
 800c414:	080162e0 	.word	0x080162e0
 800c418:	0801661c 	.word	0x0801661c
 800c41c:	0801662c 	.word	0x0801662c
        off -= p->len;
 800c420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c422:	895b      	ldrh	r3, [r3, #10]
 800c424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c42e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c430:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c432:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c436:	2200      	movs	r2, #0
 800c438:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c442:	895b      	ldrh	r3, [r3, #10]
 800c444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c448:	429a      	cmp	r2, r3
 800c44a:	d8e9      	bhi.n	800c420 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c44c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c450:	4619      	mov	r1, r3
 800c452:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c454:	f7fc f8c4 	bl	80085e0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45c:	4a90      	ldr	r2, [pc, #576]	@ (800c6a0 <tcp_receive+0x884>)
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b90      	ldr	r3, [pc, #576]	@ (800c6a4 <tcp_receive+0x888>)
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	4a8e      	ldr	r2, [pc, #568]	@ (800c6a0 <tcp_receive+0x884>)
 800c466:	6812      	ldr	r2, [r2, #0]
 800c468:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c46a:	e00d      	b.n	800c488 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c46c:	4b8c      	ldr	r3, [pc, #560]	@ (800c6a0 <tcp_receive+0x884>)
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	da06      	bge.n	800c488 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	8b5b      	ldrh	r3, [r3, #26]
 800c47e:	f043 0302 	orr.w	r3, r3, #2
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c488:	4b85      	ldr	r3, [pc, #532]	@ (800c6a0 <tcp_receive+0x884>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	f2c0 8427 	blt.w	800cce6 <tcp_receive+0xeca>
 800c498:	4b81      	ldr	r3, [pc, #516]	@ (800c6a0 <tcp_receive+0x884>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c4a4:	440b      	add	r3, r1
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f300 841b 	bgt.w	800cce6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4b4:	4b7a      	ldr	r3, [pc, #488]	@ (800c6a0 <tcp_receive+0x884>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	f040 8298 	bne.w	800c9ee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c4be:	4b79      	ldr	r3, [pc, #484]	@ (800c6a4 <tcp_receive+0x888>)
 800c4c0:	891c      	ldrh	r4, [r3, #8]
 800c4c2:	4b78      	ldr	r3, [pc, #480]	@ (800c6a4 <tcp_receive+0x888>)
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	899b      	ldrh	r3, [r3, #12]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fa fd3e 	bl	8006f4c <lwip_htons>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	f003 0303 	and.w	r3, r3, #3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <tcp_receive+0x6c4>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e000      	b.n	800c4e2 <tcp_receive+0x6c6>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4423      	add	r3, r4
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	4b70      	ldr	r3, [pc, #448]	@ (800c6a8 <tcp_receive+0x88c>)
 800c4e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c4ee:	4b6e      	ldr	r3, [pc, #440]	@ (800c6a8 <tcp_receive+0x88c>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d274      	bcs.n	800c5e0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4f6:	4b6b      	ldr	r3, [pc, #428]	@ (800c6a4 <tcp_receive+0x888>)
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	899b      	ldrh	r3, [r3, #12]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fa fd24 	bl	8006f4c <lwip_htons>
 800c504:	4603      	mov	r3, r0
 800c506:	b2db      	uxtb	r3, r3
 800c508:	f003 0301 	and.w	r3, r3, #1
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d01e      	beq.n	800c54e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c510:	4b64      	ldr	r3, [pc, #400]	@ (800c6a4 <tcp_receive+0x888>)
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	899b      	ldrh	r3, [r3, #12]
 800c516:	b29b      	uxth	r3, r3
 800c518:	b21b      	sxth	r3, r3
 800c51a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c51e:	b21c      	sxth	r4, r3
 800c520:	4b60      	ldr	r3, [pc, #384]	@ (800c6a4 <tcp_receive+0x888>)
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	899b      	ldrh	r3, [r3, #12]
 800c526:	b29b      	uxth	r3, r3
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fa fd0f 	bl	8006f4c <lwip_htons>
 800c52e:	4603      	mov	r3, r0
 800c530:	b2db      	uxtb	r3, r3
 800c532:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c536:	b29b      	uxth	r3, r3
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fa fd07 	bl	8006f4c <lwip_htons>
 800c53e:	4603      	mov	r3, r0
 800c540:	b21b      	sxth	r3, r3
 800c542:	4323      	orrs	r3, r4
 800c544:	b21a      	sxth	r2, r3
 800c546:	4b57      	ldr	r3, [pc, #348]	@ (800c6a4 <tcp_receive+0x888>)
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	b292      	uxth	r2, r2
 800c54c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c552:	4b54      	ldr	r3, [pc, #336]	@ (800c6a4 <tcp_receive+0x888>)
 800c554:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c556:	4b53      	ldr	r3, [pc, #332]	@ (800c6a4 <tcp_receive+0x888>)
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	899b      	ldrh	r3, [r3, #12]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fa fcf4 	bl	8006f4c <lwip_htons>
 800c564:	4603      	mov	r3, r0
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f003 0302 	and.w	r3, r3, #2
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <tcp_receive+0x760>
            inseg.len -= 1;
 800c570:	4b4c      	ldr	r3, [pc, #304]	@ (800c6a4 <tcp_receive+0x888>)
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	3b01      	subs	r3, #1
 800c576:	b29a      	uxth	r2, r3
 800c578:	4b4a      	ldr	r3, [pc, #296]	@ (800c6a4 <tcp_receive+0x888>)
 800c57a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c57c:	4b49      	ldr	r3, [pc, #292]	@ (800c6a4 <tcp_receive+0x888>)
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	4a48      	ldr	r2, [pc, #288]	@ (800c6a4 <tcp_receive+0x888>)
 800c582:	8912      	ldrh	r2, [r2, #8]
 800c584:	4611      	mov	r1, r2
 800c586:	4618      	mov	r0, r3
 800c588:	f7fb ff2a 	bl	80083e0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c58c:	4b45      	ldr	r3, [pc, #276]	@ (800c6a4 <tcp_receive+0x888>)
 800c58e:	891c      	ldrh	r4, [r3, #8]
 800c590:	4b44      	ldr	r3, [pc, #272]	@ (800c6a4 <tcp_receive+0x888>)
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	899b      	ldrh	r3, [r3, #12]
 800c596:	b29b      	uxth	r3, r3
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fa fcd7 	bl	8006f4c <lwip_htons>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	f003 0303 	and.w	r3, r3, #3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <tcp_receive+0x792>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <tcp_receive+0x794>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	4423      	add	r3, r4
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	4b3c      	ldr	r3, [pc, #240]	@ (800c6a8 <tcp_receive+0x88c>)
 800c5b6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800c6a8 <tcp_receive+0x88c>)
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4b38      	ldr	r3, [pc, #224]	@ (800c6a0 <tcp_receive+0x884>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	441a      	add	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c5cc:	440b      	add	r3, r1
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d006      	beq.n	800c5e0 <tcp_receive+0x7c4>
 800c5d2:	4b36      	ldr	r3, [pc, #216]	@ (800c6ac <tcp_receive+0x890>)
 800c5d4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c5d8:	4935      	ldr	r1, [pc, #212]	@ (800c6b0 <tcp_receive+0x894>)
 800c5da:	4836      	ldr	r0, [pc, #216]	@ (800c6b4 <tcp_receive+0x898>)
 800c5dc:	f007 fbf6 	bl	8013dcc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 80e6 	beq.w	800c7b6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5ea:	4b2e      	ldr	r3, [pc, #184]	@ (800c6a4 <tcp_receive+0x888>)
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	899b      	ldrh	r3, [r3, #12]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fa fcaa 	bl	8006f4c <lwip_htons>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d010      	beq.n	800c626 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c604:	e00a      	b.n	800c61c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c60a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7fd fca7 	bl	8009f6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f0      	bne.n	800c606 <tcp_receive+0x7ea>
 800c624:	e0c7      	b.n	800c7b6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c62c:	e051      	b.n	800c6d2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	899b      	ldrh	r3, [r3, #12]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4618      	mov	r0, r3
 800c638:	f7fa fc88 	bl	8006f4c <lwip_htons>
 800c63c:	4603      	mov	r3, r0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d03c      	beq.n	800c6c2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c648:	4b16      	ldr	r3, [pc, #88]	@ (800c6a4 <tcp_receive+0x888>)
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	899b      	ldrh	r3, [r3, #12]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4618      	mov	r0, r3
 800c652:	f7fa fc7b 	bl	8006f4c <lwip_htons>
 800c656:	4603      	mov	r3, r0
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12f      	bne.n	800c6c2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c662:	4b10      	ldr	r3, [pc, #64]	@ (800c6a4 <tcp_receive+0x888>)
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	899b      	ldrh	r3, [r3, #12]
 800c668:	b29c      	uxth	r4, r3
 800c66a:	2001      	movs	r0, #1
 800c66c:	f7fa fc6e 	bl	8006f4c <lwip_htons>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a4 <tcp_receive+0x888>)
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	4322      	orrs	r2, r4
 800c67a:	b292      	uxth	r2, r2
 800c67c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c67e:	4b09      	ldr	r3, [pc, #36]	@ (800c6a4 <tcp_receive+0x888>)
 800c680:	891c      	ldrh	r4, [r3, #8]
 800c682:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <tcp_receive+0x888>)
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	899b      	ldrh	r3, [r3, #12]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fa fc5e 	bl	8006f4c <lwip_htons>
 800c690:	4603      	mov	r3, r0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	f003 0303 	and.w	r3, r3, #3
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00d      	beq.n	800c6b8 <tcp_receive+0x89c>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e00c      	b.n	800c6ba <tcp_receive+0x89e>
 800c6a0:	20008614 	.word	0x20008614
 800c6a4:	200085f4 	.word	0x200085f4
 800c6a8:	2000861e 	.word	0x2000861e
 800c6ac:	08016294 	.word	0x08016294
 800c6b0:	0801663c 	.word	0x0801663c
 800c6b4:	080162e0 	.word	0x080162e0
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4423      	add	r3, r4
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	4b98      	ldr	r3, [pc, #608]	@ (800c920 <tcp_receive+0xb04>)
 800c6c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c6cc:	6938      	ldr	r0, [r7, #16]
 800c6ce:	f7fd fc4c 	bl	8009f6a <tcp_seg_free>
            while (next &&
 800c6d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00e      	beq.n	800c6f6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c6d8:	4b91      	ldr	r3, [pc, #580]	@ (800c920 <tcp_receive+0xb04>)
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4b91      	ldr	r3, [pc, #580]	@ (800c924 <tcp_receive+0xb08>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	441a      	add	r2, r3
 800c6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6ec:	8909      	ldrh	r1, [r1, #8]
 800c6ee:	440b      	add	r3, r1
 800c6f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da9b      	bge.n	800c62e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d059      	beq.n	800c7b0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c6fc:	4b88      	ldr	r3, [pc, #544]	@ (800c920 <tcp_receive+0xb04>)
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	461a      	mov	r2, r3
 800c702:	4b88      	ldr	r3, [pc, #544]	@ (800c924 <tcp_receive+0xb08>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	441a      	add	r2, r3
 800c708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c710:	2b00      	cmp	r3, #0
 800c712:	dd4d      	ble.n	800c7b0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	4b81      	ldr	r3, [pc, #516]	@ (800c924 <tcp_receive+0xb08>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	b29b      	uxth	r3, r3
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	b29a      	uxth	r2, r3
 800c726:	4b80      	ldr	r3, [pc, #512]	@ (800c928 <tcp_receive+0xb0c>)
 800c728:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c72a:	4b7f      	ldr	r3, [pc, #508]	@ (800c928 <tcp_receive+0xb0c>)
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	899b      	ldrh	r3, [r3, #12]
 800c730:	b29b      	uxth	r3, r3
 800c732:	4618      	mov	r0, r3
 800c734:	f7fa fc0a 	bl	8006f4c <lwip_htons>
 800c738:	4603      	mov	r3, r0
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d005      	beq.n	800c750 <tcp_receive+0x934>
                inseg.len -= 1;
 800c744:	4b78      	ldr	r3, [pc, #480]	@ (800c928 <tcp_receive+0xb0c>)
 800c746:	891b      	ldrh	r3, [r3, #8]
 800c748:	3b01      	subs	r3, #1
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	4b76      	ldr	r3, [pc, #472]	@ (800c928 <tcp_receive+0xb0c>)
 800c74e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c750:	4b75      	ldr	r3, [pc, #468]	@ (800c928 <tcp_receive+0xb0c>)
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	4a74      	ldr	r2, [pc, #464]	@ (800c928 <tcp_receive+0xb0c>)
 800c756:	8912      	ldrh	r2, [r2, #8]
 800c758:	4611      	mov	r1, r2
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fb fe40 	bl	80083e0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c760:	4b71      	ldr	r3, [pc, #452]	@ (800c928 <tcp_receive+0xb0c>)
 800c762:	891c      	ldrh	r4, [r3, #8]
 800c764:	4b70      	ldr	r3, [pc, #448]	@ (800c928 <tcp_receive+0xb0c>)
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	899b      	ldrh	r3, [r3, #12]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fa fbed 	bl	8006f4c <lwip_htons>
 800c772:	4603      	mov	r3, r0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <tcp_receive+0x966>
 800c77e:	2301      	movs	r3, #1
 800c780:	e000      	b.n	800c784 <tcp_receive+0x968>
 800c782:	2300      	movs	r3, #0
 800c784:	4423      	add	r3, r4
 800c786:	b29a      	uxth	r2, r3
 800c788:	4b65      	ldr	r3, [pc, #404]	@ (800c920 <tcp_receive+0xb04>)
 800c78a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c78c:	4b64      	ldr	r3, [pc, #400]	@ (800c920 <tcp_receive+0xb04>)
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	461a      	mov	r2, r3
 800c792:	4b64      	ldr	r3, [pc, #400]	@ (800c924 <tcp_receive+0xb08>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	441a      	add	r2, r3
 800c798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d006      	beq.n	800c7b0 <tcp_receive+0x994>
 800c7a2:	4b62      	ldr	r3, [pc, #392]	@ (800c92c <tcp_receive+0xb10>)
 800c7a4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c7a8:	4961      	ldr	r1, [pc, #388]	@ (800c930 <tcp_receive+0xb14>)
 800c7aa:	4862      	ldr	r0, [pc, #392]	@ (800c934 <tcp_receive+0xb18>)
 800c7ac:	f007 fb0e 	bl	8013dcc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c7b4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c7b6:	4b5a      	ldr	r3, [pc, #360]	@ (800c920 <tcp_receive+0xb04>)
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	4b59      	ldr	r3, [pc, #356]	@ (800c924 <tcp_receive+0xb08>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	441a      	add	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7ca:	4b55      	ldr	r3, [pc, #340]	@ (800c920 <tcp_receive+0xb04>)
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d206      	bcs.n	800c7e0 <tcp_receive+0x9c4>
 800c7d2:	4b56      	ldr	r3, [pc, #344]	@ (800c92c <tcp_receive+0xb10>)
 800c7d4:	f240 6207 	movw	r2, #1543	@ 0x607
 800c7d8:	4957      	ldr	r1, [pc, #348]	@ (800c938 <tcp_receive+0xb1c>)
 800c7da:	4856      	ldr	r0, [pc, #344]	@ (800c934 <tcp_receive+0xb18>)
 800c7dc:	f007 faf6 	bl	8013dcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7e4:	4b4e      	ldr	r3, [pc, #312]	@ (800c920 <tcp_receive+0xb04>)
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7fc fe93 	bl	800951c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c7f6:	4b4c      	ldr	r3, [pc, #304]	@ (800c928 <tcp_receive+0xb0c>)
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	891b      	ldrh	r3, [r3, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d006      	beq.n	800c80e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c800:	4b49      	ldr	r3, [pc, #292]	@ (800c928 <tcp_receive+0xb0c>)
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	4a4d      	ldr	r2, [pc, #308]	@ (800c93c <tcp_receive+0xb20>)
 800c806:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c808:	4b47      	ldr	r3, [pc, #284]	@ (800c928 <tcp_receive+0xb0c>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c80e:	4b46      	ldr	r3, [pc, #280]	@ (800c928 <tcp_receive+0xb0c>)
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	899b      	ldrh	r3, [r3, #12]
 800c814:	b29b      	uxth	r3, r3
 800c816:	4618      	mov	r0, r3
 800c818:	f7fa fb98 	bl	8006f4c <lwip_htons>
 800c81c:	4603      	mov	r3, r0
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 80b8 	beq.w	800c99a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c82a:	4b45      	ldr	r3, [pc, #276]	@ (800c940 <tcp_receive+0xb24>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	f043 0320 	orr.w	r3, r3, #32
 800c832:	b2da      	uxtb	r2, r3
 800c834:	4b42      	ldr	r3, [pc, #264]	@ (800c940 <tcp_receive+0xb24>)
 800c836:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c838:	e0af      	b.n	800c99a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c83e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	4a36      	ldr	r2, [pc, #216]	@ (800c924 <tcp_receive+0xb08>)
 800c84a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	891b      	ldrh	r3, [r3, #8]
 800c850:	461c      	mov	r4, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	899b      	ldrh	r3, [r3, #12]
 800c858:	b29b      	uxth	r3, r3
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fa fb76 	bl	8006f4c <lwip_htons>
 800c860:	4603      	mov	r3, r0
 800c862:	b2db      	uxtb	r3, r3
 800c864:	f003 0303 	and.w	r3, r3, #3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <tcp_receive+0xa54>
 800c86c:	2301      	movs	r3, #1
 800c86e:	e000      	b.n	800c872 <tcp_receive+0xa56>
 800c870:	2300      	movs	r3, #0
 800c872:	191a      	adds	r2, r3, r4
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c878:	441a      	add	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c882:	461c      	mov	r4, r3
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	891b      	ldrh	r3, [r3, #8]
 800c888:	461d      	mov	r5, r3
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	899b      	ldrh	r3, [r3, #12]
 800c890:	b29b      	uxth	r3, r3
 800c892:	4618      	mov	r0, r3
 800c894:	f7fa fb5a 	bl	8006f4c <lwip_htons>
 800c898:	4603      	mov	r3, r0
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	f003 0303 	and.w	r3, r3, #3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <tcp_receive+0xa8c>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e000      	b.n	800c8aa <tcp_receive+0xa8e>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	442b      	add	r3, r5
 800c8ac:	429c      	cmp	r4, r3
 800c8ae:	d206      	bcs.n	800c8be <tcp_receive+0xaa2>
 800c8b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c92c <tcp_receive+0xb10>)
 800c8b2:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c8b6:	4923      	ldr	r1, [pc, #140]	@ (800c944 <tcp_receive+0xb28>)
 800c8b8:	481e      	ldr	r0, [pc, #120]	@ (800c934 <tcp_receive+0xb18>)
 800c8ba:	f007 fa87 	bl	8013dcc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	891b      	ldrh	r3, [r3, #8]
 800c8c2:	461c      	mov	r4, r3
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	899b      	ldrh	r3, [r3, #12]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fa fb3d 	bl	8006f4c <lwip_htons>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <tcp_receive+0xac6>
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e000      	b.n	800c8e4 <tcp_receive+0xac8>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	1919      	adds	r1, r3, r4
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c8ea:	b28b      	uxth	r3, r1
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7fc fe11 	bl	800951c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	891b      	ldrh	r3, [r3, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d028      	beq.n	800c956 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c904:	4b0d      	ldr	r3, [pc, #52]	@ (800c93c <tcp_receive+0xb20>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01d      	beq.n	800c948 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c90c:	4b0b      	ldr	r3, [pc, #44]	@ (800c93c <tcp_receive+0xb20>)
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f7fb ffaa 	bl	8008870 <pbuf_cat>
 800c91c:	e018      	b.n	800c950 <tcp_receive+0xb34>
 800c91e:	bf00      	nop
 800c920:	2000861e 	.word	0x2000861e
 800c924:	20008614 	.word	0x20008614
 800c928:	200085f4 	.word	0x200085f4
 800c92c:	08016294 	.word	0x08016294
 800c930:	08016674 	.word	0x08016674
 800c934:	080162e0 	.word	0x080162e0
 800c938:	080166b0 	.word	0x080166b0
 800c93c:	20008624 	.word	0x20008624
 800c940:	20008621 	.word	0x20008621
 800c944:	080166d0 	.word	0x080166d0
            } else {
              recv_data = cseg->p;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4a70      	ldr	r2, [pc, #448]	@ (800cb10 <tcp_receive+0xcf4>)
 800c94e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2200      	movs	r2, #0
 800c954:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	899b      	ldrh	r3, [r3, #12]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fa faf4 	bl	8006f4c <lwip_htons>
 800c964:	4603      	mov	r3, r0
 800c966:	b2db      	uxtb	r3, r3
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00d      	beq.n	800c98c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c970:	4b68      	ldr	r3, [pc, #416]	@ (800cb14 <tcp_receive+0xcf8>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f043 0320 	orr.w	r3, r3, #32
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	4b66      	ldr	r3, [pc, #408]	@ (800cb14 <tcp_receive+0xcf8>)
 800c97c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	7d1b      	ldrb	r3, [r3, #20]
 800c982:	2b04      	cmp	r3, #4
 800c984:	d102      	bne.n	800c98c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2207      	movs	r2, #7
 800c98a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c994:	68b8      	ldr	r0, [r7, #8]
 800c996:	f7fd fae8 	bl	8009f6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d008      	beq.n	800c9b4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	685a      	ldr	r2, [r3, #4]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	f43f af43 	beq.w	800c83a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	8b5b      	ldrh	r3, [r3, #26]
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00e      	beq.n	800c9de <tcp_receive+0xbc2>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	8b5b      	ldrh	r3, [r3, #26]
 800c9c4:	f023 0301 	bic.w	r3, r3, #1
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	835a      	strh	r2, [r3, #26]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	8b5b      	ldrh	r3, [r3, #26]
 800c9d2:	f043 0302 	orr.w	r3, r3, #2
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9dc:	e187      	b.n	800ccee <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	8b5b      	ldrh	r3, [r3, #26]
 800c9e2:	f043 0301 	orr.w	r3, r3, #1
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9ec:	e17f      	b.n	800ccee <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d106      	bne.n	800ca04 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c9f6:	4848      	ldr	r0, [pc, #288]	@ (800cb18 <tcp_receive+0xcfc>)
 800c9f8:	f7fd faee 	bl	8009fd8 <tcp_seg_copy>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	675a      	str	r2, [r3, #116]	@ 0x74
 800ca02:	e16c      	b.n	800ccde <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca0e:	e156      	b.n	800ccbe <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ca10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	4b41      	ldr	r3, [pc, #260]	@ (800cb1c <tcp_receive+0xd00>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d11d      	bne.n	800ca5a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ca1e:	4b3e      	ldr	r3, [pc, #248]	@ (800cb18 <tcp_receive+0xcfc>)
 800ca20:	891a      	ldrh	r2, [r3, #8]
 800ca22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca24:	891b      	ldrh	r3, [r3, #8]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	f240 814e 	bls.w	800ccc8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca2c:	483a      	ldr	r0, [pc, #232]	@ (800cb18 <tcp_receive+0xcfc>)
 800ca2e:	f7fd fad3 	bl	8009fd8 <tcp_seg_copy>
 800ca32:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 8148 	beq.w	800cccc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ca3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d003      	beq.n	800ca4a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ca42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	e002      	b.n	800ca50 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ca50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca52:	6978      	ldr	r0, [r7, #20]
 800ca54:	f7ff f8de 	bl	800bc14 <tcp_oos_insert_segment>
                }
                break;
 800ca58:	e138      	b.n	800cccc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d117      	bne.n	800ca90 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ca60:	4b2e      	ldr	r3, [pc, #184]	@ (800cb1c <tcp_receive+0xd00>)
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	da57      	bge.n	800cb20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca70:	4829      	ldr	r0, [pc, #164]	@ (800cb18 <tcp_receive+0xcfc>)
 800ca72:	f7fd fab1 	bl	8009fd8 <tcp_seg_copy>
 800ca76:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 8128 	beq.w	800ccd0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ca86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca88:	69b8      	ldr	r0, [r7, #24]
 800ca8a:	f7ff f8c3 	bl	800bc14 <tcp_oos_insert_segment>
                  }
                  break;
 800ca8e:	e11f      	b.n	800ccd0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ca90:	4b22      	ldr	r3, [pc, #136]	@ (800cb1c <tcp_receive+0xd00>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	db3e      	blt.n	800cb20 <tcp_receive+0xd04>
 800caa2:	4b1e      	ldr	r3, [pc, #120]	@ (800cb1c <tcp_receive+0xd00>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	3301      	adds	r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	dc35      	bgt.n	800cb20 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cab4:	4818      	ldr	r0, [pc, #96]	@ (800cb18 <tcp_receive+0xcfc>)
 800cab6:	f7fd fa8f 	bl	8009fd8 <tcp_seg_copy>
 800caba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 8108 	beq.w	800ccd4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cacc:	8912      	ldrh	r2, [r2, #8]
 800cace:	441a      	add	r2, r3
 800cad0:	4b12      	ldr	r3, [pc, #72]	@ (800cb1c <tcp_receive+0xd00>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	dd12      	ble.n	800cb00 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cada:	4b10      	ldr	r3, [pc, #64]	@ (800cb1c <tcp_receive+0xd00>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	b29a      	uxth	r2, r3
 800cae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	b29a      	uxth	r2, r3
 800caec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800caf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	891b      	ldrh	r3, [r3, #8]
 800caf8:	4619      	mov	r1, r3
 800cafa:	4610      	mov	r0, r2
 800cafc:	f7fb fc70 	bl	80083e0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cb00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb02:	69fa      	ldr	r2, [r7, #28]
 800cb04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cb06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb08:	69f8      	ldr	r0, [r7, #28]
 800cb0a:	f7ff f883 	bl	800bc14 <tcp_oos_insert_segment>
                  }
                  break;
 800cb0e:	e0e1      	b.n	800ccd4 <tcp_receive+0xeb8>
 800cb10:	20008624 	.word	0x20008624
 800cb14:	20008621 	.word	0x20008621
 800cb18:	200085f4 	.word	0x200085f4
 800cb1c:	20008614 	.word	0x20008614
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb22:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f040 80c5 	bne.w	800ccb8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cb2e:	4b7f      	ldr	r3, [pc, #508]	@ (800cd2c <tcp_receive+0xf10>)
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f340 80bc 	ble.w	800ccb8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	899b      	ldrh	r3, [r3, #12]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fa f9ff 	bl	8006f4c <lwip_htons>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 80be 	bne.w	800ccd8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cb5c:	4874      	ldr	r0, [pc, #464]	@ (800cd30 <tcp_receive+0xf14>)
 800cb5e:	f7fd fa3b 	bl	8009fd8 <tcp_seg_copy>
 800cb62:	4602      	mov	r2, r0
 800cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 80b5 	beq.w	800ccdc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb7a:	8912      	ldrh	r2, [r2, #8]
 800cb7c:	441a      	add	r2, r3
 800cb7e:	4b6b      	ldr	r3, [pc, #428]	@ (800cd2c <tcp_receive+0xf10>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	dd12      	ble.n	800cbae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cb88:	4b68      	ldr	r3, [pc, #416]	@ (800cd2c <tcp_receive+0xf10>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba4:	891b      	ldrh	r3, [r3, #8]
 800cba6:	4619      	mov	r1, r3
 800cba8:	4610      	mov	r0, r2
 800cbaa:	f7fb fc19 	bl	80083e0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cbae:	4b61      	ldr	r3, [pc, #388]	@ (800cd34 <tcp_receive+0xf18>)
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4b5d      	ldr	r3, [pc, #372]	@ (800cd2c <tcp_receive+0xf10>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	441a      	add	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cbc2:	440b      	add	r3, r1
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f340 8088 	ble.w	800ccdc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	899b      	ldrh	r3, [r3, #12]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fa f9b8 	bl	8006f4c <lwip_htons>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d021      	beq.n	800cc2c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	b21b      	sxth	r3, r3
 800cbf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cbf8:	b21c      	sxth	r4, r3
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	899b      	ldrh	r3, [r3, #12]
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fa f9a1 	bl	8006f4c <lwip_htons>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fa f999 	bl	8006f4c <lwip_htons>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	b21b      	sxth	r3, r3
 800cc1e:	4323      	orrs	r3, r4
 800cc20:	b21a      	sxth	r2, r3
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	b292      	uxth	r2, r2
 800cc2a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc36:	4413      	add	r3, r2
 800cc38:	b299      	uxth	r1, r3
 800cc3a:	4b3c      	ldr	r3, [pc, #240]	@ (800cd2c <tcp_receive+0xf10>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	1a8a      	subs	r2, r1, r2
 800cc46:	b292      	uxth	r2, r2
 800cc48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	891b      	ldrh	r3, [r3, #8]
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7fb fbc1 	bl	80083e0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	891c      	ldrh	r4, [r3, #8]
 800cc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	899b      	ldrh	r3, [r3, #12]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fa f96c 	bl	8006f4c <lwip_htons>
 800cc74:	4603      	mov	r3, r0
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 0303 	and.w	r3, r3, #3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <tcp_receive+0xe68>
 800cc80:	2301      	movs	r3, #1
 800cc82:	e000      	b.n	800cc86 <tcp_receive+0xe6a>
 800cc84:	2300      	movs	r3, #0
 800cc86:	4423      	add	r3, r4
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	4b2a      	ldr	r3, [pc, #168]	@ (800cd34 <tcp_receive+0xf18>)
 800cc8c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc8e:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <tcp_receive+0xf18>)
 800cc90:	881b      	ldrh	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	4b25      	ldr	r3, [pc, #148]	@ (800cd2c <tcp_receive+0xf10>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	441a      	add	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9e:	6879      	ldr	r1, [r7, #4]
 800cca0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cca2:	440b      	add	r3, r1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d019      	beq.n	800ccdc <tcp_receive+0xec0>
 800cca8:	4b23      	ldr	r3, [pc, #140]	@ (800cd38 <tcp_receive+0xf1c>)
 800ccaa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ccae:	4923      	ldr	r1, [pc, #140]	@ (800cd3c <tcp_receive+0xf20>)
 800ccb0:	4823      	ldr	r0, [pc, #140]	@ (800cd40 <tcp_receive+0xf24>)
 800ccb2:	f007 f88b 	bl	8013dcc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ccb6:	e011      	b.n	800ccdc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f47f aea5 	bne.w	800ca10 <tcp_receive+0xbf4>
 800ccc6:	e00a      	b.n	800ccde <tcp_receive+0xec2>
                break;
 800ccc8:	bf00      	nop
 800ccca:	e008      	b.n	800ccde <tcp_receive+0xec2>
                break;
 800cccc:	bf00      	nop
 800ccce:	e006      	b.n	800ccde <tcp_receive+0xec2>
                  break;
 800ccd0:	bf00      	nop
 800ccd2:	e004      	b.n	800ccde <tcp_receive+0xec2>
                  break;
 800ccd4:	bf00      	nop
 800ccd6:	e002      	b.n	800ccde <tcp_receive+0xec2>
                  break;
 800ccd8:	bf00      	nop
 800ccda:	e000      	b.n	800ccde <tcp_receive+0xec2>
                break;
 800ccdc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 fe88 	bl	800e9f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cce4:	e003      	b.n	800ccee <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f001 fe84 	bl	800e9f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ccec:	e01a      	b.n	800cd24 <tcp_receive+0xf08>
 800ccee:	e019      	b.n	800cd24 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ccf0:	4b0e      	ldr	r3, [pc, #56]	@ (800cd2c <tcp_receive+0xf10>)
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	db0a      	blt.n	800cd14 <tcp_receive+0xef8>
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	@ (800cd2c <tcp_receive+0xf10>)
 800cd00:	681a      	ldr	r2, [r3, #0]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd0a:	440b      	add	r3, r1
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	3301      	adds	r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	dd07      	ble.n	800cd24 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8b5b      	ldrh	r3, [r3, #26]
 800cd18:	f043 0302 	orr.w	r3, r3, #2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cd22:	e7ff      	b.n	800cd24 <tcp_receive+0xf08>
 800cd24:	bf00      	nop
 800cd26:	3750      	adds	r7, #80	@ 0x50
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2c:	20008614 	.word	0x20008614
 800cd30:	200085f4 	.word	0x200085f4
 800cd34:	2000861e 	.word	0x2000861e
 800cd38:	08016294 	.word	0x08016294
 800cd3c:	0801663c 	.word	0x0801663c
 800cd40:	080162e0 	.word	0x080162e0

0800cd44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cd4a:	4b15      	ldr	r3, [pc, #84]	@ (800cda0 <tcp_get_next_optbyte+0x5c>)
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	1c5a      	adds	r2, r3, #1
 800cd50:	b291      	uxth	r1, r2
 800cd52:	4a13      	ldr	r2, [pc, #76]	@ (800cda0 <tcp_get_next_optbyte+0x5c>)
 800cd54:	8011      	strh	r1, [r2, #0]
 800cd56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd58:	4b12      	ldr	r3, [pc, #72]	@ (800cda4 <tcp_get_next_optbyte+0x60>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <tcp_get_next_optbyte+0x26>
 800cd60:	4b11      	ldr	r3, [pc, #68]	@ (800cda8 <tcp_get_next_optbyte+0x64>)
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	88fa      	ldrh	r2, [r7, #6]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d208      	bcs.n	800cd7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cd6a:	4b10      	ldr	r3, [pc, #64]	@ (800cdac <tcp_get_next_optbyte+0x68>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3314      	adds	r3, #20
 800cd70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cd72:	88fb      	ldrh	r3, [r7, #6]
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	4413      	add	r3, r2
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	e00b      	b.n	800cd94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	4b09      	ldr	r3, [pc, #36]	@ (800cda8 <tcp_get_next_optbyte+0x64>)
 800cd82:	881b      	ldrh	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cd8a:	4b06      	ldr	r3, [pc, #24]	@ (800cda4 <tcp_get_next_optbyte+0x60>)
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	797b      	ldrb	r3, [r7, #5]
 800cd90:	4413      	add	r3, r2
 800cd92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	20008610 	.word	0x20008610
 800cda4:	2000860c 	.word	0x2000860c
 800cda8:	2000860a 	.word	0x2000860a
 800cdac:	20008604 	.word	0x20008604

0800cdb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <tcp_parseopt+0x1c>
 800cdbe:	4b32      	ldr	r3, [pc, #200]	@ (800ce88 <tcp_parseopt+0xd8>)
 800cdc0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cdc4:	4931      	ldr	r1, [pc, #196]	@ (800ce8c <tcp_parseopt+0xdc>)
 800cdc6:	4832      	ldr	r0, [pc, #200]	@ (800ce90 <tcp_parseopt+0xe0>)
 800cdc8:	f007 f800 	bl	8013dcc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cdcc:	4b31      	ldr	r3, [pc, #196]	@ (800ce94 <tcp_parseopt+0xe4>)
 800cdce:	881b      	ldrh	r3, [r3, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d056      	beq.n	800ce82 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cdd4:	4b30      	ldr	r3, [pc, #192]	@ (800ce98 <tcp_parseopt+0xe8>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	801a      	strh	r2, [r3, #0]
 800cdda:	e046      	b.n	800ce6a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cddc:	f7ff ffb2 	bl	800cd44 <tcp_get_next_optbyte>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d006      	beq.n	800cdf8 <tcp_parseopt+0x48>
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	dc2a      	bgt.n	800ce44 <tcp_parseopt+0x94>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d042      	beq.n	800ce78 <tcp_parseopt+0xc8>
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d038      	beq.n	800ce68 <tcp_parseopt+0xb8>
 800cdf6:	e025      	b.n	800ce44 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cdf8:	f7ff ffa4 	bl	800cd44 <tcp_get_next_optbyte>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b04      	cmp	r3, #4
 800ce00:	d13c      	bne.n	800ce7c <tcp_parseopt+0xcc>
 800ce02:	4b25      	ldr	r3, [pc, #148]	@ (800ce98 <tcp_parseopt+0xe8>)
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	3301      	adds	r3, #1
 800ce08:	4a22      	ldr	r2, [pc, #136]	@ (800ce94 <tcp_parseopt+0xe4>)
 800ce0a:	8812      	ldrh	r2, [r2, #0]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	da35      	bge.n	800ce7c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce10:	f7ff ff98 	bl	800cd44 <tcp_get_next_optbyte>
 800ce14:	4603      	mov	r3, r0
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ce1a:	f7ff ff93 	bl	800cd44 <tcp_get_next_optbyte>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	461a      	mov	r2, r3
 800ce22:	89bb      	ldrh	r3, [r7, #12]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ce28:	89bb      	ldrh	r3, [r7, #12]
 800ce2a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ce2e:	d804      	bhi.n	800ce3a <tcp_parseopt+0x8a>
 800ce30:	89bb      	ldrh	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <tcp_parseopt+0x8a>
 800ce36:	89ba      	ldrh	r2, [r7, #12]
 800ce38:	e001      	b.n	800ce3e <tcp_parseopt+0x8e>
 800ce3a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ce42:	e012      	b.n	800ce6a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ce44:	f7ff ff7e 	bl	800cd44 <tcp_get_next_optbyte>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ce4c:	7afb      	ldrb	r3, [r7, #11]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d916      	bls.n	800ce80 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ce52:	7afb      	ldrb	r3, [r7, #11]
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	4b10      	ldr	r3, [pc, #64]	@ (800ce98 <tcp_parseopt+0xe8>)
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b02      	subs	r3, #2
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <tcp_parseopt+0xe8>)
 800ce64:	801a      	strh	r2, [r3, #0]
 800ce66:	e000      	b.n	800ce6a <tcp_parseopt+0xba>
          break;
 800ce68:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce98 <tcp_parseopt+0xe8>)
 800ce6c:	881a      	ldrh	r2, [r3, #0]
 800ce6e:	4b09      	ldr	r3, [pc, #36]	@ (800ce94 <tcp_parseopt+0xe4>)
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d3b2      	bcc.n	800cddc <tcp_parseopt+0x2c>
 800ce76:	e004      	b.n	800ce82 <tcp_parseopt+0xd2>
          return;
 800ce78:	bf00      	nop
 800ce7a:	e002      	b.n	800ce82 <tcp_parseopt+0xd2>
            return;
 800ce7c:	bf00      	nop
 800ce7e:	e000      	b.n	800ce82 <tcp_parseopt+0xd2>
            return;
 800ce80:	bf00      	nop
      }
    }
  }
}
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	08016294 	.word	0x08016294
 800ce8c:	080166f8 	.word	0x080166f8
 800ce90:	080162e0 	.word	0x080162e0
 800ce94:	20008608 	.word	0x20008608
 800ce98:	20008610 	.word	0x20008610

0800ce9c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cea0:	4b05      	ldr	r3, [pc, #20]	@ (800ceb8 <tcp_trigger_input_pcb_close+0x1c>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	f043 0310 	orr.w	r3, r3, #16
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	4b03      	ldr	r3, [pc, #12]	@ (800ceb8 <tcp_trigger_input_pcb_close+0x1c>)
 800ceac:	701a      	strb	r2, [r3, #0]
}
 800ceae:	bf00      	nop
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	20008621 	.word	0x20008621

0800cebc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <tcp_route+0x28>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	7a1b      	ldrb	r3, [r3, #8]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fb f8a6 	bl	800802c <netif_get_by_index>
 800cee0:	4603      	mov	r3, r0
 800cee2:	e003      	b.n	800ceec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f005 fc67 	bl	80127b8 <ip4_route>
 800ceea:	4603      	mov	r3, r0
  }
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cef4:	b590      	push	{r4, r7, lr}
 800cef6:	b087      	sub	sp, #28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	603b      	str	r3, [r7, #0]
 800cf00:	4613      	mov	r3, r2
 800cf02:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d105      	bne.n	800cf16 <tcp_create_segment+0x22>
 800cf0a:	4b43      	ldr	r3, [pc, #268]	@ (800d018 <tcp_create_segment+0x124>)
 800cf0c:	22a3      	movs	r2, #163	@ 0xa3
 800cf0e:	4943      	ldr	r1, [pc, #268]	@ (800d01c <tcp_create_segment+0x128>)
 800cf10:	4843      	ldr	r0, [pc, #268]	@ (800d020 <tcp_create_segment+0x12c>)
 800cf12:	f006 ff5b 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d105      	bne.n	800cf28 <tcp_create_segment+0x34>
 800cf1c:	4b3e      	ldr	r3, [pc, #248]	@ (800d018 <tcp_create_segment+0x124>)
 800cf1e:	22a4      	movs	r2, #164	@ 0xa4
 800cf20:	4940      	ldr	r1, [pc, #256]	@ (800d024 <tcp_create_segment+0x130>)
 800cf22:	483f      	ldr	r0, [pc, #252]	@ (800d020 <tcp_create_segment+0x12c>)
 800cf24:	f006 ff52 	bl	8013dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf28:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cf36:	2003      	movs	r0, #3
 800cf38:	f7fa fce6 	bl	8007908 <memp_malloc>
 800cf3c:	6138      	str	r0, [r7, #16]
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cf44:	68b8      	ldr	r0, [r7, #8]
 800cf46:	f7fb fbd1 	bl	80086ec <pbuf_free>
    return NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e060      	b.n	800d010 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cf54:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	891a      	ldrh	r2, [r3, #8]
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d205      	bcs.n	800cf7a <tcp_create_segment+0x86>
 800cf6e:	4b2a      	ldr	r3, [pc, #168]	@ (800d018 <tcp_create_segment+0x124>)
 800cf70:	22b0      	movs	r2, #176	@ 0xb0
 800cf72:	492d      	ldr	r1, [pc, #180]	@ (800d028 <tcp_create_segment+0x134>)
 800cf74:	482a      	ldr	r0, [pc, #168]	@ (800d020 <tcp_create_segment+0x12c>)
 800cf76:	f006 ff29 	bl	8013dcc <iprintf>
  seg->len = p->tot_len - optlen;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	891a      	ldrh	r2, [r3, #8]
 800cf7e:	7dfb      	ldrb	r3, [r7, #23]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cf8a:	2114      	movs	r1, #20
 800cf8c:	68b8      	ldr	r0, [r7, #8]
 800cf8e:	f7fb fb17 	bl	80085c0 <pbuf_add_header>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cf98:	6938      	ldr	r0, [r7, #16]
 800cf9a:	f7fc ffe6 	bl	8009f6a <tcp_seg_free>
    return NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e036      	b.n	800d010 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	8ada      	ldrh	r2, [r3, #22]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	68dc      	ldr	r4, [r3, #12]
 800cfb4:	4610      	mov	r0, r2
 800cfb6:	f7f9 ffc9 	bl	8006f4c <lwip_htons>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	8b1a      	ldrh	r2, [r3, #24]
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	68dc      	ldr	r4, [r3, #12]
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7f9 ffc0 	bl	8006f4c <lwip_htons>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	68dc      	ldr	r4, [r3, #12]
 800cfd4:	6838      	ldr	r0, [r7, #0]
 800cfd6:	f7f9 ffcf 	bl	8006f78 <lwip_htonl>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cfde:	7dfb      	ldrb	r3, [r7, #23]
 800cfe0:	089b      	lsrs	r3, r3, #2
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	3305      	adds	r3, #5
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	031b      	lsls	r3, r3, #12
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	4313      	orrs	r3, r2
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	68dc      	ldr	r4, [r3, #12]
 800cff8:	4610      	mov	r0, r2
 800cffa:	f7f9 ffa7 	bl	8006f4c <lwip_htons>
 800cffe:	4603      	mov	r3, r0
 800d000:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	749a      	strb	r2, [r3, #18]
 800d00a:	2200      	movs	r2, #0
 800d00c:	74da      	strb	r2, [r3, #19]
  return seg;
 800d00e:	693b      	ldr	r3, [r7, #16]
}
 800d010:	4618      	mov	r0, r3
 800d012:	371c      	adds	r7, #28
 800d014:	46bd      	mov	sp, r7
 800d016:	bd90      	pop	{r4, r7, pc}
 800d018:	08016714 	.word	0x08016714
 800d01c:	08016748 	.word	0x08016748
 800d020:	08016768 	.word	0x08016768
 800d024:	08016790 	.word	0x08016790
 800d028:	080167b4 	.word	0x080167b4

0800d02c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b086      	sub	sp, #24
 800d030:	af00      	add	r7, sp, #0
 800d032:	607b      	str	r3, [r7, #4]
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
 800d038:	460b      	mov	r3, r1
 800d03a:	81bb      	strh	r3, [r7, #12]
 800d03c:	4613      	mov	r3, r2
 800d03e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d040:	89bb      	ldrh	r3, [r7, #12]
 800d042:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <tcp_pbuf_prealloc+0x2a>
 800d04a:	4b30      	ldr	r3, [pc, #192]	@ (800d10c <tcp_pbuf_prealloc+0xe0>)
 800d04c:	22e8      	movs	r2, #232	@ 0xe8
 800d04e:	4930      	ldr	r1, [pc, #192]	@ (800d110 <tcp_pbuf_prealloc+0xe4>)
 800d050:	4830      	ldr	r0, [pc, #192]	@ (800d114 <tcp_pbuf_prealloc+0xe8>)
 800d052:	f006 febb 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d105      	bne.n	800d068 <tcp_pbuf_prealloc+0x3c>
 800d05c:	4b2b      	ldr	r3, [pc, #172]	@ (800d10c <tcp_pbuf_prealloc+0xe0>)
 800d05e:	22e9      	movs	r2, #233	@ 0xe9
 800d060:	492d      	ldr	r1, [pc, #180]	@ (800d118 <tcp_pbuf_prealloc+0xec>)
 800d062:	482c      	ldr	r0, [pc, #176]	@ (800d114 <tcp_pbuf_prealloc+0xe8>)
 800d064:	f006 feb2 	bl	8013dcc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d068:	89ba      	ldrh	r2, [r7, #12]
 800d06a:	897b      	ldrh	r3, [r7, #10]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d221      	bcs.n	800d0b4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d070:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d074:	f003 0302 	and.w	r3, r3, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d111      	bne.n	800d0a0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	8b5b      	ldrh	r3, [r3, #26]
 800d080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d084:	2b00      	cmp	r3, #0
 800d086:	d115      	bne.n	800d0b4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d088:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d007      	beq.n	800d0a0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d009      	beq.n	800d0b4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d0a0:	89bb      	ldrh	r3, [r7, #12]
 800d0a2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d0a6:	f023 0203 	bic.w	r2, r3, #3
 800d0aa:	897b      	ldrh	r3, [r7, #10]
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	bf28      	it	cs
 800d0b0:	4613      	movcs	r3, r2
 800d0b2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d0b4:	8af9      	ldrh	r1, [r7, #22]
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
 800d0b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fb f831 	bl	8008124 <pbuf_alloc>
 800d0c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e019      	b.n	800d102 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d006      	beq.n	800d0e4 <tcp_pbuf_prealloc+0xb8>
 800d0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d10c <tcp_pbuf_prealloc+0xe0>)
 800d0d8:	f240 120b 	movw	r2, #267	@ 0x10b
 800d0dc:	490f      	ldr	r1, [pc, #60]	@ (800d11c <tcp_pbuf_prealloc+0xf0>)
 800d0de:	480d      	ldr	r0, [pc, #52]	@ (800d114 <tcp_pbuf_prealloc+0xe8>)
 800d0e0:	f006 fe74 	bl	8013dcc <iprintf>
  *oversize = p->len - length;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	895a      	ldrh	r2, [r3, #10]
 800d0e8:	89bb      	ldrh	r3, [r7, #12]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	89ba      	ldrh	r2, [r7, #12]
 800d0f6:	811a      	strh	r2, [r3, #8]
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	891a      	ldrh	r2, [r3, #8]
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	815a      	strh	r2, [r3, #10]
  return p;
 800d100:	693b      	ldr	r3, [r7, #16]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3718      	adds	r7, #24
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	08016714 	.word	0x08016714
 800d110:	080167cc 	.word	0x080167cc
 800d114:	08016768 	.word	0x08016768
 800d118:	080167f0 	.word	0x080167f0
 800d11c:	08016810 	.word	0x08016810

0800d120 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d106      	bne.n	800d140 <tcp_write_checks+0x20>
 800d132:	4b33      	ldr	r3, [pc, #204]	@ (800d200 <tcp_write_checks+0xe0>)
 800d134:	f240 1233 	movw	r2, #307	@ 0x133
 800d138:	4932      	ldr	r1, [pc, #200]	@ (800d204 <tcp_write_checks+0xe4>)
 800d13a:	4833      	ldr	r0, [pc, #204]	@ (800d208 <tcp_write_checks+0xe8>)
 800d13c:	f006 fe46 	bl	8013dcc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	7d1b      	ldrb	r3, [r3, #20]
 800d144:	2b04      	cmp	r3, #4
 800d146:	d00e      	beq.n	800d166 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d14c:	2b07      	cmp	r3, #7
 800d14e:	d00a      	beq.n	800d166 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d154:	2b02      	cmp	r3, #2
 800d156:	d006      	beq.n	800d166 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	d002      	beq.n	800d166 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d160:	f06f 030a 	mvn.w	r3, #10
 800d164:	e048      	b.n	800d1f8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d166:	887b      	ldrh	r3, [r7, #2]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <tcp_write_checks+0x50>
    return ERR_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	e043      	b.n	800d1f8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d176:	887a      	ldrh	r2, [r7, #2]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d909      	bls.n	800d190 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	8b5b      	ldrh	r3, [r3, #26]
 800d180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d18a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d18e:	e033      	b.n	800d1f8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d196:	2b08      	cmp	r3, #8
 800d198:	d909      	bls.n	800d1ae <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	8b5b      	ldrh	r3, [r3, #26]
 800d19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d1a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1ac:	e024      	b.n	800d1f8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00f      	beq.n	800d1d8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d11a      	bne.n	800d1f6 <tcp_write_checks+0xd6>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d116      	bne.n	800d1f6 <tcp_write_checks+0xd6>
 800d1c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d200 <tcp_write_checks+0xe0>)
 800d1ca:	f240 1255 	movw	r2, #341	@ 0x155
 800d1ce:	490f      	ldr	r1, [pc, #60]	@ (800d20c <tcp_write_checks+0xec>)
 800d1d0:	480d      	ldr	r0, [pc, #52]	@ (800d208 <tcp_write_checks+0xe8>)
 800d1d2:	f006 fdfb 	bl	8013dcc <iprintf>
 800d1d6:	e00e      	b.n	800d1f6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d103      	bne.n	800d1e8 <tcp_write_checks+0xc8>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d006      	beq.n	800d1f6 <tcp_write_checks+0xd6>
 800d1e8:	4b05      	ldr	r3, [pc, #20]	@ (800d200 <tcp_write_checks+0xe0>)
 800d1ea:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d1ee:	4908      	ldr	r1, [pc, #32]	@ (800d210 <tcp_write_checks+0xf0>)
 800d1f0:	4805      	ldr	r0, [pc, #20]	@ (800d208 <tcp_write_checks+0xe8>)
 800d1f2:	f006 fdeb 	bl	8013dcc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	08016714 	.word	0x08016714
 800d204:	08016824 	.word	0x08016824
 800d208:	08016768 	.word	0x08016768
 800d20c:	08016844 	.word	0x08016844
 800d210:	08016880 	.word	0x08016880

0800d214 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d214:	b590      	push	{r4, r7, lr}
 800d216:	b09b      	sub	sp, #108	@ 0x6c
 800d218:	af04      	add	r7, sp, #16
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4611      	mov	r1, r2
 800d220:	461a      	mov	r2, r3
 800d222:	460b      	mov	r3, r1
 800d224:	80fb      	strh	r3, [r7, #6]
 800d226:	4613      	mov	r3, r2
 800d228:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d22e:	2300      	movs	r3, #0
 800d230:	653b      	str	r3, [r7, #80]	@ 0x50
 800d232:	2300      	movs	r3, #0
 800d234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d236:	2300      	movs	r3, #0
 800d238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d23a:	2300      	movs	r3, #0
 800d23c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d23e:	2300      	movs	r3, #0
 800d240:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d109      	bne.n	800d270 <tcp_write+0x5c>
 800d25c:	4ba4      	ldr	r3, [pc, #656]	@ (800d4f0 <tcp_write+0x2dc>)
 800d25e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d262:	49a4      	ldr	r1, [pc, #656]	@ (800d4f4 <tcp_write+0x2e0>)
 800d264:	48a4      	ldr	r0, [pc, #656]	@ (800d4f8 <tcp_write+0x2e4>)
 800d266:	f006 fdb1 	bl	8013dcc <iprintf>
 800d26a:	f06f 030f 	mvn.w	r3, #15
 800d26e:	e32a      	b.n	800d8c6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	b29a      	uxth	r2, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d27e:	4293      	cmp	r3, r2
 800d280:	bf28      	it	cs
 800d282:	4613      	movcs	r3, r2
 800d284:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <tcp_write+0x7e>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d290:	e000      	b.n	800d294 <tcp_write+0x80>
 800d292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d294:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d109      	bne.n	800d2b0 <tcp_write+0x9c>
 800d29c:	4b94      	ldr	r3, [pc, #592]	@ (800d4f0 <tcp_write+0x2dc>)
 800d29e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d2a2:	4996      	ldr	r1, [pc, #600]	@ (800d4fc <tcp_write+0x2e8>)
 800d2a4:	4894      	ldr	r0, [pc, #592]	@ (800d4f8 <tcp_write+0x2e4>)
 800d2a6:	f006 fd91 	bl	8013dcc <iprintf>
 800d2aa:	f06f 030f 	mvn.w	r3, #15
 800d2ae:	e30a      	b.n	800d8c6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d2b0:	88fb      	ldrh	r3, [r7, #6]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff ff33 	bl	800d120 <tcp_write_checks>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d2c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <tcp_write+0xba>
    return err;
 800d2c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d2cc:	e2fb      	b.n	800d8c6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d2d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80f6 	beq.w	800d4d4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2ee:	e002      	b.n	800d2f6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d2f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f8      	bne.n	800d2f0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d300:	7a9b      	ldrb	r3, [r3, #10]
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	b29b      	uxth	r3, r3
 800d306:	f003 0304 	and.w	r3, r3, #4
 800d30a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d30c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d30e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d310:	891b      	ldrh	r3, [r3, #8]
 800d312:	4619      	mov	r1, r3
 800d314:	8c3b      	ldrh	r3, [r7, #32]
 800d316:	440b      	add	r3, r1
 800d318:	429a      	cmp	r2, r3
 800d31a:	da06      	bge.n	800d32a <tcp_write+0x116>
 800d31c:	4b74      	ldr	r3, [pc, #464]	@ (800d4f0 <tcp_write+0x2dc>)
 800d31e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d322:	4977      	ldr	r1, [pc, #476]	@ (800d500 <tcp_write+0x2ec>)
 800d324:	4874      	ldr	r0, [pc, #464]	@ (800d4f8 <tcp_write+0x2e4>)
 800d326:	f006 fd51 	bl	8013dcc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d32a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d32c:	891a      	ldrh	r2, [r3, #8]
 800d32e:	8c3b      	ldrh	r3, [r7, #32]
 800d330:	4413      	add	r3, r2
 800d332:	b29b      	uxth	r3, r3
 800d334:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d340:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d342:	8a7b      	ldrh	r3, [r7, #18]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d026      	beq.n	800d396 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d348:	8a7b      	ldrh	r3, [r7, #18]
 800d34a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d206      	bcs.n	800d35e <tcp_write+0x14a>
 800d350:	4b67      	ldr	r3, [pc, #412]	@ (800d4f0 <tcp_write+0x2dc>)
 800d352:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d356:	496b      	ldr	r1, [pc, #428]	@ (800d504 <tcp_write+0x2f0>)
 800d358:	4867      	ldr	r0, [pc, #412]	@ (800d4f8 <tcp_write+0x2e4>)
 800d35a:	f006 fd37 	bl	8013dcc <iprintf>
      seg = last_unsent;
 800d35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d360:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d362:	8a7b      	ldrh	r3, [r7, #18]
 800d364:	88fa      	ldrh	r2, [r7, #6]
 800d366:	4293      	cmp	r3, r2
 800d368:	bf28      	it	cs
 800d36a:	4613      	movcs	r3, r2
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d370:	4293      	cmp	r3, r2
 800d372:	bf28      	it	cs
 800d374:	4613      	movcs	r3, r2
 800d376:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d37c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d37e:	4413      	add	r3, r2
 800d380:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d384:	8a7a      	ldrh	r2, [r7, #18]
 800d386:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d38e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d390:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d396:	8a7b      	ldrh	r3, [r7, #18]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00b      	beq.n	800d3b4 <tcp_write+0x1a0>
 800d39c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d3a0:	88fb      	ldrh	r3, [r7, #6]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d006      	beq.n	800d3b4 <tcp_write+0x1a0>
 800d3a6:	4b52      	ldr	r3, [pc, #328]	@ (800d4f0 <tcp_write+0x2dc>)
 800d3a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3ac:	4956      	ldr	r1, [pc, #344]	@ (800d508 <tcp_write+0x2f4>)
 800d3ae:	4852      	ldr	r0, [pc, #328]	@ (800d4f8 <tcp_write+0x2e4>)
 800d3b0:	f006 fd0c 	bl	8013dcc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d3b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	f080 8167 	bcs.w	800d68e <tcp_write+0x47a>
 800d3c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8163 	beq.w	800d68e <tcp_write+0x47a>
 800d3c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ca:	891b      	ldrh	r3, [r3, #8]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 815e 	beq.w	800d68e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d3d2:	88fa      	ldrh	r2, [r7, #6]
 800d3d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3d8:	1ad2      	subs	r2, r2, r3
 800d3da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	bfa8      	it	ge
 800d3e0:	4613      	movge	r3, r2
 800d3e2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d3e8:	797b      	ldrb	r3, [r7, #5]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d027      	beq.n	800d442 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d3f2:	f107 0012 	add.w	r0, r7, #18
 800d3f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d3f8:	8bf9      	ldrh	r1, [r7, #30]
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	9302      	str	r3, [sp, #8]
 800d3fe:	797b      	ldrb	r3, [r7, #5]
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4603      	mov	r3, r0
 800d408:	2000      	movs	r0, #0
 800d40a:	f7ff fe0f 	bl	800d02c <tcp_pbuf_prealloc>
 800d40e:	6578      	str	r0, [r7, #84]	@ 0x54
 800d410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 8225 	beq.w	800d862 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d41a:	6858      	ldr	r0, [r3, #4]
 800d41c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	4413      	add	r3, r2
 800d424:	8bfa      	ldrh	r2, [r7, #30]
 800d426:	4619      	mov	r1, r3
 800d428:	f006 fdd1 	bl	8013fce <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d42c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d42e:	f7fb f9e5 	bl	80087fc <pbuf_clen>
 800d432:	4603      	mov	r3, r0
 800d434:	461a      	mov	r2, r3
 800d436:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d43a:	4413      	add	r3, r2
 800d43c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d440:	e041      	b.n	800d4c6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34
 800d448:	e002      	b.n	800d450 <tcp_write+0x23c>
 800d44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1f8      	bne.n	800d44a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45a:	7b1b      	ldrb	r3, [r3, #12]
 800d45c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d115      	bne.n	800d490 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d46a:	8952      	ldrh	r2, [r2, #10]
 800d46c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d46e:	68ba      	ldr	r2, [r7, #8]
 800d470:	429a      	cmp	r2, r3
 800d472:	d10d      	bne.n	800d490 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d474:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d006      	beq.n	800d48a <tcp_write+0x276>
 800d47c:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f0 <tcp_write+0x2dc>)
 800d47e:	f240 2231 	movw	r2, #561	@ 0x231
 800d482:	4922      	ldr	r1, [pc, #136]	@ (800d50c <tcp_write+0x2f8>)
 800d484:	481c      	ldr	r0, [pc, #112]	@ (800d4f8 <tcp_write+0x2e4>)
 800d486:	f006 fca1 	bl	8013dcc <iprintf>
          extendlen = seglen;
 800d48a:	8bfb      	ldrh	r3, [r7, #30]
 800d48c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d48e:	e01a      	b.n	800d4c6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d490:	8bfb      	ldrh	r3, [r7, #30]
 800d492:	2201      	movs	r2, #1
 800d494:	4619      	mov	r1, r3
 800d496:	2000      	movs	r0, #0
 800d498:	f7fa fe44 	bl	8008124 <pbuf_alloc>
 800d49c:	6578      	str	r0, [r7, #84]	@ 0x54
 800d49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 81e0 	beq.w	800d866 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d4a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	441a      	add	r2, r3
 800d4ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4b0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d4b2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d4b4:	f7fb f9a2 	bl	80087fc <pbuf_clen>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d4c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d4ca:	8bfb      	ldrh	r3, [r7, #30]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d4d2:	e0dc      	b.n	800d68e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 80d7 	beq.w	800d68e <tcp_write+0x47a>
 800d4e0:	4b03      	ldr	r3, [pc, #12]	@ (800d4f0 <tcp_write+0x2dc>)
 800d4e2:	f240 224a 	movw	r2, #586	@ 0x24a
 800d4e6:	490a      	ldr	r1, [pc, #40]	@ (800d510 <tcp_write+0x2fc>)
 800d4e8:	4803      	ldr	r0, [pc, #12]	@ (800d4f8 <tcp_write+0x2e4>)
 800d4ea:	f006 fc6f 	bl	8013dcc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d4ee:	e0ce      	b.n	800d68e <tcp_write+0x47a>
 800d4f0:	08016714 	.word	0x08016714
 800d4f4:	080168b4 	.word	0x080168b4
 800d4f8:	08016768 	.word	0x08016768
 800d4fc:	080168cc 	.word	0x080168cc
 800d500:	08016900 	.word	0x08016900
 800d504:	08016918 	.word	0x08016918
 800d508:	08016938 	.word	0x08016938
 800d50c:	08016958 	.word	0x08016958
 800d510:	08016984 	.word	0x08016984
    struct pbuf *p;
    u16_t left = len - pos;
 800d514:	88fa      	ldrh	r2, [r7, #6]
 800d516:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d51e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d522:	b29b      	uxth	r3, r3
 800d524:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d52a:	8b7a      	ldrh	r2, [r7, #26]
 800d52c:	8bbb      	ldrh	r3, [r7, #28]
 800d52e:	4293      	cmp	r3, r2
 800d530:	bf28      	it	cs
 800d532:	4613      	movcs	r3, r2
 800d534:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d536:	797b      	ldrb	r3, [r7, #5]
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d036      	beq.n	800d5ae <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d540:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d544:	b29a      	uxth	r2, r3
 800d546:	8b3b      	ldrh	r3, [r7, #24]
 800d548:	4413      	add	r3, r2
 800d54a:	b299      	uxth	r1, r3
 800d54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d54e:	2b00      	cmp	r3, #0
 800d550:	bf0c      	ite	eq
 800d552:	2301      	moveq	r3, #1
 800d554:	2300      	movne	r3, #0
 800d556:	b2db      	uxtb	r3, r3
 800d558:	f107 0012 	add.w	r0, r7, #18
 800d55c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d55e:	9302      	str	r3, [sp, #8]
 800d560:	797b      	ldrb	r3, [r7, #5]
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4603      	mov	r3, r0
 800d56a:	2036      	movs	r0, #54	@ 0x36
 800d56c:	f7ff fd5e 	bl	800d02c <tcp_pbuf_prealloc>
 800d570:	6338      	str	r0, [r7, #48]	@ 0x30
 800d572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 8178 	beq.w	800d86a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d57c:	895b      	ldrh	r3, [r3, #10]
 800d57e:	8b3a      	ldrh	r2, [r7, #24]
 800d580:	429a      	cmp	r2, r3
 800d582:	d906      	bls.n	800d592 <tcp_write+0x37e>
 800d584:	4b8c      	ldr	r3, [pc, #560]	@ (800d7b8 <tcp_write+0x5a4>)
 800d586:	f240 2266 	movw	r2, #614	@ 0x266
 800d58a:	498c      	ldr	r1, [pc, #560]	@ (800d7bc <tcp_write+0x5a8>)
 800d58c:	488c      	ldr	r0, [pc, #560]	@ (800d7c0 <tcp_write+0x5ac>)
 800d58e:	f006 fc1d 	bl	8013dcc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d59a:	18d0      	adds	r0, r2, r3
 800d59c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	8b3a      	ldrh	r2, [r7, #24]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f006 fd11 	bl	8013fce <memcpy>
 800d5ac:	e02f      	b.n	800d60e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d5ae:	8a7b      	ldrh	r3, [r7, #18]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d006      	beq.n	800d5c2 <tcp_write+0x3ae>
 800d5b4:	4b80      	ldr	r3, [pc, #512]	@ (800d7b8 <tcp_write+0x5a4>)
 800d5b6:	f240 2271 	movw	r2, #625	@ 0x271
 800d5ba:	4982      	ldr	r1, [pc, #520]	@ (800d7c4 <tcp_write+0x5b0>)
 800d5bc:	4880      	ldr	r0, [pc, #512]	@ (800d7c0 <tcp_write+0x5ac>)
 800d5be:	f006 fc05 	bl	8013dcc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d5c2:	8b3b      	ldrh	r3, [r7, #24]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	2036      	movs	r0, #54	@ 0x36
 800d5ca:	f7fa fdab 	bl	8008124 <pbuf_alloc>
 800d5ce:	6178      	str	r0, [r7, #20]
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	f000 814b 	beq.w	800d86e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d5d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	441a      	add	r2, r3
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	2036      	movs	r0, #54	@ 0x36
 800d5f2:	f7fa fd97 	bl	8008124 <pbuf_alloc>
 800d5f6:	6338      	str	r0, [r7, #48]	@ 0x30
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d103      	bne.n	800d606 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d5fe:	6978      	ldr	r0, [r7, #20]
 800d600:	f7fb f874 	bl	80086ec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d604:	e136      	b.n	800d874 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d606:	6979      	ldr	r1, [r7, #20]
 800d608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d60a:	f7fb f931 	bl	8008870 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d60e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d610:	f7fb f8f4 	bl	80087fc <pbuf_clen>
 800d614:	4603      	mov	r3, r0
 800d616:	461a      	mov	r2, r3
 800d618:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d61c:	4413      	add	r3, r2
 800d61e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d626:	2b09      	cmp	r3, #9
 800d628:	d903      	bls.n	800d632 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d62a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d62c:	f7fb f85e 	bl	80086ec <pbuf_free>
      goto memerr;
 800d630:	e120      	b.n	800d874 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d63a:	441a      	add	r2, r3
 800d63c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	4613      	mov	r3, r2
 800d644:	2200      	movs	r2, #0
 800d646:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f7ff fc53 	bl	800cef4 <tcp_create_segment>
 800d64e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 810d 	beq.w	800d872 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d102      	bne.n	800d664 <tcp_write+0x450>
      queue = seg;
 800d65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d660:	647b      	str	r3, [r7, #68]	@ 0x44
 800d662:	e00c      	b.n	800d67e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d666:	2b00      	cmp	r3, #0
 800d668:	d106      	bne.n	800d678 <tcp_write+0x464>
 800d66a:	4b53      	ldr	r3, [pc, #332]	@ (800d7b8 <tcp_write+0x5a4>)
 800d66c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d670:	4955      	ldr	r1, [pc, #340]	@ (800d7c8 <tcp_write+0x5b4>)
 800d672:	4853      	ldr	r0, [pc, #332]	@ (800d7c0 <tcp_write+0x5ac>)
 800d674:	f006 fbaa 	bl	8013dcc <iprintf>
      prev_seg->next = seg;
 800d678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d67a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d67c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d67e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d680:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d682:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d686:	8b3b      	ldrh	r3, [r7, #24]
 800d688:	4413      	add	r3, r2
 800d68a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d68e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d692:	88fb      	ldrh	r3, [r7, #6]
 800d694:	429a      	cmp	r2, r3
 800d696:	f4ff af3d 	bcc.w	800d514 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d69a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d02c      	beq.n	800d6fa <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6a6:	e01e      	b.n	800d6e6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6aa:	891a      	ldrh	r2, [r3, #8]
 800d6ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6ae:	4413      	add	r3, r2
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d110      	bne.n	800d6e0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6c4:	8952      	ldrh	r2, [r2, #10]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f006 fc7e 	bl	8013fce <memcpy>
        p->len += oversize_used;
 800d6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d4:	895a      	ldrh	r2, [r3, #10]
 800d6d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6d8:	4413      	add	r3, r2
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6de:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1dd      	bne.n	800d6a8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ee:	891a      	ldrh	r2, [r3, #8]
 800d6f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6f2:	4413      	add	r3, r2
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d6fa:	8a7a      	ldrh	r2, [r7, #18]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d704:	2b00      	cmp	r3, #0
 800d706:	d018      	beq.n	800d73a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d106      	bne.n	800d71c <tcp_write+0x508>
 800d70e:	4b2a      	ldr	r3, [pc, #168]	@ (800d7b8 <tcp_write+0x5a4>)
 800d710:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d714:	492d      	ldr	r1, [pc, #180]	@ (800d7cc <tcp_write+0x5b8>)
 800d716:	482a      	ldr	r0, [pc, #168]	@ (800d7c0 <tcp_write+0x5ac>)
 800d718:	f006 fb58 	bl	8013dcc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d722:	4618      	mov	r0, r3
 800d724:	f7fb f8a4 	bl	8008870 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72a:	891a      	ldrh	r2, [r3, #8]
 800d72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d72e:	891b      	ldrh	r3, [r3, #8]
 800d730:	4413      	add	r3, r2
 800d732:	b29a      	uxth	r2, r3
 800d734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d736:	811a      	strh	r2, [r3, #8]
 800d738:	e037      	b.n	800d7aa <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d73a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d034      	beq.n	800d7aa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d742:	2b00      	cmp	r3, #0
 800d744:	d003      	beq.n	800d74e <tcp_write+0x53a>
 800d746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_write+0x548>
 800d74e:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b8 <tcp_write+0x5a4>)
 800d750:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d754:	491e      	ldr	r1, [pc, #120]	@ (800d7d0 <tcp_write+0x5bc>)
 800d756:	481a      	ldr	r0, [pc, #104]	@ (800d7c0 <tcp_write+0x5ac>)
 800d758:	f006 fb38 	bl	8013dcc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d762:	e009      	b.n	800d778 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d766:	891a      	ldrh	r2, [r3, #8]
 800d768:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d76a:	4413      	add	r3, r2
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1f1      	bne.n	800d764 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d782:	891a      	ldrh	r2, [r3, #8]
 800d784:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d786:	4413      	add	r3, r2
 800d788:	b29a      	uxth	r2, r3
 800d78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d790:	895a      	ldrh	r2, [r3, #10]
 800d792:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d794:	4413      	add	r3, r2
 800d796:	b29a      	uxth	r2, r3
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d79c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d79e:	891a      	ldrh	r2, [r3, #8]
 800d7a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d7a2:	4413      	add	r3, r2
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d7aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d111      	bne.n	800d7d4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7b4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d7b6:	e010      	b.n	800d7da <tcp_write+0x5c6>
 800d7b8:	08016714 	.word	0x08016714
 800d7bc:	080169b4 	.word	0x080169b4
 800d7c0:	08016768 	.word	0x08016768
 800d7c4:	080169f4 	.word	0x080169f4
 800d7c8:	08016a04 	.word	0x08016a04
 800d7cc:	08016a18 	.word	0x08016a18
 800d7d0:	08016a50 	.word	0x08016a50
  } else {
    last_unsent->next = queue;
 800d7d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d7de:	88fb      	ldrh	r3, [r7, #6]
 800d7e0:	441a      	add	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d7ec:	88fb      	ldrh	r3, [r7, #6]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d7fe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00e      	beq.n	800d82a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <tcp_write+0x616>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <tcp_write+0x616>
 800d81c:	4b2c      	ldr	r3, [pc, #176]	@ (800d8d0 <tcp_write+0x6bc>)
 800d81e:	f240 3212 	movw	r2, #786	@ 0x312
 800d822:	492c      	ldr	r1, [pc, #176]	@ (800d8d4 <tcp_write+0x6c0>)
 800d824:	482c      	ldr	r0, [pc, #176]	@ (800d8d8 <tcp_write+0x6c4>)
 800d826:	f006 fad1 	bl	8013dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d016      	beq.n	800d85e <tcp_write+0x64a>
 800d830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d012      	beq.n	800d85e <tcp_write+0x64a>
 800d838:	797b      	ldrb	r3, [r7, #5]
 800d83a:	f003 0302 	and.w	r3, r3, #2
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10d      	bne.n	800d85e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	899b      	ldrh	r3, [r3, #12]
 800d848:	b29c      	uxth	r4, r3
 800d84a:	2008      	movs	r0, #8
 800d84c:	f7f9 fb7e 	bl	8006f4c <lwip_htons>
 800d850:	4603      	mov	r3, r0
 800d852:	461a      	mov	r2, r3
 800d854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	4322      	orrs	r2, r4
 800d85a:	b292      	uxth	r2, r2
 800d85c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	e031      	b.n	800d8c6 <tcp_write+0x6b2>
          goto memerr;
 800d862:	bf00      	nop
 800d864:	e006      	b.n	800d874 <tcp_write+0x660>
            goto memerr;
 800d866:	bf00      	nop
 800d868:	e004      	b.n	800d874 <tcp_write+0x660>
        goto memerr;
 800d86a:	bf00      	nop
 800d86c:	e002      	b.n	800d874 <tcp_write+0x660>
        goto memerr;
 800d86e:	bf00      	nop
 800d870:	e000      	b.n	800d874 <tcp_write+0x660>
      goto memerr;
 800d872:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	8b5b      	ldrh	r3, [r3, #26]
 800d878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d888:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d88a:	f7fa ff2f 	bl	80086ec <pbuf_free>
  }
  if (queue != NULL) {
 800d88e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <tcp_write+0x686>
    tcp_segs_free(queue);
 800d894:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d896:	f7fc fb53 	bl	8009f40 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00e      	beq.n	800d8c2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <tcp_write+0x6ae>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d106      	bne.n	800d8c2 <tcp_write+0x6ae>
 800d8b4:	4b06      	ldr	r3, [pc, #24]	@ (800d8d0 <tcp_write+0x6bc>)
 800d8b6:	f240 3227 	movw	r2, #807	@ 0x327
 800d8ba:	4906      	ldr	r1, [pc, #24]	@ (800d8d4 <tcp_write+0x6c0>)
 800d8bc:	4806      	ldr	r0, [pc, #24]	@ (800d8d8 <tcp_write+0x6c4>)
 800d8be:	f006 fa85 	bl	8013dcc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d8c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	375c      	adds	r7, #92	@ 0x5c
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd90      	pop	{r4, r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	08016714 	.word	0x08016714
 800d8d4:	08016a88 	.word	0x08016a88
 800d8d8:	08016768 	.word	0x08016768

0800d8dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d8dc:	b590      	push	{r4, r7, lr}
 800d8de:	b08b      	sub	sp, #44	@ 0x2c
 800d8e0:	af02      	add	r7, sp, #8
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	61fb      	str	r3, [r7, #28]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <tcp_split_unsent_seg+0x2c>
 800d8fa:	4b95      	ldr	r3, [pc, #596]	@ (800db50 <tcp_split_unsent_seg+0x274>)
 800d8fc:	f240 324b 	movw	r2, #843	@ 0x34b
 800d900:	4994      	ldr	r1, [pc, #592]	@ (800db54 <tcp_split_unsent_seg+0x278>)
 800d902:	4895      	ldr	r0, [pc, #596]	@ (800db58 <tcp_split_unsent_seg+0x27c>)
 800d904:	f006 fa62 	bl	8013dcc <iprintf>

  useg = pcb->unsent;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d90c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d102      	bne.n	800d91a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d918:	e116      	b.n	800db48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d91a:	887b      	ldrh	r3, [r7, #2]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d109      	bne.n	800d934 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d920:	4b8b      	ldr	r3, [pc, #556]	@ (800db50 <tcp_split_unsent_seg+0x274>)
 800d922:	f240 3253 	movw	r2, #851	@ 0x353
 800d926:	498d      	ldr	r1, [pc, #564]	@ (800db5c <tcp_split_unsent_seg+0x280>)
 800d928:	488b      	ldr	r0, [pc, #556]	@ (800db58 <tcp_split_unsent_seg+0x27c>)
 800d92a:	f006 fa4f 	bl	8013dcc <iprintf>
    return ERR_VAL;
 800d92e:	f06f 0305 	mvn.w	r3, #5
 800d932:	e109      	b.n	800db48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	891b      	ldrh	r3, [r3, #8]
 800d938:	887a      	ldrh	r2, [r7, #2]
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d301      	bcc.n	800d942 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	e102      	b.n	800db48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d946:	887a      	ldrh	r2, [r7, #2]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d906      	bls.n	800d95a <tcp_split_unsent_seg+0x7e>
 800d94c:	4b80      	ldr	r3, [pc, #512]	@ (800db50 <tcp_split_unsent_seg+0x274>)
 800d94e:	f240 325b 	movw	r2, #859	@ 0x35b
 800d952:	4983      	ldr	r1, [pc, #524]	@ (800db60 <tcp_split_unsent_seg+0x284>)
 800d954:	4880      	ldr	r0, [pc, #512]	@ (800db58 <tcp_split_unsent_seg+0x27c>)
 800d956:	f006 fa39 	bl	8013dcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	891b      	ldrh	r3, [r3, #8]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d106      	bne.n	800d970 <tcp_split_unsent_seg+0x94>
 800d962:	4b7b      	ldr	r3, [pc, #492]	@ (800db50 <tcp_split_unsent_seg+0x274>)
 800d964:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d968:	497e      	ldr	r1, [pc, #504]	@ (800db64 <tcp_split_unsent_seg+0x288>)
 800d96a:	487b      	ldr	r0, [pc, #492]	@ (800db58 <tcp_split_unsent_seg+0x27c>)
 800d96c:	f006 fa2e 	bl	8013dcc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	7a9b      	ldrb	r3, [r3, #10]
 800d974:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d976:	7bfb      	ldrb	r3, [r7, #15]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	891a      	ldrh	r2, [r3, #8]
 800d986:	887b      	ldrh	r3, [r7, #2]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d98c:	7bbb      	ldrb	r3, [r7, #14]
 800d98e:	b29a      	uxth	r2, r3
 800d990:	89bb      	ldrh	r3, [r7, #12]
 800d992:	4413      	add	r3, r2
 800d994:	b29b      	uxth	r3, r3
 800d996:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d99a:	4619      	mov	r1, r3
 800d99c:	2036      	movs	r0, #54	@ 0x36
 800d99e:	f7fa fbc1 	bl	8008124 <pbuf_alloc>
 800d9a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80b7 	beq.w	800db1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	891a      	ldrh	r2, [r3, #8]
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	891b      	ldrh	r3, [r3, #8]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	887b      	ldrh	r3, [r7, #2]
 800d9bc:	4413      	add	r3, r2
 800d9be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	6858      	ldr	r0, [r3, #4]
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	18d1      	adds	r1, r2, r3
 800d9cc:	897b      	ldrh	r3, [r7, #10]
 800d9ce:	89ba      	ldrh	r2, [r7, #12]
 800d9d0:	f7fb f886 	bl	8008ae0 <pbuf_copy_partial>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	89bb      	ldrh	r3, [r7, #12]
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	f040 809f 	bne.w	800db1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	899b      	ldrh	r3, [r3, #12]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f9 faaf 	bl	8006f4c <lwip_htons>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d9fc:	7efb      	ldrb	r3, [r7, #27]
 800d9fe:	f003 0308 	and.w	r3, r3, #8
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800da06:	7efb      	ldrb	r3, [r7, #27]
 800da08:	f023 0308 	bic.w	r3, r3, #8
 800da0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da0e:	7ebb      	ldrb	r3, [r7, #26]
 800da10:	f043 0308 	orr.w	r3, r3, #8
 800da14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da16:	7efb      	ldrb	r3, [r7, #27]
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d007      	beq.n	800da30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800da20:	7efb      	ldrb	r3, [r7, #27]
 800da22:	f023 0301 	bic.w	r3, r3, #1
 800da26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800da28:	7ebb      	ldrb	r3, [r7, #26]
 800da2a:	f043 0301 	orr.w	r3, r3, #1
 800da2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	4618      	mov	r0, r3
 800da38:	f7f9 fa9e 	bl	8006f78 <lwip_htonl>
 800da3c:	4602      	mov	r2, r0
 800da3e:	887b      	ldrh	r3, [r7, #2]
 800da40:	18d1      	adds	r1, r2, r3
 800da42:	7eba      	ldrb	r2, [r7, #26]
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	9300      	str	r3, [sp, #0]
 800da48:	460b      	mov	r3, r1
 800da4a:	6939      	ldr	r1, [r7, #16]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff fa51 	bl	800cef4 <tcp_create_segment>
 800da52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d063      	beq.n	800db22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fa fecc 	bl	80087fc <pbuf_clen>
 800da64:	4603      	mov	r3, r0
 800da66:	461a      	mov	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da6e:	1a9b      	subs	r3, r3, r2
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	6858      	ldr	r0, [r3, #4]
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	891a      	ldrh	r2, [r3, #8]
 800da82:	89bb      	ldrh	r3, [r7, #12]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	b29b      	uxth	r3, r3
 800da88:	4619      	mov	r1, r3
 800da8a:	f7fa fca9 	bl	80083e0 <pbuf_realloc>
  useg->len -= remainder;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	891a      	ldrh	r2, [r3, #8]
 800da92:	89bb      	ldrh	r3, [r7, #12]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	b29a      	uxth	r2, r3
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	899b      	ldrh	r3, [r3, #12]
 800daa2:	b29c      	uxth	r4, r3
 800daa4:	7efb      	ldrb	r3, [r7, #27]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f9 fa4f 	bl	8006f4c <lwip_htons>
 800daae:	4603      	mov	r3, r0
 800dab0:	461a      	mov	r2, r3
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	4322      	orrs	r2, r4
 800dab8:	b292      	uxth	r2, r2
 800daba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fa fe9b 	bl	80087fc <pbuf_clen>
 800dac6:	4603      	mov	r3, r0
 800dac8:	461a      	mov	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dad0:	4413      	add	r3, r2
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fa fe8c 	bl	80087fc <pbuf_clen>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800daee:	4413      	add	r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	69fa      	ldr	r2, [r7, #28]
 800db04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d103      	bne.n	800db16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	e016      	b.n	800db48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db1a:	bf00      	nop
 800db1c:	e002      	b.n	800db24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db1e:	bf00      	nop
 800db20:	e000      	b.n	800db24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d006      	beq.n	800db38 <tcp_split_unsent_seg+0x25c>
 800db2a:	4b09      	ldr	r3, [pc, #36]	@ (800db50 <tcp_split_unsent_seg+0x274>)
 800db2c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800db30:	490d      	ldr	r1, [pc, #52]	@ (800db68 <tcp_split_unsent_seg+0x28c>)
 800db32:	4809      	ldr	r0, [pc, #36]	@ (800db58 <tcp_split_unsent_seg+0x27c>)
 800db34:	f006 f94a 	bl	8013dcc <iprintf>
  if (p != NULL) {
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800db3e:	6938      	ldr	r0, [r7, #16]
 800db40:	f7fa fdd4 	bl	80086ec <pbuf_free>
  }

  return ERR_MEM;
 800db44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3724      	adds	r7, #36	@ 0x24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd90      	pop	{r4, r7, pc}
 800db50:	08016714 	.word	0x08016714
 800db54:	08016aa8 	.word	0x08016aa8
 800db58:	08016768 	.word	0x08016768
 800db5c:	08016acc 	.word	0x08016acc
 800db60:	08016af0 	.word	0x08016af0
 800db64:	08016b00 	.word	0x08016b00
 800db68:	08016b10 	.word	0x08016b10

0800db6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_send_fin+0x1c>
 800db7a:	4b21      	ldr	r3, [pc, #132]	@ (800dc00 <tcp_send_fin+0x94>)
 800db7c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800db80:	4920      	ldr	r1, [pc, #128]	@ (800dc04 <tcp_send_fin+0x98>)
 800db82:	4821      	ldr	r0, [pc, #132]	@ (800dc08 <tcp_send_fin+0x9c>)
 800db84:	f006 f922 	bl	8013dcc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d02e      	beq.n	800dbee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db94:	60fb      	str	r3, [r7, #12]
 800db96:	e002      	b.n	800db9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1f8      	bne.n	800db98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	899b      	ldrh	r3, [r3, #12]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f9 f9cc 	bl	8006f4c <lwip_htons>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 0307 	and.w	r3, r3, #7
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d116      	bne.n	800dbee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	68db      	ldr	r3, [r3, #12]
 800dbc4:	899b      	ldrh	r3, [r3, #12]
 800dbc6:	b29c      	uxth	r4, r3
 800dbc8:	2001      	movs	r0, #1
 800dbca:	f7f9 f9bf 	bl	8006f4c <lwip_htons>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	4322      	orrs	r2, r4
 800dbd8:	b292      	uxth	r2, r2
 800dbda:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	8b5b      	ldrh	r3, [r3, #26]
 800dbe0:	f043 0320 	orr.w	r3, r3, #32
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e004      	b.n	800dbf8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dbee:	2101      	movs	r1, #1
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f80b 	bl	800dc0c <tcp_enqueue_flags>
 800dbf6:	4603      	mov	r3, r0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd90      	pop	{r4, r7, pc}
 800dc00:	08016714 	.word	0x08016714
 800dc04:	08016b1c 	.word	0x08016b1c
 800dc08:	08016768 	.word	0x08016768

0800dc0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	@ 0x28
 800dc10:	af02      	add	r7, sp, #8
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	f003 0303 	and.w	r3, r3, #3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d106      	bne.n	800dc38 <tcp_enqueue_flags+0x2c>
 800dc2a:	4b67      	ldr	r3, [pc, #412]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800dc2c:	f240 4211 	movw	r2, #1041	@ 0x411
 800dc30:	4966      	ldr	r1, [pc, #408]	@ (800ddcc <tcp_enqueue_flags+0x1c0>)
 800dc32:	4867      	ldr	r0, [pc, #412]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800dc34:	f006 f8ca 	bl	8013dcc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <tcp_enqueue_flags+0x40>
 800dc3e:	4b62      	ldr	r3, [pc, #392]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800dc40:	f240 4213 	movw	r2, #1043	@ 0x413
 800dc44:	4963      	ldr	r1, [pc, #396]	@ (800ddd4 <tcp_enqueue_flags+0x1c8>)
 800dc46:	4862      	ldr	r0, [pc, #392]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800dc48:	f006 f8c0 	bl	8013dcc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	f003 0302 	and.w	r3, r3, #2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dc56:	2301      	movs	r3, #1
 800dc58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc5a:	7ffb      	ldrb	r3, [r7, #31]
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	f003 0304 	and.w	r3, r3, #4
 800dc64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc6e:	4619      	mov	r1, r3
 800dc70:	2036      	movs	r0, #54	@ 0x36
 800dc72:	f7fa fa57 	bl	8008124 <pbuf_alloc>
 800dc76:	6138      	str	r0, [r7, #16]
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d109      	bne.n	800dc92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	8b5b      	ldrh	r3, [r3, #26]
 800dc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc90:	e095      	b.n	800ddbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	895a      	ldrh	r2, [r3, #10]
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d206      	bcs.n	800dcac <tcp_enqueue_flags+0xa0>
 800dc9e:	4b4a      	ldr	r3, [pc, #296]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800dca0:	f240 4239 	movw	r2, #1081	@ 0x439
 800dca4:	494c      	ldr	r1, [pc, #304]	@ (800ddd8 <tcp_enqueue_flags+0x1cc>)
 800dca6:	484a      	ldr	r0, [pc, #296]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800dca8:	f006 f890 	bl	8013dcc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800dcb0:	78fa      	ldrb	r2, [r7, #3]
 800dcb2:	7ffb      	ldrb	r3, [r7, #31]
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	6939      	ldr	r1, [r7, #16]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff f91a 	bl	800cef4 <tcp_create_segment>
 800dcc0:	60f8      	str	r0, [r7, #12]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d109      	bne.n	800dcdc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8b5b      	ldrh	r3, [r3, #26]
 800dccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcda:	e070      	b.n	800ddbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	f003 0303 	and.w	r3, r3, #3
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d006      	beq.n	800dcf6 <tcp_enqueue_flags+0xea>
 800dce8:	4b37      	ldr	r3, [pc, #220]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800dcea:	f240 4242 	movw	r2, #1090	@ 0x442
 800dcee:	493b      	ldr	r1, [pc, #236]	@ (800dddc <tcp_enqueue_flags+0x1d0>)
 800dcf0:	4837      	ldr	r0, [pc, #220]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800dcf2:	f006 f86b 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	891b      	ldrh	r3, [r3, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d006      	beq.n	800dd0c <tcp_enqueue_flags+0x100>
 800dcfe:	4b32      	ldr	r3, [pc, #200]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800dd00:	f240 4243 	movw	r2, #1091	@ 0x443
 800dd04:	4936      	ldr	r1, [pc, #216]	@ (800dde0 <tcp_enqueue_flags+0x1d4>)
 800dd06:	4832      	ldr	r0, [pc, #200]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800dd08:	f006 f860 	bl	8013dcc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dd1a:	e00d      	b.n	800dd38 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	e002      	b.n	800dd2a <tcp_enqueue_flags+0x11e>
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	61bb      	str	r3, [r7, #24]
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1f8      	bne.n	800dd24 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd40:	78fb      	ldrb	r3, [r7, #3]
 800dd42:	f003 0302 	and.w	r3, r3, #2
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d104      	bne.n	800dd54 <tcp_enqueue_flags+0x148>
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	f003 0301 	and.w	r3, r3, #1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d004      	beq.n	800dd5e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd58:	1c5a      	adds	r2, r3, #1
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd5e:	78fb      	ldrb	r3, [r7, #3]
 800dd60:	f003 0301 	and.w	r3, r3, #1
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d006      	beq.n	800dd76 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	8b5b      	ldrh	r3, [r3, #26]
 800dd6c:	f043 0320 	orr.w	r3, r3, #32
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fa fd3e 	bl	80087fc <pbuf_clen>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd8a:	4413      	add	r3, r2
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00e      	beq.n	800ddbc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d10a      	bne.n	800ddbc <tcp_enqueue_flags+0x1b0>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d106      	bne.n	800ddbc <tcp_enqueue_flags+0x1b0>
 800ddae:	4b06      	ldr	r3, [pc, #24]	@ (800ddc8 <tcp_enqueue_flags+0x1bc>)
 800ddb0:	f240 4265 	movw	r2, #1125	@ 0x465
 800ddb4:	490b      	ldr	r1, [pc, #44]	@ (800dde4 <tcp_enqueue_flags+0x1d8>)
 800ddb6:	4806      	ldr	r0, [pc, #24]	@ (800ddd0 <tcp_enqueue_flags+0x1c4>)
 800ddb8:	f006 f808 	bl	8013dcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3720      	adds	r7, #32
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	08016714 	.word	0x08016714
 800ddcc:	08016b38 	.word	0x08016b38
 800ddd0:	08016768 	.word	0x08016768
 800ddd4:	08016b90 	.word	0x08016b90
 800ddd8:	08016bb0 	.word	0x08016bb0
 800dddc:	08016bec 	.word	0x08016bec
 800dde0:	08016c04 	.word	0x08016c04
 800dde4:	08016c30 	.word	0x08016c30

0800dde8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dde8:	b5b0      	push	{r4, r5, r7, lr}
 800ddea:	b08a      	sub	sp, #40	@ 0x28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <tcp_output+0x1c>
 800ddf6:	4b8a      	ldr	r3, [pc, #552]	@ (800e020 <tcp_output+0x238>)
 800ddf8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ddfc:	4989      	ldr	r1, [pc, #548]	@ (800e024 <tcp_output+0x23c>)
 800ddfe:	488a      	ldr	r0, [pc, #552]	@ (800e028 <tcp_output+0x240>)
 800de00:	f005 ffe4 	bl	8013dcc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7d1b      	ldrb	r3, [r3, #20]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d106      	bne.n	800de1a <tcp_output+0x32>
 800de0c:	4b84      	ldr	r3, [pc, #528]	@ (800e020 <tcp_output+0x238>)
 800de0e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800de12:	4986      	ldr	r1, [pc, #536]	@ (800e02c <tcp_output+0x244>)
 800de14:	4884      	ldr	r0, [pc, #528]	@ (800e028 <tcp_output+0x240>)
 800de16:	f005 ffd9 	bl	8013dcc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de1a:	4b85      	ldr	r3, [pc, #532]	@ (800e030 <tcp_output+0x248>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	429a      	cmp	r2, r3
 800de22:	d101      	bne.n	800de28 <tcp_output+0x40>
    return ERR_OK;
 800de24:	2300      	movs	r3, #0
 800de26:	e1ce      	b.n	800e1c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de34:	4293      	cmp	r3, r2
 800de36:	bf28      	it	cs
 800de38:	4613      	movcs	r3, r2
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800de44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	8b5b      	ldrh	r3, [r3, #26]
 800de4e:	f003 0302 	and.w	r3, r3, #2
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 81aa 	beq.w	800e1ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fdcb 	bl	800e9f4 <tcp_send_empty_ack>
 800de5e:	4603      	mov	r3, r0
 800de60:	e1b1      	b.n	800e1c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3304      	adds	r3, #4
 800de68:	461a      	mov	r2, r3
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff f826 	bl	800cebc <tcp_route>
 800de70:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d102      	bne.n	800de7e <tcp_output+0x96>
    return ERR_RTE;
 800de78:	f06f 0303 	mvn.w	r3, #3
 800de7c:	e1a3      	b.n	800e1c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d003      	beq.n	800de8c <tcp_output+0xa4>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d111      	bne.n	800deb0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d002      	beq.n	800de98 <tcp_output+0xb0>
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	3304      	adds	r3, #4
 800de96:	e000      	b.n	800de9a <tcp_output+0xb2>
 800de98:	2300      	movs	r3, #0
 800de9a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <tcp_output+0xc0>
      return ERR_RTE;
 800dea2:	f06f 0303 	mvn.w	r3, #3
 800dea6:	e18e      	b.n	800e1c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800deb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7f9 f85e 	bl	8006f78 <lwip_htonl>
 800debc:	4602      	mov	r2, r0
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dec6:	8912      	ldrh	r2, [r2, #8]
 800dec8:	4413      	add	r3, r2
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	429a      	cmp	r2, r3
 800dece:	d227      	bcs.n	800df20 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ded6:	461a      	mov	r2, r3
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	4293      	cmp	r3, r2
 800dedc:	d114      	bne.n	800df08 <tcp_output+0x120>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d110      	bne.n	800df08 <tcp_output+0x120>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800deec:	2b00      	cmp	r3, #0
 800deee:	d10b      	bne.n	800df08 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2201      	movs	r2, #1
 800defc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	8b5b      	ldrh	r3, [r3, #26]
 800df0c:	f003 0302 	and.w	r3, r3, #2
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 814d 	beq.w	800e1b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fd6c 	bl	800e9f4 <tcp_send_empty_ack>
 800df1c:	4603      	mov	r3, r0
 800df1e:	e152      	b.n	800e1c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df2e:	6a3b      	ldr	r3, [r7, #32]
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 811c 	beq.w	800e16e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800df36:	e002      	b.n	800df3e <tcp_output+0x156>
 800df38:	6a3b      	ldr	r3, [r7, #32]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	623b      	str	r3, [r7, #32]
 800df3e:	6a3b      	ldr	r3, [r7, #32]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1f8      	bne.n	800df38 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800df46:	e112      	b.n	800e16e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800df48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	899b      	ldrh	r3, [r3, #12]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	4618      	mov	r0, r3
 800df52:	f7f8 fffb 	bl	8006f4c <lwip_htons>
 800df56:	4603      	mov	r3, r0
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	f003 0304 	and.w	r3, r3, #4
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d006      	beq.n	800df70 <tcp_output+0x188>
 800df62:	4b2f      	ldr	r3, [pc, #188]	@ (800e020 <tcp_output+0x238>)
 800df64:	f240 5236 	movw	r2, #1334	@ 0x536
 800df68:	4932      	ldr	r1, [pc, #200]	@ (800e034 <tcp_output+0x24c>)
 800df6a:	482f      	ldr	r0, [pc, #188]	@ (800e028 <tcp_output+0x240>)
 800df6c:	f005 ff2e 	bl	8013dcc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01f      	beq.n	800dfb8 <tcp_output+0x1d0>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	8b5b      	ldrh	r3, [r3, #26]
 800df7c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800df80:	2b00      	cmp	r3, #0
 800df82:	d119      	bne.n	800dfb8 <tcp_output+0x1d0>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00b      	beq.n	800dfa4 <tcp_output+0x1bc>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d110      	bne.n	800dfb8 <tcp_output+0x1d0>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df9a:	891a      	ldrh	r2, [r3, #8]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d209      	bcs.n	800dfb8 <tcp_output+0x1d0>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d004      	beq.n	800dfb8 <tcp_output+0x1d0>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dfb4:	2b08      	cmp	r3, #8
 800dfb6:	d901      	bls.n	800dfbc <tcp_output+0x1d4>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e000      	b.n	800dfbe <tcp_output+0x1d6>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d106      	bne.n	800dfd0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	8b5b      	ldrh	r3, [r3, #26]
 800dfc6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 80e4 	beq.w	800e198 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d00d      	beq.n	800dff4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	899b      	ldrh	r3, [r3, #12]
 800dfde:	b29c      	uxth	r4, r3
 800dfe0:	2010      	movs	r0, #16
 800dfe2:	f7f8 ffb3 	bl	8006f4c <lwip_htons>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	461a      	mov	r2, r3
 800dfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	4322      	orrs	r2, r4
 800dff0:	b292      	uxth	r2, r2
 800dff2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dff4:	697a      	ldr	r2, [r7, #20]
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dffa:	f000 f909 	bl	800e210 <tcp_output_segment>
 800dffe:	4603      	mov	r3, r0
 800e000:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d016      	beq.n	800e038 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	8b5b      	ldrh	r3, [r3, #26]
 800e00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e012:	b29a      	uxth	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	835a      	strh	r2, [r3, #26]
      return err;
 800e018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e01c:	e0d3      	b.n	800e1c6 <tcp_output+0x3de>
 800e01e:	bf00      	nop
 800e020:	08016714 	.word	0x08016714
 800e024:	08016c58 	.word	0x08016c58
 800e028:	08016768 	.word	0x08016768
 800e02c:	08016c70 	.word	0x08016c70
 800e030:	20008628 	.word	0x20008628
 800e034:	08016c98 	.word	0x08016c98
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	2b02      	cmp	r3, #2
 800e046:	d006      	beq.n	800e056 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	8b5b      	ldrh	r3, [r3, #26]
 800e04c:	f023 0303 	bic.w	r3, r3, #3
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f8 ff8b 	bl	8006f78 <lwip_htonl>
 800e062:	4604      	mov	r4, r0
 800e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e066:	891b      	ldrh	r3, [r3, #8]
 800e068:	461d      	mov	r5, r3
 800e06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	899b      	ldrh	r3, [r3, #12]
 800e070:	b29b      	uxth	r3, r3
 800e072:	4618      	mov	r0, r3
 800e074:	f7f8 ff6a 	bl	8006f4c <lwip_htons>
 800e078:	4603      	mov	r3, r0
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <tcp_output+0x2a0>
 800e084:	2301      	movs	r3, #1
 800e086:	e000      	b.n	800e08a <tcp_output+0x2a2>
 800e088:	2300      	movs	r3, #0
 800e08a:	442b      	add	r3, r5
 800e08c:	4423      	add	r3, r4
 800e08e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	da02      	bge.n	800e0a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	891b      	ldrh	r3, [r3, #8]
 800e0a6:	461c      	mov	r4, r3
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	899b      	ldrh	r3, [r3, #12]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7f8 ff4b 	bl	8006f4c <lwip_htons>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <tcp_output+0x2de>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <tcp_output+0x2e0>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	4423      	add	r3, r4
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d049      	beq.n	800e162 <tcp_output+0x37a>
      seg->next = NULL;
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d105      	bne.n	800e0e8 <tcp_output+0x300>
        pcb->unacked = seg;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0e0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e4:	623b      	str	r3, [r7, #32]
 800e0e6:	e03f      	b.n	800e168 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f8 ff42 	bl	8006f78 <lwip_htonl>
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7f8 ff3b 	bl	8006f78 <lwip_htonl>
 800e102:	4603      	mov	r3, r0
 800e104:	1ae3      	subs	r3, r4, r3
 800e106:	2b00      	cmp	r3, #0
 800e108:	da24      	bge.n	800e154 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3370      	adds	r3, #112	@ 0x70
 800e10e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e110:	e002      	b.n	800e118 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e112:	69fb      	ldr	r3, [r7, #28]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d011      	beq.n	800e144 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f8 ff25 	bl	8006f78 <lwip_htonl>
 800e12e:	4604      	mov	r4, r0
 800e130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	4618      	mov	r0, r3
 800e138:	f7f8 ff1e 	bl	8006f78 <lwip_htonl>
 800e13c:	4603      	mov	r3, r0
 800e13e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e140:	2b00      	cmp	r3, #0
 800e142:	dbe6      	blt.n	800e112 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	e009      	b.n	800e168 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e158:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	623b      	str	r3, [r7, #32]
 800e160:	e002      	b.n	800e168 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e164:	f7fb ff01 	bl	8009f6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e16c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	d012      	beq.n	800e19a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f8 fefc 	bl	8006f78 <lwip_htonl>
 800e180:	4602      	mov	r2, r0
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e18a:	8912      	ldrh	r2, [r2, #8]
 800e18c:	4413      	add	r3, r2
  while (seg != NULL &&
 800e18e:	69ba      	ldr	r2, [r7, #24]
 800e190:	429a      	cmp	r2, r3
 800e192:	f4bf aed9 	bcs.w	800df48 <tcp_output+0x160>
 800e196:	e000      	b.n	800e19a <tcp_output+0x3b2>
      break;
 800e198:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d108      	bne.n	800e1b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e1aa:	e004      	b.n	800e1b6 <tcp_output+0x3ce>
    goto output_done;
 800e1ac:	bf00      	nop
 800e1ae:	e002      	b.n	800e1b6 <tcp_output+0x3ce>
    goto output_done;
 800e1b0:	bf00      	nop
 800e1b2:	e000      	b.n	800e1b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e1b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3728      	adds	r7, #40	@ 0x28
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ce:	bf00      	nop

0800e1d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <tcp_output_segment_busy+0x1c>
 800e1de:	4b09      	ldr	r3, [pc, #36]	@ (800e204 <tcp_output_segment_busy+0x34>)
 800e1e0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e1e4:	4908      	ldr	r1, [pc, #32]	@ (800e208 <tcp_output_segment_busy+0x38>)
 800e1e6:	4809      	ldr	r0, [pc, #36]	@ (800e20c <tcp_output_segment_busy+0x3c>)
 800e1e8:	f005 fdf0 	bl	8013dcc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	7b9b      	ldrb	r3, [r3, #14]
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d001      	beq.n	800e1fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e000      	b.n	800e1fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	08016714 	.word	0x08016714
 800e208:	08016cb0 	.word	0x08016cb0
 800e20c:	08016768 	.word	0x08016768

0800e210 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e210:	b5b0      	push	{r4, r5, r7, lr}
 800e212:	b08c      	sub	sp, #48	@ 0x30
 800e214:	af04      	add	r7, sp, #16
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <tcp_output_segment+0x20>
 800e222:	4b64      	ldr	r3, [pc, #400]	@ (800e3b4 <tcp_output_segment+0x1a4>)
 800e224:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e228:	4963      	ldr	r1, [pc, #396]	@ (800e3b8 <tcp_output_segment+0x1a8>)
 800e22a:	4864      	ldr	r0, [pc, #400]	@ (800e3bc <tcp_output_segment+0x1ac>)
 800e22c:	f005 fdce 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d106      	bne.n	800e244 <tcp_output_segment+0x34>
 800e236:	4b5f      	ldr	r3, [pc, #380]	@ (800e3b4 <tcp_output_segment+0x1a4>)
 800e238:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e23c:	4960      	ldr	r1, [pc, #384]	@ (800e3c0 <tcp_output_segment+0x1b0>)
 800e23e:	485f      	ldr	r0, [pc, #380]	@ (800e3bc <tcp_output_segment+0x1ac>)
 800e240:	f005 fdc4 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <tcp_output_segment+0x48>
 800e24a:	4b5a      	ldr	r3, [pc, #360]	@ (800e3b4 <tcp_output_segment+0x1a4>)
 800e24c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e250:	495c      	ldr	r1, [pc, #368]	@ (800e3c4 <tcp_output_segment+0x1b4>)
 800e252:	485a      	ldr	r0, [pc, #360]	@ (800e3bc <tcp_output_segment+0x1ac>)
 800e254:	f005 fdba 	bl	8013dcc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f7ff ffb9 	bl	800e1d0 <tcp_output_segment_busy>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d001      	beq.n	800e268 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	e0a1      	b.n	800e3ac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	68dc      	ldr	r4, [r3, #12]
 800e270:	4610      	mov	r0, r2
 800e272:	f7f8 fe81 	bl	8006f78 <lwip_htonl>
 800e276:	4603      	mov	r3, r0
 800e278:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68dc      	ldr	r4, [r3, #12]
 800e282:	4610      	mov	r0, r2
 800e284:	f7f8 fe62 	bl	8006f4c <lwip_htons>
 800e288:	4603      	mov	r3, r0
 800e28a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e290:	68ba      	ldr	r2, [r7, #8]
 800e292:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e294:	441a      	add	r2, r3
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	3314      	adds	r3, #20
 800e2a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	7a9b      	ldrb	r3, [r3, #10]
 800e2a6:	f003 0301 	and.w	r3, r3, #1
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d015      	beq.n	800e2da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	6879      	ldr	r1, [r7, #4]
 800e2b6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e2ba:	f7fc fa39 	bl	800a730 <tcp_eff_send_mss_netif>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2c2:	8b7b      	ldrh	r3, [r7, #26]
 800e2c4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7f8 fe55 	bl	8006f78 <lwip_htonl>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	da02      	bge.n	800e2ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10c      	bne.n	800e30c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e2f2:	4b35      	ldr	r3, [pc, #212]	@ (800e3c8 <tcp_output_segment+0x1b8>)
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	f7f8 fe39 	bl	8006f78 <lwip_htonl>
 800e306:	4602      	mov	r2, r0
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68da      	ldr	r2, [r3, #12]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	685b      	ldr	r3, [r3, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	8959      	ldrh	r1, [r3, #10]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	8b3a      	ldrh	r2, [r7, #24]
 800e326:	1a8a      	subs	r2, r1, r2
 800e328:	b292      	uxth	r2, r2
 800e32a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	8919      	ldrh	r1, [r3, #8]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	8b3a      	ldrh	r2, [r7, #24]
 800e338:	1a8a      	subs	r2, r1, r2
 800e33a:	b292      	uxth	r2, r2
 800e33c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	68fa      	ldr	r2, [r7, #12]
 800e344:	68d2      	ldr	r2, [r2, #12]
 800e346:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	2200      	movs	r2, #0
 800e34e:	741a      	strb	r2, [r3, #16]
 800e350:	2200      	movs	r2, #0
 800e352:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68da      	ldr	r2, [r3, #12]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	7a9b      	ldrb	r3, [r3, #10]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <tcp_output_segment+0x158>
 800e364:	2318      	movs	r3, #24
 800e366:	e000      	b.n	800e36a <tcp_output_segment+0x15a>
 800e368:	2314      	movs	r3, #20
 800e36a:	4413      	add	r3, r2
 800e36c:	69fa      	ldr	r2, [r7, #28]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d006      	beq.n	800e380 <tcp_output_segment+0x170>
 800e372:	4b10      	ldr	r3, [pc, #64]	@ (800e3b4 <tcp_output_segment+0x1a4>)
 800e374:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e378:	4914      	ldr	r1, [pc, #80]	@ (800e3cc <tcp_output_segment+0x1bc>)
 800e37a:	4810      	ldr	r0, [pc, #64]	@ (800e3bc <tcp_output_segment+0x1ac>)
 800e37c:	f005 fd26 	bl	8013dcc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6858      	ldr	r0, [r3, #4]
 800e384:	68b9      	ldr	r1, [r7, #8]
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	1d1c      	adds	r4, r3, #4
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	7add      	ldrb	r5, [r3, #11]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	7a9b      	ldrb	r3, [r3, #10]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	9202      	str	r2, [sp, #8]
 800e396:	2206      	movs	r2, #6
 800e398:	9201      	str	r2, [sp, #4]
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	462b      	mov	r3, r5
 800e39e:	4622      	mov	r2, r4
 800e3a0:	f004 fbe6 	bl	8012b70 <ip4_output_if>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e3a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3720      	adds	r7, #32
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b4:	08016714 	.word	0x08016714
 800e3b8:	08016cd8 	.word	0x08016cd8
 800e3bc:	08016768 	.word	0x08016768
 800e3c0:	08016cf8 	.word	0x08016cf8
 800e3c4:	08016d18 	.word	0x08016d18
 800e3c8:	200085dc 	.word	0x200085dc
 800e3cc:	08016d3c 	.word	0x08016d3c

0800e3d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e3d0:	b5b0      	push	{r4, r5, r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <tcp_rexmit_rto_prepare+0x1c>
 800e3de:	4b31      	ldr	r3, [pc, #196]	@ (800e4a4 <tcp_rexmit_rto_prepare+0xd4>)
 800e3e0:	f240 6263 	movw	r2, #1635	@ 0x663
 800e3e4:	4930      	ldr	r1, [pc, #192]	@ (800e4a8 <tcp_rexmit_rto_prepare+0xd8>)
 800e3e6:	4831      	ldr	r0, [pc, #196]	@ (800e4ac <tcp_rexmit_rto_prepare+0xdc>)
 800e3e8:	f005 fcf0 	bl	8013dcc <iprintf>

  if (pcb->unacked == NULL) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d102      	bne.n	800e3fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e3f4:	f06f 0305 	mvn.w	r3, #5
 800e3f8:	e050      	b.n	800e49c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	e00b      	b.n	800e41a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f7ff fee4 	bl	800e1d0 <tcp_output_segment_busy>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e40e:	f06f 0305 	mvn.w	r3, #5
 800e412:	e043      	b.n	800e49c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1ef      	bne.n	800e402 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e422:	68f8      	ldr	r0, [r7, #12]
 800e424:	f7ff fed4 	bl	800e1d0 <tcp_output_segment_busy>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d002      	beq.n	800e434 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e42e:	f06f 0305 	mvn.w	r3, #5
 800e432:	e033      	b.n	800e49c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8b5b      	ldrh	r3, [r3, #26]
 800e44e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e452:	b29a      	uxth	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f8 fd8a 	bl	8006f78 <lwip_htonl>
 800e464:	4604      	mov	r4, r0
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	891b      	ldrh	r3, [r3, #8]
 800e46a:	461d      	mov	r5, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	899b      	ldrh	r3, [r3, #12]
 800e472:	b29b      	uxth	r3, r3
 800e474:	4618      	mov	r0, r3
 800e476:	f7f8 fd69 	bl	8006f4c <lwip_htons>
 800e47a:	4603      	mov	r3, r0
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	f003 0303 	and.w	r3, r3, #3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <tcp_rexmit_rto_prepare+0xba>
 800e486:	2301      	movs	r3, #1
 800e488:	e000      	b.n	800e48c <tcp_rexmit_rto_prepare+0xbc>
 800e48a:	2300      	movs	r3, #0
 800e48c:	442b      	add	r3, r5
 800e48e:	18e2      	adds	r2, r4, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4a4:	08016714 	.word	0x08016714
 800e4a8:	08016d50 	.word	0x08016d50
 800e4ac:	08016768 	.word	0x08016768

0800e4b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <tcp_rexmit_rto_commit+0x1c>
 800e4be:	4b0d      	ldr	r3, [pc, #52]	@ (800e4f4 <tcp_rexmit_rto_commit+0x44>)
 800e4c0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e4c4:	490c      	ldr	r1, [pc, #48]	@ (800e4f8 <tcp_rexmit_rto_commit+0x48>)
 800e4c6:	480d      	ldr	r0, [pc, #52]	@ (800e4fc <tcp_rexmit_rto_commit+0x4c>)
 800e4c8:	f005 fc80 	bl	8013dcc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4d2:	2bff      	cmp	r3, #255	@ 0xff
 800e4d4:	d007      	beq.n	800e4e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4dc:	3301      	adds	r3, #1
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fc7e 	bl	800dde8 <tcp_output>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	08016714 	.word	0x08016714
 800e4f8:	08016d74 	.word	0x08016d74
 800e4fc:	08016768 	.word	0x08016768

0800e500 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d106      	bne.n	800e51c <tcp_rexmit_rto+0x1c>
 800e50e:	4b0a      	ldr	r3, [pc, #40]	@ (800e538 <tcp_rexmit_rto+0x38>)
 800e510:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e514:	4909      	ldr	r1, [pc, #36]	@ (800e53c <tcp_rexmit_rto+0x3c>)
 800e516:	480a      	ldr	r0, [pc, #40]	@ (800e540 <tcp_rexmit_rto+0x40>)
 800e518:	f005 fc58 	bl	8013dcc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7ff ff57 	bl	800e3d0 <tcp_rexmit_rto_prepare>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d102      	bne.n	800e52e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f7ff ffc1 	bl	800e4b0 <tcp_rexmit_rto_commit>
  }
}
 800e52e:	bf00      	nop
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	08016714 	.word	0x08016714
 800e53c:	08016d98 	.word	0x08016d98
 800e540:	08016768 	.word	0x08016768

0800e544 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d106      	bne.n	800e560 <tcp_rexmit+0x1c>
 800e552:	4b2f      	ldr	r3, [pc, #188]	@ (800e610 <tcp_rexmit+0xcc>)
 800e554:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e558:	492e      	ldr	r1, [pc, #184]	@ (800e614 <tcp_rexmit+0xd0>)
 800e55a:	482f      	ldr	r0, [pc, #188]	@ (800e618 <tcp_rexmit+0xd4>)
 800e55c:	f005 fc36 	bl	8013dcc <iprintf>

  if (pcb->unacked == NULL) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e568:	f06f 0305 	mvn.w	r3, #5
 800e56c:	e04c      	b.n	800e608 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e572:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e574:	68b8      	ldr	r0, [r7, #8]
 800e576:	f7ff fe2b 	bl	800e1d0 <tcp_output_segment_busy>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e580:	f06f 0305 	mvn.w	r3, #5
 800e584:	e040      	b.n	800e608 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	336c      	adds	r3, #108	@ 0x6c
 800e592:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e594:	e002      	b.n	800e59c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d011      	beq.n	800e5c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f8 fce3 	bl	8006f78 <lwip_htonl>
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7f8 fcdc 	bl	8006f78 <lwip_htonl>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	dbe6      	blt.n	800e596 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d103      	bne.n	800e5e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5ec:	2bff      	cmp	r3, #255	@ 0xff
 800e5ee:	d007      	beq.n	800e600 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd90      	pop	{r4, r7, pc}
 800e610:	08016714 	.word	0x08016714
 800e614:	08016db4 	.word	0x08016db4
 800e618:	08016768 	.word	0x08016768

0800e61c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d106      	bne.n	800e638 <tcp_rexmit_fast+0x1c>
 800e62a:	4b2a      	ldr	r3, [pc, #168]	@ (800e6d4 <tcp_rexmit_fast+0xb8>)
 800e62c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e630:	4929      	ldr	r1, [pc, #164]	@ (800e6d8 <tcp_rexmit_fast+0xbc>)
 800e632:	482a      	ldr	r0, [pc, #168]	@ (800e6dc <tcp_rexmit_fast+0xc0>)
 800e634:	f005 fbca 	bl	8013dcc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d045      	beq.n	800e6cc <tcp_rexmit_fast+0xb0>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	8b5b      	ldrh	r3, [r3, #26]
 800e644:	f003 0304 	and.w	r3, r3, #4
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d13f      	bne.n	800e6cc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff ff79 	bl	800e544 <tcp_rexmit>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d139      	bne.n	800e6cc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e664:	4293      	cmp	r3, r2
 800e666:	bf28      	it	cs
 800e668:	4613      	movcs	r3, r2
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	da00      	bge.n	800e672 <tcp_rexmit_fast+0x56>
 800e670:	3301      	adds	r3, #1
 800e672:	105b      	asrs	r3, r3, #1
 800e674:	b29a      	uxth	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e682:	461a      	mov	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e688:	005b      	lsls	r3, r3, #1
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d206      	bcs.n	800e69c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	0049      	lsls	r1, r1, #1
 800e6aa:	440b      	add	r3, r1
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	4413      	add	r3, r2
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	8b5b      	ldrh	r3, [r3, #26]
 800e6bc:	f043 0304 	orr.w	r3, r3, #4
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e6cc:	bf00      	nop
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	08016714 	.word	0x08016714
 800e6d8:	08016dcc 	.word	0x08016dcc
 800e6dc:	08016768 	.word	0x08016768

0800e6e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	607b      	str	r3, [r7, #4]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	817b      	strh	r3, [r7, #10]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e6f2:	897a      	ldrh	r2, [r7, #10]
 800e6f4:	893b      	ldrh	r3, [r7, #8]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	3314      	adds	r3, #20
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e702:	4619      	mov	r1, r3
 800e704:	2022      	movs	r0, #34	@ 0x22
 800e706:	f7f9 fd0d 	bl	8008124 <pbuf_alloc>
 800e70a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d04d      	beq.n	800e7ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e712:	897b      	ldrh	r3, [r7, #10]
 800e714:	3313      	adds	r3, #19
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	8952      	ldrh	r2, [r2, #10]
 800e71a:	4293      	cmp	r3, r2
 800e71c:	db06      	blt.n	800e72c <tcp_output_alloc_header_common+0x4c>
 800e71e:	4b26      	ldr	r3, [pc, #152]	@ (800e7b8 <tcp_output_alloc_header_common+0xd8>)
 800e720:	f240 7223 	movw	r2, #1827	@ 0x723
 800e724:	4925      	ldr	r1, [pc, #148]	@ (800e7bc <tcp_output_alloc_header_common+0xdc>)
 800e726:	4826      	ldr	r0, [pc, #152]	@ (800e7c0 <tcp_output_alloc_header_common+0xe0>)
 800e728:	f005 fb50 	bl	8013dcc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e732:	8c3b      	ldrh	r3, [r7, #32]
 800e734:	4618      	mov	r0, r3
 800e736:	f7f8 fc09 	bl	8006f4c <lwip_htons>
 800e73a:	4603      	mov	r3, r0
 800e73c:	461a      	mov	r2, r3
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e744:	4618      	mov	r0, r3
 800e746:	f7f8 fc01 	bl	8006f4c <lwip_htons>
 800e74a:	4603      	mov	r3, r0
 800e74c:	461a      	mov	r2, r3
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7f8 fc0d 	bl	8006f78 <lwip_htonl>
 800e75e:	4602      	mov	r2, r0
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e764:	897b      	ldrh	r3, [r7, #10]
 800e766:	089b      	lsrs	r3, r3, #2
 800e768:	b29b      	uxth	r3, r3
 800e76a:	3305      	adds	r3, #5
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	031b      	lsls	r3, r3, #12
 800e770:	b29a      	uxth	r2, r3
 800e772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e776:	b29b      	uxth	r3, r3
 800e778:	4313      	orrs	r3, r2
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7f8 fbe5 	bl	8006f4c <lwip_htons>
 800e782:	4603      	mov	r3, r0
 800e784:	461a      	mov	r2, r3
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e78a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f8 fbdd 	bl	8006f4c <lwip_htons>
 800e792:	4603      	mov	r3, r0
 800e794:	461a      	mov	r2, r3
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	2200      	movs	r2, #0
 800e79e:	741a      	strb	r2, [r3, #16]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	749a      	strb	r2, [r3, #18]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e7ae:	697b      	ldr	r3, [r7, #20]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	08016714 	.word	0x08016714
 800e7bc:	08016dec 	.word	0x08016dec
 800e7c0:	08016768 	.word	0x08016768

0800e7c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e7c4:	b5b0      	push	{r4, r5, r7, lr}
 800e7c6:	b08a      	sub	sp, #40	@ 0x28
 800e7c8:	af04      	add	r7, sp, #16
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	607b      	str	r3, [r7, #4]
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	817b      	strh	r3, [r7, #10]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d106      	bne.n	800e7ea <tcp_output_alloc_header+0x26>
 800e7dc:	4b15      	ldr	r3, [pc, #84]	@ (800e834 <tcp_output_alloc_header+0x70>)
 800e7de:	f240 7242 	movw	r2, #1858	@ 0x742
 800e7e2:	4915      	ldr	r1, [pc, #84]	@ (800e838 <tcp_output_alloc_header+0x74>)
 800e7e4:	4815      	ldr	r0, [pc, #84]	@ (800e83c <tcp_output_alloc_header+0x78>)
 800e7e6:	f005 faf1 	bl	8013dcc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	8adb      	ldrh	r3, [r3, #22]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	8b12      	ldrh	r2, [r2, #24]
 800e7f6:	68f9      	ldr	r1, [r7, #12]
 800e7f8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e7fa:	893d      	ldrh	r5, [r7, #8]
 800e7fc:	897c      	ldrh	r4, [r7, #10]
 800e7fe:	9103      	str	r1, [sp, #12]
 800e800:	2110      	movs	r1, #16
 800e802:	9102      	str	r1, [sp, #8]
 800e804:	9201      	str	r2, [sp, #4]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	462a      	mov	r2, r5
 800e80c:	4621      	mov	r1, r4
 800e80e:	f7ff ff67 	bl	800e6e0 <tcp_output_alloc_header_common>
 800e812:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d006      	beq.n	800e828 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e822:	441a      	add	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e828:	697b      	ldr	r3, [r7, #20]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3718      	adds	r7, #24
 800e82e:	46bd      	mov	sp, r7
 800e830:	bdb0      	pop	{r4, r5, r7, pc}
 800e832:	bf00      	nop
 800e834:	08016714 	.word	0x08016714
 800e838:	08016e1c 	.word	0x08016e1c
 800e83c:	08016768 	.word	0x08016768

0800e840 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	4611      	mov	r1, r2
 800e84c:	461a      	mov	r2, r3
 800e84e:	460b      	mov	r3, r1
 800e850:	71fb      	strb	r3, [r7, #7]
 800e852:	4613      	mov	r3, r2
 800e854:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d106      	bne.n	800e86e <tcp_output_fill_options+0x2e>
 800e860:	4b12      	ldr	r3, [pc, #72]	@ (800e8ac <tcp_output_fill_options+0x6c>)
 800e862:	f240 7256 	movw	r2, #1878	@ 0x756
 800e866:	4912      	ldr	r1, [pc, #72]	@ (800e8b0 <tcp_output_fill_options+0x70>)
 800e868:	4812      	ldr	r0, [pc, #72]	@ (800e8b4 <tcp_output_fill_options+0x74>)
 800e86a:	f005 faaf 	bl	8013dcc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	3314      	adds	r3, #20
 800e878:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e87a:	8bfb      	ldrh	r3, [r7, #30]
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	461a      	mov	r2, r3
 800e880:	79fb      	ldrb	r3, [r7, #7]
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	f003 0304 	and.w	r3, r3, #4
 800e888:	4413      	add	r3, r2
 800e88a:	3314      	adds	r3, #20
 800e88c:	69ba      	ldr	r2, [r7, #24]
 800e88e:	4413      	add	r3, r2
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	429a      	cmp	r2, r3
 800e894:	d006      	beq.n	800e8a4 <tcp_output_fill_options+0x64>
 800e896:	4b05      	ldr	r3, [pc, #20]	@ (800e8ac <tcp_output_fill_options+0x6c>)
 800e898:	f240 7275 	movw	r2, #1909	@ 0x775
 800e89c:	4906      	ldr	r1, [pc, #24]	@ (800e8b8 <tcp_output_fill_options+0x78>)
 800e89e:	4805      	ldr	r0, [pc, #20]	@ (800e8b4 <tcp_output_fill_options+0x74>)
 800e8a0:	f005 fa94 	bl	8013dcc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e8a4:	bf00      	nop
 800e8a6:	3720      	adds	r7, #32
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	08016714 	.word	0x08016714
 800e8b0:	08016e44 	.word	0x08016e44
 800e8b4:	08016768 	.word	0x08016768
 800e8b8:	08016d3c 	.word	0x08016d3c

0800e8bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08a      	sub	sp, #40	@ 0x28
 800e8c0:	af04      	add	r7, sp, #16
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <tcp_output_control_segment+0x22>
 800e8d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e944 <tcp_output_control_segment+0x88>)
 800e8d2:	f240 7287 	movw	r2, #1927	@ 0x787
 800e8d6:	491c      	ldr	r1, [pc, #112]	@ (800e948 <tcp_output_control_segment+0x8c>)
 800e8d8:	481c      	ldr	r0, [pc, #112]	@ (800e94c <tcp_output_control_segment+0x90>)
 800e8da:	f005 fa77 	bl	8013dcc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e8de:	683a      	ldr	r2, [r7, #0]
 800e8e0:	6879      	ldr	r1, [r7, #4]
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f7fe faea 	bl	800cebc <tcp_route>
 800e8e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e8f0:	23fc      	movs	r3, #252	@ 0xfc
 800e8f2:	75fb      	strb	r3, [r7, #23]
 800e8f4:	e01c      	b.n	800e930 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	7adb      	ldrb	r3, [r3, #11]
 800e900:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	7a9b      	ldrb	r3, [r3, #10]
 800e906:	757b      	strb	r3, [r7, #21]
 800e908:	e003      	b.n	800e912 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e90a:	23ff      	movs	r3, #255	@ 0xff
 800e90c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e912:	7dba      	ldrb	r2, [r7, #22]
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	9302      	str	r3, [sp, #8]
 800e918:	2306      	movs	r3, #6
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	7d7b      	ldrb	r3, [r7, #21]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	4613      	mov	r3, r2
 800e922:	683a      	ldr	r2, [r7, #0]
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	68b8      	ldr	r0, [r7, #8]
 800e928:	f004 f922 	bl	8012b70 <ip4_output_if>
 800e92c:	4603      	mov	r3, r0
 800e92e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e930:	68b8      	ldr	r0, [r7, #8]
 800e932:	f7f9 fedb 	bl	80086ec <pbuf_free>
  return err;
 800e936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3718      	adds	r7, #24
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	08016714 	.word	0x08016714
 800e948:	08016e6c 	.word	0x08016e6c
 800e94c:	08016768 	.word	0x08016768

0800e950 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e950:	b590      	push	{r4, r7, lr}
 800e952:	b08b      	sub	sp, #44	@ 0x2c
 800e954:	af04      	add	r7, sp, #16
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <tcp_rst+0x22>
 800e964:	4b1f      	ldr	r3, [pc, #124]	@ (800e9e4 <tcp_rst+0x94>)
 800e966:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e96a:	491f      	ldr	r1, [pc, #124]	@ (800e9e8 <tcp_rst+0x98>)
 800e96c:	481f      	ldr	r0, [pc, #124]	@ (800e9ec <tcp_rst+0x9c>)
 800e96e:	f005 fa2d 	bl	8013dcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e974:	2b00      	cmp	r3, #0
 800e976:	d106      	bne.n	800e986 <tcp_rst+0x36>
 800e978:	4b1a      	ldr	r3, [pc, #104]	@ (800e9e4 <tcp_rst+0x94>)
 800e97a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e97e:	491c      	ldr	r1, [pc, #112]	@ (800e9f0 <tcp_rst+0xa0>)
 800e980:	481a      	ldr	r0, [pc, #104]	@ (800e9ec <tcp_rst+0x9c>)
 800e982:	f005 fa23 	bl	8013dcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e986:	2300      	movs	r3, #0
 800e988:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e98a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e98e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e990:	7dfb      	ldrb	r3, [r7, #23]
 800e992:	b29c      	uxth	r4, r3
 800e994:	68b8      	ldr	r0, [r7, #8]
 800e996:	f7f8 faef 	bl	8006f78 <lwip_htonl>
 800e99a:	4602      	mov	r2, r0
 800e99c:	8abb      	ldrh	r3, [r7, #20]
 800e99e:	9303      	str	r3, [sp, #12]
 800e9a0:	2314      	movs	r3, #20
 800e9a2:	9302      	str	r3, [sp, #8]
 800e9a4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e9a6:	9301      	str	r3, [sp, #4]
 800e9a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7ff fe94 	bl	800e6e0 <tcp_output_alloc_header_common>
 800e9b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00c      	beq.n	800e9da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	6939      	ldr	r1, [r7, #16]
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff ff3a 	bl	800e840 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	6939      	ldr	r1, [r7, #16]
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7ff ff72 	bl	800e8bc <tcp_output_control_segment>
 800e9d8:	e000      	b.n	800e9dc <tcp_rst+0x8c>
    return;
 800e9da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd90      	pop	{r4, r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	08016714 	.word	0x08016714
 800e9e8:	08016e98 	.word	0x08016e98
 800e9ec:	08016768 	.word	0x08016768
 800e9f0:	08016eb4 	.word	0x08016eb4

0800e9f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e9f4:	b590      	push	{r4, r7, lr}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d106      	bne.n	800ea18 <tcp_send_empty_ack+0x24>
 800ea0a:	4b28      	ldr	r3, [pc, #160]	@ (800eaac <tcp_send_empty_ack+0xb8>)
 800ea0c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ea10:	4927      	ldr	r1, [pc, #156]	@ (800eab0 <tcp_send_empty_ack+0xbc>)
 800ea12:	4828      	ldr	r0, [pc, #160]	@ (800eab4 <tcp_send_empty_ack+0xc0>)
 800ea14:	f005 f9da 	bl	8013dcc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea18:	7dfb      	ldrb	r3, [r7, #23]
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	f003 0304 	and.w	r3, r3, #4
 800ea22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ea24:	7d7b      	ldrb	r3, [r7, #21]
 800ea26:	b29c      	uxth	r4, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7f8 faa3 	bl	8006f78 <lwip_htonl>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2200      	movs	r2, #0
 800ea36:	4621      	mov	r1, r4
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff fec3 	bl	800e7c4 <tcp_output_alloc_header>
 800ea3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d109      	bne.n	800ea5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	8b5b      	ldrh	r3, [r3, #26]
 800ea4a:	f043 0303 	orr.w	r3, r3, #3
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ea54:	f06f 0301 	mvn.w	r3, #1
 800ea58:	e023      	b.n	800eaa2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ea5a:	7dbb      	ldrb	r3, [r7, #22]
 800ea5c:	7dfa      	ldrb	r2, [r7, #23]
 800ea5e:	6939      	ldr	r1, [r7, #16]
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7ff feed 	bl	800e840 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	6939      	ldr	r1, [r7, #16]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7ff ff24 	bl	800e8bc <tcp_output_control_segment>
 800ea74:	4603      	mov	r3, r0
 800ea76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ea78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d007      	beq.n	800ea90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	8b5b      	ldrh	r3, [r3, #26]
 800ea84:	f043 0303 	orr.w	r3, r3, #3
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	835a      	strh	r2, [r3, #26]
 800ea8e:	e006      	b.n	800ea9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f023 0303 	bic.w	r3, r3, #3
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ea9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	371c      	adds	r7, #28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd90      	pop	{r4, r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	08016714 	.word	0x08016714
 800eab0:	08016ed0 	.word	0x08016ed0
 800eab4:	08016768 	.word	0x08016768

0800eab8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eab8:	b590      	push	{r4, r7, lr}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eac0:	2300      	movs	r3, #0
 800eac2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <tcp_keepalive+0x20>
 800eaca:	4b18      	ldr	r3, [pc, #96]	@ (800eb2c <tcp_keepalive+0x74>)
 800eacc:	f640 0224 	movw	r2, #2084	@ 0x824
 800ead0:	4917      	ldr	r1, [pc, #92]	@ (800eb30 <tcp_keepalive+0x78>)
 800ead2:	4818      	ldr	r0, [pc, #96]	@ (800eb34 <tcp_keepalive+0x7c>)
 800ead4:	f005 f97a 	bl	8013dcc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ead8:	7dfb      	ldrb	r3, [r7, #23]
 800eada:	b29c      	uxth	r4, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eae0:	3b01      	subs	r3, #1
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7f8 fa48 	bl	8006f78 <lwip_htonl>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2200      	movs	r2, #0
 800eaec:	4621      	mov	r1, r4
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff fe68 	bl	800e7c4 <tcp_output_alloc_header>
 800eaf4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb00:	e010      	b.n	800eb24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	2200      	movs	r2, #0
 800eb06:	6939      	ldr	r1, [r7, #16]
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7ff fe99 	bl	800e840 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3304      	adds	r3, #4
 800eb14:	6939      	ldr	r1, [r7, #16]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff fed0 	bl	800e8bc <tcp_output_control_segment>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	371c      	adds	r7, #28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd90      	pop	{r4, r7, pc}
 800eb2c:	08016714 	.word	0x08016714
 800eb30:	08016ef0 	.word	0x08016ef0
 800eb34:	08016768 	.word	0x08016768

0800eb38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b08b      	sub	sp, #44	@ 0x2c
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb40:	2300      	movs	r3, #0
 800eb42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d106      	bne.n	800eb5a <tcp_zero_window_probe+0x22>
 800eb4c:	4b4c      	ldr	r3, [pc, #304]	@ (800ec80 <tcp_zero_window_probe+0x148>)
 800eb4e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800eb52:	494c      	ldr	r1, [pc, #304]	@ (800ec84 <tcp_zero_window_probe+0x14c>)
 800eb54:	484c      	ldr	r0, [pc, #304]	@ (800ec88 <tcp_zero_window_probe+0x150>)
 800eb56:	f005 f939 	bl	8013dcc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e086      	b.n	800ec78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800eb70:	2bff      	cmp	r3, #255	@ 0xff
 800eb72:	d007      	beq.n	800eb84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800eb84:	6a3b      	ldr	r3, [r7, #32]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	899b      	ldrh	r3, [r3, #12]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7f8 f9dd 	bl	8006f4c <lwip_htons>
 800eb92:	4603      	mov	r3, r0
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d005      	beq.n	800ebaa <tcp_zero_window_probe+0x72>
 800eb9e:	6a3b      	ldr	r3, [r7, #32]
 800eba0:	891b      	ldrh	r3, [r3, #8]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <tcp_zero_window_probe+0x72>
 800eba6:	2301      	movs	r3, #1
 800eba8:	e000      	b.n	800ebac <tcp_zero_window_probe+0x74>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ebae:	7ffb      	ldrb	r3, [r7, #31]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf0c      	ite	eq
 800ebb4:	2301      	moveq	r3, #1
 800ebb6:	2300      	movne	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ebbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebc0:	b299      	uxth	r1, r3
 800ebc2:	6a3b      	ldr	r3, [r7, #32]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	8bba      	ldrh	r2, [r7, #28]
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7ff fdfa 	bl	800e7c4 <tcp_output_alloc_header>
 800ebd0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d102      	bne.n	800ebde <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ebd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ebdc:	e04c      	b.n	800ec78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ebe4:	7ffb      	ldrb	r3, [r7, #31]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d011      	beq.n	800ec0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	899b      	ldrh	r3, [r3, #12]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	b21b      	sxth	r3, r3
 800ebf2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ebf6:	b21c      	sxth	r4, r3
 800ebf8:	2011      	movs	r0, #17
 800ebfa:	f7f8 f9a7 	bl	8006f4c <lwip_htons>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	b21b      	sxth	r3, r3
 800ec02:	4323      	orrs	r3, r4
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	819a      	strh	r2, [r3, #12]
 800ec0c:	e010      	b.n	800ec30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	3314      	adds	r3, #20
 800ec14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	6858      	ldr	r0, [r3, #4]
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	891a      	ldrh	r2, [r3, #8]
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	891b      	ldrh	r3, [r3, #8]
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	2201      	movs	r2, #1
 800ec2a:	6939      	ldr	r1, [r7, #16]
 800ec2c:	f7f9 ff58 	bl	8008ae0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	685b      	ldr	r3, [r3, #4]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7f8 f99e 	bl	8006f78 <lwip_htonl>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	3301      	adds	r3, #1
 800ec40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	da02      	bge.n	800ec54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec58:	2200      	movs	r2, #0
 800ec5a:	69b9      	ldr	r1, [r7, #24]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fdef 	bl	800e840 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3304      	adds	r3, #4
 800ec68:	69b9      	ldr	r1, [r7, #24]
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff fe26 	bl	800e8bc <tcp_output_control_segment>
 800ec70:	4603      	mov	r3, r0
 800ec72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ec74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	372c      	adds	r7, #44	@ 0x2c
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd90      	pop	{r4, r7, pc}
 800ec80:	08016714 	.word	0x08016714
 800ec84:	08016f0c 	.word	0x08016f0c
 800ec88:	08016768 	.word	0x08016768

0800ec8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ec94:	f7fa f812 	bl	8008cbc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ec98:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <tcpip_tcp_timer+0x38>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d103      	bne.n	800eca8 <tcpip_tcp_timer+0x1c>
 800eca0:	4b09      	ldr	r3, [pc, #36]	@ (800ecc8 <tcpip_tcp_timer+0x3c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d005      	beq.n	800ecb4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4908      	ldr	r1, [pc, #32]	@ (800eccc <tcpip_tcp_timer+0x40>)
 800ecac:	20fa      	movs	r0, #250	@ 0xfa
 800ecae:	f000 f8f3 	bl	800ee98 <sys_timeout>
 800ecb2:	e003      	b.n	800ecbc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ecb4:	4b06      	ldr	r3, [pc, #24]	@ (800ecd0 <tcpip_tcp_timer+0x44>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	601a      	str	r2, [r3, #0]
  }
}
 800ecba:	bf00      	nop
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	200085e8 	.word	0x200085e8
 800ecc8:	200085ec 	.word	0x200085ec
 800eccc:	0800ec8d 	.word	0x0800ec8d
 800ecd0:	20008634 	.word	0x20008634

0800ecd4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed04 <tcp_timer_needed+0x30>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10f      	bne.n	800ed00 <tcp_timer_needed+0x2c>
 800ece0:	4b09      	ldr	r3, [pc, #36]	@ (800ed08 <tcp_timer_needed+0x34>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d103      	bne.n	800ecf0 <tcp_timer_needed+0x1c>
 800ece8:	4b08      	ldr	r3, [pc, #32]	@ (800ed0c <tcp_timer_needed+0x38>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d007      	beq.n	800ed00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ecf0:	4b04      	ldr	r3, [pc, #16]	@ (800ed04 <tcp_timer_needed+0x30>)
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4905      	ldr	r1, [pc, #20]	@ (800ed10 <tcp_timer_needed+0x3c>)
 800ecfa:	20fa      	movs	r0, #250	@ 0xfa
 800ecfc:	f000 f8cc 	bl	800ee98 <sys_timeout>
  }
}
 800ed00:	bf00      	nop
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	20008634 	.word	0x20008634
 800ed08:	200085e8 	.word	0x200085e8
 800ed0c:	200085ec 	.word	0x200085ec
 800ed10:	0800ec8d 	.word	0x0800ec8d

0800ed14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ed20:	2006      	movs	r0, #6
 800ed22:	f7f8 fdf1 	bl	8007908 <memp_malloc>
 800ed26:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d109      	bne.n	800ed42 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d151      	bne.n	800edd8 <sys_timeout_abs+0xc4>
 800ed34:	4b2a      	ldr	r3, [pc, #168]	@ (800ede0 <sys_timeout_abs+0xcc>)
 800ed36:	22be      	movs	r2, #190	@ 0xbe
 800ed38:	492a      	ldr	r1, [pc, #168]	@ (800ede4 <sys_timeout_abs+0xd0>)
 800ed3a:	482b      	ldr	r0, [pc, #172]	@ (800ede8 <sys_timeout_abs+0xd4>)
 800ed3c:	f005 f846 	bl	8013dcc <iprintf>
    return;
 800ed40:	e04a      	b.n	800edd8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ed5a:	4b24      	ldr	r3, [pc, #144]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d103      	bne.n	800ed6a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ed62:	4a22      	ldr	r2, [pc, #136]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	6013      	str	r3, [r2, #0]
    return;
 800ed68:	e037      	b.n	800edda <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	4b1f      	ldr	r3, [pc, #124]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	0fdb      	lsrs	r3, r3, #31
 800ed78:	f003 0301 	and.w	r3, r3, #1
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d007      	beq.n	800ed92 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ed82:	4b1a      	ldr	r3, [pc, #104]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ed8a:	4a18      	ldr	r2, [pc, #96]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	6013      	str	r3, [r2, #0]
 800ed90:	e023      	b.n	800edda <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ed92:	4b16      	ldr	r3, [pc, #88]	@ (800edec <sys_timeout_abs+0xd8>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	e01a      	b.n	800edd0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00b      	beq.n	800edba <sys_timeout_abs+0xa6>
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	685a      	ldr	r2, [r3, #4]
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	0fdb      	lsrs	r3, r3, #31
 800edb0:	f003 0301 	and.w	r3, r3, #1
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d007      	beq.n	800edca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	601a      	str	r2, [r3, #0]
        break;
 800edc8:	e007      	b.n	800edda <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	617b      	str	r3, [r7, #20]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1e1      	bne.n	800ed9a <sys_timeout_abs+0x86>
 800edd6:	e000      	b.n	800edda <sys_timeout_abs+0xc6>
    return;
 800edd8:	bf00      	nop
      }
    }
  }
}
 800edda:	3718      	adds	r7, #24
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	08016f30 	.word	0x08016f30
 800ede4:	08016f64 	.word	0x08016f64
 800ede8:	08016fa4 	.word	0x08016fa4
 800edec:	2000862c 	.word	0x2000862c

0800edf0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	4798      	blx	r3

  now = sys_now();
 800ee02:	f7f6 faff 	bl	8005404 <sys_now>
 800ee06:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ee4c <lwip_cyclic_timer+0x5c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4413      	add	r3, r2
 800ee12:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	0fdb      	lsrs	r3, r3, #31
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d009      	beq.n	800ee3a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	4907      	ldr	r1, [pc, #28]	@ (800ee50 <lwip_cyclic_timer+0x60>)
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff ff6e 	bl	800ed14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ee38:	e004      	b.n	800ee44 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	4904      	ldr	r1, [pc, #16]	@ (800ee50 <lwip_cyclic_timer+0x60>)
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f7ff ff68 	bl	800ed14 <sys_timeout_abs>
}
 800ee44:	bf00      	nop
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	20008630 	.word	0x20008630
 800ee50:	0800edf1 	.word	0x0800edf1

0800ee54 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	607b      	str	r3, [r7, #4]
 800ee5e:	e00e      	b.n	800ee7e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ee60:	4a0b      	ldr	r2, [pc, #44]	@ (800ee90 <sys_timeouts_init+0x3c>)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	00db      	lsls	r3, r3, #3
 800ee6c:	4a08      	ldr	r2, [pc, #32]	@ (800ee90 <sys_timeouts_init+0x3c>)
 800ee6e:	4413      	add	r3, r2
 800ee70:	461a      	mov	r2, r3
 800ee72:	4908      	ldr	r1, [pc, #32]	@ (800ee94 <sys_timeouts_init+0x40>)
 800ee74:	f000 f810 	bl	800ee98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	607b      	str	r3, [r7, #4]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2b04      	cmp	r3, #4
 800ee82:	d9ed      	bls.n	800ee60 <sys_timeouts_init+0xc>
  }
}
 800ee84:	bf00      	nop
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	080181dc 	.word	0x080181dc
 800ee94:	0800edf1 	.word	0x0800edf1

0800ee98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeaa:	d306      	bcc.n	800eeba <sys_timeout+0x22>
 800eeac:	4b0a      	ldr	r3, [pc, #40]	@ (800eed8 <sys_timeout+0x40>)
 800eeae:	f240 1229 	movw	r2, #297	@ 0x129
 800eeb2:	490a      	ldr	r1, [pc, #40]	@ (800eedc <sys_timeout+0x44>)
 800eeb4:	480a      	ldr	r0, [pc, #40]	@ (800eee0 <sys_timeout+0x48>)
 800eeb6:	f004 ff89 	bl	8013dcc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eeba:	f7f6 faa3 	bl	8005404 <sys_now>
 800eebe:	4602      	mov	r2, r0
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4413      	add	r3, r2
 800eec4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	68b9      	ldr	r1, [r7, #8]
 800eeca:	6978      	ldr	r0, [r7, #20]
 800eecc:	f7ff ff22 	bl	800ed14 <sys_timeout_abs>
#endif
}
 800eed0:	bf00      	nop
 800eed2:	3718      	adds	r7, #24
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	08016f30 	.word	0x08016f30
 800eedc:	08016fcc 	.word	0x08016fcc
 800eee0:	08016fa4 	.word	0x08016fa4

0800eee4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eeea:	f7f6 fa8b 	bl	8005404 <sys_now>
 800eeee:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800eef0:	4b1a      	ldr	r3, [pc, #104]	@ (800ef5c <sys_check_timeouts+0x78>)
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d001      	beq.n	800eefe <sys_check_timeouts+0x1a>
 800eefa:	f7f9 f8bd 	bl	8008078 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800eefe:	4b18      	ldr	r3, [pc, #96]	@ (800ef60 <sys_check_timeouts+0x7c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d022      	beq.n	800ef50 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	0fdb      	lsrs	r3, r3, #31
 800ef14:	f003 0301 	and.w	r3, r3, #1
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d11a      	bne.n	800ef54 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a0f      	ldr	r2, [pc, #60]	@ (800ef60 <sys_check_timeouts+0x7c>)
 800ef24:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	4a0b      	ldr	r2, [pc, #44]	@ (800ef64 <sys_check_timeouts+0x80>)
 800ef38:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	2006      	movs	r0, #6
 800ef3e:	f7f8 fd53 	bl	80079e8 <memp_free>
    if (handler != NULL) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0d3      	beq.n	800eef0 <sys_check_timeouts+0xc>
      handler(arg);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6838      	ldr	r0, [r7, #0]
 800ef4c:	4798      	blx	r3
  do {
 800ef4e:	e7cf      	b.n	800eef0 <sys_check_timeouts+0xc>
      return;
 800ef50:	bf00      	nop
 800ef52:	e000      	b.n	800ef56 <sys_check_timeouts+0x72>
      return;
 800ef54:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	200085d9 	.word	0x200085d9
 800ef60:	2000862c 	.word	0x2000862c
 800ef64:	20008630 	.word	0x20008630

0800ef68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ef6c:	f004 fe2e 	bl	8013bcc <rand>
 800ef70:	4603      	mov	r3, r0
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	4b01      	ldr	r3, [pc, #4]	@ (800ef88 <udp_init+0x20>)
 800ef82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ef84:	bf00      	nop
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	20000030 	.word	0x20000030

0800ef8c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ef96:	4b17      	ldr	r3, [pc, #92]	@ (800eff4 <udp_new_port+0x68>)
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	b291      	uxth	r1, r2
 800ef9e:	4a15      	ldr	r2, [pc, #84]	@ (800eff4 <udp_new_port+0x68>)
 800efa0:	8011      	strh	r1, [r2, #0]
 800efa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d103      	bne.n	800efb2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800efaa:	4b12      	ldr	r3, [pc, #72]	@ (800eff4 <udp_new_port+0x68>)
 800efac:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800efb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb2:	4b11      	ldr	r3, [pc, #68]	@ (800eff8 <udp_new_port+0x6c>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	603b      	str	r3, [r7, #0]
 800efb8:	e011      	b.n	800efde <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	8a5a      	ldrh	r2, [r3, #18]
 800efbe:	4b0d      	ldr	r3, [pc, #52]	@ (800eff4 <udp_new_port+0x68>)
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d108      	bne.n	800efd8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800efc6:	88fb      	ldrh	r3, [r7, #6]
 800efc8:	3301      	adds	r3, #1
 800efca:	80fb      	strh	r3, [r7, #6]
 800efcc:	88fb      	ldrh	r3, [r7, #6]
 800efce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800efd2:	d3e0      	bcc.n	800ef96 <udp_new_port+0xa>
        return 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e007      	b.n	800efe8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	603b      	str	r3, [r7, #0]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1ea      	bne.n	800efba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800efe4:	4b03      	ldr	r3, [pc, #12]	@ (800eff4 <udp_new_port+0x68>)
 800efe6:	881b      	ldrh	r3, [r3, #0]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	20000030 	.word	0x20000030
 800eff8:	20008638 	.word	0x20008638

0800effc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	4613      	mov	r3, r2
 800f008:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d105      	bne.n	800f01c <udp_input_local_match+0x20>
 800f010:	4b27      	ldr	r3, [pc, #156]	@ (800f0b0 <udp_input_local_match+0xb4>)
 800f012:	2287      	movs	r2, #135	@ 0x87
 800f014:	4927      	ldr	r1, [pc, #156]	@ (800f0b4 <udp_input_local_match+0xb8>)
 800f016:	4828      	ldr	r0, [pc, #160]	@ (800f0b8 <udp_input_local_match+0xbc>)
 800f018:	f004 fed8 	bl	8013dcc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d105      	bne.n	800f02e <udp_input_local_match+0x32>
 800f022:	4b23      	ldr	r3, [pc, #140]	@ (800f0b0 <udp_input_local_match+0xb4>)
 800f024:	2288      	movs	r2, #136	@ 0x88
 800f026:	4925      	ldr	r1, [pc, #148]	@ (800f0bc <udp_input_local_match+0xc0>)
 800f028:	4823      	ldr	r0, [pc, #140]	@ (800f0b8 <udp_input_local_match+0xbc>)
 800f02a:	f004 fecf 	bl	8013dcc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	7a1b      	ldrb	r3, [r3, #8]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00b      	beq.n	800f04e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	7a1a      	ldrb	r2, [r3, #8]
 800f03a:	4b21      	ldr	r3, [pc, #132]	@ (800f0c0 <udp_input_local_match+0xc4>)
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f042:	3301      	adds	r3, #1
 800f044:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f046:	429a      	cmp	r2, r3
 800f048:	d001      	beq.n	800f04e <udp_input_local_match+0x52>
    return 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	e02b      	b.n	800f0a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f04e:	79fb      	ldrb	r3, [r7, #7]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d018      	beq.n	800f086 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d013      	beq.n	800f082 <udp_input_local_match+0x86>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d00f      	beq.n	800f082 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f062:	4b17      	ldr	r3, [pc, #92]	@ (800f0c0 <udp_input_local_match+0xc4>)
 800f064:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f06a:	d00a      	beq.n	800f082 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	4b13      	ldr	r3, [pc, #76]	@ (800f0c0 <udp_input_local_match+0xc4>)
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	405a      	eors	r2, r3
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	3308      	adds	r3, #8
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d110      	bne.n	800f0a4 <udp_input_local_match+0xa8>
          return 1;
 800f082:	2301      	movs	r3, #1
 800f084:	e00f      	b.n	800f0a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d009      	beq.n	800f0a0 <udp_input_local_match+0xa4>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d005      	beq.n	800f0a0 <udp_input_local_match+0xa4>
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	4b09      	ldr	r3, [pc, #36]	@ (800f0c0 <udp_input_local_match+0xc4>)
 800f09a:	695b      	ldr	r3, [r3, #20]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d101      	bne.n	800f0a4 <udp_input_local_match+0xa8>
        return 1;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e000      	b.n	800f0a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3710      	adds	r7, #16
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	08017018 	.word	0x08017018
 800f0b4:	08017048 	.word	0x08017048
 800f0b8:	0801706c 	.word	0x0801706c
 800f0bc:	08017094 	.word	0x08017094
 800f0c0:	200056a0 	.word	0x200056a0

0800f0c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f0c4:	b590      	push	{r4, r7, lr}
 800f0c6:	b08d      	sub	sp, #52	@ 0x34
 800f0c8:	af02      	add	r7, sp, #8
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d105      	bne.n	800f0e4 <udp_input+0x20>
 800f0d8:	4b7c      	ldr	r3, [pc, #496]	@ (800f2cc <udp_input+0x208>)
 800f0da:	22cf      	movs	r2, #207	@ 0xcf
 800f0dc:	497c      	ldr	r1, [pc, #496]	@ (800f2d0 <udp_input+0x20c>)
 800f0de:	487d      	ldr	r0, [pc, #500]	@ (800f2d4 <udp_input+0x210>)
 800f0e0:	f004 fe74 	bl	8013dcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d105      	bne.n	800f0f6 <udp_input+0x32>
 800f0ea:	4b78      	ldr	r3, [pc, #480]	@ (800f2cc <udp_input+0x208>)
 800f0ec:	22d0      	movs	r2, #208	@ 0xd0
 800f0ee:	497a      	ldr	r1, [pc, #488]	@ (800f2d8 <udp_input+0x214>)
 800f0f0:	4878      	ldr	r0, [pc, #480]	@ (800f2d4 <udp_input+0x210>)
 800f0f2:	f004 fe6b 	bl	8013dcc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	895b      	ldrh	r3, [r3, #10]
 800f0fa:	2b07      	cmp	r3, #7
 800f0fc:	d803      	bhi.n	800f106 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7f9 faf4 	bl	80086ec <pbuf_free>
    goto end;
 800f104:	e0de      	b.n	800f2c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f10c:	4b73      	ldr	r3, [pc, #460]	@ (800f2dc <udp_input+0x218>)
 800f10e:	695b      	ldr	r3, [r3, #20]
 800f110:	4a72      	ldr	r2, [pc, #456]	@ (800f2dc <udp_input+0x218>)
 800f112:	6812      	ldr	r2, [r2, #0]
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f003 fe02 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 800f11c:	4603      	mov	r3, r0
 800f11e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b29b      	uxth	r3, r3
 800f126:	4618      	mov	r0, r3
 800f128:	f7f7 ff10 	bl	8006f4c <lwip_htons>
 800f12c:	4603      	mov	r3, r0
 800f12e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	885b      	ldrh	r3, [r3, #2]
 800f134:	b29b      	uxth	r3, r3
 800f136:	4618      	mov	r0, r3
 800f138:	f7f7 ff08 	bl	8006f4c <lwip_htons>
 800f13c:	4603      	mov	r3, r0
 800f13e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f140:	2300      	movs	r3, #0
 800f142:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f148:	2300      	movs	r3, #0
 800f14a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f14c:	4b64      	ldr	r3, [pc, #400]	@ (800f2e0 <udp_input+0x21c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	627b      	str	r3, [r7, #36]	@ 0x24
 800f152:	e054      	b.n	800f1fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	8a5b      	ldrh	r3, [r3, #18]
 800f158:	89fa      	ldrh	r2, [r7, #14]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d14a      	bne.n	800f1f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f15e:	7cfb      	ldrb	r3, [r7, #19]
 800f160:	461a      	mov	r2, r3
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f166:	f7ff ff49 	bl	800effc <udp_input_local_match>
 800f16a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d041      	beq.n	800f1f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f172:	7c1b      	ldrb	r3, [r3, #16]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d11d      	bne.n	800f1b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d102      	bne.n	800f188 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f184:	61fb      	str	r3, [r7, #28]
 800f186:	e017      	b.n	800f1b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f188:	7cfb      	ldrb	r3, [r7, #19]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d014      	beq.n	800f1b8 <udp_input+0xf4>
 800f18e:	4b53      	ldr	r3, [pc, #332]	@ (800f2dc <udp_input+0x218>)
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f196:	d10f      	bne.n	800f1b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	3304      	adds	r3, #4
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d008      	beq.n	800f1b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d101      	bne.n	800f1b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ba:	8a9b      	ldrh	r3, [r3, #20]
 800f1bc:	8a3a      	ldrh	r2, [r7, #16]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d118      	bne.n	800f1f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d005      	beq.n	800f1d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	4b43      	ldr	r3, [pc, #268]	@ (800f2dc <udp_input+0x218>)
 800f1d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d10e      	bne.n	800f1f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f1d6:	6a3b      	ldr	r3, [r7, #32]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d014      	beq.n	800f206 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1de:	68da      	ldr	r2, [r3, #12]
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f1e4:	4b3e      	ldr	r3, [pc, #248]	@ (800f2e0 <udp_input+0x21c>)
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f1ec:	4a3c      	ldr	r2, [pc, #240]	@ (800f2e0 <udp_input+0x21c>)
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f1f2:	e008      	b.n	800f206 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1a7      	bne.n	800f154 <udp_input+0x90>
 800f204:	e000      	b.n	800f208 <udp_input+0x144>
        break;
 800f206:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f20e:	69fb      	ldr	r3, [r7, #28]
 800f210:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	d002      	beq.n	800f21e <udp_input+0x15a>
    for_us = 1;
 800f218:	2301      	movs	r3, #1
 800f21a:	76fb      	strb	r3, [r7, #27]
 800f21c:	e00a      	b.n	800f234 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	3304      	adds	r3, #4
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	4b2d      	ldr	r3, [pc, #180]	@ (800f2dc <udp_input+0x218>)
 800f226:	695b      	ldr	r3, [r3, #20]
 800f228:	429a      	cmp	r2, r3
 800f22a:	bf0c      	ite	eq
 800f22c:	2301      	moveq	r3, #1
 800f22e:	2300      	movne	r3, #0
 800f230:	b2db      	uxtb	r3, r3
 800f232:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f234:	7efb      	ldrb	r3, [r7, #27]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d041      	beq.n	800f2be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f23a:	2108      	movs	r1, #8
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7f9 f9cf 	bl	80085e0 <pbuf_remove_header>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f248:	4b20      	ldr	r3, [pc, #128]	@ (800f2cc <udp_input+0x208>)
 800f24a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f24e:	4925      	ldr	r1, [pc, #148]	@ (800f2e4 <udp_input+0x220>)
 800f250:	4820      	ldr	r0, [pc, #128]	@ (800f2d4 <udp_input+0x210>)
 800f252:	f004 fdbb 	bl	8013dcc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7f9 fa48 	bl	80086ec <pbuf_free>
      goto end;
 800f25c:	e032      	b.n	800f2c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f260:	2b00      	cmp	r3, #0
 800f262:	d012      	beq.n	800f28a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00a      	beq.n	800f282 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26e:	699c      	ldr	r4, [r3, #24]
 800f270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f272:	69d8      	ldr	r0, [r3, #28]
 800f274:	8a3b      	ldrh	r3, [r7, #16]
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	4b1b      	ldr	r3, [pc, #108]	@ (800f2e8 <udp_input+0x224>)
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f27e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f280:	e021      	b.n	800f2c6 <udp_input+0x202>
        pbuf_free(p);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f9 fa32 	bl	80086ec <pbuf_free>
        goto end;
 800f288:	e01c      	b.n	800f2c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f28a:	7cfb      	ldrb	r3, [r7, #19]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d112      	bne.n	800f2b6 <udp_input+0x1f2>
 800f290:	4b12      	ldr	r3, [pc, #72]	@ (800f2dc <udp_input+0x218>)
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f298:	2be0      	cmp	r3, #224	@ 0xe0
 800f29a:	d00c      	beq.n	800f2b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f29c:	4b0f      	ldr	r3, [pc, #60]	@ (800f2dc <udp_input+0x218>)
 800f29e:	899b      	ldrh	r3, [r3, #12]
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	b21b      	sxth	r3, r3
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7f9 fa0c 	bl	80086c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f2ae:	2103      	movs	r1, #3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f003 f9f7 	bl	80126a4 <icmp_dest_unreach>
      pbuf_free(p);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7f9 fa18 	bl	80086ec <pbuf_free>
  return;
 800f2bc:	e003      	b.n	800f2c6 <udp_input+0x202>
    pbuf_free(p);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7f9 fa14 	bl	80086ec <pbuf_free>
  return;
 800f2c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f2c6:	372c      	adds	r7, #44	@ 0x2c
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd90      	pop	{r4, r7, pc}
 800f2cc:	08017018 	.word	0x08017018
 800f2d0:	080170bc 	.word	0x080170bc
 800f2d4:	0801706c 	.word	0x0801706c
 800f2d8:	080170d4 	.word	0x080170d4
 800f2dc:	200056a0 	.word	0x200056a0
 800f2e0:	20008638 	.word	0x20008638
 800f2e4:	080170f0 	.word	0x080170f0
 800f2e8:	200056b0 	.word	0x200056b0

0800f2ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af02      	add	r7, sp, #8
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]
 800f2f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d109      	bne.n	800f314 <udp_sendto_if+0x28>
 800f300:	4b2e      	ldr	r3, [pc, #184]	@ (800f3bc <udp_sendto_if+0xd0>)
 800f302:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f306:	492e      	ldr	r1, [pc, #184]	@ (800f3c0 <udp_sendto_if+0xd4>)
 800f308:	482e      	ldr	r0, [pc, #184]	@ (800f3c4 <udp_sendto_if+0xd8>)
 800f30a:	f004 fd5f 	bl	8013dcc <iprintf>
 800f30e:	f06f 030f 	mvn.w	r3, #15
 800f312:	e04f      	b.n	800f3b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d109      	bne.n	800f32e <udp_sendto_if+0x42>
 800f31a:	4b28      	ldr	r3, [pc, #160]	@ (800f3bc <udp_sendto_if+0xd0>)
 800f31c:	f240 2281 	movw	r2, #641	@ 0x281
 800f320:	4929      	ldr	r1, [pc, #164]	@ (800f3c8 <udp_sendto_if+0xdc>)
 800f322:	4828      	ldr	r0, [pc, #160]	@ (800f3c4 <udp_sendto_if+0xd8>)
 800f324:	f004 fd52 	bl	8013dcc <iprintf>
 800f328:	f06f 030f 	mvn.w	r3, #15
 800f32c:	e042      	b.n	800f3b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d109      	bne.n	800f348 <udp_sendto_if+0x5c>
 800f334:	4b21      	ldr	r3, [pc, #132]	@ (800f3bc <udp_sendto_if+0xd0>)
 800f336:	f240 2282 	movw	r2, #642	@ 0x282
 800f33a:	4924      	ldr	r1, [pc, #144]	@ (800f3cc <udp_sendto_if+0xe0>)
 800f33c:	4821      	ldr	r0, [pc, #132]	@ (800f3c4 <udp_sendto_if+0xd8>)
 800f33e:	f004 fd45 	bl	8013dcc <iprintf>
 800f342:	f06f 030f 	mvn.w	r3, #15
 800f346:	e035      	b.n	800f3b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d109      	bne.n	800f362 <udp_sendto_if+0x76>
 800f34e:	4b1b      	ldr	r3, [pc, #108]	@ (800f3bc <udp_sendto_if+0xd0>)
 800f350:	f240 2283 	movw	r2, #643	@ 0x283
 800f354:	491e      	ldr	r1, [pc, #120]	@ (800f3d0 <udp_sendto_if+0xe4>)
 800f356:	481b      	ldr	r0, [pc, #108]	@ (800f3c4 <udp_sendto_if+0xd8>)
 800f358:	f004 fd38 	bl	8013dcc <iprintf>
 800f35c:	f06f 030f 	mvn.w	r3, #15
 800f360:	e028      	b.n	800f3b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d009      	beq.n	800f37c <udp_sendto_if+0x90>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f378:	2be0      	cmp	r3, #224	@ 0xe0
 800f37a:	d103      	bne.n	800f384 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	3304      	adds	r3, #4
 800f380:	617b      	str	r3, [r7, #20]
 800f382:	e00b      	b.n	800f39c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	3304      	adds	r3, #4
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d002      	beq.n	800f398 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f392:	f06f 0303 	mvn.w	r3, #3
 800f396:	e00d      	b.n	800f3b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f39c:	887a      	ldrh	r2, [r7, #2]
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f000 f811 	bl	800f3d4 <udp_sendto_if_src>
 800f3b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3718      	adds	r7, #24
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	08017018 	.word	0x08017018
 800f3c0:	0801718c 	.word	0x0801718c
 800f3c4:	0801706c 	.word	0x0801706c
 800f3c8:	080171a8 	.word	0x080171a8
 800f3cc:	080171c4 	.word	0x080171c4
 800f3d0:	080171e4 	.word	0x080171e4

0800f3d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08c      	sub	sp, #48	@ 0x30
 800f3d8:	af04      	add	r7, sp, #16
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
 800f3e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d109      	bne.n	800f3fc <udp_sendto_if_src+0x28>
 800f3e8:	4b65      	ldr	r3, [pc, #404]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f3ea:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f3ee:	4965      	ldr	r1, [pc, #404]	@ (800f584 <udp_sendto_if_src+0x1b0>)
 800f3f0:	4865      	ldr	r0, [pc, #404]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f3f2:	f004 fceb 	bl	8013dcc <iprintf>
 800f3f6:	f06f 030f 	mvn.w	r3, #15
 800f3fa:	e0bc      	b.n	800f576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <udp_sendto_if_src+0x42>
 800f402:	4b5f      	ldr	r3, [pc, #380]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f404:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f408:	4960      	ldr	r1, [pc, #384]	@ (800f58c <udp_sendto_if_src+0x1b8>)
 800f40a:	485f      	ldr	r0, [pc, #380]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f40c:	f004 fcde 	bl	8013dcc <iprintf>
 800f410:	f06f 030f 	mvn.w	r3, #15
 800f414:	e0af      	b.n	800f576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d109      	bne.n	800f430 <udp_sendto_if_src+0x5c>
 800f41c:	4b58      	ldr	r3, [pc, #352]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f41e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f422:	495b      	ldr	r1, [pc, #364]	@ (800f590 <udp_sendto_if_src+0x1bc>)
 800f424:	4858      	ldr	r0, [pc, #352]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f426:	f004 fcd1 	bl	8013dcc <iprintf>
 800f42a:	f06f 030f 	mvn.w	r3, #15
 800f42e:	e0a2      	b.n	800f576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <udp_sendto_if_src+0x76>
 800f436:	4b52      	ldr	r3, [pc, #328]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f438:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f43c:	4955      	ldr	r1, [pc, #340]	@ (800f594 <udp_sendto_if_src+0x1c0>)
 800f43e:	4852      	ldr	r0, [pc, #328]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f440:	f004 fcc4 	bl	8013dcc <iprintf>
 800f444:	f06f 030f 	mvn.w	r3, #15
 800f448:	e095      	b.n	800f576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d109      	bne.n	800f464 <udp_sendto_if_src+0x90>
 800f450:	4b4b      	ldr	r3, [pc, #300]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f452:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f456:	4950      	ldr	r1, [pc, #320]	@ (800f598 <udp_sendto_if_src+0x1c4>)
 800f458:	484b      	ldr	r0, [pc, #300]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f45a:	f004 fcb7 	bl	8013dcc <iprintf>
 800f45e:	f06f 030f 	mvn.w	r3, #15
 800f462:	e088      	b.n	800f576 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	8a5b      	ldrh	r3, [r3, #18]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d10f      	bne.n	800f48c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f46c:	68f9      	ldr	r1, [r7, #12]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	8a5b      	ldrh	r3, [r3, #18]
 800f472:	461a      	mov	r2, r3
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f000 f893 	bl	800f5a0 <udp_bind>
 800f47a:	4603      	mov	r3, r0
 800f47c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f47e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f48a:	e074      	b.n	800f576 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	891b      	ldrh	r3, [r3, #8]
 800f490:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f494:	4293      	cmp	r3, r2
 800f496:	d902      	bls.n	800f49e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f49c:	e06b      	b.n	800f576 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f49e:	2108      	movs	r1, #8
 800f4a0:	68b8      	ldr	r0, [r7, #8]
 800f4a2:	f7f9 f88d 	bl	80085c0 <pbuf_add_header>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d015      	beq.n	800f4d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f4ac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f4b0:	2108      	movs	r1, #8
 800f4b2:	2022      	movs	r0, #34	@ 0x22
 800f4b4:	f7f8 fe36 	bl	8008124 <pbuf_alloc>
 800f4b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d102      	bne.n	800f4c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f4c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f4c4:	e057      	b.n	800f576 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	891b      	ldrh	r3, [r3, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d006      	beq.n	800f4dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	69f8      	ldr	r0, [r7, #28]
 800f4d2:	f7f9 fa23 	bl	800891c <pbuf_chain>
 800f4d6:	e001      	b.n	800f4dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	895b      	ldrh	r3, [r3, #10]
 800f4e0:	2b07      	cmp	r3, #7
 800f4e2:	d806      	bhi.n	800f4f2 <udp_sendto_if_src+0x11e>
 800f4e4:	4b26      	ldr	r3, [pc, #152]	@ (800f580 <udp_sendto_if_src+0x1ac>)
 800f4e6:	f240 320d 	movw	r2, #781	@ 0x30d
 800f4ea:	492c      	ldr	r1, [pc, #176]	@ (800f59c <udp_sendto_if_src+0x1c8>)
 800f4ec:	4826      	ldr	r0, [pc, #152]	@ (800f588 <udp_sendto_if_src+0x1b4>)
 800f4ee:	f004 fc6d 	bl	8013dcc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	8a5b      	ldrh	r3, [r3, #18]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7f7 fd25 	bl	8006f4c <lwip_htons>
 800f502:	4603      	mov	r3, r0
 800f504:	461a      	mov	r2, r3
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f50a:	887b      	ldrh	r3, [r7, #2]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f7 fd1d 	bl	8006f4c <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	461a      	mov	r2, r3
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	2200      	movs	r2, #0
 800f51e:	719a      	strb	r2, [r3, #6]
 800f520:	2200      	movs	r2, #0
 800f522:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	891b      	ldrh	r3, [r3, #8]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7f7 fd0f 	bl	8006f4c <lwip_htons>
 800f52e:	4603      	mov	r3, r0
 800f530:	461a      	mov	r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f536:	2311      	movs	r3, #17
 800f538:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	7adb      	ldrb	r3, [r3, #11]
 800f53e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	7a9b      	ldrb	r3, [r3, #10]
 800f544:	7cb9      	ldrb	r1, [r7, #18]
 800f546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f548:	9202      	str	r2, [sp, #8]
 800f54a:	7cfa      	ldrb	r2, [r7, #19]
 800f54c:	9201      	str	r2, [sp, #4]
 800f54e:	9300      	str	r3, [sp, #0]
 800f550:	460b      	mov	r3, r1
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f556:	69f8      	ldr	r0, [r7, #28]
 800f558:	f003 fb34 	bl	8012bc4 <ip4_output_if_src>
 800f55c:	4603      	mov	r3, r0
 800f55e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	429a      	cmp	r2, r3
 800f566:	d004      	beq.n	800f572 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f568:	69f8      	ldr	r0, [r7, #28]
 800f56a:	f7f9 f8bf 	bl	80086ec <pbuf_free>
    q = NULL;
 800f56e:	2300      	movs	r3, #0
 800f570:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f572:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f576:	4618      	mov	r0, r3
 800f578:	3720      	adds	r7, #32
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	08017018 	.word	0x08017018
 800f584:	08017204 	.word	0x08017204
 800f588:	0801706c 	.word	0x0801706c
 800f58c:	08017224 	.word	0x08017224
 800f590:	08017244 	.word	0x08017244
 800f594:	08017268 	.word	0x08017268
 800f598:	0801728c 	.word	0x0801728c
 800f59c:	080172b0 	.word	0x080172b0

0800f5a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d101      	bne.n	800f5b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f5b4:	4b39      	ldr	r3, [pc, #228]	@ (800f69c <udp_bind+0xfc>)
 800f5b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d109      	bne.n	800f5d2 <udp_bind+0x32>
 800f5be:	4b38      	ldr	r3, [pc, #224]	@ (800f6a0 <udp_bind+0x100>)
 800f5c0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f5c4:	4937      	ldr	r1, [pc, #220]	@ (800f6a4 <udp_bind+0x104>)
 800f5c6:	4838      	ldr	r0, [pc, #224]	@ (800f6a8 <udp_bind+0x108>)
 800f5c8:	f004 fc00 	bl	8013dcc <iprintf>
 800f5cc:	f06f 030f 	mvn.w	r3, #15
 800f5d0:	e060      	b.n	800f694 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f5d6:	4b35      	ldr	r3, [pc, #212]	@ (800f6ac <udp_bind+0x10c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	617b      	str	r3, [r7, #20]
 800f5dc:	e009      	b.n	800f5f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d102      	bne.n	800f5ec <udp_bind+0x4c>
      rebind = 1;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	74fb      	strb	r3, [r7, #19]
      break;
 800f5ea:	e005      	b.n	800f5f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	617b      	str	r3, [r7, #20]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d1f2      	bne.n	800f5de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d109      	bne.n	800f612 <udp_bind+0x72>
    port = udp_new_port();
 800f5fe:	f7ff fcc5 	bl	800ef8c <udp_new_port>
 800f602:	4603      	mov	r3, r0
 800f604:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f606:	88fb      	ldrh	r3, [r7, #6]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d12c      	bne.n	800f666 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f60c:	f06f 0307 	mvn.w	r3, #7
 800f610:	e040      	b.n	800f694 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f612:	4b26      	ldr	r3, [pc, #152]	@ (800f6ac <udp_bind+0x10c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	e022      	b.n	800f660 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d01b      	beq.n	800f65a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	8a5b      	ldrh	r3, [r3, #18]
 800f626:	88fa      	ldrh	r2, [r7, #6]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d116      	bne.n	800f65a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f634:	429a      	cmp	r2, r3
 800f636:	d00d      	beq.n	800f654 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00a      	beq.n	800f654 <udp_bind+0xb4>
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d006      	beq.n	800f654 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f646:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d102      	bne.n	800f65a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f654:	f06f 0307 	mvn.w	r3, #7
 800f658:	e01c      	b.n	800f694 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1d9      	bne.n	800f61a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <udp_bind+0xd2>
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	e000      	b.n	800f674 <udp_bind+0xd4>
 800f672:	2300      	movs	r3, #0
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	88fa      	ldrh	r2, [r7, #6]
 800f67c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f67e:	7cfb      	ldrb	r3, [r7, #19]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d106      	bne.n	800f692 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f684:	4b09      	ldr	r3, [pc, #36]	@ (800f6ac <udp_bind+0x10c>)
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f68c:	4a07      	ldr	r2, [pc, #28]	@ (800f6ac <udp_bind+0x10c>)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3718      	adds	r7, #24
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08018204 	.word	0x08018204
 800f6a0:	08017018 	.word	0x08017018
 800f6a4:	080172e0 	.word	0x080172e0
 800f6a8:	0801706c 	.word	0x0801706c
 800f6ac:	20008638 	.word	0x20008638

0800f6b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	60f8      	str	r0, [r7, #12]
 800f6b8:	60b9      	str	r1, [r7, #8]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d109      	bne.n	800f6d8 <udp_connect+0x28>
 800f6c4:	4b2c      	ldr	r3, [pc, #176]	@ (800f778 <udp_connect+0xc8>)
 800f6c6:	f240 4235 	movw	r2, #1077	@ 0x435
 800f6ca:	492c      	ldr	r1, [pc, #176]	@ (800f77c <udp_connect+0xcc>)
 800f6cc:	482c      	ldr	r0, [pc, #176]	@ (800f780 <udp_connect+0xd0>)
 800f6ce:	f004 fb7d 	bl	8013dcc <iprintf>
 800f6d2:	f06f 030f 	mvn.w	r3, #15
 800f6d6:	e04b      	b.n	800f770 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d109      	bne.n	800f6f2 <udp_connect+0x42>
 800f6de:	4b26      	ldr	r3, [pc, #152]	@ (800f778 <udp_connect+0xc8>)
 800f6e0:	f240 4236 	movw	r2, #1078	@ 0x436
 800f6e4:	4927      	ldr	r1, [pc, #156]	@ (800f784 <udp_connect+0xd4>)
 800f6e6:	4826      	ldr	r0, [pc, #152]	@ (800f780 <udp_connect+0xd0>)
 800f6e8:	f004 fb70 	bl	8013dcc <iprintf>
 800f6ec:	f06f 030f 	mvn.w	r3, #15
 800f6f0:	e03e      	b.n	800f770 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	8a5b      	ldrh	r3, [r3, #18]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10f      	bne.n	800f71a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f6fa:	68f9      	ldr	r1, [r7, #12]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	8a5b      	ldrh	r3, [r3, #18]
 800f700:	461a      	mov	r2, r3
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f7ff ff4c 	bl	800f5a0 <udp_bind>
 800f708:	4603      	mov	r3, r0
 800f70a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f70c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <udp_connect+0x6a>
      return err;
 800f714:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f718:	e02a      	b.n	800f770 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <udp_connect+0x76>
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	e000      	b.n	800f728 <udp_connect+0x78>
 800f726:	2300      	movs	r3, #0
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	88fa      	ldrh	r2, [r7, #6]
 800f730:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	7c1b      	ldrb	r3, [r3, #16]
 800f736:	f043 0304 	orr.w	r3, r3, #4
 800f73a:	b2da      	uxtb	r2, r3
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f740:	4b11      	ldr	r3, [pc, #68]	@ (800f788 <udp_connect+0xd8>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e008      	b.n	800f75a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d101      	bne.n	800f754 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	e00d      	b.n	800f770 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1f3      	bne.n	800f748 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f760:	4b09      	ldr	r3, [pc, #36]	@ (800f788 <udp_connect+0xd8>)
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f768:	4a07      	ldr	r2, [pc, #28]	@ (800f788 <udp_connect+0xd8>)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3718      	adds	r7, #24
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	08017018 	.word	0x08017018
 800f77c:	080172f8 	.word	0x080172f8
 800f780:	0801706c 	.word	0x0801706c
 800f784:	08017314 	.word	0x08017314
 800f788:	20008638 	.word	0x20008638

0800f78c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d107      	bne.n	800f7ae <udp_recv+0x22>
 800f79e:	4b08      	ldr	r3, [pc, #32]	@ (800f7c0 <udp_recv+0x34>)
 800f7a0:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f7a4:	4907      	ldr	r1, [pc, #28]	@ (800f7c4 <udp_recv+0x38>)
 800f7a6:	4808      	ldr	r0, [pc, #32]	@ (800f7c8 <udp_recv+0x3c>)
 800f7a8:	f004 fb10 	bl	8013dcc <iprintf>
 800f7ac:	e005      	b.n	800f7ba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	68ba      	ldr	r2, [r7, #8]
 800f7b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	61da      	str	r2, [r3, #28]
}
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	08017018 	.word	0x08017018
 800f7c4:	0801734c 	.word	0x0801734c
 800f7c8:	0801706c 	.word	0x0801706c

0800f7cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d107      	bne.n	800f7ea <udp_remove+0x1e>
 800f7da:	4b19      	ldr	r3, [pc, #100]	@ (800f840 <udp_remove+0x74>)
 800f7dc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f7e0:	4918      	ldr	r1, [pc, #96]	@ (800f844 <udp_remove+0x78>)
 800f7e2:	4819      	ldr	r0, [pc, #100]	@ (800f848 <udp_remove+0x7c>)
 800f7e4:	f004 faf2 	bl	8013dcc <iprintf>
 800f7e8:	e026      	b.n	800f838 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f7ea:	4b18      	ldr	r3, [pc, #96]	@ (800f84c <udp_remove+0x80>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d105      	bne.n	800f800 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f7f4:	4b15      	ldr	r3, [pc, #84]	@ (800f84c <udp_remove+0x80>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	4a14      	ldr	r2, [pc, #80]	@ (800f84c <udp_remove+0x80>)
 800f7fc:	6013      	str	r3, [r2, #0]
 800f7fe:	e017      	b.n	800f830 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f800:	4b12      	ldr	r3, [pc, #72]	@ (800f84c <udp_remove+0x80>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	60fb      	str	r3, [r7, #12]
 800f806:	e010      	b.n	800f82a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d009      	beq.n	800f824 <udp_remove+0x58>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	429a      	cmp	r2, r3
 800f818:	d104      	bne.n	800f824 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68da      	ldr	r2, [r3, #12]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	60da      	str	r2, [r3, #12]
        break;
 800f822:	e005      	b.n	800f830 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	60fb      	str	r3, [r7, #12]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1eb      	bne.n	800f808 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f830:	6879      	ldr	r1, [r7, #4]
 800f832:	2000      	movs	r0, #0
 800f834:	f7f8 f8d8 	bl	80079e8 <memp_free>
}
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	08017018 	.word	0x08017018
 800f844:	08017364 	.word	0x08017364
 800f848:	0801706c 	.word	0x0801706c
 800f84c:	20008638 	.word	0x20008638

0800f850 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f856:	2000      	movs	r0, #0
 800f858:	f7f8 f856 	bl	8007908 <memp_malloc>
 800f85c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d007      	beq.n	800f874 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f864:	2220      	movs	r2, #32
 800f866:	2100      	movs	r1, #0
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f004 fb14 	bl	8013e96 <memset>
    pcb->ttl = UDP_TTL;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	22ff      	movs	r2, #255	@ 0xff
 800f872:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f874:	687b      	ldr	r3, [r7, #4]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01e      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d01a      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d017      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d013      	beq.n	800f8ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f8dc <udp_netif_ip_addr_changed+0x5c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	e00c      	b.n	800f8c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d103      	bne.n	800f8c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1ef      	bne.n	800f8ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f8ce:	bf00      	nop
 800f8d0:	3714      	adds	r7, #20
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	20008638 	.word	0x20008638

0800f8e0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f8e4:	4b20      	ldr	r3, [pc, #128]	@ (800f968 <dhcp_inc_pcb_refcount+0x88>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d133      	bne.n	800f954 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f8ec:	4b1f      	ldr	r3, [pc, #124]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d005      	beq.n	800f900 <dhcp_inc_pcb_refcount+0x20>
 800f8f4:	4b1e      	ldr	r3, [pc, #120]	@ (800f970 <dhcp_inc_pcb_refcount+0x90>)
 800f8f6:	22e5      	movs	r2, #229	@ 0xe5
 800f8f8:	491e      	ldr	r1, [pc, #120]	@ (800f974 <dhcp_inc_pcb_refcount+0x94>)
 800f8fa:	481f      	ldr	r0, [pc, #124]	@ (800f978 <dhcp_inc_pcb_refcount+0x98>)
 800f8fc:	f004 fa66 	bl	8013dcc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f900:	f7ff ffa6 	bl	800f850 <udp_new>
 800f904:	4603      	mov	r3, r0
 800f906:	4a19      	ldr	r2, [pc, #100]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f908:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f90a:	4b18      	ldr	r3, [pc, #96]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d102      	bne.n	800f918 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f916:	e024      	b.n	800f962 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f918:	4b14      	ldr	r3, [pc, #80]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	7a5a      	ldrb	r2, [r3, #9]
 800f91e:	4b13      	ldr	r3, [pc, #76]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	f042 0220 	orr.w	r2, r2, #32
 800f926:	b2d2      	uxtb	r2, r2
 800f928:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f92a:	4b10      	ldr	r3, [pc, #64]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2244      	movs	r2, #68	@ 0x44
 800f930:	4912      	ldr	r1, [pc, #72]	@ (800f97c <dhcp_inc_pcb_refcount+0x9c>)
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff fe34 	bl	800f5a0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f938:	4b0c      	ldr	r3, [pc, #48]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2243      	movs	r2, #67	@ 0x43
 800f93e:	490f      	ldr	r1, [pc, #60]	@ (800f97c <dhcp_inc_pcb_refcount+0x9c>)
 800f940:	4618      	mov	r0, r3
 800f942:	f7ff feb5 	bl	800f6b0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f946:	4b09      	ldr	r3, [pc, #36]	@ (800f96c <dhcp_inc_pcb_refcount+0x8c>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2200      	movs	r2, #0
 800f94c:	490c      	ldr	r1, [pc, #48]	@ (800f980 <dhcp_inc_pcb_refcount+0xa0>)
 800f94e:	4618      	mov	r0, r3
 800f950:	f7ff ff1c 	bl	800f78c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f954:	4b04      	ldr	r3, [pc, #16]	@ (800f968 <dhcp_inc_pcb_refcount+0x88>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	4b02      	ldr	r3, [pc, #8]	@ (800f968 <dhcp_inc_pcb_refcount+0x88>)
 800f95e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	20008668 	.word	0x20008668
 800f96c:	20008664 	.word	0x20008664
 800f970:	0801737c 	.word	0x0801737c
 800f974:	080173b4 	.word	0x080173b4
 800f978:	080173dc 	.word	0x080173dc
 800f97c:	08018204 	.word	0x08018204
 800f980:	0801120d 	.word	0x0801120d

0800f984 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f988:	4b0e      	ldr	r3, [pc, #56]	@ (800f9c4 <dhcp_dec_pcb_refcount+0x40>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d105      	bne.n	800f99c <dhcp_dec_pcb_refcount+0x18>
 800f990:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c8 <dhcp_dec_pcb_refcount+0x44>)
 800f992:	22ff      	movs	r2, #255	@ 0xff
 800f994:	490d      	ldr	r1, [pc, #52]	@ (800f9cc <dhcp_dec_pcb_refcount+0x48>)
 800f996:	480e      	ldr	r0, [pc, #56]	@ (800f9d0 <dhcp_dec_pcb_refcount+0x4c>)
 800f998:	f004 fa18 	bl	8013dcc <iprintf>
  dhcp_pcb_refcount--;
 800f99c:	4b09      	ldr	r3, [pc, #36]	@ (800f9c4 <dhcp_dec_pcb_refcount+0x40>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	b2da      	uxtb	r2, r3
 800f9a4:	4b07      	ldr	r3, [pc, #28]	@ (800f9c4 <dhcp_dec_pcb_refcount+0x40>)
 800f9a6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f9a8:	4b06      	ldr	r3, [pc, #24]	@ (800f9c4 <dhcp_dec_pcb_refcount+0x40>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d107      	bne.n	800f9c0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f9b0:	4b08      	ldr	r3, [pc, #32]	@ (800f9d4 <dhcp_dec_pcb_refcount+0x50>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff ff09 	bl	800f7cc <udp_remove>
    dhcp_pcb = NULL;
 800f9ba:	4b06      	ldr	r3, [pc, #24]	@ (800f9d4 <dhcp_dec_pcb_refcount+0x50>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
  }
}
 800f9c0:	bf00      	nop
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20008668 	.word	0x20008668
 800f9c8:	0801737c 	.word	0x0801737c
 800f9cc:	08017404 	.word	0x08017404
 800f9d0:	080173dc 	.word	0x080173dc
 800f9d4:	20008664 	.word	0x20008664

0800f9d8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f9e6:	210c      	movs	r1, #12
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f001 f851 	bl	8010a90 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f9ee:	4b06      	ldr	r3, [pc, #24]	@ (800fa08 <dhcp_handle_nak+0x30>)
 800f9f0:	4a05      	ldr	r2, [pc, #20]	@ (800fa08 <dhcp_handle_nak+0x30>)
 800f9f2:	4905      	ldr	r1, [pc, #20]	@ (800fa08 <dhcp_handle_nak+0x30>)
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7f8 f999 	bl	8007d2c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fc4a 	bl	8010294 <dhcp_discover>
}
 800fa00:	bf00      	nop
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	08018204 	.word	0x08018204

0800fa0c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa18:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fa1a:	2108      	movs	r1, #8
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f001 f837 	bl	8010a90 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	331c      	adds	r3, #28
 800fa26:	2200      	movs	r2, #0
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f002 fb38 	bl	80120a0 <etharp_query>
 800fa30:	4603      	mov	r3, r0
 800fa32:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	799b      	ldrb	r3, [r3, #6]
 800fa38:	2bff      	cmp	r3, #255	@ 0xff
 800fa3a:	d005      	beq.n	800fa48 <dhcp_check+0x3c>
    dhcp->tries++;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	799b      	ldrb	r3, [r3, #6]
 800fa40:	3301      	adds	r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fa48:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fa4c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fa4e:	893b      	ldrh	r3, [r7, #8]
 800fa50:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fa54:	4a06      	ldr	r2, [pc, #24]	@ (800fa70 <dhcp_check+0x64>)
 800fa56:	fb82 1203 	smull	r1, r2, r2, r3
 800fa5a:	1152      	asrs	r2, r2, #5
 800fa5c:	17db      	asrs	r3, r3, #31
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fa66:	bf00      	nop
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	10624dd3 	.word	0x10624dd3

0800fa74 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fa84:	4b0c      	ldr	r3, [pc, #48]	@ (800fab8 <dhcp_handle_offer+0x44>)
 800fa86:	789b      	ldrb	r3, [r3, #2]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d011      	beq.n	800fab0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fa92:	4b0a      	ldr	r3, [pc, #40]	@ (800fabc <dhcp_handle_offer+0x48>)
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f7 fa6e 	bl	8006f78 <lwip_htonl>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	691a      	ldr	r2, [r3, #16]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 f808 	bl	800fac0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	2000865c 	.word	0x2000865c
 800fabc:	2000863c 	.word	0x2000863c

0800fac0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fac0:	b5b0      	push	{r4, r5, r7, lr}
 800fac2:	b08a      	sub	sp, #40	@ 0x28
 800fac4:	af02      	add	r7, sp, #8
 800fac6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d109      	bne.n	800fae2 <dhcp_select+0x22>
 800face:	4b71      	ldr	r3, [pc, #452]	@ (800fc94 <dhcp_select+0x1d4>)
 800fad0:	f240 1277 	movw	r2, #375	@ 0x177
 800fad4:	4970      	ldr	r1, [pc, #448]	@ (800fc98 <dhcp_select+0x1d8>)
 800fad6:	4871      	ldr	r0, [pc, #452]	@ (800fc9c <dhcp_select+0x1dc>)
 800fad8:	f004 f978 	bl	8013dcc <iprintf>
 800fadc:	f06f 030f 	mvn.w	r3, #15
 800fae0:	e0d3      	b.n	800fc8a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fae6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d109      	bne.n	800fb02 <dhcp_select+0x42>
 800faee:	4b69      	ldr	r3, [pc, #420]	@ (800fc94 <dhcp_select+0x1d4>)
 800faf0:	f240 1279 	movw	r2, #377	@ 0x179
 800faf4:	496a      	ldr	r1, [pc, #424]	@ (800fca0 <dhcp_select+0x1e0>)
 800faf6:	4869      	ldr	r0, [pc, #420]	@ (800fc9c <dhcp_select+0x1dc>)
 800faf8:	f004 f968 	bl	8013dcc <iprintf>
 800fafc:	f06f 0305 	mvn.w	r3, #5
 800fb00:	e0c3      	b.n	800fc8a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fb02:	2101      	movs	r1, #1
 800fb04:	69b8      	ldr	r0, [r7, #24]
 800fb06:	f000 ffc3 	bl	8010a90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fb0a:	f107 030c 	add.w	r3, r7, #12
 800fb0e:	2203      	movs	r2, #3
 800fb10:	69b9      	ldr	r1, [r7, #24]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f001 fc48 	bl	80113a8 <dhcp_create_msg>
 800fb18:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 8085 	beq.w	800fc2c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fb28:	89b8      	ldrh	r0, [r7, #12]
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb30:	2302      	movs	r3, #2
 800fb32:	2239      	movs	r2, #57	@ 0x39
 800fb34:	f000 ffc6 	bl	8010ac4 <dhcp_option>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fb3c:	89b8      	ldrh	r0, [r7, #12]
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb48:	461a      	mov	r2, r3
 800fb4a:	f001 f815 	bl	8010b78 <dhcp_option_short>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fb52:	89b8      	ldrh	r0, [r7, #12]
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb5a:	2304      	movs	r3, #4
 800fb5c:	2232      	movs	r2, #50	@ 0x32
 800fb5e:	f000 ffb1 	bl	8010ac4 <dhcp_option>
 800fb62:	4603      	mov	r3, r0
 800fb64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fb66:	89bc      	ldrh	r4, [r7, #12]
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7f7 fa00 	bl	8006f78 <lwip_htonl>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f001 f82c 	bl	8010bdc <dhcp_option_long>
 800fb84:	4603      	mov	r3, r0
 800fb86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fb88:	89b8      	ldrh	r0, [r7, #12]
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fb90:	2304      	movs	r3, #4
 800fb92:	2236      	movs	r2, #54	@ 0x36
 800fb94:	f000 ff96 	bl	8010ac4 <dhcp_option>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fb9c:	89bc      	ldrh	r4, [r7, #12]
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fba4:	69bb      	ldr	r3, [r7, #24]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f7 f9e5 	bl	8006f78 <lwip_htonl>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	f001 f811 	bl	8010bdc <dhcp_option_long>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fbbe:	89b8      	ldrh	r0, [r7, #12]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	2237      	movs	r2, #55	@ 0x37
 800fbca:	f000 ff7b 	bl	8010ac4 <dhcp_option>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	77bb      	strb	r3, [r7, #30]
 800fbd6:	e00e      	b.n	800fbf6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fbd8:	89b8      	ldrh	r0, [r7, #12]
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fbe0:	7fbb      	ldrb	r3, [r7, #30]
 800fbe2:	4a30      	ldr	r2, [pc, #192]	@ (800fca4 <dhcp_select+0x1e4>)
 800fbe4:	5cd3      	ldrb	r3, [r2, r3]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f000 ffa0 	bl	8010b2c <dhcp_option_byte>
 800fbec:	4603      	mov	r3, r0
 800fbee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fbf0:	7fbb      	ldrb	r3, [r7, #30]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	77bb      	strb	r3, [r7, #30]
 800fbf6:	7fbb      	ldrb	r3, [r7, #30]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d9ed      	bls.n	800fbd8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fbfc:	89b8      	ldrh	r0, [r7, #12]
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	33f0      	adds	r3, #240	@ 0xf0
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	4619      	mov	r1, r3
 800fc06:	f001 fca5 	bl	8011554 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fc0a:	4b27      	ldr	r3, [pc, #156]	@ (800fca8 <dhcp_select+0x1e8>)
 800fc0c:	6818      	ldr	r0, [r3, #0]
 800fc0e:	4b27      	ldr	r3, [pc, #156]	@ (800fcac <dhcp_select+0x1ec>)
 800fc10:	9301      	str	r3, [sp, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	2343      	movs	r3, #67	@ 0x43
 800fc18:	4a25      	ldr	r2, [pc, #148]	@ (800fcb0 <dhcp_select+0x1f0>)
 800fc1a:	6979      	ldr	r1, [r7, #20]
 800fc1c:	f7ff fbda 	bl	800f3d4 <udp_sendto_if_src>
 800fc20:	4603      	mov	r3, r0
 800fc22:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fc24:	6978      	ldr	r0, [r7, #20]
 800fc26:	f7f8 fd61 	bl	80086ec <pbuf_free>
 800fc2a:	e001      	b.n	800fc30 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fc2c:	23ff      	movs	r3, #255	@ 0xff
 800fc2e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	799b      	ldrb	r3, [r3, #6]
 800fc34:	2bff      	cmp	r3, #255	@ 0xff
 800fc36:	d005      	beq.n	800fc44 <dhcp_select+0x184>
    dhcp->tries++;
 800fc38:	69bb      	ldr	r3, [r7, #24]
 800fc3a:	799b      	ldrb	r3, [r3, #6]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	b2da      	uxtb	r2, r3
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	799b      	ldrb	r3, [r3, #6]
 800fc48:	2b05      	cmp	r3, #5
 800fc4a:	d80d      	bhi.n	800fc68 <dhcp_select+0x1a8>
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	799b      	ldrb	r3, [r3, #6]
 800fc50:	461a      	mov	r2, r3
 800fc52:	2301      	movs	r3, #1
 800fc54:	4093      	lsls	r3, r2
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	461a      	mov	r2, r3
 800fc5a:	0152      	lsls	r2, r2, #5
 800fc5c:	1ad2      	subs	r2, r2, r3
 800fc5e:	0092      	lsls	r2, r2, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	e001      	b.n	800fc6c <dhcp_select+0x1ac>
 800fc68:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fc6c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fc6e:	89fb      	ldrh	r3, [r7, #14]
 800fc70:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fc74:	4a0f      	ldr	r2, [pc, #60]	@ (800fcb4 <dhcp_select+0x1f4>)
 800fc76:	fb82 1203 	smull	r1, r2, r2, r3
 800fc7a:	1152      	asrs	r2, r2, #5
 800fc7c:	17db      	asrs	r3, r3, #31
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	b29a      	uxth	r2, r3
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fc86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3720      	adds	r7, #32
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bdb0      	pop	{r4, r5, r7, pc}
 800fc92:	bf00      	nop
 800fc94:	0801737c 	.word	0x0801737c
 800fc98:	08017428 	.word	0x08017428
 800fc9c:	080173dc 	.word	0x080173dc
 800fca0:	08017444 	.word	0x08017444
 800fca4:	20000034 	.word	0x20000034
 800fca8:	20008664 	.word	0x20008664
 800fcac:	08018204 	.word	0x08018204
 800fcb0:	08018208 	.word	0x08018208
 800fcb4:	10624dd3 	.word	0x10624dd3

0800fcb8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fcbe:	4b27      	ldr	r3, [pc, #156]	@ (800fd5c <dhcp_coarse_tmr+0xa4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	607b      	str	r3, [r7, #4]
 800fcc4:	e042      	b.n	800fd4c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d039      	beq.n	800fd46 <dhcp_coarse_tmr+0x8e>
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	795b      	ldrb	r3, [r3, #5]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d035      	beq.n	800fd46 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	8a9b      	ldrh	r3, [r3, #20]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d012      	beq.n	800fd08 <dhcp_coarse_tmr+0x50>
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	8a5b      	ldrh	r3, [r3, #18]
 800fce6:	3301      	adds	r3, #1
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	825a      	strh	r2, [r3, #18]
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	8a5a      	ldrh	r2, [r3, #18]
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	8a9b      	ldrh	r3, [r3, #20]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d106      	bne.n	800fd08 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fe2e 	bl	801095c <dhcp_release_and_stop>
        dhcp_start(netif);
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f96b 	bl	800ffdc <dhcp_start>
 800fd06:	e01e      	b.n	800fd46 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	8a1b      	ldrh	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00b      	beq.n	800fd28 <dhcp_coarse_tmr+0x70>
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	8a1b      	ldrh	r3, [r3, #16]
 800fd14:	1e5a      	subs	r2, r3, #1
 800fd16:	b291      	uxth	r1, r2
 800fd18:	683a      	ldr	r2, [r7, #0]
 800fd1a:	8211      	strh	r1, [r2, #16]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d103      	bne.n	800fd28 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f8c7 	bl	800feb4 <dhcp_t2_timeout>
 800fd26:	e00e      	b.n	800fd46 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	89db      	ldrh	r3, [r3, #14]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00a      	beq.n	800fd46 <dhcp_coarse_tmr+0x8e>
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	89db      	ldrh	r3, [r3, #14]
 800fd34:	1e5a      	subs	r2, r3, #1
 800fd36:	b291      	uxth	r1, r2
 800fd38:	683a      	ldr	r2, [r7, #0]
 800fd3a:	81d1      	strh	r1, [r2, #14]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d102      	bne.n	800fd46 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f888 	bl	800fe56 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	607b      	str	r3, [r7, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1b9      	bne.n	800fcc6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fd52:	bf00      	nop
 800fd54:	bf00      	nop
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	200085d0 	.word	0x200085d0

0800fd60 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fd66:	4b16      	ldr	r3, [pc, #88]	@ (800fdc0 <dhcp_fine_tmr+0x60>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	607b      	str	r3, [r7, #4]
 800fd6c:	e020      	b.n	800fdb0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd72:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d017      	beq.n	800fdaa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	891b      	ldrh	r3, [r3, #8]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d906      	bls.n	800fd90 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	891b      	ldrh	r3, [r3, #8]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	811a      	strh	r2, [r3, #8]
 800fd8e:	e00c      	b.n	800fdaa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	891b      	ldrh	r3, [r3, #8]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d108      	bne.n	800fdaa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	891b      	ldrh	r3, [r3, #8]
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f000 f80d 	bl	800fdc4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	607b      	str	r3, [r7, #4]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1db      	bne.n	800fd6e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fdb6:	bf00      	nop
 800fdb8:	bf00      	nop
 800fdba:	3708      	adds	r7, #8
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	200085d0 	.word	0x200085d0

0800fdc4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	795b      	ldrb	r3, [r3, #5]
 800fdd6:	2b0c      	cmp	r3, #12
 800fdd8:	d003      	beq.n	800fde2 <dhcp_timeout+0x1e>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	795b      	ldrb	r3, [r3, #5]
 800fdde:	2b06      	cmp	r3, #6
 800fde0:	d103      	bne.n	800fdea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fde2:	6878      	ldr	r0, [r7, #4]
 800fde4:	f000 fa56 	bl	8010294 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fde8:	e031      	b.n	800fe4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	795b      	ldrb	r3, [r3, #5]
 800fdee:	2b01      	cmp	r3, #1
 800fdf0:	d10e      	bne.n	800fe10 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	799b      	ldrb	r3, [r3, #6]
 800fdf6:	2b05      	cmp	r3, #5
 800fdf8:	d803      	bhi.n	800fe02 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7ff fe60 	bl	800fac0 <dhcp_select>
}
 800fe00:	e025      	b.n	800fe4e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fdaa 	bl	801095c <dhcp_release_and_stop>
      dhcp_start(netif);
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 f8e7 	bl	800ffdc <dhcp_start>
}
 800fe0e:	e01e      	b.n	800fe4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	795b      	ldrb	r3, [r3, #5]
 800fe14:	2b08      	cmp	r3, #8
 800fe16:	d10b      	bne.n	800fe30 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	799b      	ldrb	r3, [r3, #6]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d803      	bhi.n	800fe28 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff fdf3 	bl	800fa0c <dhcp_check>
}
 800fe26:	e012      	b.n	800fe4e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fad5 	bl	80103d8 <dhcp_bind>
}
 800fe2e:	e00e      	b.n	800fe4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	795b      	ldrb	r3, [r3, #5]
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d10a      	bne.n	800fe4e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	799b      	ldrb	r3, [r3, #6]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d803      	bhi.n	800fe48 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fcd7 	bl	80107f4 <dhcp_reboot>
}
 800fe46:	e002      	b.n	800fe4e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fa23 	bl	8010294 <dhcp_discover>
}
 800fe4e:	bf00      	nop
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b084      	sub	sp, #16
 800fe5a:	af00      	add	r7, sp, #0
 800fe5c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	795b      	ldrb	r3, [r3, #5]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d007      	beq.n	800fe7c <dhcp_t1_timeout+0x26>
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	795b      	ldrb	r3, [r3, #5]
 800fe70:	2b0a      	cmp	r3, #10
 800fe72:	d003      	beq.n	800fe7c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fe78:	2b05      	cmp	r3, #5
 800fe7a:	d117      	bne.n	800feac <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 fb85 	bl	801058c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	899b      	ldrh	r3, [r3, #12]
 800fe86:	461a      	mov	r2, r3
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	8a5b      	ldrh	r3, [r3, #18]
 800fe8c:	1ad3      	subs	r3, r2, r3
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	dd0c      	ble.n	800feac <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	899b      	ldrh	r3, [r3, #12]
 800fe96:	461a      	mov	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	8a5b      	ldrh	r3, [r3, #18]
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	da00      	bge.n	800fea4 <dhcp_t1_timeout+0x4e>
 800fea2:	3301      	adds	r3, #1
 800fea4:	105b      	asrs	r3, r3, #1
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800feac:	bf00      	nop
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fec0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	795b      	ldrb	r3, [r3, #5]
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d00b      	beq.n	800fee2 <dhcp_t2_timeout+0x2e>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	795b      	ldrb	r3, [r3, #5]
 800fece:	2b0a      	cmp	r3, #10
 800fed0:	d007      	beq.n	800fee2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fed6:	2b05      	cmp	r3, #5
 800fed8:	d003      	beq.n	800fee2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	795b      	ldrb	r3, [r3, #5]
 800fede:	2b04      	cmp	r3, #4
 800fee0:	d117      	bne.n	800ff12 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fbec 	bl	80106c0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	8a9b      	ldrh	r3, [r3, #20]
 800feec:	461a      	mov	r2, r3
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	8a5b      	ldrh	r3, [r3, #18]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	dd0c      	ble.n	800ff12 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	8a9b      	ldrh	r3, [r3, #20]
 800fefc:	461a      	mov	r2, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	8a5b      	ldrh	r3, [r3, #18]
 800ff02:	1ad3      	subs	r3, r2, r3
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	da00      	bge.n	800ff0a <dhcp_t2_timeout+0x56>
 800ff08:	3301      	adds	r3, #1
 800ff0a:	105b      	asrs	r3, r3, #1
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ff12:	bf00      	nop
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff2a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2200      	movs	r2, #0
 800ff36:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ff38:	4b26      	ldr	r3, [pc, #152]	@ (800ffd4 <dhcp_handle_ack+0xb8>)
 800ff3a:	78db      	ldrb	r3, [r3, #3]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d003      	beq.n	800ff48 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ff40:	4b25      	ldr	r3, [pc, #148]	@ (800ffd8 <dhcp_handle_ack+0xbc>)
 800ff42:	68da      	ldr	r2, [r3, #12]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ff48:	4b22      	ldr	r3, [pc, #136]	@ (800ffd4 <dhcp_handle_ack+0xb8>)
 800ff4a:	791b      	ldrb	r3, [r3, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d004      	beq.n	800ff5a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ff50:	4b21      	ldr	r3, [pc, #132]	@ (800ffd8 <dhcp_handle_ack+0xbc>)
 800ff52:	691a      	ldr	r2, [r3, #16]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ff58:	e004      	b.n	800ff64 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff5e:	085a      	lsrs	r2, r3, #1
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ff64:	4b1b      	ldr	r3, [pc, #108]	@ (800ffd4 <dhcp_handle_ack+0xb8>)
 800ff66:	795b      	ldrb	r3, [r3, #5]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d004      	beq.n	800ff76 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ff6c:	4b1a      	ldr	r3, [pc, #104]	@ (800ffd8 <dhcp_handle_ack+0xbc>)
 800ff6e:	695a      	ldr	r2, [r3, #20]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff74:	e007      	b.n	800ff86 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ff7a:	4613      	mov	r3, r2
 800ff7c:	00db      	lsls	r3, r3, #3
 800ff7e:	1a9b      	subs	r3, r3, r2
 800ff80:	08da      	lsrs	r2, r3, #3
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	691a      	ldr	r2, [r3, #16]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ff8e:	4b11      	ldr	r3, [pc, #68]	@ (800ffd4 <dhcp_handle_ack+0xb8>)
 800ff90:	799b      	ldrb	r3, [r3, #6]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00b      	beq.n	800ffae <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ff96:	4b10      	ldr	r3, [pc, #64]	@ (800ffd8 <dhcp_handle_ack+0xbc>)
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f6 ffec 	bl	8006f78 <lwip_htonl>
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	71da      	strb	r2, [r3, #7]
 800ffac:	e002      	b.n	800ffb4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ffb4:	4b07      	ldr	r3, [pc, #28]	@ (800ffd4 <dhcp_handle_ack+0xb8>)
 800ffb6:	79db      	ldrb	r3, [r3, #7]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d007      	beq.n	800ffcc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ffbc:	4b06      	ldr	r3, [pc, #24]	@ (800ffd8 <dhcp_handle_ack+0xbc>)
 800ffbe:	69db      	ldr	r3, [r3, #28]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7f6 ffd9 	bl	8006f78 <lwip_htonl>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ffcc:	bf00      	nop
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	2000865c 	.word	0x2000865c
 800ffd8:	2000863c 	.word	0x2000863c

0800ffdc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d109      	bne.n	800fffe <dhcp_start+0x22>
 800ffea:	4b37      	ldr	r3, [pc, #220]	@ (80100c8 <dhcp_start+0xec>)
 800ffec:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800fff0:	4936      	ldr	r1, [pc, #216]	@ (80100cc <dhcp_start+0xf0>)
 800fff2:	4837      	ldr	r0, [pc, #220]	@ (80100d0 <dhcp_start+0xf4>)
 800fff4:	f003 feea 	bl	8013dcc <iprintf>
 800fff8:	f06f 030f 	mvn.w	r3, #15
 800fffc:	e060      	b.n	80100c0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010004:	f003 0301 	and.w	r3, r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	d109      	bne.n	8010020 <dhcp_start+0x44>
 801000c:	4b2e      	ldr	r3, [pc, #184]	@ (80100c8 <dhcp_start+0xec>)
 801000e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8010012:	4930      	ldr	r1, [pc, #192]	@ (80100d4 <dhcp_start+0xf8>)
 8010014:	482e      	ldr	r0, [pc, #184]	@ (80100d0 <dhcp_start+0xf4>)
 8010016:	f003 fed9 	bl	8013dcc <iprintf>
 801001a:	f06f 030f 	mvn.w	r3, #15
 801001e:	e04f      	b.n	80100c0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010024:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801002a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801002e:	d202      	bcs.n	8010036 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8010030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010034:	e044      	b.n	80100c0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10d      	bne.n	8010058 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801003c:	2034      	movs	r0, #52	@ 0x34
 801003e:	f7f7 fad3 	bl	80075e8 <mem_malloc>
 8010042:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d102      	bne.n	8010050 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801004a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801004e:	e037      	b.n	80100c0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	625a      	str	r2, [r3, #36]	@ 0x24
 8010056:	e005      	b.n	8010064 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	791b      	ldrb	r3, [r3, #4]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010060:	f7ff fc90 	bl	800f984 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8010064:	2234      	movs	r2, #52	@ 0x34
 8010066:	2100      	movs	r1, #0
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f003 ff14 	bl	8013e96 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801006e:	f7ff fc37 	bl	800f8e0 <dhcp_inc_pcb_refcount>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d002      	beq.n	801007e <dhcp_start+0xa2>
    return ERR_MEM;
 8010078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801007c:	e020      	b.n	80100c0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2201      	movs	r2, #1
 8010082:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801008a:	f003 0304 	and.w	r3, r3, #4
 801008e:	2b00      	cmp	r3, #0
 8010090:	d105      	bne.n	801009e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010092:	2102      	movs	r1, #2
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f000 fcfb 	bl	8010a90 <dhcp_set_state>
    return ERR_OK;
 801009a:	2300      	movs	r3, #0
 801009c:	e010      	b.n	80100c0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f8f8 	bl	8010294 <dhcp_discover>
 80100a4:	4603      	mov	r3, r0
 80100a6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80100a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d005      	beq.n	80100bc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fc53 	bl	801095c <dhcp_release_and_stop>
    return ERR_MEM;
 80100b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80100ba:	e001      	b.n	80100c0 <dhcp_start+0xe4>
  }
  return result;
 80100bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	0801737c 	.word	0x0801737c
 80100cc:	08017460 	.word	0x08017460
 80100d0:	080173dc 	.word	0x080173dc
 80100d4:	080174a4 	.word	0x080174a4

080100d8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d025      	beq.n	8010138 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	795b      	ldrb	r3, [r3, #5]
 80100f0:	2b0a      	cmp	r3, #10
 80100f2:	d008      	beq.n	8010106 <dhcp_network_changed+0x2e>
 80100f4:	2b0a      	cmp	r3, #10
 80100f6:	dc0d      	bgt.n	8010114 <dhcp_network_changed+0x3c>
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01f      	beq.n	801013c <dhcp_network_changed+0x64>
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	db09      	blt.n	8010114 <dhcp_network_changed+0x3c>
 8010100:	3b03      	subs	r3, #3
 8010102:	2b02      	cmp	r3, #2
 8010104:	d806      	bhi.n	8010114 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fb71 	bl	80107f4 <dhcp_reboot>
      break;
 8010112:	e014      	b.n	801013e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	795b      	ldrb	r3, [r3, #5]
 8010118:	2b0c      	cmp	r3, #12
 801011a:	d906      	bls.n	801012a <dhcp_network_changed+0x52>
 801011c:	4b09      	ldr	r3, [pc, #36]	@ (8010144 <dhcp_network_changed+0x6c>)
 801011e:	f240 326d 	movw	r2, #877	@ 0x36d
 8010122:	4909      	ldr	r1, [pc, #36]	@ (8010148 <dhcp_network_changed+0x70>)
 8010124:	4809      	ldr	r0, [pc, #36]	@ (801014c <dhcp_network_changed+0x74>)
 8010126:	f003 fe51 	bl	8013dcc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2200      	movs	r2, #0
 801012e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f8af 	bl	8010294 <dhcp_discover>
      break;
 8010136:	e002      	b.n	801013e <dhcp_network_changed+0x66>
    return;
 8010138:	bf00      	nop
 801013a:	e000      	b.n	801013e <dhcp_network_changed+0x66>
      break;
 801013c:	bf00      	nop
  }
}
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}
 8010144:	0801737c 	.word	0x0801737c
 8010148:	080174c8 	.word	0x080174c8
 801014c:	080173dc 	.word	0x080173dc

08010150 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d107      	bne.n	8010170 <dhcp_arp_reply+0x20>
 8010160:	4b0e      	ldr	r3, [pc, #56]	@ (801019c <dhcp_arp_reply+0x4c>)
 8010162:	f240 328b 	movw	r2, #907	@ 0x38b
 8010166:	490e      	ldr	r1, [pc, #56]	@ (80101a0 <dhcp_arp_reply+0x50>)
 8010168:	480e      	ldr	r0, [pc, #56]	@ (80101a4 <dhcp_arp_reply+0x54>)
 801016a:	f003 fe2f 	bl	8013dcc <iprintf>
 801016e:	e012      	b.n	8010196 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010174:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00c      	beq.n	8010196 <dhcp_arp_reply+0x46>
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	795b      	ldrb	r3, [r3, #5]
 8010180:	2b08      	cmp	r3, #8
 8010182:	d108      	bne.n	8010196 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	69db      	ldr	r3, [r3, #28]
 801018c:	429a      	cmp	r2, r3
 801018e:	d102      	bne.n	8010196 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 f809 	bl	80101a8 <dhcp_decline>
    }
  }
}
 8010196:	3710      	adds	r7, #16
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}
 801019c:	0801737c 	.word	0x0801737c
 80101a0:	08017460 	.word	0x08017460
 80101a4:	080173dc 	.word	0x080173dc

080101a8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80101a8:	b5b0      	push	{r4, r5, r7, lr}
 80101aa:	b08a      	sub	sp, #40	@ 0x28
 80101ac:	af02      	add	r7, sp, #8
 80101ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80101b6:	210c      	movs	r1, #12
 80101b8:	69b8      	ldr	r0, [r7, #24]
 80101ba:	f000 fc69 	bl	8010a90 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80101be:	f107 030c 	add.w	r3, r7, #12
 80101c2:	2204      	movs	r2, #4
 80101c4:	69b9      	ldr	r1, [r7, #24]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f001 f8ee 	bl	80113a8 <dhcp_create_msg>
 80101cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d035      	beq.n	8010240 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80101da:	89b8      	ldrh	r0, [r7, #12]
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80101e2:	2304      	movs	r3, #4
 80101e4:	2232      	movs	r2, #50	@ 0x32
 80101e6:	f000 fc6d 	bl	8010ac4 <dhcp_option>
 80101ea:	4603      	mov	r3, r0
 80101ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80101ee:	89bc      	ldrh	r4, [r7, #12]
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	69db      	ldr	r3, [r3, #28]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7f6 febc 	bl	8006f78 <lwip_htonl>
 8010200:	4603      	mov	r3, r0
 8010202:	461a      	mov	r2, r3
 8010204:	4629      	mov	r1, r5
 8010206:	4620      	mov	r0, r4
 8010208:	f000 fce8 	bl	8010bdc <dhcp_option_long>
 801020c:	4603      	mov	r3, r0
 801020e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010210:	89b8      	ldrh	r0, [r7, #12]
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	33f0      	adds	r3, #240	@ 0xf0
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	4619      	mov	r1, r3
 801021a:	f001 f99b 	bl	8011554 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801021e:	4b19      	ldr	r3, [pc, #100]	@ (8010284 <dhcp_decline+0xdc>)
 8010220:	6818      	ldr	r0, [r3, #0]
 8010222:	4b19      	ldr	r3, [pc, #100]	@ (8010288 <dhcp_decline+0xe0>)
 8010224:	9301      	str	r3, [sp, #4]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	2343      	movs	r3, #67	@ 0x43
 801022c:	4a17      	ldr	r2, [pc, #92]	@ (801028c <dhcp_decline+0xe4>)
 801022e:	6979      	ldr	r1, [r7, #20]
 8010230:	f7ff f8d0 	bl	800f3d4 <udp_sendto_if_src>
 8010234:	4603      	mov	r3, r0
 8010236:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010238:	6978      	ldr	r0, [r7, #20]
 801023a:	f7f8 fa57 	bl	80086ec <pbuf_free>
 801023e:	e001      	b.n	8010244 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010240:	23ff      	movs	r3, #255	@ 0xff
 8010242:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	799b      	ldrb	r3, [r3, #6]
 8010248:	2bff      	cmp	r3, #255	@ 0xff
 801024a:	d005      	beq.n	8010258 <dhcp_decline+0xb0>
    dhcp->tries++;
 801024c:	69bb      	ldr	r3, [r7, #24]
 801024e:	799b      	ldrb	r3, [r3, #6]
 8010250:	3301      	adds	r3, #1
 8010252:	b2da      	uxtb	r2, r3
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010258:	f242 7310 	movw	r3, #10000	@ 0x2710
 801025c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801025e:	89fb      	ldrh	r3, [r7, #14]
 8010260:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010264:	4a0a      	ldr	r2, [pc, #40]	@ (8010290 <dhcp_decline+0xe8>)
 8010266:	fb82 1203 	smull	r1, r2, r2, r3
 801026a:	1152      	asrs	r2, r2, #5
 801026c:	17db      	asrs	r3, r3, #31
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	b29a      	uxth	r2, r3
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010276:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801027a:	4618      	mov	r0, r3
 801027c:	3720      	adds	r7, #32
 801027e:	46bd      	mov	sp, r7
 8010280:	bdb0      	pop	{r4, r5, r7, pc}
 8010282:	bf00      	nop
 8010284:	20008664 	.word	0x20008664
 8010288:	08018204 	.word	0x08018204
 801028c:	08018208 	.word	0x08018208
 8010290:	10624dd3 	.word	0x10624dd3

08010294 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08a      	sub	sp, #40	@ 0x28
 8010298:	af02      	add	r7, sp, #8
 801029a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80102a2:	2300      	movs	r3, #0
 80102a4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	2200      	movs	r2, #0
 80102aa:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80102ac:	2106      	movs	r1, #6
 80102ae:	69b8      	ldr	r0, [r7, #24]
 80102b0:	f000 fbee 	bl	8010a90 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80102b4:	f107 0308 	add.w	r3, r7, #8
 80102b8:	2201      	movs	r2, #1
 80102ba:	69b9      	ldr	r1, [r7, #24]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f001 f873 	bl	80113a8 <dhcp_create_msg>
 80102c2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d04b      	beq.n	8010362 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80102d0:	8938      	ldrh	r0, [r7, #8]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80102d8:	2302      	movs	r3, #2
 80102da:	2239      	movs	r2, #57	@ 0x39
 80102dc:	f000 fbf2 	bl	8010ac4 <dhcp_option>
 80102e0:	4603      	mov	r3, r0
 80102e2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80102e4:	8938      	ldrh	r0, [r7, #8]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102f0:	461a      	mov	r2, r3
 80102f2:	f000 fc41 	bl	8010b78 <dhcp_option_short>
 80102f6:	4603      	mov	r3, r0
 80102f8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80102fa:	8938      	ldrh	r0, [r7, #8]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010302:	2303      	movs	r3, #3
 8010304:	2237      	movs	r2, #55	@ 0x37
 8010306:	f000 fbdd 	bl	8010ac4 <dhcp_option>
 801030a:	4603      	mov	r3, r0
 801030c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801030e:	2300      	movs	r3, #0
 8010310:	77fb      	strb	r3, [r7, #31]
 8010312:	e00e      	b.n	8010332 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010314:	8938      	ldrh	r0, [r7, #8]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801031c:	7ffb      	ldrb	r3, [r7, #31]
 801031e:	4a29      	ldr	r2, [pc, #164]	@ (80103c4 <dhcp_discover+0x130>)
 8010320:	5cd3      	ldrb	r3, [r2, r3]
 8010322:	461a      	mov	r2, r3
 8010324:	f000 fc02 	bl	8010b2c <dhcp_option_byte>
 8010328:	4603      	mov	r3, r0
 801032a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801032c:	7ffb      	ldrb	r3, [r7, #31]
 801032e:	3301      	adds	r3, #1
 8010330:	77fb      	strb	r3, [r7, #31]
 8010332:	7ffb      	ldrb	r3, [r7, #31]
 8010334:	2b02      	cmp	r3, #2
 8010336:	d9ed      	bls.n	8010314 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010338:	8938      	ldrh	r0, [r7, #8]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	33f0      	adds	r3, #240	@ 0xf0
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	4619      	mov	r1, r3
 8010342:	f001 f907 	bl	8011554 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010346:	4b20      	ldr	r3, [pc, #128]	@ (80103c8 <dhcp_discover+0x134>)
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	4b20      	ldr	r3, [pc, #128]	@ (80103cc <dhcp_discover+0x138>)
 801034c:	9301      	str	r3, [sp, #4]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	9300      	str	r3, [sp, #0]
 8010352:	2343      	movs	r3, #67	@ 0x43
 8010354:	4a1e      	ldr	r2, [pc, #120]	@ (80103d0 <dhcp_discover+0x13c>)
 8010356:	6939      	ldr	r1, [r7, #16]
 8010358:	f7ff f83c 	bl	800f3d4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801035c:	6938      	ldr	r0, [r7, #16]
 801035e:	f7f8 f9c5 	bl	80086ec <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	799b      	ldrb	r3, [r3, #6]
 8010366:	2bff      	cmp	r3, #255	@ 0xff
 8010368:	d005      	beq.n	8010376 <dhcp_discover+0xe2>
    dhcp->tries++;
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	799b      	ldrb	r3, [r3, #6]
 801036e:	3301      	adds	r3, #1
 8010370:	b2da      	uxtb	r2, r3
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	799b      	ldrb	r3, [r3, #6]
 801037a:	2b05      	cmp	r3, #5
 801037c:	d80d      	bhi.n	801039a <dhcp_discover+0x106>
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	799b      	ldrb	r3, [r3, #6]
 8010382:	461a      	mov	r2, r3
 8010384:	2301      	movs	r3, #1
 8010386:	4093      	lsls	r3, r2
 8010388:	b29b      	uxth	r3, r3
 801038a:	461a      	mov	r2, r3
 801038c:	0152      	lsls	r2, r2, #5
 801038e:	1ad2      	subs	r2, r2, r3
 8010390:	0092      	lsls	r2, r2, #2
 8010392:	4413      	add	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	b29b      	uxth	r3, r3
 8010398:	e001      	b.n	801039e <dhcp_discover+0x10a>
 801039a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801039e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80103a0:	897b      	ldrh	r3, [r7, #10]
 80103a2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80103a6:	4a0b      	ldr	r2, [pc, #44]	@ (80103d4 <dhcp_discover+0x140>)
 80103a8:	fb82 1203 	smull	r1, r2, r2, r3
 80103ac:	1152      	asrs	r2, r2, #5
 80103ae:	17db      	asrs	r3, r3, #31
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80103b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	20000034 	.word	0x20000034
 80103c8:	20008664 	.word	0x20008664
 80103cc:	08018204 	.word	0x08018204
 80103d0:	08018208 	.word	0x08018208
 80103d4:	10624dd3 	.word	0x10624dd3

080103d8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b088      	sub	sp, #32
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d107      	bne.n	80103f6 <dhcp_bind+0x1e>
 80103e6:	4b64      	ldr	r3, [pc, #400]	@ (8010578 <dhcp_bind+0x1a0>)
 80103e8:	f240 4215 	movw	r2, #1045	@ 0x415
 80103ec:	4963      	ldr	r1, [pc, #396]	@ (801057c <dhcp_bind+0x1a4>)
 80103ee:	4864      	ldr	r0, [pc, #400]	@ (8010580 <dhcp_bind+0x1a8>)
 80103f0:	f003 fcec 	bl	8013dcc <iprintf>
 80103f4:	e0bc      	b.n	8010570 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d107      	bne.n	8010412 <dhcp_bind+0x3a>
 8010402:	4b5d      	ldr	r3, [pc, #372]	@ (8010578 <dhcp_bind+0x1a0>)
 8010404:	f240 4217 	movw	r2, #1047	@ 0x417
 8010408:	495e      	ldr	r1, [pc, #376]	@ (8010584 <dhcp_bind+0x1ac>)
 801040a:	485d      	ldr	r0, [pc, #372]	@ (8010580 <dhcp_bind+0x1a8>)
 801040c:	f003 fcde 	bl	8013dcc <iprintf>
 8010410:	e0ae      	b.n	8010570 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	2200      	movs	r2, #0
 8010416:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801041c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010420:	d019      	beq.n	8010456 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010426:	331e      	adds	r3, #30
 8010428:	4a57      	ldr	r2, [pc, #348]	@ (8010588 <dhcp_bind+0x1b0>)
 801042a:	fba2 2303 	umull	r2, r3, r2, r3
 801042e:	095b      	lsrs	r3, r3, #5
 8010430:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010438:	d302      	bcc.n	8010440 <dhcp_bind+0x68>
      timeout = 0xffff;
 801043a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801043e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	b29a      	uxth	r2, r3
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	8a9b      	ldrh	r3, [r3, #20]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d102      	bne.n	8010456 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	2201      	movs	r2, #1
 8010454:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801045e:	d01d      	beq.n	801049c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010464:	331e      	adds	r3, #30
 8010466:	4a48      	ldr	r2, [pc, #288]	@ (8010588 <dhcp_bind+0x1b0>)
 8010468:	fba2 2303 	umull	r2, r3, r2, r3
 801046c:	095b      	lsrs	r3, r3, #5
 801046e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010476:	d302      	bcc.n	801047e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801047c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	b29a      	uxth	r2, r3
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	895b      	ldrh	r3, [r3, #10]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d102      	bne.n	8010494 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	2201      	movs	r2, #1
 8010492:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	895a      	ldrh	r2, [r3, #10]
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104a4:	d01d      	beq.n	80104e2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104aa:	331e      	adds	r3, #30
 80104ac:	4a36      	ldr	r2, [pc, #216]	@ (8010588 <dhcp_bind+0x1b0>)
 80104ae:	fba2 2303 	umull	r2, r3, r2, r3
 80104b2:	095b      	lsrs	r3, r3, #5
 80104b4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104bc:	d302      	bcc.n	80104c4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80104be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104c2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	b29a      	uxth	r2, r3
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	899b      	ldrh	r3, [r3, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d102      	bne.n	80104da <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	2201      	movs	r2, #1
 80104d8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	899a      	ldrh	r2, [r3, #12]
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	895a      	ldrh	r2, [r3, #10]
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	899b      	ldrh	r3, [r3, #12]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d306      	bcc.n	80104fc <dhcp_bind+0x124>
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	899b      	ldrh	r3, [r3, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	2200      	movs	r2, #0
 80104fa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80104fc:	69bb      	ldr	r3, [r7, #24]
 80104fe:	79db      	ldrb	r3, [r3, #7]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d003      	beq.n	801050c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	6a1b      	ldr	r3, [r3, #32]
 8010508:	613b      	str	r3, [r7, #16]
 801050a:	e014      	b.n	8010536 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	331c      	adds	r3, #28
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010518:	2b00      	cmp	r3, #0
 801051a:	db02      	blt.n	8010522 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801051c:	23ff      	movs	r3, #255	@ 0xff
 801051e:	613b      	str	r3, [r7, #16]
 8010520:	e009      	b.n	8010536 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010522:	7dfb      	ldrb	r3, [r7, #23]
 8010524:	2bbf      	cmp	r3, #191	@ 0xbf
 8010526:	d903      	bls.n	8010530 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010528:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801052c:	613b      	str	r3, [r7, #16]
 801052e:	e002      	b.n	8010536 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010530:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010534:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d108      	bne.n	8010554 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	69da      	ldr	r2, [r3, #28]
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	4013      	ands	r3, r2
 801054a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010552:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010554:	210a      	movs	r1, #10
 8010556:	69b8      	ldr	r0, [r7, #24]
 8010558:	f000 fa9a 	bl	8010a90 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	f103 011c 	add.w	r1, r3, #28
 8010562:	f107 030c 	add.w	r3, r7, #12
 8010566:	f107 0210 	add.w	r2, r7, #16
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7f7 fbde 	bl	8007d2c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010570:	3720      	adds	r7, #32
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	0801737c 	.word	0x0801737c
 801057c:	080174dc 	.word	0x080174dc
 8010580:	080173dc 	.word	0x080173dc
 8010584:	080174f8 	.word	0x080174f8
 8010588:	88888889 	.word	0x88888889

0801058c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b08a      	sub	sp, #40	@ 0x28
 8010590:	af02      	add	r7, sp, #8
 8010592:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010598:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801059a:	2105      	movs	r1, #5
 801059c:	69b8      	ldr	r0, [r7, #24]
 801059e:	f000 fa77 	bl	8010a90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	2203      	movs	r2, #3
 80105a8:	69b9      	ldr	r1, [r7, #24]
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f000 fefc 	bl	80113a8 <dhcp_create_msg>
 80105b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d04e      	beq.n	8010656 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80105be:	89b8      	ldrh	r0, [r7, #12]
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105c6:	2302      	movs	r3, #2
 80105c8:	2239      	movs	r2, #57	@ 0x39
 80105ca:	f000 fa7b 	bl	8010ac4 <dhcp_option>
 80105ce:	4603      	mov	r3, r0
 80105d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80105d2:	89b8      	ldrh	r0, [r7, #12]
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105de:	461a      	mov	r2, r3
 80105e0:	f000 faca 	bl	8010b78 <dhcp_option_short>
 80105e4:	4603      	mov	r3, r0
 80105e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80105e8:	89b8      	ldrh	r0, [r7, #12]
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105f0:	2303      	movs	r3, #3
 80105f2:	2237      	movs	r2, #55	@ 0x37
 80105f4:	f000 fa66 	bl	8010ac4 <dhcp_option>
 80105f8:	4603      	mov	r3, r0
 80105fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80105fc:	2300      	movs	r3, #0
 80105fe:	77bb      	strb	r3, [r7, #30]
 8010600:	e00e      	b.n	8010620 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010602:	89b8      	ldrh	r0, [r7, #12]
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801060a:	7fbb      	ldrb	r3, [r7, #30]
 801060c:	4a29      	ldr	r2, [pc, #164]	@ (80106b4 <dhcp_renew+0x128>)
 801060e:	5cd3      	ldrb	r3, [r2, r3]
 8010610:	461a      	mov	r2, r3
 8010612:	f000 fa8b 	bl	8010b2c <dhcp_option_byte>
 8010616:	4603      	mov	r3, r0
 8010618:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801061a:	7fbb      	ldrb	r3, [r7, #30]
 801061c:	3301      	adds	r3, #1
 801061e:	77bb      	strb	r3, [r7, #30]
 8010620:	7fbb      	ldrb	r3, [r7, #30]
 8010622:	2b02      	cmp	r3, #2
 8010624:	d9ed      	bls.n	8010602 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010626:	89b8      	ldrh	r0, [r7, #12]
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	33f0      	adds	r3, #240	@ 0xf0
 801062c:	697a      	ldr	r2, [r7, #20]
 801062e:	4619      	mov	r1, r3
 8010630:	f000 ff90 	bl	8011554 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010634:	4b20      	ldr	r3, [pc, #128]	@ (80106b8 <dhcp_renew+0x12c>)
 8010636:	6818      	ldr	r0, [r3, #0]
 8010638:	69bb      	ldr	r3, [r7, #24]
 801063a:	f103 0218 	add.w	r2, r3, #24
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	2343      	movs	r3, #67	@ 0x43
 8010644:	6979      	ldr	r1, [r7, #20]
 8010646:	f7fe fe51 	bl	800f2ec <udp_sendto_if>
 801064a:	4603      	mov	r3, r0
 801064c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801064e:	6978      	ldr	r0, [r7, #20]
 8010650:	f7f8 f84c 	bl	80086ec <pbuf_free>
 8010654:	e001      	b.n	801065a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010656:	23ff      	movs	r3, #255	@ 0xff
 8010658:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	799b      	ldrb	r3, [r3, #6]
 801065e:	2bff      	cmp	r3, #255	@ 0xff
 8010660:	d005      	beq.n	801066e <dhcp_renew+0xe2>
    dhcp->tries++;
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	799b      	ldrb	r3, [r3, #6]
 8010666:	3301      	adds	r3, #1
 8010668:	b2da      	uxtb	r2, r3
 801066a:	69bb      	ldr	r3, [r7, #24]
 801066c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	799b      	ldrb	r3, [r3, #6]
 8010672:	2b09      	cmp	r3, #9
 8010674:	d809      	bhi.n	801068a <dhcp_renew+0xfe>
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	799b      	ldrb	r3, [r3, #6]
 801067a:	461a      	mov	r2, r3
 801067c:	0152      	lsls	r2, r2, #5
 801067e:	1ad2      	subs	r2, r2, r3
 8010680:	0092      	lsls	r2, r2, #2
 8010682:	4413      	add	r3, r2
 8010684:	011b      	lsls	r3, r3, #4
 8010686:	b29b      	uxth	r3, r3
 8010688:	e001      	b.n	801068e <dhcp_renew+0x102>
 801068a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801068e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010690:	89fb      	ldrh	r3, [r7, #14]
 8010692:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010696:	4a09      	ldr	r2, [pc, #36]	@ (80106bc <dhcp_renew+0x130>)
 8010698:	fb82 1203 	smull	r1, r2, r2, r3
 801069c:	1152      	asrs	r2, r2, #5
 801069e:	17db      	asrs	r3, r3, #31
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3720      	adds	r7, #32
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	20000034 	.word	0x20000034
 80106b8:	20008664 	.word	0x20008664
 80106bc:	10624dd3 	.word	0x10624dd3

080106c0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b08a      	sub	sp, #40	@ 0x28
 80106c4:	af02      	add	r7, sp, #8
 80106c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106cc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80106ce:	2104      	movs	r1, #4
 80106d0:	69b8      	ldr	r0, [r7, #24]
 80106d2:	f000 f9dd 	bl	8010a90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	2203      	movs	r2, #3
 80106dc:	69b9      	ldr	r1, [r7, #24]
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 fe62 	bl	80113a8 <dhcp_create_msg>
 80106e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d04c      	beq.n	8010786 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80106f2:	89b8      	ldrh	r0, [r7, #12]
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80106fa:	2302      	movs	r3, #2
 80106fc:	2239      	movs	r2, #57	@ 0x39
 80106fe:	f000 f9e1 	bl	8010ac4 <dhcp_option>
 8010702:	4603      	mov	r3, r0
 8010704:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010706:	89b8      	ldrh	r0, [r7, #12]
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010712:	461a      	mov	r2, r3
 8010714:	f000 fa30 	bl	8010b78 <dhcp_option_short>
 8010718:	4603      	mov	r3, r0
 801071a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801071c:	89b8      	ldrh	r0, [r7, #12]
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010724:	2303      	movs	r3, #3
 8010726:	2237      	movs	r2, #55	@ 0x37
 8010728:	f000 f9cc 	bl	8010ac4 <dhcp_option>
 801072c:	4603      	mov	r3, r0
 801072e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010730:	2300      	movs	r3, #0
 8010732:	77bb      	strb	r3, [r7, #30]
 8010734:	e00e      	b.n	8010754 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010736:	89b8      	ldrh	r0, [r7, #12]
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801073e:	7fbb      	ldrb	r3, [r7, #30]
 8010740:	4a28      	ldr	r2, [pc, #160]	@ (80107e4 <dhcp_rebind+0x124>)
 8010742:	5cd3      	ldrb	r3, [r2, r3]
 8010744:	461a      	mov	r2, r3
 8010746:	f000 f9f1 	bl	8010b2c <dhcp_option_byte>
 801074a:	4603      	mov	r3, r0
 801074c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801074e:	7fbb      	ldrb	r3, [r7, #30]
 8010750:	3301      	adds	r3, #1
 8010752:	77bb      	strb	r3, [r7, #30]
 8010754:	7fbb      	ldrb	r3, [r7, #30]
 8010756:	2b02      	cmp	r3, #2
 8010758:	d9ed      	bls.n	8010736 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801075a:	89b8      	ldrh	r0, [r7, #12]
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	33f0      	adds	r3, #240	@ 0xf0
 8010760:	697a      	ldr	r2, [r7, #20]
 8010762:	4619      	mov	r1, r3
 8010764:	f000 fef6 	bl	8011554 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010768:	4b1f      	ldr	r3, [pc, #124]	@ (80107e8 <dhcp_rebind+0x128>)
 801076a:	6818      	ldr	r0, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	2343      	movs	r3, #67	@ 0x43
 8010772:	4a1e      	ldr	r2, [pc, #120]	@ (80107ec <dhcp_rebind+0x12c>)
 8010774:	6979      	ldr	r1, [r7, #20]
 8010776:	f7fe fdb9 	bl	800f2ec <udp_sendto_if>
 801077a:	4603      	mov	r3, r0
 801077c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801077e:	6978      	ldr	r0, [r7, #20]
 8010780:	f7f7 ffb4 	bl	80086ec <pbuf_free>
 8010784:	e001      	b.n	801078a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010786:	23ff      	movs	r3, #255	@ 0xff
 8010788:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	799b      	ldrb	r3, [r3, #6]
 801078e:	2bff      	cmp	r3, #255	@ 0xff
 8010790:	d005      	beq.n	801079e <dhcp_rebind+0xde>
    dhcp->tries++;
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	799b      	ldrb	r3, [r3, #6]
 8010796:	3301      	adds	r3, #1
 8010798:	b2da      	uxtb	r2, r3
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801079e:	69bb      	ldr	r3, [r7, #24]
 80107a0:	799b      	ldrb	r3, [r3, #6]
 80107a2:	2b09      	cmp	r3, #9
 80107a4:	d809      	bhi.n	80107ba <dhcp_rebind+0xfa>
 80107a6:	69bb      	ldr	r3, [r7, #24]
 80107a8:	799b      	ldrb	r3, [r3, #6]
 80107aa:	461a      	mov	r2, r3
 80107ac:	0152      	lsls	r2, r2, #5
 80107ae:	1ad2      	subs	r2, r2, r3
 80107b0:	0092      	lsls	r2, r2, #2
 80107b2:	4413      	add	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	e001      	b.n	80107be <dhcp_rebind+0xfe>
 80107ba:	f242 7310 	movw	r3, #10000	@ 0x2710
 80107be:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80107c0:	89fb      	ldrh	r3, [r7, #14]
 80107c2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80107c6:	4a0a      	ldr	r2, [pc, #40]	@ (80107f0 <dhcp_rebind+0x130>)
 80107c8:	fb82 1203 	smull	r1, r2, r2, r3
 80107cc:	1152      	asrs	r2, r2, #5
 80107ce:	17db      	asrs	r3, r3, #31
 80107d0:	1ad3      	subs	r3, r2, r3
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80107d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3720      	adds	r7, #32
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	20000034 	.word	0x20000034
 80107e8:	20008664 	.word	0x20008664
 80107ec:	08018208 	.word	0x08018208
 80107f0:	10624dd3 	.word	0x10624dd3

080107f4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80107f4:	b5b0      	push	{r4, r5, r7, lr}
 80107f6:	b08a      	sub	sp, #40	@ 0x28
 80107f8:	af02      	add	r7, sp, #8
 80107fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010800:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010802:	2103      	movs	r1, #3
 8010804:	69b8      	ldr	r0, [r7, #24]
 8010806:	f000 f943 	bl	8010a90 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801080a:	f107 030c 	add.w	r3, r7, #12
 801080e:	2203      	movs	r2, #3
 8010810:	69b9      	ldr	r1, [r7, #24]
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 fdc8 	bl	80113a8 <dhcp_create_msg>
 8010818:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d066      	beq.n	80108ee <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010826:	89b8      	ldrh	r0, [r7, #12]
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801082e:	2302      	movs	r3, #2
 8010830:	2239      	movs	r2, #57	@ 0x39
 8010832:	f000 f947 	bl	8010ac4 <dhcp_option>
 8010836:	4603      	mov	r3, r0
 8010838:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801083a:	89b8      	ldrh	r0, [r7, #12]
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	33f0      	adds	r3, #240	@ 0xf0
 8010840:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010844:	4619      	mov	r1, r3
 8010846:	f000 f997 	bl	8010b78 <dhcp_option_short>
 801084a:	4603      	mov	r3, r0
 801084c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801084e:	89b8      	ldrh	r0, [r7, #12]
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010856:	2304      	movs	r3, #4
 8010858:	2232      	movs	r2, #50	@ 0x32
 801085a:	f000 f933 	bl	8010ac4 <dhcp_option>
 801085e:	4603      	mov	r3, r0
 8010860:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010862:	89bc      	ldrh	r4, [r7, #12]
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	69db      	ldr	r3, [r3, #28]
 801086e:	4618      	mov	r0, r3
 8010870:	f7f6 fb82 	bl	8006f78 <lwip_htonl>
 8010874:	4603      	mov	r3, r0
 8010876:	461a      	mov	r2, r3
 8010878:	4629      	mov	r1, r5
 801087a:	4620      	mov	r0, r4
 801087c:	f000 f9ae 	bl	8010bdc <dhcp_option_long>
 8010880:	4603      	mov	r3, r0
 8010882:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010884:	89b8      	ldrh	r0, [r7, #12]
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801088c:	2303      	movs	r3, #3
 801088e:	2237      	movs	r2, #55	@ 0x37
 8010890:	f000 f918 	bl	8010ac4 <dhcp_option>
 8010894:	4603      	mov	r3, r0
 8010896:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010898:	2300      	movs	r3, #0
 801089a:	77bb      	strb	r3, [r7, #30]
 801089c:	e00e      	b.n	80108bc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801089e:	89b8      	ldrh	r0, [r7, #12]
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108a6:	7fbb      	ldrb	r3, [r7, #30]
 80108a8:	4a28      	ldr	r2, [pc, #160]	@ (801094c <dhcp_reboot+0x158>)
 80108aa:	5cd3      	ldrb	r3, [r2, r3]
 80108ac:	461a      	mov	r2, r3
 80108ae:	f000 f93d 	bl	8010b2c <dhcp_option_byte>
 80108b2:	4603      	mov	r3, r0
 80108b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108b6:	7fbb      	ldrb	r3, [r7, #30]
 80108b8:	3301      	adds	r3, #1
 80108ba:	77bb      	strb	r3, [r7, #30]
 80108bc:	7fbb      	ldrb	r3, [r7, #30]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d9ed      	bls.n	801089e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80108c2:	89b8      	ldrh	r0, [r7, #12]
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	33f0      	adds	r3, #240	@ 0xf0
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	4619      	mov	r1, r3
 80108cc:	f000 fe42 	bl	8011554 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80108d0:	4b1f      	ldr	r3, [pc, #124]	@ (8010950 <dhcp_reboot+0x15c>)
 80108d2:	6818      	ldr	r0, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	2343      	movs	r3, #67	@ 0x43
 80108da:	4a1e      	ldr	r2, [pc, #120]	@ (8010954 <dhcp_reboot+0x160>)
 80108dc:	6979      	ldr	r1, [r7, #20]
 80108de:	f7fe fd05 	bl	800f2ec <udp_sendto_if>
 80108e2:	4603      	mov	r3, r0
 80108e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80108e6:	6978      	ldr	r0, [r7, #20]
 80108e8:	f7f7 ff00 	bl	80086ec <pbuf_free>
 80108ec:	e001      	b.n	80108f2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80108ee:	23ff      	movs	r3, #255	@ 0xff
 80108f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	799b      	ldrb	r3, [r3, #6]
 80108f6:	2bff      	cmp	r3, #255	@ 0xff
 80108f8:	d005      	beq.n	8010906 <dhcp_reboot+0x112>
    dhcp->tries++;
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	799b      	ldrb	r3, [r3, #6]
 80108fe:	3301      	adds	r3, #1
 8010900:	b2da      	uxtb	r2, r3
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	799b      	ldrb	r3, [r3, #6]
 801090a:	2b09      	cmp	r3, #9
 801090c:	d809      	bhi.n	8010922 <dhcp_reboot+0x12e>
 801090e:	69bb      	ldr	r3, [r7, #24]
 8010910:	799b      	ldrb	r3, [r3, #6]
 8010912:	461a      	mov	r2, r3
 8010914:	0152      	lsls	r2, r2, #5
 8010916:	1ad2      	subs	r2, r2, r3
 8010918:	0092      	lsls	r2, r2, #2
 801091a:	4413      	add	r3, r2
 801091c:	00db      	lsls	r3, r3, #3
 801091e:	b29b      	uxth	r3, r3
 8010920:	e001      	b.n	8010926 <dhcp_reboot+0x132>
 8010922:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010926:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010928:	89fb      	ldrh	r3, [r7, #14]
 801092a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801092e:	4a0a      	ldr	r2, [pc, #40]	@ (8010958 <dhcp_reboot+0x164>)
 8010930:	fb82 1203 	smull	r1, r2, r2, r3
 8010934:	1152      	asrs	r2, r2, #5
 8010936:	17db      	asrs	r3, r3, #31
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	b29a      	uxth	r2, r3
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010940:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3720      	adds	r7, #32
 8010948:	46bd      	mov	sp, r7
 801094a:	bdb0      	pop	{r4, r5, r7, pc}
 801094c:	20000034 	.word	0x20000034
 8010950:	20008664 	.word	0x20008664
 8010954:	08018208 	.word	0x08018208
 8010958:	10624dd3 	.word	0x10624dd3

0801095c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801095c:	b5b0      	push	{r4, r5, r7, lr}
 801095e:	b08a      	sub	sp, #40	@ 0x28
 8010960:	af02      	add	r7, sp, #8
 8010962:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010968:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 8084 	beq.w	8010a7a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	795b      	ldrb	r3, [r3, #5]
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 8081 	beq.w	8010a7e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	2200      	movs	r2, #0
 8010986:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	2200      	movs	r2, #0
 801098c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	2200      	movs	r2, #0
 8010992:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	2200      	movs	r2, #0
 8010998:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801099a:	69fb      	ldr	r3, [r7, #28]
 801099c:	2200      	movs	r2, #0
 801099e:	631a      	str	r2, [r3, #48]	@ 0x30
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	2200      	movs	r2, #0
 80109b4:	829a      	strh	r2, [r3, #20]
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	8a9a      	ldrh	r2, [r3, #20]
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	825a      	strh	r2, [r3, #18]
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	8a5a      	ldrh	r2, [r3, #18]
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	821a      	strh	r2, [r3, #16]
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	8a1a      	ldrh	r2, [r3, #16]
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 fdee 	bl	80115b0 <dhcp_supplied_address>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d03b      	beq.n	8010a52 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80109da:	f107 030e 	add.w	r3, r7, #14
 80109de:	2207      	movs	r2, #7
 80109e0:	69f9      	ldr	r1, [r7, #28]
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 fce0 	bl	80113a8 <dhcp_create_msg>
 80109e8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d030      	beq.n	8010a52 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80109f6:	89f8      	ldrh	r0, [r7, #14]
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109fe:	2304      	movs	r3, #4
 8010a00:	2236      	movs	r2, #54	@ 0x36
 8010a02:	f000 f85f 	bl	8010ac4 <dhcp_option>
 8010a06:	4603      	mov	r3, r0
 8010a08:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010a0a:	89fc      	ldrh	r4, [r7, #14]
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7f6 faaf 	bl	8006f78 <lwip_htonl>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4620      	mov	r0, r4
 8010a22:	f000 f8db 	bl	8010bdc <dhcp_option_long>
 8010a26:	4603      	mov	r3, r0
 8010a28:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a2a:	89f8      	ldrh	r0, [r7, #14]
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	33f0      	adds	r3, #240	@ 0xf0
 8010a30:	69ba      	ldr	r2, [r7, #24]
 8010a32:	4619      	mov	r1, r3
 8010a34:	f000 fd8e 	bl	8011554 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a38:	4b13      	ldr	r3, [pc, #76]	@ (8010a88 <dhcp_release_and_stop+0x12c>)
 8010a3a:	6818      	ldr	r0, [r3, #0]
 8010a3c:	f107 0210 	add.w	r2, r7, #16
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	2343      	movs	r3, #67	@ 0x43
 8010a46:	69b9      	ldr	r1, [r7, #24]
 8010a48:	f7fe fc50 	bl	800f2ec <udp_sendto_if>
      pbuf_free(p_out);
 8010a4c:	69b8      	ldr	r0, [r7, #24]
 8010a4e:	f7f7 fe4d 	bl	80086ec <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010a52:	4b0e      	ldr	r3, [pc, #56]	@ (8010a8c <dhcp_release_and_stop+0x130>)
 8010a54:	4a0d      	ldr	r2, [pc, #52]	@ (8010a8c <dhcp_release_and_stop+0x130>)
 8010a56:	490d      	ldr	r1, [pc, #52]	@ (8010a8c <dhcp_release_and_stop+0x130>)
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7f7 f967 	bl	8007d2c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010a5e:	2100      	movs	r1, #0
 8010a60:	69f8      	ldr	r0, [r7, #28]
 8010a62:	f000 f815 	bl	8010a90 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	791b      	ldrb	r3, [r3, #4]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d008      	beq.n	8010a80 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010a6e:	f7fe ff89 	bl	800f984 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	2200      	movs	r2, #0
 8010a76:	711a      	strb	r2, [r3, #4]
 8010a78:	e002      	b.n	8010a80 <dhcp_release_and_stop+0x124>
    return;
 8010a7a:	bf00      	nop
 8010a7c:	e000      	b.n	8010a80 <dhcp_release_and_stop+0x124>
    return;
 8010a7e:	bf00      	nop
  }
}
 8010a80:	3720      	adds	r7, #32
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bdb0      	pop	{r4, r5, r7, pc}
 8010a86:	bf00      	nop
 8010a88:	20008664 	.word	0x20008664
 8010a8c:	08018204 	.word	0x08018204

08010a90 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	795b      	ldrb	r3, [r3, #5]
 8010aa0:	78fa      	ldrb	r2, [r7, #3]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d008      	beq.n	8010ab8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	78fa      	ldrb	r2, [r7, #3]
 8010aaa:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	811a      	strh	r2, [r3, #8]
  }
}
 8010ab8:	bf00      	nop
 8010aba:	370c      	adds	r7, #12
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6039      	str	r1, [r7, #0]
 8010acc:	4611      	mov	r1, r2
 8010ace:	461a      	mov	r2, r3
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	80fb      	strh	r3, [r7, #6]
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	717b      	strb	r3, [r7, #5]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010adc:	88fa      	ldrh	r2, [r7, #6]
 8010ade:	793b      	ldrb	r3, [r7, #4]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	3302      	adds	r3, #2
 8010ae4:	2b44      	cmp	r3, #68	@ 0x44
 8010ae6:	d906      	bls.n	8010af6 <dhcp_option+0x32>
 8010ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b20 <dhcp_option+0x5c>)
 8010aea:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010aee:	490d      	ldr	r1, [pc, #52]	@ (8010b24 <dhcp_option+0x60>)
 8010af0:	480d      	ldr	r0, [pc, #52]	@ (8010b28 <dhcp_option+0x64>)
 8010af2:	f003 f96b 	bl	8013dcc <iprintf>
  options[options_out_len++] = option_type;
 8010af6:	88fb      	ldrh	r3, [r7, #6]
 8010af8:	1c5a      	adds	r2, r3, #1
 8010afa:	80fa      	strh	r2, [r7, #6]
 8010afc:	461a      	mov	r2, r3
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	4413      	add	r3, r2
 8010b02:	797a      	ldrb	r2, [r7, #5]
 8010b04:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010b06:	88fb      	ldrh	r3, [r7, #6]
 8010b08:	1c5a      	adds	r2, r3, #1
 8010b0a:	80fa      	strh	r2, [r7, #6]
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	4413      	add	r3, r2
 8010b12:	793a      	ldrb	r2, [r7, #4]
 8010b14:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b16:	88fb      	ldrh	r3, [r7, #6]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	0801737c 	.word	0x0801737c
 8010b24:	08017510 	.word	0x08017510
 8010b28:	080173dc 	.word	0x080173dc

08010b2c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	4603      	mov	r3, r0
 8010b34:	6039      	str	r1, [r7, #0]
 8010b36:	80fb      	strh	r3, [r7, #6]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010b3c:	88fb      	ldrh	r3, [r7, #6]
 8010b3e:	2b43      	cmp	r3, #67	@ 0x43
 8010b40:	d906      	bls.n	8010b50 <dhcp_option_byte+0x24>
 8010b42:	4b0a      	ldr	r3, [pc, #40]	@ (8010b6c <dhcp_option_byte+0x40>)
 8010b44:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010b48:	4909      	ldr	r1, [pc, #36]	@ (8010b70 <dhcp_option_byte+0x44>)
 8010b4a:	480a      	ldr	r0, [pc, #40]	@ (8010b74 <dhcp_option_byte+0x48>)
 8010b4c:	f003 f93e 	bl	8013dcc <iprintf>
  options[options_out_len++] = value;
 8010b50:	88fb      	ldrh	r3, [r7, #6]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	80fa      	strh	r2, [r7, #6]
 8010b56:	461a      	mov	r2, r3
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	797a      	ldrb	r2, [r7, #5]
 8010b5e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010b60:	88fb      	ldrh	r3, [r7, #6]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	0801737c 	.word	0x0801737c
 8010b70:	08017554 	.word	0x08017554
 8010b74:	080173dc 	.word	0x080173dc

08010b78 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	6039      	str	r1, [r7, #0]
 8010b82:	80fb      	strh	r3, [r7, #6]
 8010b84:	4613      	mov	r3, r2
 8010b86:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010b88:	88fb      	ldrh	r3, [r7, #6]
 8010b8a:	3302      	adds	r3, #2
 8010b8c:	2b44      	cmp	r3, #68	@ 0x44
 8010b8e:	d906      	bls.n	8010b9e <dhcp_option_short+0x26>
 8010b90:	4b0f      	ldr	r3, [pc, #60]	@ (8010bd0 <dhcp_option_short+0x58>)
 8010b92:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010b96:	490f      	ldr	r1, [pc, #60]	@ (8010bd4 <dhcp_option_short+0x5c>)
 8010b98:	480f      	ldr	r0, [pc, #60]	@ (8010bd8 <dhcp_option_short+0x60>)
 8010b9a:	f003 f917 	bl	8013dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010b9e:	88bb      	ldrh	r3, [r7, #4]
 8010ba0:	0a1b      	lsrs	r3, r3, #8
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	88fb      	ldrh	r3, [r7, #6]
 8010ba6:	1c59      	adds	r1, r3, #1
 8010ba8:	80f9      	strh	r1, [r7, #6]
 8010baa:	4619      	mov	r1, r3
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	440b      	add	r3, r1
 8010bb0:	b2d2      	uxtb	r2, r2
 8010bb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010bb4:	88fb      	ldrh	r3, [r7, #6]
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	80fa      	strh	r2, [r7, #6]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	88ba      	ldrh	r2, [r7, #4]
 8010bc2:	b2d2      	uxtb	r2, r2
 8010bc4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010bc6:	88fb      	ldrh	r3, [r7, #6]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3708      	adds	r7, #8
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	0801737c 	.word	0x0801737c
 8010bd4:	0801758c 	.word	0x0801758c
 8010bd8:	080173dc 	.word	0x080173dc

08010bdc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	60b9      	str	r1, [r7, #8]
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010bea:	89fb      	ldrh	r3, [r7, #14]
 8010bec:	3304      	adds	r3, #4
 8010bee:	2b44      	cmp	r3, #68	@ 0x44
 8010bf0:	d906      	bls.n	8010c00 <dhcp_option_long+0x24>
 8010bf2:	4b19      	ldr	r3, [pc, #100]	@ (8010c58 <dhcp_option_long+0x7c>)
 8010bf4:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010bf8:	4918      	ldr	r1, [pc, #96]	@ (8010c5c <dhcp_option_long+0x80>)
 8010bfa:	4819      	ldr	r0, [pc, #100]	@ (8010c60 <dhcp_option_long+0x84>)
 8010bfc:	f003 f8e6 	bl	8013dcc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	0e1a      	lsrs	r2, r3, #24
 8010c04:	89fb      	ldrh	r3, [r7, #14]
 8010c06:	1c59      	adds	r1, r3, #1
 8010c08:	81f9      	strh	r1, [r7, #14]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	440b      	add	r3, r1
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	0c1a      	lsrs	r2, r3, #16
 8010c18:	89fb      	ldrh	r3, [r7, #14]
 8010c1a:	1c59      	adds	r1, r3, #1
 8010c1c:	81f9      	strh	r1, [r7, #14]
 8010c1e:	4619      	mov	r1, r3
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	440b      	add	r3, r1
 8010c24:	b2d2      	uxtb	r2, r2
 8010c26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	0a1a      	lsrs	r2, r3, #8
 8010c2c:	89fb      	ldrh	r3, [r7, #14]
 8010c2e:	1c59      	adds	r1, r3, #1
 8010c30:	81f9      	strh	r1, [r7, #14]
 8010c32:	4619      	mov	r1, r3
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	440b      	add	r3, r1
 8010c38:	b2d2      	uxtb	r2, r2
 8010c3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010c3c:	89fb      	ldrh	r3, [r7, #14]
 8010c3e:	1c5a      	adds	r2, r3, #1
 8010c40:	81fa      	strh	r2, [r7, #14]
 8010c42:	461a      	mov	r2, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	4413      	add	r3, r2
 8010c48:	687a      	ldr	r2, [r7, #4]
 8010c4a:	b2d2      	uxtb	r2, r2
 8010c4c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c4e:	89fb      	ldrh	r3, [r7, #14]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801737c 	.word	0x0801737c
 8010c5c:	080175c8 	.word	0x080175c8
 8010c60:	080173dc 	.word	0x080173dc

08010c64 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b090      	sub	sp, #64	@ 0x40
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010c72:	2300      	movs	r3, #0
 8010c74:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010c76:	2208      	movs	r2, #8
 8010c78:	2100      	movs	r1, #0
 8010c7a:	48b5      	ldr	r0, [pc, #724]	@ (8010f50 <dhcp_parse_reply+0x2ec>)
 8010c7c:	f003 f90b 	bl	8013e96 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	895b      	ldrh	r3, [r3, #10]
 8010c84:	2b2b      	cmp	r3, #43	@ 0x2b
 8010c86:	d802      	bhi.n	8010c8e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010c88:	f06f 0301 	mvn.w	r3, #1
 8010c8c:	e2a7      	b.n	80111de <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010c94:	23f0      	movs	r3, #240	@ 0xf0
 8010c96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	891b      	ldrh	r3, [r3, #8]
 8010c9c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010ca2:	e00c      	b.n	8010cbe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca6:	895b      	ldrh	r3, [r3, #10]
 8010ca8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010caa:	1ad3      	subs	r3, r2, r3
 8010cac:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb0:	895b      	ldrh	r3, [r3, #10]
 8010cb2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <dhcp_parse_reply+0x6a>
 8010cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc6:	895b      	ldrh	r3, [r3, #10]
 8010cc8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d2ea      	bcs.n	8010ca4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d102      	bne.n	8010cda <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010cd4:	f06f 0301 	mvn.w	r3, #1
 8010cd8:	e281      	b.n	80111de <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010cda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010cdc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010cde:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010ce0:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010ce8:	e239      	b.n	801115e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010cea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cee:	4413      	add	r3, r2
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010cfe:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010d00:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d02:	3302      	adds	r3, #2
 8010d04:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010d06:	8bfa      	ldrh	r2, [r7, #30]
 8010d08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d202      	bcs.n	8010d14 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010d0e:	f06f 0301 	mvn.w	r3, #1
 8010d12:	e264      	b.n	80111de <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010d14:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d16:	3301      	adds	r3, #1
 8010d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d1a:	8952      	ldrh	r2, [r2, #10]
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	da07      	bge.n	8010d30 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010d20:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010d22:	3301      	adds	r3, #1
 8010d24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010d26:	4413      	add	r3, r2
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010d2e:	e00b      	b.n	8010d48 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d004      	beq.n	8010d42 <dhcp_parse_reply+0xde>
 8010d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	e000      	b.n	8010d44 <dhcp_parse_reply+0xe0>
 8010d42:	2300      	movs	r3, #0
 8010d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010d50:	7dfb      	ldrb	r3, [r7, #23]
 8010d52:	2b3b      	cmp	r3, #59	@ 0x3b
 8010d54:	f200 812c 	bhi.w	8010fb0 <dhcp_parse_reply+0x34c>
 8010d58:	a201      	add	r2, pc, #4	@ (adr r2, 8010d60 <dhcp_parse_reply+0xfc>)
 8010d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5e:	bf00      	nop
 8010d60:	08010e51 	.word	0x08010e51
 8010d64:	08010e61 	.word	0x08010e61
 8010d68:	08010fb1 	.word	0x08010fb1
 8010d6c:	08010e83 	.word	0x08010e83
 8010d70:	08010fb1 	.word	0x08010fb1
 8010d74:	08010fb1 	.word	0x08010fb1
 8010d78:	08010fb1 	.word	0x08010fb1
 8010d7c:	08010fb1 	.word	0x08010fb1
 8010d80:	08010fb1 	.word	0x08010fb1
 8010d84:	08010fb1 	.word	0x08010fb1
 8010d88:	08010fb1 	.word	0x08010fb1
 8010d8c:	08010fb1 	.word	0x08010fb1
 8010d90:	08010fb1 	.word	0x08010fb1
 8010d94:	08010fb1 	.word	0x08010fb1
 8010d98:	08010fb1 	.word	0x08010fb1
 8010d9c:	08010fb1 	.word	0x08010fb1
 8010da0:	08010fb1 	.word	0x08010fb1
 8010da4:	08010fb1 	.word	0x08010fb1
 8010da8:	08010fb1 	.word	0x08010fb1
 8010dac:	08010fb1 	.word	0x08010fb1
 8010db0:	08010fb1 	.word	0x08010fb1
 8010db4:	08010fb1 	.word	0x08010fb1
 8010db8:	08010fb1 	.word	0x08010fb1
 8010dbc:	08010fb1 	.word	0x08010fb1
 8010dc0:	08010fb1 	.word	0x08010fb1
 8010dc4:	08010fb1 	.word	0x08010fb1
 8010dc8:	08010fb1 	.word	0x08010fb1
 8010dcc:	08010fb1 	.word	0x08010fb1
 8010dd0:	08010fb1 	.word	0x08010fb1
 8010dd4:	08010fb1 	.word	0x08010fb1
 8010dd8:	08010fb1 	.word	0x08010fb1
 8010ddc:	08010fb1 	.word	0x08010fb1
 8010de0:	08010fb1 	.word	0x08010fb1
 8010de4:	08010fb1 	.word	0x08010fb1
 8010de8:	08010fb1 	.word	0x08010fb1
 8010dec:	08010fb1 	.word	0x08010fb1
 8010df0:	08010fb1 	.word	0x08010fb1
 8010df4:	08010fb1 	.word	0x08010fb1
 8010df8:	08010fb1 	.word	0x08010fb1
 8010dfc:	08010fb1 	.word	0x08010fb1
 8010e00:	08010fb1 	.word	0x08010fb1
 8010e04:	08010fb1 	.word	0x08010fb1
 8010e08:	08010fb1 	.word	0x08010fb1
 8010e0c:	08010fb1 	.word	0x08010fb1
 8010e10:	08010fb1 	.word	0x08010fb1
 8010e14:	08010fb1 	.word	0x08010fb1
 8010e18:	08010fb1 	.word	0x08010fb1
 8010e1c:	08010fb1 	.word	0x08010fb1
 8010e20:	08010fb1 	.word	0x08010fb1
 8010e24:	08010fb1 	.word	0x08010fb1
 8010e28:	08010fb1 	.word	0x08010fb1
 8010e2c:	08010eaf 	.word	0x08010eaf
 8010e30:	08010ed1 	.word	0x08010ed1
 8010e34:	08010f0d 	.word	0x08010f0d
 8010e38:	08010f2f 	.word	0x08010f2f
 8010e3c:	08010fb1 	.word	0x08010fb1
 8010e40:	08010fb1 	.word	0x08010fb1
 8010e44:	08010fb1 	.word	0x08010fb1
 8010e48:	08010f6d 	.word	0x08010f6d
 8010e4c:	08010f8f 	.word	0x08010f8f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010e50:	2300      	movs	r3, #0
 8010e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010e56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010e5e:	e0ab      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e64:	2b04      	cmp	r3, #4
 8010e66:	d009      	beq.n	8010e7c <dhcp_parse_reply+0x218>
 8010e68:	4b3a      	ldr	r3, [pc, #232]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010e6a:	f240 622e 	movw	r2, #1582	@ 0x62e
 8010e6e:	493a      	ldr	r1, [pc, #232]	@ (8010f58 <dhcp_parse_reply+0x2f4>)
 8010e70:	483a      	ldr	r0, [pc, #232]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010e72:	f002 ffab 	bl	8013dcc <iprintf>
 8010e76:	f06f 0305 	mvn.w	r3, #5
 8010e7a:	e1b0      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010e7c:	2306      	movs	r3, #6
 8010e7e:	623b      	str	r3, [r7, #32]
        break;
 8010e80:	e09a      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010e82:	2304      	movs	r3, #4
 8010e84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010e88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d209      	bcs.n	8010ea8 <dhcp_parse_reply+0x244>
 8010e94:	4b2f      	ldr	r3, [pc, #188]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010e96:	f240 6233 	movw	r2, #1587	@ 0x633
 8010e9a:	4931      	ldr	r1, [pc, #196]	@ (8010f60 <dhcp_parse_reply+0x2fc>)
 8010e9c:	482f      	ldr	r0, [pc, #188]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010e9e:	f002 ff95 	bl	8013dcc <iprintf>
 8010ea2:	f06f 0305 	mvn.w	r3, #5
 8010ea6:	e19a      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010ea8:	2307      	movs	r3, #7
 8010eaa:	623b      	str	r3, [r7, #32]
        break;
 8010eac:	e084      	b.n	8010fb8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010eae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010eb2:	2b04      	cmp	r3, #4
 8010eb4:	d009      	beq.n	8010eca <dhcp_parse_reply+0x266>
 8010eb6:	4b27      	ldr	r3, [pc, #156]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010eb8:	f240 6241 	movw	r2, #1601	@ 0x641
 8010ebc:	4926      	ldr	r1, [pc, #152]	@ (8010f58 <dhcp_parse_reply+0x2f4>)
 8010ebe:	4827      	ldr	r0, [pc, #156]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010ec0:	f002 ff84 	bl	8013dcc <iprintf>
 8010ec4:	f06f 0305 	mvn.w	r3, #5
 8010ec8:	e189      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	623b      	str	r3, [r7, #32]
        break;
 8010ece:	e073      	b.n	8010fb8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d009      	beq.n	8010eec <dhcp_parse_reply+0x288>
 8010ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010eda:	f240 624f 	movw	r2, #1615	@ 0x64f
 8010ede:	4921      	ldr	r1, [pc, #132]	@ (8010f64 <dhcp_parse_reply+0x300>)
 8010ee0:	481e      	ldr	r0, [pc, #120]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010ee2:	f002 ff73 	bl	8013dcc <iprintf>
 8010ee6:	f06f 0305 	mvn.w	r3, #5
 8010eea:	e178      	b.n	80111de <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010eec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010eee:	2bf0      	cmp	r3, #240	@ 0xf0
 8010ef0:	d009      	beq.n	8010f06 <dhcp_parse_reply+0x2a2>
 8010ef2:	4b18      	ldr	r3, [pc, #96]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010ef4:	f240 6251 	movw	r2, #1617	@ 0x651
 8010ef8:	491b      	ldr	r1, [pc, #108]	@ (8010f68 <dhcp_parse_reply+0x304>)
 8010efa:	4818      	ldr	r0, [pc, #96]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010efc:	f002 ff66 	bl	8013dcc <iprintf>
 8010f00:	f06f 0305 	mvn.w	r3, #5
 8010f04:	e16b      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010f06:	2300      	movs	r3, #0
 8010f08:	623b      	str	r3, [r7, #32]
        break;
 8010f0a:	e055      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d009      	beq.n	8010f28 <dhcp_parse_reply+0x2c4>
 8010f14:	4b0f      	ldr	r3, [pc, #60]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010f16:	f240 6255 	movw	r2, #1621	@ 0x655
 8010f1a:	4912      	ldr	r1, [pc, #72]	@ (8010f64 <dhcp_parse_reply+0x300>)
 8010f1c:	480f      	ldr	r0, [pc, #60]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010f1e:	f002 ff55 	bl	8013dcc <iprintf>
 8010f22:	f06f 0305 	mvn.w	r3, #5
 8010f26:	e15a      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	623b      	str	r3, [r7, #32]
        break;
 8010f2c:	e044      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f32:	2b04      	cmp	r3, #4
 8010f34:	d009      	beq.n	8010f4a <dhcp_parse_reply+0x2e6>
 8010f36:	4b07      	ldr	r3, [pc, #28]	@ (8010f54 <dhcp_parse_reply+0x2f0>)
 8010f38:	f240 6259 	movw	r2, #1625	@ 0x659
 8010f3c:	4906      	ldr	r1, [pc, #24]	@ (8010f58 <dhcp_parse_reply+0x2f4>)
 8010f3e:	4807      	ldr	r0, [pc, #28]	@ (8010f5c <dhcp_parse_reply+0x2f8>)
 8010f40:	f002 ff44 	bl	8013dcc <iprintf>
 8010f44:	f06f 0305 	mvn.w	r3, #5
 8010f48:	e149      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010f4a:	2302      	movs	r3, #2
 8010f4c:	623b      	str	r3, [r7, #32]
        break;
 8010f4e:	e033      	b.n	8010fb8 <dhcp_parse_reply+0x354>
 8010f50:	2000865c 	.word	0x2000865c
 8010f54:	0801737c 	.word	0x0801737c
 8010f58:	08017604 	.word	0x08017604
 8010f5c:	080173dc 	.word	0x080173dc
 8010f60:	08017610 	.word	0x08017610
 8010f64:	08017624 	.word	0x08017624
 8010f68:	08017630 	.word	0x08017630
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f70:	2b04      	cmp	r3, #4
 8010f72:	d009      	beq.n	8010f88 <dhcp_parse_reply+0x324>
 8010f74:	4b9c      	ldr	r3, [pc, #624]	@ (80111e8 <dhcp_parse_reply+0x584>)
 8010f76:	f240 625d 	movw	r2, #1629	@ 0x65d
 8010f7a:	499c      	ldr	r1, [pc, #624]	@ (80111ec <dhcp_parse_reply+0x588>)
 8010f7c:	489c      	ldr	r0, [pc, #624]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 8010f7e:	f002 ff25 	bl	8013dcc <iprintf>
 8010f82:	f06f 0305 	mvn.w	r3, #5
 8010f86:	e12a      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010f88:	2304      	movs	r3, #4
 8010f8a:	623b      	str	r3, [r7, #32]
        break;
 8010f8c:	e014      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f92:	2b04      	cmp	r3, #4
 8010f94:	d009      	beq.n	8010faa <dhcp_parse_reply+0x346>
 8010f96:	4b94      	ldr	r3, [pc, #592]	@ (80111e8 <dhcp_parse_reply+0x584>)
 8010f98:	f240 6261 	movw	r2, #1633	@ 0x661
 8010f9c:	4993      	ldr	r1, [pc, #588]	@ (80111ec <dhcp_parse_reply+0x588>)
 8010f9e:	4894      	ldr	r0, [pc, #592]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 8010fa0:	f002 ff14 	bl	8013dcc <iprintf>
 8010fa4:	f06f 0305 	mvn.w	r3, #5
 8010fa8:	e119      	b.n	80111de <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010faa:	2305      	movs	r3, #5
 8010fac:	623b      	str	r3, [r7, #32]
        break;
 8010fae:	e003      	b.n	8010fb8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010fb6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010fb8:	7dfb      	ldrb	r3, [r7, #23]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d103      	bne.n	8010fc6 <dhcp_parse_reply+0x362>
      offset++;
 8010fbe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8010fc4:	e0a1      	b.n	801110a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010fc6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fcc:	4413      	add	r3, r2
 8010fce:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	dd02      	ble.n	8010fdc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010fd6:	f06f 0301 	mvn.w	r3, #1
 8010fda:	e100      	b.n	80111de <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8010fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fe0:	b29a      	uxth	r2, r3
 8010fe2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010fe4:	4413      	add	r3, r2
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	3302      	adds	r3, #2
 8010fea:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8010fec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 808a 	beq.w	801110a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	db02      	blt.n	8011006 <dhcp_parse_reply+0x3a2>
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	2b07      	cmp	r3, #7
 8011004:	dd06      	ble.n	8011014 <dhcp_parse_reply+0x3b0>
 8011006:	4b78      	ldr	r3, [pc, #480]	@ (80111e8 <dhcp_parse_reply+0x584>)
 8011008:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801100c:	4979      	ldr	r1, [pc, #484]	@ (80111f4 <dhcp_parse_reply+0x590>)
 801100e:	4878      	ldr	r0, [pc, #480]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 8011010:	f002 fedc 	bl	8013dcc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011014:	4a78      	ldr	r2, [pc, #480]	@ (80111f8 <dhcp_parse_reply+0x594>)
 8011016:	6a3b      	ldr	r3, [r7, #32]
 8011018:	4413      	add	r3, r2
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d174      	bne.n	801110a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8011020:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011024:	2b04      	cmp	r3, #4
 8011026:	bf28      	it	cs
 8011028:	2304      	movcs	r3, #4
 801102a:	b2db      	uxtb	r3, r3
 801102c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801102e:	8bfb      	ldrh	r3, [r7, #30]
 8011030:	8aba      	ldrh	r2, [r7, #20]
 8011032:	f107 0108 	add.w	r1, r7, #8
 8011036:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011038:	f7f7 fd52 	bl	8008ae0 <pbuf_copy_partial>
 801103c:	4603      	mov	r3, r0
 801103e:	461a      	mov	r2, r3
 8011040:	8abb      	ldrh	r3, [r7, #20]
 8011042:	4293      	cmp	r3, r2
 8011044:	d002      	beq.n	801104c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8011046:	f06f 0301 	mvn.w	r3, #1
 801104a:	e0c8      	b.n	80111de <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801104c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011050:	2b04      	cmp	r3, #4
 8011052:	d933      	bls.n	80110bc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011054:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011058:	f003 0303 	and.w	r3, r3, #3
 801105c:	b2db      	uxtb	r3, r3
 801105e:	2b00      	cmp	r3, #0
 8011060:	d009      	beq.n	8011076 <dhcp_parse_reply+0x412>
 8011062:	4b61      	ldr	r3, [pc, #388]	@ (80111e8 <dhcp_parse_reply+0x584>)
 8011064:	f240 6281 	movw	r2, #1665	@ 0x681
 8011068:	4964      	ldr	r1, [pc, #400]	@ (80111fc <dhcp_parse_reply+0x598>)
 801106a:	4861      	ldr	r0, [pc, #388]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 801106c:	f002 feae 	bl	8013dcc <iprintf>
 8011070:	f06f 0305 	mvn.w	r3, #5
 8011074:	e0b3      	b.n	80111de <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8011076:	4a60      	ldr	r2, [pc, #384]	@ (80111f8 <dhcp_parse_reply+0x594>)
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	4413      	add	r3, r2
 801107c:	2201      	movs	r2, #1
 801107e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	4618      	mov	r0, r3
 8011084:	f7f5 ff78 	bl	8006f78 <lwip_htonl>
 8011088:	4602      	mov	r2, r0
 801108a:	495d      	ldr	r1, [pc, #372]	@ (8011200 <dhcp_parse_reply+0x59c>)
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011092:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011096:	3b04      	subs	r3, #4
 8011098:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801109c:	8bfb      	ldrh	r3, [r7, #30]
 801109e:	3304      	adds	r3, #4
 80110a0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80110a2:	8a7a      	ldrh	r2, [r7, #18]
 80110a4:	8bfb      	ldrh	r3, [r7, #30]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d202      	bcs.n	80110b0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80110aa:	f06f 0301 	mvn.w	r3, #1
 80110ae:	e096      	b.n	80111de <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80110b0:	8a7b      	ldrh	r3, [r7, #18]
 80110b2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	3301      	adds	r3, #1
 80110b8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80110ba:	e79e      	b.n	8010ffa <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80110bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110c0:	2b04      	cmp	r3, #4
 80110c2:	d106      	bne.n	80110d2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7f5 ff56 	bl	8006f78 <lwip_htonl>
 80110cc:	4603      	mov	r3, r0
 80110ce:	60bb      	str	r3, [r7, #8]
 80110d0:	e011      	b.n	80110f6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80110d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d009      	beq.n	80110ee <dhcp_parse_reply+0x48a>
 80110da:	4b43      	ldr	r3, [pc, #268]	@ (80111e8 <dhcp_parse_reply+0x584>)
 80110dc:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80110e0:	4948      	ldr	r1, [pc, #288]	@ (8011204 <dhcp_parse_reply+0x5a0>)
 80110e2:	4843      	ldr	r0, [pc, #268]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 80110e4:	f002 fe72 	bl	8013dcc <iprintf>
 80110e8:	f06f 0305 	mvn.w	r3, #5
 80110ec:	e077      	b.n	80111de <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80110ee:	f107 0308 	add.w	r3, r7, #8
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80110f6:	4a40      	ldr	r2, [pc, #256]	@ (80111f8 <dhcp_parse_reply+0x594>)
 80110f8:	6a3b      	ldr	r3, [r7, #32]
 80110fa:	4413      	add	r3, r2
 80110fc:	2201      	movs	r2, #1
 80110fe:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	493f      	ldr	r1, [pc, #252]	@ (8011200 <dhcp_parse_reply+0x59c>)
 8011104:	6a3b      	ldr	r3, [r7, #32]
 8011106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801110a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801110c:	895b      	ldrh	r3, [r3, #10]
 801110e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011110:	429a      	cmp	r2, r3
 8011112:	d324      	bcc.n	801115e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8011114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011116:	895b      	ldrh	r3, [r3, #10]
 8011118:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801111e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011120:	895b      	ldrh	r3, [r3, #10]
 8011122:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8011124:	1ad3      	subs	r3, r2, r3
 8011126:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8011128:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801112a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801112c:	429a      	cmp	r2, r3
 801112e:	d213      	bcs.n	8011158 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8011130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011138:	2b00      	cmp	r3, #0
 801113a:	d109      	bne.n	8011150 <dhcp_parse_reply+0x4ec>
 801113c:	4b2a      	ldr	r3, [pc, #168]	@ (80111e8 <dhcp_parse_reply+0x584>)
 801113e:	f240 629d 	movw	r2, #1693	@ 0x69d
 8011142:	4931      	ldr	r1, [pc, #196]	@ (8011208 <dhcp_parse_reply+0x5a4>)
 8011144:	482a      	ldr	r0, [pc, #168]	@ (80111f0 <dhcp_parse_reply+0x58c>)
 8011146:	f002 fe41 	bl	8013dcc <iprintf>
 801114a:	f06f 0305 	mvn.w	r3, #5
 801114e:	e046      	b.n	80111de <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8011150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011156:	e002      	b.n	801115e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011158:	f06f 0301 	mvn.w	r3, #1
 801115c:	e03f      	b.n	80111de <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801115e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011160:	2b00      	cmp	r3, #0
 8011162:	d00a      	beq.n	801117a <dhcp_parse_reply+0x516>
 8011164:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011166:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011168:	429a      	cmp	r2, r3
 801116a:	d206      	bcs.n	801117a <dhcp_parse_reply+0x516>
 801116c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801116e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011170:	4413      	add	r3, r2
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	2bff      	cmp	r3, #255	@ 0xff
 8011176:	f47f adb8 	bne.w	8010cea <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801117a:	4b1f      	ldr	r3, [pc, #124]	@ (80111f8 <dhcp_parse_reply+0x594>)
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d018      	beq.n	80111b4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011182:	4b1f      	ldr	r3, [pc, #124]	@ (8011200 <dhcp_parse_reply+0x59c>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011188:	4b1b      	ldr	r3, [pc, #108]	@ (80111f8 <dhcp_parse_reply+0x594>)
 801118a:	2200      	movs	r2, #0
 801118c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b01      	cmp	r3, #1
 8011192:	d102      	bne.n	801119a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8011194:	2301      	movs	r3, #1
 8011196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011198:	e00c      	b.n	80111b4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d102      	bne.n	80111a6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80111a0:	2301      	movs	r3, #1
 80111a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111a4:	e006      	b.n	80111b4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2b03      	cmp	r3, #3
 80111aa:	d103      	bne.n	80111b4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80111ac:	2301      	movs	r3, #1
 80111ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80111b0:	2301      	movs	r3, #1
 80111b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80111b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d006      	beq.n	80111c8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80111be:	236c      	movs	r3, #108	@ 0x6c
 80111c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80111c2:	23ec      	movs	r3, #236	@ 0xec
 80111c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80111c6:	e56a      	b.n	8010c9e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80111c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d006      	beq.n	80111dc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80111ce:	2300      	movs	r3, #0
 80111d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80111d2:	232c      	movs	r3, #44	@ 0x2c
 80111d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80111d6:	236c      	movs	r3, #108	@ 0x6c
 80111d8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80111da:	e560      	b.n	8010c9e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3740      	adds	r7, #64	@ 0x40
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	0801737c 	.word	0x0801737c
 80111ec:	08017604 	.word	0x08017604
 80111f0:	080173dc 	.word	0x080173dc
 80111f4:	08017648 	.word	0x08017648
 80111f8:	2000865c 	.word	0x2000865c
 80111fc:	0801765c 	.word	0x0801765c
 8011200:	2000863c 	.word	0x2000863c
 8011204:	08017674 	.word	0x08017674
 8011208:	08017688 	.word	0x08017688

0801120c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b08a      	sub	sp, #40	@ 0x28
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801121a:	4b60      	ldr	r3, [pc, #384]	@ (801139c <dhcp_recv+0x190>)
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011224:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	f000 809d 	beq.w	801136e <dhcp_recv+0x162>
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	791b      	ldrb	r3, [r3, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 8098 	beq.w	801136e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	895b      	ldrh	r3, [r3, #10]
 8011242:	2b2b      	cmp	r3, #43	@ 0x2b
 8011244:	f240 8095 	bls.w	8011372 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011248:	69bb      	ldr	r3, [r7, #24]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2b02      	cmp	r3, #2
 801124e:	f040 8092 	bne.w	8011376 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011252:	2300      	movs	r3, #0
 8011254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011258:	e012      	b.n	8011280 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801125a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801125e:	6a3a      	ldr	r2, [r7, #32]
 8011260:	4413      	add	r3, r2
 8011262:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8011266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801126a:	69b9      	ldr	r1, [r7, #24]
 801126c:	440b      	add	r3, r1
 801126e:	7f1b      	ldrb	r3, [r3, #28]
 8011270:	429a      	cmp	r2, r3
 8011272:	f040 8082 	bne.w	801137a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801127a:	3301      	adds	r3, #1
 801127c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011280:	6a3b      	ldr	r3, [r7, #32]
 8011282:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011286:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801128a:	429a      	cmp	r2, r3
 801128c:	d203      	bcs.n	8011296 <dhcp_recv+0x8a>
 801128e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011292:	2b05      	cmp	r3, #5
 8011294:	d9e1      	bls.n	801125a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	4618      	mov	r0, r3
 801129c:	f7f5 fe6c 	bl	8006f78 <lwip_htonl>
 80112a0:	4602      	mov	r2, r0
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d169      	bne.n	801137e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80112aa:	69f9      	ldr	r1, [r7, #28]
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff fcd9 	bl	8010c64 <dhcp_parse_reply>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d164      	bne.n	8011382 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80112b8:	4b39      	ldr	r3, [pc, #228]	@ (80113a0 <dhcp_recv+0x194>)
 80112ba:	785b      	ldrb	r3, [r3, #1]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d062      	beq.n	8011386 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80112c6:	4b37      	ldr	r3, [pc, #220]	@ (80113a4 <dhcp_recv+0x198>)
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80112cc:	7cfb      	ldrb	r3, [r7, #19]
 80112ce:	2b05      	cmp	r3, #5
 80112d0:	d12a      	bne.n	8011328 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	795b      	ldrb	r3, [r3, #5]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d112      	bne.n	8011300 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80112da:	6979      	ldr	r1, [r7, #20]
 80112dc:	6a38      	ldr	r0, [r7, #32]
 80112de:	f7fe fe1d 	bl	800ff1c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80112e8:	f003 0308 	and.w	r3, r3, #8
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d003      	beq.n	80112f8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80112f0:	6a38      	ldr	r0, [r7, #32]
 80112f2:	f7fe fb8b 	bl	800fa0c <dhcp_check>
 80112f6:	e049      	b.n	801138c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80112f8:	6a38      	ldr	r0, [r7, #32]
 80112fa:	f7ff f86d 	bl	80103d8 <dhcp_bind>
 80112fe:	e045      	b.n	801138c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	795b      	ldrb	r3, [r3, #5]
 8011304:	2b03      	cmp	r3, #3
 8011306:	d007      	beq.n	8011318 <dhcp_recv+0x10c>
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	795b      	ldrb	r3, [r3, #5]
 801130c:	2b04      	cmp	r3, #4
 801130e:	d003      	beq.n	8011318 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011314:	2b05      	cmp	r3, #5
 8011316:	d139      	bne.n	801138c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011318:	6979      	ldr	r1, [r7, #20]
 801131a:	6a38      	ldr	r0, [r7, #32]
 801131c:	f7fe fdfe 	bl	800ff1c <dhcp_handle_ack>
      dhcp_bind(netif);
 8011320:	6a38      	ldr	r0, [r7, #32]
 8011322:	f7ff f859 	bl	80103d8 <dhcp_bind>
 8011326:	e031      	b.n	801138c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011328:	7cfb      	ldrb	r3, [r7, #19]
 801132a:	2b06      	cmp	r3, #6
 801132c:	d113      	bne.n	8011356 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011332:	2b03      	cmp	r3, #3
 8011334:	d00b      	beq.n	801134e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	795b      	ldrb	r3, [r3, #5]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d007      	beq.n	801134e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011342:	2b04      	cmp	r3, #4
 8011344:	d003      	beq.n	801134e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	795b      	ldrb	r3, [r3, #5]
 801134a:	2b05      	cmp	r3, #5
 801134c:	d103      	bne.n	8011356 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801134e:	6a38      	ldr	r0, [r7, #32]
 8011350:	f7fe fb42 	bl	800f9d8 <dhcp_handle_nak>
 8011354:	e01a      	b.n	801138c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011356:	7cfb      	ldrb	r3, [r7, #19]
 8011358:	2b02      	cmp	r3, #2
 801135a:	d116      	bne.n	801138a <dhcp_recv+0x17e>
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	795b      	ldrb	r3, [r3, #5]
 8011360:	2b06      	cmp	r3, #6
 8011362:	d112      	bne.n	801138a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011364:	6979      	ldr	r1, [r7, #20]
 8011366:	6a38      	ldr	r0, [r7, #32]
 8011368:	f7fe fb84 	bl	800fa74 <dhcp_handle_offer>
 801136c:	e00e      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801136e:	bf00      	nop
 8011370:	e00c      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011372:	bf00      	nop
 8011374:	e00a      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011376:	bf00      	nop
 8011378:	e008      	b.n	801138c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801137a:	bf00      	nop
 801137c:	e006      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801137e:	bf00      	nop
 8011380:	e004      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011382:	bf00      	nop
 8011384:	e002      	b.n	801138c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011386:	bf00      	nop
 8011388:	e000      	b.n	801138c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801138a:	bf00      	nop
  pbuf_free(p);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7f7 f9ad 	bl	80086ec <pbuf_free>
}
 8011392:	bf00      	nop
 8011394:	3728      	adds	r7, #40	@ 0x28
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	200056a0 	.word	0x200056a0
 80113a0:	2000865c 	.word	0x2000865c
 80113a4:	2000863c 	.word	0x2000863c

080113a8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b088      	sub	sp, #32
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	603b      	str	r3, [r7, #0]
 80113b4:	4613      	mov	r3, r2
 80113b6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d108      	bne.n	80113d0 <dhcp_create_msg+0x28>
 80113be:	4b5f      	ldr	r3, [pc, #380]	@ (801153c <dhcp_create_msg+0x194>)
 80113c0:	f240 7269 	movw	r2, #1897	@ 0x769
 80113c4:	495e      	ldr	r1, [pc, #376]	@ (8011540 <dhcp_create_msg+0x198>)
 80113c6:	485f      	ldr	r0, [pc, #380]	@ (8011544 <dhcp_create_msg+0x19c>)
 80113c8:	f002 fd00 	bl	8013dcc <iprintf>
 80113cc:	2300      	movs	r3, #0
 80113ce:	e0b1      	b.n	8011534 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d108      	bne.n	80113e8 <dhcp_create_msg+0x40>
 80113d6:	4b59      	ldr	r3, [pc, #356]	@ (801153c <dhcp_create_msg+0x194>)
 80113d8:	f240 726a 	movw	r2, #1898	@ 0x76a
 80113dc:	495a      	ldr	r1, [pc, #360]	@ (8011548 <dhcp_create_msg+0x1a0>)
 80113de:	4859      	ldr	r0, [pc, #356]	@ (8011544 <dhcp_create_msg+0x19c>)
 80113e0:	f002 fcf4 	bl	8013dcc <iprintf>
 80113e4:	2300      	movs	r3, #0
 80113e6:	e0a5      	b.n	8011534 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80113e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80113ec:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80113f0:	2036      	movs	r0, #54	@ 0x36
 80113f2:	f7f6 fe97 	bl	8008124 <pbuf_alloc>
 80113f6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80113fe:	2300      	movs	r3, #0
 8011400:	e098      	b.n	8011534 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	895b      	ldrh	r3, [r3, #10]
 8011406:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801140a:	d206      	bcs.n	801141a <dhcp_create_msg+0x72>
 801140c:	4b4b      	ldr	r3, [pc, #300]	@ (801153c <dhcp_create_msg+0x194>)
 801140e:	f240 7271 	movw	r2, #1905	@ 0x771
 8011412:	494e      	ldr	r1, [pc, #312]	@ (801154c <dhcp_create_msg+0x1a4>)
 8011414:	484b      	ldr	r0, [pc, #300]	@ (8011544 <dhcp_create_msg+0x19c>)
 8011416:	f002 fcd9 	bl	8013dcc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	2b03      	cmp	r3, #3
 801141e:	d103      	bne.n	8011428 <dhcp_create_msg+0x80>
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	795b      	ldrb	r3, [r3, #5]
 8011424:	2b03      	cmp	r3, #3
 8011426:	d10d      	bne.n	8011444 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	799b      	ldrb	r3, [r3, #6]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d105      	bne.n	801143c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011430:	f002 fbcc 	bl	8013bcc <rand>
 8011434:	4603      	mov	r3, r0
 8011436:	461a      	mov	r2, r3
 8011438:	4b45      	ldr	r3, [pc, #276]	@ (8011550 <dhcp_create_msg+0x1a8>)
 801143a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801143c:	4b44      	ldr	r3, [pc, #272]	@ (8011550 <dhcp_create_msg+0x1a8>)
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801144a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801144e:	2100      	movs	r1, #0
 8011450:	6978      	ldr	r0, [r7, #20]
 8011452:	f002 fd20 	bl	8013e96 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	2201      	movs	r2, #1
 801145a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	2201      	movs	r2, #1
 8011460:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4618      	mov	r0, r3
 8011472:	f7f5 fd81 	bl	8006f78 <lwip_htonl>
 8011476:	4602      	mov	r2, r0
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801147c:	79fb      	ldrb	r3, [r7, #7]
 801147e:	2b08      	cmp	r3, #8
 8011480:	d010      	beq.n	80114a4 <dhcp_create_msg+0xfc>
 8011482:	79fb      	ldrb	r3, [r7, #7]
 8011484:	2b04      	cmp	r3, #4
 8011486:	d00d      	beq.n	80114a4 <dhcp_create_msg+0xfc>
 8011488:	79fb      	ldrb	r3, [r7, #7]
 801148a:	2b07      	cmp	r3, #7
 801148c:	d00a      	beq.n	80114a4 <dhcp_create_msg+0xfc>
 801148e:	79fb      	ldrb	r3, [r7, #7]
 8011490:	2b03      	cmp	r3, #3
 8011492:	d10c      	bne.n	80114ae <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011498:	2b05      	cmp	r3, #5
 801149a:	d003      	beq.n	80114a4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	795b      	ldrb	r3, [r3, #5]
 80114a0:	2b04      	cmp	r3, #4
 80114a2:	d104      	bne.n	80114ae <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	3304      	adds	r3, #4
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80114ae:	2300      	movs	r3, #0
 80114b0:	83fb      	strh	r3, [r7, #30]
 80114b2:	e00c      	b.n	80114ce <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80114b4:	8bfa      	ldrh	r2, [r7, #30]
 80114b6:	8bfb      	ldrh	r3, [r7, #30]
 80114b8:	68f9      	ldr	r1, [r7, #12]
 80114ba:	440a      	add	r2, r1
 80114bc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80114c0:	697a      	ldr	r2, [r7, #20]
 80114c2:	4413      	add	r3, r2
 80114c4:	460a      	mov	r2, r1
 80114c6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80114c8:	8bfb      	ldrh	r3, [r7, #30]
 80114ca:	3301      	adds	r3, #1
 80114cc:	83fb      	strh	r3, [r7, #30]
 80114ce:	8bfb      	ldrh	r3, [r7, #30]
 80114d0:	2b05      	cmp	r3, #5
 80114d2:	d9ef      	bls.n	80114b4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	2200      	movs	r2, #0
 80114d8:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80114dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80114e0:	2200      	movs	r2, #0
 80114e2:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80114e6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80114ea:	2200      	movs	r2, #0
 80114ec:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80114f0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80114f4:	2200      	movs	r2, #0
 80114f6:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80114fa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011504:	2301      	movs	r3, #1
 8011506:	2235      	movs	r2, #53	@ 0x35
 8011508:	2000      	movs	r0, #0
 801150a:	f7ff fadb 	bl	8010ac4 <dhcp_option>
 801150e:	4603      	mov	r3, r0
 8011510:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011518:	79fa      	ldrb	r2, [r7, #7]
 801151a:	8a7b      	ldrh	r3, [r7, #18]
 801151c:	4618      	mov	r0, r3
 801151e:	f7ff fb05 	bl	8010b2c <dhcp_option_byte>
 8011522:	4603      	mov	r3, r0
 8011524:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d002      	beq.n	8011532 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	8a7a      	ldrh	r2, [r7, #18]
 8011530:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011532:	69bb      	ldr	r3, [r7, #24]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0801737c 	.word	0x0801737c
 8011540:	0801769c 	.word	0x0801769c
 8011544:	080173dc 	.word	0x080173dc
 8011548:	080176bc 	.word	0x080176bc
 801154c:	080176dc 	.word	0x080176dc
 8011550:	2000866c 	.word	0x2000866c

08011554 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
 8011560:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011562:	89fb      	ldrh	r3, [r7, #14]
 8011564:	1c5a      	adds	r2, r3, #1
 8011566:	81fa      	strh	r2, [r7, #14]
 8011568:	461a      	mov	r2, r3
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	4413      	add	r3, r2
 801156e:	22ff      	movs	r2, #255	@ 0xff
 8011570:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011572:	e007      	b.n	8011584 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011574:	89fb      	ldrh	r3, [r7, #14]
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	81fa      	strh	r2, [r7, #14]
 801157a:	461a      	mov	r2, r3
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	4413      	add	r3, r2
 8011580:	2200      	movs	r2, #0
 8011582:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011584:	89fb      	ldrh	r3, [r7, #14]
 8011586:	2b43      	cmp	r3, #67	@ 0x43
 8011588:	d904      	bls.n	8011594 <dhcp_option_trailer+0x40>
 801158a:	89fb      	ldrh	r3, [r7, #14]
 801158c:	f003 0303 	and.w	r3, r3, #3
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <dhcp_option_trailer+0x46>
 8011594:	89fb      	ldrh	r3, [r7, #14]
 8011596:	2b43      	cmp	r3, #67	@ 0x43
 8011598:	d9ec      	bls.n	8011574 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801159a:	89fb      	ldrh	r3, [r7, #14]
 801159c:	33f0      	adds	r3, #240	@ 0xf0
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7f6 ff1c 	bl	80083e0 <pbuf_realloc>
}
 80115a8:	bf00      	nop
 80115aa:	3710      	adds	r7, #16
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b085      	sub	sp, #20
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d017      	beq.n	80115ee <dhcp_supplied_address+0x3e>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d013      	beq.n	80115ee <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115ca:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	795b      	ldrb	r3, [r3, #5]
 80115d0:	2b0a      	cmp	r3, #10
 80115d2:	d007      	beq.n	80115e4 <dhcp_supplied_address+0x34>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	795b      	ldrb	r3, [r3, #5]
 80115d8:	2b05      	cmp	r3, #5
 80115da:	d003      	beq.n	80115e4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80115e0:	2b04      	cmp	r3, #4
 80115e2:	d101      	bne.n	80115e8 <dhcp_supplied_address+0x38>
 80115e4:	2301      	movs	r3, #1
 80115e6:	e000      	b.n	80115ea <dhcp_supplied_address+0x3a>
 80115e8:	2300      	movs	r3, #0
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	e000      	b.n	80115f0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3714      	adds	r7, #20
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr

080115fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011604:	4915      	ldr	r1, [pc, #84]	@ (801165c <etharp_free_entry+0x60>)
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	4613      	mov	r3, r2
 801160a:	005b      	lsls	r3, r3, #1
 801160c:	4413      	add	r3, r2
 801160e:	00db      	lsls	r3, r3, #3
 8011610:	440b      	add	r3, r1
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011618:	4910      	ldr	r1, [pc, #64]	@ (801165c <etharp_free_entry+0x60>)
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	4613      	mov	r3, r2
 801161e:	005b      	lsls	r3, r3, #1
 8011620:	4413      	add	r3, r2
 8011622:	00db      	lsls	r3, r3, #3
 8011624:	440b      	add	r3, r1
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4618      	mov	r0, r3
 801162a:	f7f7 f85f 	bl	80086ec <pbuf_free>
    arp_table[i].q = NULL;
 801162e:	490b      	ldr	r1, [pc, #44]	@ (801165c <etharp_free_entry+0x60>)
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	4613      	mov	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	4413      	add	r3, r2
 8011638:	00db      	lsls	r3, r3, #3
 801163a:	440b      	add	r3, r1
 801163c:	2200      	movs	r2, #0
 801163e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011640:	4906      	ldr	r1, [pc, #24]	@ (801165c <etharp_free_entry+0x60>)
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	4613      	mov	r3, r2
 8011646:	005b      	lsls	r3, r3, #1
 8011648:	4413      	add	r3, r2
 801164a:	00db      	lsls	r3, r3, #3
 801164c:	440b      	add	r3, r1
 801164e:	3314      	adds	r3, #20
 8011650:	2200      	movs	r2, #0
 8011652:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011654:	bf00      	nop
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	20008670 	.word	0x20008670

08011660 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011666:	2300      	movs	r3, #0
 8011668:	607b      	str	r3, [r7, #4]
 801166a:	e096      	b.n	801179a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801166c:	494f      	ldr	r1, [pc, #316]	@ (80117ac <etharp_tmr+0x14c>)
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	4613      	mov	r3, r2
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	4413      	add	r3, r2
 8011676:	00db      	lsls	r3, r3, #3
 8011678:	440b      	add	r3, r1
 801167a:	3314      	adds	r3, #20
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011680:	78fb      	ldrb	r3, [r7, #3]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 8086 	beq.w	8011794 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011688:	4948      	ldr	r1, [pc, #288]	@ (80117ac <etharp_tmr+0x14c>)
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	4613      	mov	r3, r2
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	4413      	add	r3, r2
 8011692:	00db      	lsls	r3, r3, #3
 8011694:	440b      	add	r3, r1
 8011696:	3312      	adds	r3, #18
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	b298      	uxth	r0, r3
 801169e:	4943      	ldr	r1, [pc, #268]	@ (80117ac <etharp_tmr+0x14c>)
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	4613      	mov	r3, r2
 80116a4:	005b      	lsls	r3, r3, #1
 80116a6:	4413      	add	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	440b      	add	r3, r1
 80116ac:	3312      	adds	r3, #18
 80116ae:	4602      	mov	r2, r0
 80116b0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80116b2:	493e      	ldr	r1, [pc, #248]	@ (80117ac <etharp_tmr+0x14c>)
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	4613      	mov	r3, r2
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	4413      	add	r3, r2
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	440b      	add	r3, r1
 80116c0:	3312      	adds	r3, #18
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80116c8:	d215      	bcs.n	80116f6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80116ca:	4938      	ldr	r1, [pc, #224]	@ (80117ac <etharp_tmr+0x14c>)
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	4613      	mov	r3, r2
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4413      	add	r3, r2
 80116d4:	00db      	lsls	r3, r3, #3
 80116d6:	440b      	add	r3, r1
 80116d8:	3314      	adds	r3, #20
 80116da:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80116dc:	2b01      	cmp	r3, #1
 80116de:	d10e      	bne.n	80116fe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80116e0:	4932      	ldr	r1, [pc, #200]	@ (80117ac <etharp_tmr+0x14c>)
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	440b      	add	r3, r1
 80116ee:	3312      	adds	r3, #18
 80116f0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80116f2:	2b04      	cmp	r3, #4
 80116f4:	d903      	bls.n	80116fe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7ff ff80 	bl	80115fc <etharp_free_entry>
 80116fc:	e04a      	b.n	8011794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80116fe:	492b      	ldr	r1, [pc, #172]	@ (80117ac <etharp_tmr+0x14c>)
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	4613      	mov	r3, r2
 8011704:	005b      	lsls	r3, r3, #1
 8011706:	4413      	add	r3, r2
 8011708:	00db      	lsls	r3, r3, #3
 801170a:	440b      	add	r3, r1
 801170c:	3314      	adds	r3, #20
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b03      	cmp	r3, #3
 8011712:	d10a      	bne.n	801172a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011714:	4925      	ldr	r1, [pc, #148]	@ (80117ac <etharp_tmr+0x14c>)
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	4613      	mov	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	3314      	adds	r3, #20
 8011724:	2204      	movs	r2, #4
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	e034      	b.n	8011794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801172a:	4920      	ldr	r1, [pc, #128]	@ (80117ac <etharp_tmr+0x14c>)
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	4613      	mov	r3, r2
 8011730:	005b      	lsls	r3, r3, #1
 8011732:	4413      	add	r3, r2
 8011734:	00db      	lsls	r3, r3, #3
 8011736:	440b      	add	r3, r1
 8011738:	3314      	adds	r3, #20
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	2b04      	cmp	r3, #4
 801173e:	d10a      	bne.n	8011756 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011740:	491a      	ldr	r1, [pc, #104]	@ (80117ac <etharp_tmr+0x14c>)
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	4613      	mov	r3, r2
 8011746:	005b      	lsls	r3, r3, #1
 8011748:	4413      	add	r3, r2
 801174a:	00db      	lsls	r3, r3, #3
 801174c:	440b      	add	r3, r1
 801174e:	3314      	adds	r3, #20
 8011750:	2202      	movs	r2, #2
 8011752:	701a      	strb	r2, [r3, #0]
 8011754:	e01e      	b.n	8011794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011756:	4915      	ldr	r1, [pc, #84]	@ (80117ac <etharp_tmr+0x14c>)
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	4613      	mov	r3, r2
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	4413      	add	r3, r2
 8011760:	00db      	lsls	r3, r3, #3
 8011762:	440b      	add	r3, r1
 8011764:	3314      	adds	r3, #20
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	2b01      	cmp	r3, #1
 801176a:	d113      	bne.n	8011794 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801176c:	490f      	ldr	r1, [pc, #60]	@ (80117ac <etharp_tmr+0x14c>)
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	4613      	mov	r3, r2
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	4413      	add	r3, r2
 8011776:	00db      	lsls	r3, r3, #3
 8011778:	440b      	add	r3, r1
 801177a:	3308      	adds	r3, #8
 801177c:	6818      	ldr	r0, [r3, #0]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	4613      	mov	r3, r2
 8011782:	005b      	lsls	r3, r3, #1
 8011784:	4413      	add	r3, r2
 8011786:	00db      	lsls	r3, r3, #3
 8011788:	4a08      	ldr	r2, [pc, #32]	@ (80117ac <etharp_tmr+0x14c>)
 801178a:	4413      	add	r3, r2
 801178c:	3304      	adds	r3, #4
 801178e:	4619      	mov	r1, r3
 8011790:	f000 fe72 	bl	8012478 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3301      	adds	r3, #1
 8011798:	607b      	str	r3, [r7, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2b09      	cmp	r3, #9
 801179e:	f77f af65 	ble.w	801166c <etharp_tmr+0xc>
      }
    }
  }
}
 80117a2:	bf00      	nop
 80117a4:	bf00      	nop
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	20008670 	.word	0x20008670

080117b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b08a      	sub	sp, #40	@ 0x28
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	460b      	mov	r3, r1
 80117ba:	607a      	str	r2, [r7, #4]
 80117bc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80117be:	230a      	movs	r3, #10
 80117c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80117c2:	230a      	movs	r3, #10
 80117c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80117c6:	230a      	movs	r3, #10
 80117c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80117ca:	2300      	movs	r3, #0
 80117cc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80117ce:	230a      	movs	r3, #10
 80117d0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	83bb      	strh	r3, [r7, #28]
 80117d6:	2300      	movs	r3, #0
 80117d8:	837b      	strh	r3, [r7, #26]
 80117da:	2300      	movs	r3, #0
 80117dc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117de:	2300      	movs	r3, #0
 80117e0:	843b      	strh	r3, [r7, #32]
 80117e2:	e0ae      	b.n	8011942 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80117e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117e8:	49a6      	ldr	r1, [pc, #664]	@ (8011a84 <etharp_find_entry+0x2d4>)
 80117ea:	4613      	mov	r3, r2
 80117ec:	005b      	lsls	r3, r3, #1
 80117ee:	4413      	add	r3, r2
 80117f0:	00db      	lsls	r3, r3, #3
 80117f2:	440b      	add	r3, r1
 80117f4:	3314      	adds	r3, #20
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80117fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80117fe:	2b0a      	cmp	r3, #10
 8011800:	d105      	bne.n	801180e <etharp_find_entry+0x5e>
 8011802:	7dfb      	ldrb	r3, [r7, #23]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d102      	bne.n	801180e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011808:	8c3b      	ldrh	r3, [r7, #32]
 801180a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801180c:	e095      	b.n	801193a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801180e:	7dfb      	ldrb	r3, [r7, #23]
 8011810:	2b00      	cmp	r3, #0
 8011812:	f000 8092 	beq.w	801193a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011816:	7dfb      	ldrb	r3, [r7, #23]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d009      	beq.n	8011830 <etharp_find_entry+0x80>
 801181c:	7dfb      	ldrb	r3, [r7, #23]
 801181e:	2b01      	cmp	r3, #1
 8011820:	d806      	bhi.n	8011830 <etharp_find_entry+0x80>
 8011822:	4b99      	ldr	r3, [pc, #612]	@ (8011a88 <etharp_find_entry+0x2d8>)
 8011824:	f240 1223 	movw	r2, #291	@ 0x123
 8011828:	4998      	ldr	r1, [pc, #608]	@ (8011a8c <etharp_find_entry+0x2dc>)
 801182a:	4899      	ldr	r0, [pc, #612]	@ (8011a90 <etharp_find_entry+0x2e0>)
 801182c:	f002 face 	bl	8013dcc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d020      	beq.n	8011878 <etharp_find_entry+0xc8>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	6819      	ldr	r1, [r3, #0]
 801183a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801183e:	4891      	ldr	r0, [pc, #580]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011840:	4613      	mov	r3, r2
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	4413      	add	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4403      	add	r3, r0
 801184a:	3304      	adds	r3, #4
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	4299      	cmp	r1, r3
 8011850:	d112      	bne.n	8011878 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00c      	beq.n	8011872 <etharp_find_entry+0xc2>
 8011858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801185c:	4989      	ldr	r1, [pc, #548]	@ (8011a84 <etharp_find_entry+0x2d4>)
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	440b      	add	r3, r1
 8011868:	3308      	adds	r3, #8
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	429a      	cmp	r2, r3
 8011870:	d102      	bne.n	8011878 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011872:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011876:	e100      	b.n	8011a7a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011878:	7dfb      	ldrb	r3, [r7, #23]
 801187a:	2b01      	cmp	r3, #1
 801187c:	d140      	bne.n	8011900 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801187e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011882:	4980      	ldr	r1, [pc, #512]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011884:	4613      	mov	r3, r2
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	4413      	add	r3, r2
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	440b      	add	r3, r1
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d01a      	beq.n	80118ca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011894:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011898:	497a      	ldr	r1, [pc, #488]	@ (8011a84 <etharp_find_entry+0x2d4>)
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	440b      	add	r3, r1
 80118a4:	3312      	adds	r3, #18
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	8bba      	ldrh	r2, [r7, #28]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d845      	bhi.n	801193a <etharp_find_entry+0x18a>
            old_queue = i;
 80118ae:	8c3b      	ldrh	r3, [r7, #32]
 80118b0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80118b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118b6:	4973      	ldr	r1, [pc, #460]	@ (8011a84 <etharp_find_entry+0x2d4>)
 80118b8:	4613      	mov	r3, r2
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	4413      	add	r3, r2
 80118be:	00db      	lsls	r3, r3, #3
 80118c0:	440b      	add	r3, r1
 80118c2:	3312      	adds	r3, #18
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	83bb      	strh	r3, [r7, #28]
 80118c8:	e037      	b.n	801193a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80118ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118ce:	496d      	ldr	r1, [pc, #436]	@ (8011a84 <etharp_find_entry+0x2d4>)
 80118d0:	4613      	mov	r3, r2
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	4413      	add	r3, r2
 80118d6:	00db      	lsls	r3, r3, #3
 80118d8:	440b      	add	r3, r1
 80118da:	3312      	adds	r3, #18
 80118dc:	881b      	ldrh	r3, [r3, #0]
 80118de:	8b7a      	ldrh	r2, [r7, #26]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d82a      	bhi.n	801193a <etharp_find_entry+0x18a>
            old_pending = i;
 80118e4:	8c3b      	ldrh	r3, [r7, #32]
 80118e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80118e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118ec:	4965      	ldr	r1, [pc, #404]	@ (8011a84 <etharp_find_entry+0x2d4>)
 80118ee:	4613      	mov	r3, r2
 80118f0:	005b      	lsls	r3, r3, #1
 80118f2:	4413      	add	r3, r2
 80118f4:	00db      	lsls	r3, r3, #3
 80118f6:	440b      	add	r3, r1
 80118f8:	3312      	adds	r3, #18
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	837b      	strh	r3, [r7, #26]
 80118fe:	e01c      	b.n	801193a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011900:	7dfb      	ldrb	r3, [r7, #23]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d919      	bls.n	801193a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011906:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801190a:	495e      	ldr	r1, [pc, #376]	@ (8011a84 <etharp_find_entry+0x2d4>)
 801190c:	4613      	mov	r3, r2
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	4413      	add	r3, r2
 8011912:	00db      	lsls	r3, r3, #3
 8011914:	440b      	add	r3, r1
 8011916:	3312      	adds	r3, #18
 8011918:	881b      	ldrh	r3, [r3, #0]
 801191a:	8b3a      	ldrh	r2, [r7, #24]
 801191c:	429a      	cmp	r2, r3
 801191e:	d80c      	bhi.n	801193a <etharp_find_entry+0x18a>
            old_stable = i;
 8011920:	8c3b      	ldrh	r3, [r7, #32]
 8011922:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8011924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011928:	4956      	ldr	r1, [pc, #344]	@ (8011a84 <etharp_find_entry+0x2d4>)
 801192a:	4613      	mov	r3, r2
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	4413      	add	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	440b      	add	r3, r1
 8011934:	3312      	adds	r3, #18
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801193a:	8c3b      	ldrh	r3, [r7, #32]
 801193c:	3301      	adds	r3, #1
 801193e:	b29b      	uxth	r3, r3
 8011940:	843b      	strh	r3, [r7, #32]
 8011942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011946:	2b09      	cmp	r3, #9
 8011948:	f77f af4c 	ble.w	80117e4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801194c:	7afb      	ldrb	r3, [r7, #11]
 801194e:	f003 0302 	and.w	r3, r3, #2
 8011952:	2b00      	cmp	r3, #0
 8011954:	d108      	bne.n	8011968 <etharp_find_entry+0x1b8>
 8011956:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801195a:	2b0a      	cmp	r3, #10
 801195c:	d107      	bne.n	801196e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801195e:	7afb      	ldrb	r3, [r7, #11]
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	2b00      	cmp	r3, #0
 8011966:	d102      	bne.n	801196e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801196c:	e085      	b.n	8011a7a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801196e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011972:	2b09      	cmp	r3, #9
 8011974:	dc02      	bgt.n	801197c <etharp_find_entry+0x1cc>
    i = empty;
 8011976:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011978:	843b      	strh	r3, [r7, #32]
 801197a:	e039      	b.n	80119f0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801197c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011980:	2b09      	cmp	r3, #9
 8011982:	dc14      	bgt.n	80119ae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011986:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801198c:	493d      	ldr	r1, [pc, #244]	@ (8011a84 <etharp_find_entry+0x2d4>)
 801198e:	4613      	mov	r3, r2
 8011990:	005b      	lsls	r3, r3, #1
 8011992:	4413      	add	r3, r2
 8011994:	00db      	lsls	r3, r3, #3
 8011996:	440b      	add	r3, r1
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d018      	beq.n	80119d0 <etharp_find_entry+0x220>
 801199e:	4b3a      	ldr	r3, [pc, #232]	@ (8011a88 <etharp_find_entry+0x2d8>)
 80119a0:	f240 126d 	movw	r2, #365	@ 0x16d
 80119a4:	493b      	ldr	r1, [pc, #236]	@ (8011a94 <etharp_find_entry+0x2e4>)
 80119a6:	483a      	ldr	r0, [pc, #232]	@ (8011a90 <etharp_find_entry+0x2e0>)
 80119a8:	f002 fa10 	bl	8013dcc <iprintf>
 80119ac:	e010      	b.n	80119d0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80119ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80119b2:	2b09      	cmp	r3, #9
 80119b4:	dc02      	bgt.n	80119bc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80119b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80119b8:	843b      	strh	r3, [r7, #32]
 80119ba:	e009      	b.n	80119d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80119bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80119c0:	2b09      	cmp	r3, #9
 80119c2:	dc02      	bgt.n	80119ca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80119c4:	8bfb      	ldrh	r3, [r7, #30]
 80119c6:	843b      	strh	r3, [r7, #32]
 80119c8:	e002      	b.n	80119d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80119ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80119ce:	e054      	b.n	8011a7a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80119d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119d4:	2b09      	cmp	r3, #9
 80119d6:	dd06      	ble.n	80119e6 <etharp_find_entry+0x236>
 80119d8:	4b2b      	ldr	r3, [pc, #172]	@ (8011a88 <etharp_find_entry+0x2d8>)
 80119da:	f240 127f 	movw	r2, #383	@ 0x17f
 80119de:	492e      	ldr	r1, [pc, #184]	@ (8011a98 <etharp_find_entry+0x2e8>)
 80119e0:	482b      	ldr	r0, [pc, #172]	@ (8011a90 <etharp_find_entry+0x2e0>)
 80119e2:	f002 f9f3 	bl	8013dcc <iprintf>
    etharp_free_entry(i);
 80119e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fe06 	bl	80115fc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80119f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119f4:	2b09      	cmp	r3, #9
 80119f6:	dd06      	ble.n	8011a06 <etharp_find_entry+0x256>
 80119f8:	4b23      	ldr	r3, [pc, #140]	@ (8011a88 <etharp_find_entry+0x2d8>)
 80119fa:	f240 1283 	movw	r2, #387	@ 0x183
 80119fe:	4926      	ldr	r1, [pc, #152]	@ (8011a98 <etharp_find_entry+0x2e8>)
 8011a00:	4823      	ldr	r0, [pc, #140]	@ (8011a90 <etharp_find_entry+0x2e0>)
 8011a02:	f002 f9e3 	bl	8013dcc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a0a:	491e      	ldr	r1, [pc, #120]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	4413      	add	r3, r2
 8011a12:	00db      	lsls	r3, r3, #3
 8011a14:	440b      	add	r3, r1
 8011a16:	3314      	adds	r3, #20
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d006      	beq.n	8011a2c <etharp_find_entry+0x27c>
 8011a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8011a88 <etharp_find_entry+0x2d8>)
 8011a20:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011a24:	491d      	ldr	r1, [pc, #116]	@ (8011a9c <etharp_find_entry+0x2ec>)
 8011a26:	481a      	ldr	r0, [pc, #104]	@ (8011a90 <etharp_find_entry+0x2e0>)
 8011a28:	f002 f9d0 	bl	8013dcc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00b      	beq.n	8011a4a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011a32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6819      	ldr	r1, [r3, #0]
 8011a3a:	4812      	ldr	r0, [pc, #72]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011a3c:	4613      	mov	r3, r2
 8011a3e:	005b      	lsls	r3, r3, #1
 8011a40:	4413      	add	r3, r2
 8011a42:	00db      	lsls	r3, r3, #3
 8011a44:	4403      	add	r3, r0
 8011a46:	3304      	adds	r3, #4
 8011a48:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011a4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a4e:	490d      	ldr	r1, [pc, #52]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011a50:	4613      	mov	r3, r2
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	4413      	add	r3, r2
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	440b      	add	r3, r1
 8011a5a:	3312      	adds	r3, #18
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011a60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a64:	4907      	ldr	r1, [pc, #28]	@ (8011a84 <etharp_find_entry+0x2d4>)
 8011a66:	4613      	mov	r3, r2
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	440b      	add	r3, r1
 8011a70:	3308      	adds	r3, #8
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011a76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3728      	adds	r7, #40	@ 0x28
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	20008670 	.word	0x20008670
 8011a88:	0801771c 	.word	0x0801771c
 8011a8c:	08017754 	.word	0x08017754
 8011a90:	08017794 	.word	0x08017794
 8011a94:	080177bc 	.word	0x080177bc
 8011a98:	080177d4 	.word	0x080177d4
 8011a9c:	080177e8 	.word	0x080177e8

08011aa0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b088      	sub	sp, #32
 8011aa4:	af02      	add	r7, sp, #8
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
 8011aac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011ab4:	2b06      	cmp	r3, #6
 8011ab6:	d006      	beq.n	8011ac6 <etharp_update_arp_entry+0x26>
 8011ab8:	4b48      	ldr	r3, [pc, #288]	@ (8011bdc <etharp_update_arp_entry+0x13c>)
 8011aba:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011abe:	4948      	ldr	r1, [pc, #288]	@ (8011be0 <etharp_update_arp_entry+0x140>)
 8011ac0:	4848      	ldr	r0, [pc, #288]	@ (8011be4 <etharp_update_arp_entry+0x144>)
 8011ac2:	f002 f983 	bl	8013dcc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d012      	beq.n	8011af2 <etharp_update_arp_entry+0x52>
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d00e      	beq.n	8011af2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	68f9      	ldr	r1, [r7, #12]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f001 f920 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 8011ae0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d105      	bne.n	8011af2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011aee:	2be0      	cmp	r3, #224	@ 0xe0
 8011af0:	d102      	bne.n	8011af8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011af2:	f06f 030f 	mvn.w	r3, #15
 8011af6:	e06c      	b.n	8011bd2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011af8:	78fb      	ldrb	r3, [r7, #3]
 8011afa:	68fa      	ldr	r2, [r7, #12]
 8011afc:	4619      	mov	r1, r3
 8011afe:	68b8      	ldr	r0, [r7, #8]
 8011b00:	f7ff fe56 	bl	80117b0 <etharp_find_entry>
 8011b04:	4603      	mov	r3, r0
 8011b06:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011b08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	da02      	bge.n	8011b16 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011b10:	8afb      	ldrh	r3, [r7, #22]
 8011b12:	b25b      	sxtb	r3, r3
 8011b14:	e05d      	b.n	8011bd2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011b16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b1a:	4933      	ldr	r1, [pc, #204]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	005b      	lsls	r3, r3, #1
 8011b20:	4413      	add	r3, r2
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	440b      	add	r3, r1
 8011b26:	3314      	adds	r3, #20
 8011b28:	2202      	movs	r2, #2
 8011b2a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011b2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b30:	492d      	ldr	r1, [pc, #180]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b32:	4613      	mov	r3, r2
 8011b34:	005b      	lsls	r3, r3, #1
 8011b36:	4413      	add	r3, r2
 8011b38:	00db      	lsls	r3, r3, #3
 8011b3a:	440b      	add	r3, r1
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	68fa      	ldr	r2, [r7, #12]
 8011b40:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011b42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b46:	4613      	mov	r3, r2
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	4413      	add	r3, r2
 8011b4c:	00db      	lsls	r3, r3, #3
 8011b4e:	3308      	adds	r3, #8
 8011b50:	4a25      	ldr	r2, [pc, #148]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b52:	4413      	add	r3, r2
 8011b54:	3304      	adds	r3, #4
 8011b56:	2206      	movs	r2, #6
 8011b58:	6879      	ldr	r1, [r7, #4]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f002 fa37 	bl	8013fce <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011b60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b64:	4920      	ldr	r1, [pc, #128]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b66:	4613      	mov	r3, r2
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	4413      	add	r3, r2
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	440b      	add	r3, r1
 8011b70:	3312      	adds	r3, #18
 8011b72:	2200      	movs	r2, #0
 8011b74:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011b76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b7a:	491b      	ldr	r1, [pc, #108]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	4413      	add	r3, r2
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	440b      	add	r3, r1
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d021      	beq.n	8011bd0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011b8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b90:	4915      	ldr	r1, [pc, #84]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011b92:	4613      	mov	r3, r2
 8011b94:	005b      	lsls	r3, r3, #1
 8011b96:	4413      	add	r3, r2
 8011b98:	00db      	lsls	r3, r3, #3
 8011b9a:	440b      	add	r3, r1
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011ba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ba4:	4910      	ldr	r1, [pc, #64]	@ (8011be8 <etharp_update_arp_entry+0x148>)
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	4413      	add	r3, r2
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	440b      	add	r3, r1
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011bba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6939      	ldr	r1, [r7, #16]
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f001 ffb9 	bl	8013b3c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011bca:	6938      	ldr	r0, [r7, #16]
 8011bcc:	f7f6 fd8e 	bl	80086ec <pbuf_free>
  }
  return ERR_OK;
 8011bd0:	2300      	movs	r3, #0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3718      	adds	r7, #24
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	0801771c 	.word	0x0801771c
 8011be0:	08017814 	.word	0x08017814
 8011be4:	08017794 	.word	0x08017794
 8011be8:	20008670 	.word	0x20008670

08011bec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	e01e      	b.n	8011c38 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011bfa:	4913      	ldr	r1, [pc, #76]	@ (8011c48 <etharp_cleanup_netif+0x5c>)
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4413      	add	r3, r2
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	440b      	add	r3, r1
 8011c08:	3314      	adds	r3, #20
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00e      	beq.n	8011c32 <etharp_cleanup_netif+0x46>
 8011c14:	490c      	ldr	r1, [pc, #48]	@ (8011c48 <etharp_cleanup_netif+0x5c>)
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	4413      	add	r3, r2
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	440b      	add	r3, r1
 8011c22:	3308      	adds	r3, #8
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d102      	bne.n	8011c32 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011c2c:	68f8      	ldr	r0, [r7, #12]
 8011c2e:	f7ff fce5 	bl	80115fc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	3301      	adds	r3, #1
 8011c36:	60fb      	str	r3, [r7, #12]
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2b09      	cmp	r3, #9
 8011c3c:	dddd      	ble.n	8011bfa <etharp_cleanup_netif+0xe>
    }
  }
}
 8011c3e:	bf00      	nop
 8011c40:	bf00      	nop
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	20008670 	.word	0x20008670

08011c4c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011c4c:	b5b0      	push	{r4, r5, r7, lr}
 8011c4e:	b08a      	sub	sp, #40	@ 0x28
 8011c50:	af04      	add	r7, sp, #16
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d107      	bne.n	8011c6c <etharp_input+0x20>
 8011c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8011d5c <etharp_input+0x110>)
 8011c5e:	f240 228a 	movw	r2, #650	@ 0x28a
 8011c62:	493f      	ldr	r1, [pc, #252]	@ (8011d60 <etharp_input+0x114>)
 8011c64:	483f      	ldr	r0, [pc, #252]	@ (8011d64 <etharp_input+0x118>)
 8011c66:	f002 f8b1 	bl	8013dcc <iprintf>
 8011c6a:	e074      	b.n	8011d56 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c7c:	d10c      	bne.n	8011c98 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011c82:	2b06      	cmp	r3, #6
 8011c84:	d108      	bne.n	8011c98 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011c8a:	2b04      	cmp	r3, #4
 8011c8c:	d104      	bne.n	8011c98 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	885b      	ldrh	r3, [r3, #2]
 8011c92:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011c94:	2b08      	cmp	r3, #8
 8011c96:	d003      	beq.n	8011ca0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f7f6 fd27 	bl	80086ec <pbuf_free>
    return;
 8011c9e:	e05a      	b.n	8011d56 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	330e      	adds	r3, #14
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	3318      	adds	r3, #24
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d102      	bne.n	8011cc0 <etharp_input+0x74>
    for_us = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	75fb      	strb	r3, [r7, #23]
 8011cbe:	e009      	b.n	8011cd4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011cc0:	68ba      	ldr	r2, [r7, #8]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	3304      	adds	r3, #4
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	bf0c      	ite	eq
 8011ccc:	2301      	moveq	r3, #1
 8011cce:	2300      	movne	r3, #0
 8011cd0:	b2db      	uxtb	r3, r3
 8011cd2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	f103 0208 	add.w	r2, r3, #8
 8011cda:	7dfb      	ldrb	r3, [r7, #23]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d001      	beq.n	8011ce4 <etharp_input+0x98>
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	e000      	b.n	8011ce6 <etharp_input+0x9a>
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	f107 010c 	add.w	r1, r7, #12
 8011cea:	6838      	ldr	r0, [r7, #0]
 8011cec:	f7ff fed8 	bl	8011aa0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	88db      	ldrh	r3, [r3, #6]
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011cfa:	d003      	beq.n	8011d04 <etharp_input+0xb8>
 8011cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d00:	d01e      	beq.n	8011d40 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011d02:	e025      	b.n	8011d50 <etharp_input+0x104>
      if (for_us) {
 8011d04:	7dfb      	ldrb	r3, [r7, #23]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d021      	beq.n	8011d4e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011d20:	693a      	ldr	r2, [r7, #16]
 8011d22:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011d24:	2102      	movs	r1, #2
 8011d26:	9103      	str	r1, [sp, #12]
 8011d28:	f107 010c 	add.w	r1, r7, #12
 8011d2c:	9102      	str	r1, [sp, #8]
 8011d2e:	9201      	str	r2, [sp, #4]
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	462b      	mov	r3, r5
 8011d34:	4622      	mov	r2, r4
 8011d36:	4601      	mov	r1, r0
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	f000 faef 	bl	801231c <etharp_raw>
      break;
 8011d3e:	e006      	b.n	8011d4e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011d40:	f107 030c 	add.w	r3, r7, #12
 8011d44:	4619      	mov	r1, r3
 8011d46:	6838      	ldr	r0, [r7, #0]
 8011d48:	f7fe fa02 	bl	8010150 <dhcp_arp_reply>
      break;
 8011d4c:	e000      	b.n	8011d50 <etharp_input+0x104>
      break;
 8011d4e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7f6 fccb 	bl	80086ec <pbuf_free>
}
 8011d56:	3718      	adds	r7, #24
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8011d5c:	0801771c 	.word	0x0801771c
 8011d60:	0801786c 	.word	0x0801786c
 8011d64:	08017794 	.word	0x08017794

08011d68 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af02      	add	r7, sp, #8
 8011d6e:	60f8      	str	r0, [r7, #12]
 8011d70:	60b9      	str	r1, [r7, #8]
 8011d72:	4613      	mov	r3, r2
 8011d74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011d76:	79fa      	ldrb	r2, [r7, #7]
 8011d78:	4944      	ldr	r1, [pc, #272]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	005b      	lsls	r3, r3, #1
 8011d7e:	4413      	add	r3, r2
 8011d80:	00db      	lsls	r3, r3, #3
 8011d82:	440b      	add	r3, r1
 8011d84:	3314      	adds	r3, #20
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d806      	bhi.n	8011d9a <etharp_output_to_arp_index+0x32>
 8011d8c:	4b40      	ldr	r3, [pc, #256]	@ (8011e90 <etharp_output_to_arp_index+0x128>)
 8011d8e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011d92:	4940      	ldr	r1, [pc, #256]	@ (8011e94 <etharp_output_to_arp_index+0x12c>)
 8011d94:	4840      	ldr	r0, [pc, #256]	@ (8011e98 <etharp_output_to_arp_index+0x130>)
 8011d96:	f002 f819 	bl	8013dcc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011d9a:	79fa      	ldrb	r2, [r7, #7]
 8011d9c:	493b      	ldr	r1, [pc, #236]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011d9e:	4613      	mov	r3, r2
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	4413      	add	r3, r2
 8011da4:	00db      	lsls	r3, r3, #3
 8011da6:	440b      	add	r3, r1
 8011da8:	3314      	adds	r3, #20
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	2b02      	cmp	r3, #2
 8011dae:	d153      	bne.n	8011e58 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011db0:	79fa      	ldrb	r2, [r7, #7]
 8011db2:	4936      	ldr	r1, [pc, #216]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011db4:	4613      	mov	r3, r2
 8011db6:	005b      	lsls	r3, r3, #1
 8011db8:	4413      	add	r3, r2
 8011dba:	00db      	lsls	r3, r3, #3
 8011dbc:	440b      	add	r3, r1
 8011dbe:	3312      	adds	r3, #18
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011dc6:	d919      	bls.n	8011dfc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011dc8:	79fa      	ldrb	r2, [r7, #7]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	005b      	lsls	r3, r3, #1
 8011dce:	4413      	add	r3, r2
 8011dd0:	00db      	lsls	r3, r3, #3
 8011dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011dd4:	4413      	add	r3, r2
 8011dd6:	3304      	adds	r3, #4
 8011dd8:	4619      	mov	r1, r3
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f000 fb4c 	bl	8012478 <etharp_request>
 8011de0:	4603      	mov	r3, r0
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d138      	bne.n	8011e58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011de6:	79fa      	ldrb	r2, [r7, #7]
 8011de8:	4928      	ldr	r1, [pc, #160]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011dea:	4613      	mov	r3, r2
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	4413      	add	r3, r2
 8011df0:	00db      	lsls	r3, r3, #3
 8011df2:	440b      	add	r3, r1
 8011df4:	3314      	adds	r3, #20
 8011df6:	2203      	movs	r2, #3
 8011df8:	701a      	strb	r2, [r3, #0]
 8011dfa:	e02d      	b.n	8011e58 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011dfc:	79fa      	ldrb	r2, [r7, #7]
 8011dfe:	4923      	ldr	r1, [pc, #140]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011e00:	4613      	mov	r3, r2
 8011e02:	005b      	lsls	r3, r3, #1
 8011e04:	4413      	add	r3, r2
 8011e06:	00db      	lsls	r3, r3, #3
 8011e08:	440b      	add	r3, r1
 8011e0a:	3312      	adds	r3, #18
 8011e0c:	881b      	ldrh	r3, [r3, #0]
 8011e0e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011e12:	d321      	bcc.n	8011e58 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011e14:	79fa      	ldrb	r2, [r7, #7]
 8011e16:	4613      	mov	r3, r2
 8011e18:	005b      	lsls	r3, r3, #1
 8011e1a:	4413      	add	r3, r2
 8011e1c:	00db      	lsls	r3, r3, #3
 8011e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011e20:	4413      	add	r3, r2
 8011e22:	1d19      	adds	r1, r3, #4
 8011e24:	79fa      	ldrb	r2, [r7, #7]
 8011e26:	4613      	mov	r3, r2
 8011e28:	005b      	lsls	r3, r3, #1
 8011e2a:	4413      	add	r3, r2
 8011e2c:	00db      	lsls	r3, r3, #3
 8011e2e:	3308      	adds	r3, #8
 8011e30:	4a16      	ldr	r2, [pc, #88]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011e32:	4413      	add	r3, r2
 8011e34:	3304      	adds	r3, #4
 8011e36:	461a      	mov	r2, r3
 8011e38:	68f8      	ldr	r0, [r7, #12]
 8011e3a:	f000 fafb 	bl	8012434 <etharp_request_dst>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d109      	bne.n	8011e58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e44:	79fa      	ldrb	r2, [r7, #7]
 8011e46:	4911      	ldr	r1, [pc, #68]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011e48:	4613      	mov	r3, r2
 8011e4a:	005b      	lsls	r3, r3, #1
 8011e4c:	4413      	add	r3, r2
 8011e4e:	00db      	lsls	r3, r3, #3
 8011e50:	440b      	add	r3, r1
 8011e52:	3314      	adds	r3, #20
 8011e54:	2203      	movs	r2, #3
 8011e56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8011e5e:	79fa      	ldrb	r2, [r7, #7]
 8011e60:	4613      	mov	r3, r2
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	4413      	add	r3, r2
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	3308      	adds	r3, #8
 8011e6a:	4a08      	ldr	r2, [pc, #32]	@ (8011e8c <etharp_output_to_arp_index+0x124>)
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3304      	adds	r3, #4
 8011e70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011e74:	9200      	str	r2, [sp, #0]
 8011e76:	460a      	mov	r2, r1
 8011e78:	68b9      	ldr	r1, [r7, #8]
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f001 fe5e 	bl	8013b3c <ethernet_output>
 8011e80:	4603      	mov	r3, r0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3710      	adds	r7, #16
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20008670 	.word	0x20008670
 8011e90:	0801771c 	.word	0x0801771c
 8011e94:	0801788c 	.word	0x0801788c
 8011e98:	08017794 	.word	0x08017794

08011e9c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08a      	sub	sp, #40	@ 0x28
 8011ea0:	af02      	add	r7, sp, #8
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d106      	bne.n	8011ec0 <etharp_output+0x24>
 8011eb2:	4b73      	ldr	r3, [pc, #460]	@ (8012080 <etharp_output+0x1e4>)
 8011eb4:	f240 321e 	movw	r2, #798	@ 0x31e
 8011eb8:	4972      	ldr	r1, [pc, #456]	@ (8012084 <etharp_output+0x1e8>)
 8011eba:	4873      	ldr	r0, [pc, #460]	@ (8012088 <etharp_output+0x1ec>)
 8011ebc:	f001 ff86 	bl	8013dcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <etharp_output+0x38>
 8011ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8012080 <etharp_output+0x1e4>)
 8011ec8:	f240 321f 	movw	r2, #799	@ 0x31f
 8011ecc:	496f      	ldr	r1, [pc, #444]	@ (801208c <etharp_output+0x1f0>)
 8011ece:	486e      	ldr	r0, [pc, #440]	@ (8012088 <etharp_output+0x1ec>)
 8011ed0:	f001 ff7c 	bl	8013dcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <etharp_output+0x4c>
 8011eda:	4b69      	ldr	r3, [pc, #420]	@ (8012080 <etharp_output+0x1e4>)
 8011edc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011ee0:	496b      	ldr	r1, [pc, #428]	@ (8012090 <etharp_output+0x1f4>)
 8011ee2:	4869      	ldr	r0, [pc, #420]	@ (8012088 <etharp_output+0x1ec>)
 8011ee4:	f001 ff72 	bl	8013dcc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f000 ff16 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011efa:	4b66      	ldr	r3, [pc, #408]	@ (8012094 <etharp_output+0x1f8>)
 8011efc:	61fb      	str	r3, [r7, #28]
 8011efe:	e0af      	b.n	8012060 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f08:	2be0      	cmp	r3, #224	@ 0xe0
 8011f0a:	d118      	bne.n	8011f3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011f10:	2300      	movs	r3, #0
 8011f12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011f14:	235e      	movs	r3, #94	@ 0x5e
 8011f16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f22:	b2db      	uxtb	r3, r3
 8011f24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	3302      	adds	r3, #2
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3303      	adds	r3, #3
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011f36:	f107 0310 	add.w	r3, r7, #16
 8011f3a:	61fb      	str	r3, [r7, #28]
 8011f3c:	e090      	b.n	8012060 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	3304      	adds	r3, #4
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	405a      	eors	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	3308      	adds	r3, #8
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4013      	ands	r3, r2
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d012      	beq.n	8011f7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011f5c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d00b      	beq.n	8011f7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	330c      	adds	r3, #12
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d003      	beq.n	8011f76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	330c      	adds	r3, #12
 8011f72:	61bb      	str	r3, [r7, #24]
 8011f74:	e002      	b.n	8011f7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011f76:	f06f 0303 	mvn.w	r3, #3
 8011f7a:	e07d      	b.n	8012078 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f7c:	4b46      	ldr	r3, [pc, #280]	@ (8012098 <etharp_output+0x1fc>)
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	4619      	mov	r1, r3
 8011f82:	4a46      	ldr	r2, [pc, #280]	@ (801209c <etharp_output+0x200>)
 8011f84:	460b      	mov	r3, r1
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	440b      	add	r3, r1
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	4413      	add	r3, r2
 8011f8e:	3314      	adds	r3, #20
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d925      	bls.n	8011fe2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f96:	4b40      	ldr	r3, [pc, #256]	@ (8012098 <etharp_output+0x1fc>)
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	4a3f      	ldr	r2, [pc, #252]	@ (801209c <etharp_output+0x200>)
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	440b      	add	r3, r1
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	4413      	add	r3, r2
 8011fa8:	3308      	adds	r3, #8
 8011faa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d117      	bne.n	8011fe2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	4b38      	ldr	r3, [pc, #224]	@ (8012098 <etharp_output+0x1fc>)
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	4937      	ldr	r1, [pc, #220]	@ (801209c <etharp_output+0x200>)
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	4403      	add	r3, r0
 8011fc4:	00db      	lsls	r3, r3, #3
 8011fc6:	440b      	add	r3, r1
 8011fc8:	3304      	adds	r3, #4
 8011fca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d108      	bne.n	8011fe2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011fd0:	4b31      	ldr	r3, [pc, #196]	@ (8012098 <etharp_output+0x1fc>)
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	68b9      	ldr	r1, [r7, #8]
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f7ff fec5 	bl	8011d68 <etharp_output_to_arp_index>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	e04a      	b.n	8012078 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	75fb      	strb	r3, [r7, #23]
 8011fe6:	e031      	b.n	801204c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011fe8:	7dfa      	ldrb	r2, [r7, #23]
 8011fea:	492c      	ldr	r1, [pc, #176]	@ (801209c <etharp_output+0x200>)
 8011fec:	4613      	mov	r3, r2
 8011fee:	005b      	lsls	r3, r3, #1
 8011ff0:	4413      	add	r3, r2
 8011ff2:	00db      	lsls	r3, r3, #3
 8011ff4:	440b      	add	r3, r1
 8011ff6:	3314      	adds	r3, #20
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d923      	bls.n	8012046 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011ffe:	7dfa      	ldrb	r2, [r7, #23]
 8012000:	4926      	ldr	r1, [pc, #152]	@ (801209c <etharp_output+0x200>)
 8012002:	4613      	mov	r3, r2
 8012004:	005b      	lsls	r3, r3, #1
 8012006:	4413      	add	r3, r2
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	440b      	add	r3, r1
 801200c:	3308      	adds	r3, #8
 801200e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	429a      	cmp	r2, r3
 8012014:	d117      	bne.n	8012046 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	6819      	ldr	r1, [r3, #0]
 801201a:	7dfa      	ldrb	r2, [r7, #23]
 801201c:	481f      	ldr	r0, [pc, #124]	@ (801209c <etharp_output+0x200>)
 801201e:	4613      	mov	r3, r2
 8012020:	005b      	lsls	r3, r3, #1
 8012022:	4413      	add	r3, r2
 8012024:	00db      	lsls	r3, r3, #3
 8012026:	4403      	add	r3, r0
 8012028:	3304      	adds	r3, #4
 801202a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801202c:	4299      	cmp	r1, r3
 801202e:	d10a      	bne.n	8012046 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012030:	4a19      	ldr	r2, [pc, #100]	@ (8012098 <etharp_output+0x1fc>)
 8012032:	7dfb      	ldrb	r3, [r7, #23]
 8012034:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012036:	7dfb      	ldrb	r3, [r7, #23]
 8012038:	461a      	mov	r2, r3
 801203a:	68b9      	ldr	r1, [r7, #8]
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f7ff fe93 	bl	8011d68 <etharp_output_to_arp_index>
 8012042:	4603      	mov	r3, r0
 8012044:	e018      	b.n	8012078 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012046:	7dfb      	ldrb	r3, [r7, #23]
 8012048:	3301      	adds	r3, #1
 801204a:	75fb      	strb	r3, [r7, #23]
 801204c:	7dfb      	ldrb	r3, [r7, #23]
 801204e:	2b09      	cmp	r3, #9
 8012050:	d9ca      	bls.n	8011fe8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	69b9      	ldr	r1, [r7, #24]
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f000 f822 	bl	80120a0 <etharp_query>
 801205c:	4603      	mov	r3, r0
 801205e:	e00b      	b.n	8012078 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8012066:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	68b9      	ldr	r1, [r7, #8]
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f001 fd63 	bl	8013b3c <ethernet_output>
 8012076:	4603      	mov	r3, r0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3720      	adds	r7, #32
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	0801771c 	.word	0x0801771c
 8012084:	0801786c 	.word	0x0801786c
 8012088:	08017794 	.word	0x08017794
 801208c:	080178bc 	.word	0x080178bc
 8012090:	0801785c 	.word	0x0801785c
 8012094:	0801820c 	.word	0x0801820c
 8012098:	20008760 	.word	0x20008760
 801209c:	20008670 	.word	0x20008670

080120a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b08c      	sub	sp, #48	@ 0x30
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	332a      	adds	r3, #42	@ 0x2a
 80120b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80120b2:	23ff      	movs	r3, #255	@ 0xff
 80120b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68f9      	ldr	r1, [r7, #12]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 fe2c 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10c      	bne.n	80120e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80120d6:	2be0      	cmp	r3, #224	@ 0xe0
 80120d8:	d006      	beq.n	80120e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d003      	beq.n	80120e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80120e8:	f06f 030f 	mvn.w	r3, #15
 80120ec:	e101      	b.n	80122f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	2101      	movs	r1, #1
 80120f2:	68b8      	ldr	r0, [r7, #8]
 80120f4:	f7ff fb5c 	bl	80117b0 <etharp_find_entry>
 80120f8:	4603      	mov	r3, r0
 80120fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80120fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012100:	2b00      	cmp	r3, #0
 8012102:	da02      	bge.n	801210a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012104:	8a7b      	ldrh	r3, [r7, #18]
 8012106:	b25b      	sxtb	r3, r3
 8012108:	e0f3      	b.n	80122f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801210a:	8a7b      	ldrh	r3, [r7, #18]
 801210c:	2b7e      	cmp	r3, #126	@ 0x7e
 801210e:	d906      	bls.n	801211e <etharp_query+0x7e>
 8012110:	4b7a      	ldr	r3, [pc, #488]	@ (80122fc <etharp_query+0x25c>)
 8012112:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8012116:	497a      	ldr	r1, [pc, #488]	@ (8012300 <etharp_query+0x260>)
 8012118:	487a      	ldr	r0, [pc, #488]	@ (8012304 <etharp_query+0x264>)
 801211a:	f001 fe57 	bl	8013dcc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801211e:	8a7b      	ldrh	r3, [r7, #18]
 8012120:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012122:	7c7a      	ldrb	r2, [r7, #17]
 8012124:	4978      	ldr	r1, [pc, #480]	@ (8012308 <etharp_query+0x268>)
 8012126:	4613      	mov	r3, r2
 8012128:	005b      	lsls	r3, r3, #1
 801212a:	4413      	add	r3, r2
 801212c:	00db      	lsls	r3, r3, #3
 801212e:	440b      	add	r3, r1
 8012130:	3314      	adds	r3, #20
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d115      	bne.n	8012164 <etharp_query+0xc4>
    is_new_entry = 1;
 8012138:	2301      	movs	r3, #1
 801213a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801213c:	7c7a      	ldrb	r2, [r7, #17]
 801213e:	4972      	ldr	r1, [pc, #456]	@ (8012308 <etharp_query+0x268>)
 8012140:	4613      	mov	r3, r2
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	4413      	add	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	440b      	add	r3, r1
 801214a:	3314      	adds	r3, #20
 801214c:	2201      	movs	r2, #1
 801214e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012150:	7c7a      	ldrb	r2, [r7, #17]
 8012152:	496d      	ldr	r1, [pc, #436]	@ (8012308 <etharp_query+0x268>)
 8012154:	4613      	mov	r3, r2
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	4413      	add	r3, r2
 801215a:	00db      	lsls	r3, r3, #3
 801215c:	440b      	add	r3, r1
 801215e:	3308      	adds	r3, #8
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012164:	7c7a      	ldrb	r2, [r7, #17]
 8012166:	4968      	ldr	r1, [pc, #416]	@ (8012308 <etharp_query+0x268>)
 8012168:	4613      	mov	r3, r2
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	4413      	add	r3, r2
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	440b      	add	r3, r1
 8012172:	3314      	adds	r3, #20
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d011      	beq.n	801219e <etharp_query+0xfe>
 801217a:	7c7a      	ldrb	r2, [r7, #17]
 801217c:	4962      	ldr	r1, [pc, #392]	@ (8012308 <etharp_query+0x268>)
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	440b      	add	r3, r1
 8012188:	3314      	adds	r3, #20
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d806      	bhi.n	801219e <etharp_query+0xfe>
 8012190:	4b5a      	ldr	r3, [pc, #360]	@ (80122fc <etharp_query+0x25c>)
 8012192:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012196:	495d      	ldr	r1, [pc, #372]	@ (801230c <etharp_query+0x26c>)
 8012198:	485a      	ldr	r0, [pc, #360]	@ (8012304 <etharp_query+0x264>)
 801219a:	f001 fe17 	bl	8013dcc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d102      	bne.n	80121aa <etharp_query+0x10a>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10c      	bne.n	80121c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80121aa:	68b9      	ldr	r1, [r7, #8]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f000 f963 	bl	8012478 <etharp_request>
 80121b2:	4603      	mov	r3, r0
 80121b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d102      	bne.n	80121c4 <etharp_query+0x124>
      return result;
 80121be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80121c2:	e096      	b.n	80122f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d106      	bne.n	80121d8 <etharp_query+0x138>
 80121ca:	4b4c      	ldr	r3, [pc, #304]	@ (80122fc <etharp_query+0x25c>)
 80121cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80121d0:	494f      	ldr	r1, [pc, #316]	@ (8012310 <etharp_query+0x270>)
 80121d2:	484c      	ldr	r0, [pc, #304]	@ (8012304 <etharp_query+0x264>)
 80121d4:	f001 fdfa 	bl	8013dcc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80121d8:	7c7a      	ldrb	r2, [r7, #17]
 80121da:	494b      	ldr	r1, [pc, #300]	@ (8012308 <etharp_query+0x268>)
 80121dc:	4613      	mov	r3, r2
 80121de:	005b      	lsls	r3, r3, #1
 80121e0:	4413      	add	r3, r2
 80121e2:	00db      	lsls	r3, r3, #3
 80121e4:	440b      	add	r3, r1
 80121e6:	3314      	adds	r3, #20
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d917      	bls.n	801221e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80121ee:	4a49      	ldr	r2, [pc, #292]	@ (8012314 <etharp_query+0x274>)
 80121f0:	7c7b      	ldrb	r3, [r7, #17]
 80121f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80121f4:	7c7a      	ldrb	r2, [r7, #17]
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	3308      	adds	r3, #8
 8012200:	4a41      	ldr	r2, [pc, #260]	@ (8012308 <etharp_query+0x268>)
 8012202:	4413      	add	r3, r2
 8012204:	3304      	adds	r3, #4
 8012206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801220a:	9200      	str	r2, [sp, #0]
 801220c:	697a      	ldr	r2, [r7, #20]
 801220e:	6879      	ldr	r1, [r7, #4]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f001 fc93 	bl	8013b3c <ethernet_output>
 8012216:	4603      	mov	r3, r0
 8012218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801221c:	e067      	b.n	80122ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801221e:	7c7a      	ldrb	r2, [r7, #17]
 8012220:	4939      	ldr	r1, [pc, #228]	@ (8012308 <etharp_query+0x268>)
 8012222:	4613      	mov	r3, r2
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	4413      	add	r3, r2
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	440b      	add	r3, r1
 801222c:	3314      	adds	r3, #20
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d15c      	bne.n	80122ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012234:	2300      	movs	r3, #0
 8012236:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801223c:	e01c      	b.n	8012278 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801223e:	69fb      	ldr	r3, [r7, #28]
 8012240:	895a      	ldrh	r2, [r3, #10]
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	891b      	ldrh	r3, [r3, #8]
 8012246:	429a      	cmp	r2, r3
 8012248:	d10a      	bne.n	8012260 <etharp_query+0x1c0>
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d006      	beq.n	8012260 <etharp_query+0x1c0>
 8012252:	4b2a      	ldr	r3, [pc, #168]	@ (80122fc <etharp_query+0x25c>)
 8012254:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8012258:	492f      	ldr	r1, [pc, #188]	@ (8012318 <etharp_query+0x278>)
 801225a:	482a      	ldr	r0, [pc, #168]	@ (8012304 <etharp_query+0x264>)
 801225c:	f001 fdb6 	bl	8013dcc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	7b1b      	ldrb	r3, [r3, #12]
 8012264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <etharp_query+0x1d2>
        copy_needed = 1;
 801226c:	2301      	movs	r3, #1
 801226e:	61bb      	str	r3, [r7, #24]
        break;
 8012270:	e005      	b.n	801227e <etharp_query+0x1de>
      }
      p = p->next;
 8012272:	69fb      	ldr	r3, [r7, #28]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d1df      	bne.n	801223e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d007      	beq.n	8012294 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801228a:	200e      	movs	r0, #14
 801228c:	f7f6 fc9a 	bl	8008bc4 <pbuf_clone>
 8012290:	61f8      	str	r0, [r7, #28]
 8012292:	e004      	b.n	801229e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012298:	69f8      	ldr	r0, [r7, #28]
 801229a:	f7f6 fac7 	bl	800882c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d021      	beq.n	80122e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80122a4:	7c7a      	ldrb	r2, [r7, #17]
 80122a6:	4918      	ldr	r1, [pc, #96]	@ (8012308 <etharp_query+0x268>)
 80122a8:	4613      	mov	r3, r2
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	4413      	add	r3, r2
 80122ae:	00db      	lsls	r3, r3, #3
 80122b0:	440b      	add	r3, r1
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00a      	beq.n	80122ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80122b8:	7c7a      	ldrb	r2, [r7, #17]
 80122ba:	4913      	ldr	r1, [pc, #76]	@ (8012308 <etharp_query+0x268>)
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	00db      	lsls	r3, r3, #3
 80122c4:	440b      	add	r3, r1
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7f6 fa0f 	bl	80086ec <pbuf_free>
      }
      arp_table[i].q = p;
 80122ce:	7c7a      	ldrb	r2, [r7, #17]
 80122d0:	490d      	ldr	r1, [pc, #52]	@ (8012308 <etharp_query+0x268>)
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	440b      	add	r3, r1
 80122dc:	69fa      	ldr	r2, [r7, #28]
 80122de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80122e0:	2300      	movs	r3, #0
 80122e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80122e6:	e002      	b.n	80122ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80122e8:	23ff      	movs	r3, #255	@ 0xff
 80122ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80122ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3728      	adds	r7, #40	@ 0x28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	0801771c 	.word	0x0801771c
 8012300:	080178c8 	.word	0x080178c8
 8012304:	08017794 	.word	0x08017794
 8012308:	20008670 	.word	0x20008670
 801230c:	080178d8 	.word	0x080178d8
 8012310:	080178bc 	.word	0x080178bc
 8012314:	20008760 	.word	0x20008760
 8012318:	08017900 	.word	0x08017900

0801231c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08a      	sub	sp, #40	@ 0x28
 8012320:	af02      	add	r7, sp, #8
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801232a:	2300      	movs	r3, #0
 801232c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d106      	bne.n	8012342 <etharp_raw+0x26>
 8012334:	4b3a      	ldr	r3, [pc, #232]	@ (8012420 <etharp_raw+0x104>)
 8012336:	f240 4257 	movw	r2, #1111	@ 0x457
 801233a:	493a      	ldr	r1, [pc, #232]	@ (8012424 <etharp_raw+0x108>)
 801233c:	483a      	ldr	r0, [pc, #232]	@ (8012428 <etharp_raw+0x10c>)
 801233e:	f001 fd45 	bl	8013dcc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012342:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012346:	211c      	movs	r1, #28
 8012348:	200e      	movs	r0, #14
 801234a:	f7f5 feeb 	bl	8008124 <pbuf_alloc>
 801234e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d102      	bne.n	801235c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801235a:	e05d      	b.n	8012418 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	895b      	ldrh	r3, [r3, #10]
 8012360:	2b1b      	cmp	r3, #27
 8012362:	d806      	bhi.n	8012372 <etharp_raw+0x56>
 8012364:	4b2e      	ldr	r3, [pc, #184]	@ (8012420 <etharp_raw+0x104>)
 8012366:	f240 4262 	movw	r2, #1122	@ 0x462
 801236a:	4930      	ldr	r1, [pc, #192]	@ (801242c <etharp_raw+0x110>)
 801236c:	482e      	ldr	r0, [pc, #184]	@ (8012428 <etharp_raw+0x10c>)
 801236e:	f001 fd2d 	bl	8013dcc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012378:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801237a:	4618      	mov	r0, r3
 801237c:	f7f4 fde6 	bl	8006f4c <lwip_htons>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801238e:	2b06      	cmp	r3, #6
 8012390:	d006      	beq.n	80123a0 <etharp_raw+0x84>
 8012392:	4b23      	ldr	r3, [pc, #140]	@ (8012420 <etharp_raw+0x104>)
 8012394:	f240 4269 	movw	r2, #1129	@ 0x469
 8012398:	4925      	ldr	r1, [pc, #148]	@ (8012430 <etharp_raw+0x114>)
 801239a:	4823      	ldr	r0, [pc, #140]	@ (8012428 <etharp_raw+0x10c>)
 801239c:	f001 fd16 	bl	8013dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	3308      	adds	r3, #8
 80123a4:	2206      	movs	r2, #6
 80123a6:	6839      	ldr	r1, [r7, #0]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f001 fe10 	bl	8013fce <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	3312      	adds	r3, #18
 80123b2:	2206      	movs	r2, #6
 80123b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123b6:	4618      	mov	r0, r3
 80123b8:	f001 fe09 	bl	8013fce <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	330e      	adds	r3, #14
 80123c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123c2:	6812      	ldr	r2, [r2, #0]
 80123c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	3318      	adds	r3, #24
 80123ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123cc:	6812      	ldr	r2, [r2, #0]
 80123ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	2200      	movs	r2, #0
 80123d4:	701a      	strb	r2, [r3, #0]
 80123d6:	2200      	movs	r2, #0
 80123d8:	f042 0201 	orr.w	r2, r2, #1
 80123dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	2200      	movs	r2, #0
 80123e2:	f042 0208 	orr.w	r2, r2, #8
 80123e6:	709a      	strb	r2, [r3, #2]
 80123e8:	2200      	movs	r2, #0
 80123ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	2206      	movs	r2, #6
 80123f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2204      	movs	r2, #4
 80123f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80123f8:	f640 0306 	movw	r3, #2054	@ 0x806
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	69b9      	ldr	r1, [r7, #24]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f001 fb99 	bl	8013b3c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801240a:	69b8      	ldr	r0, [r7, #24]
 801240c:	f7f6 f96e 	bl	80086ec <pbuf_free>
  p = NULL;
 8012410:	2300      	movs	r3, #0
 8012412:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012414:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3720      	adds	r7, #32
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	0801771c 	.word	0x0801771c
 8012424:	0801786c 	.word	0x0801786c
 8012428:	08017794 	.word	0x08017794
 801242c:	0801791c 	.word	0x0801791c
 8012430:	08017950 	.word	0x08017950

08012434 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b088      	sub	sp, #32
 8012438:	af04      	add	r7, sp, #16
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	60b9      	str	r1, [r7, #8]
 801243e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012450:	2201      	movs	r2, #1
 8012452:	9203      	str	r2, [sp, #12]
 8012454:	68ba      	ldr	r2, [r7, #8]
 8012456:	9202      	str	r2, [sp, #8]
 8012458:	4a06      	ldr	r2, [pc, #24]	@ (8012474 <etharp_request_dst+0x40>)
 801245a:	9201      	str	r2, [sp, #4]
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	4603      	mov	r3, r0
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	68f8      	ldr	r0, [r7, #12]
 8012464:	f7ff ff5a 	bl	801231c <etharp_raw>
 8012468:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	08018214 	.word	0x08018214

08012478 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012482:	4a05      	ldr	r2, [pc, #20]	@ (8012498 <etharp_request+0x20>)
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7ff ffd4 	bl	8012434 <etharp_request_dst>
 801248c:	4603      	mov	r3, r0
}
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	0801820c 	.word	0x0801820c

0801249c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b08e      	sub	sp, #56	@ 0x38
 80124a0:	af04      	add	r7, sp, #16
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80124a6:	4b79      	ldr	r3, [pc, #484]	@ (801268c <icmp_input+0x1f0>)
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80124ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	f003 030f 	and.w	r3, r3, #15
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80124bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124be:	2b13      	cmp	r3, #19
 80124c0:	f240 80cd 	bls.w	801265e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	895b      	ldrh	r3, [r3, #10]
 80124c8:	2b03      	cmp	r3, #3
 80124ca:	f240 80ca 	bls.w	8012662 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80124d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 80b7 	beq.w	8012650 <icmp_input+0x1b4>
 80124e2:	2b08      	cmp	r3, #8
 80124e4:	f040 80b7 	bne.w	8012656 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80124e8:	4b69      	ldr	r3, [pc, #420]	@ (8012690 <icmp_input+0x1f4>)
 80124ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80124ec:	4b67      	ldr	r3, [pc, #412]	@ (801268c <icmp_input+0x1f0>)
 80124ee:	695b      	ldr	r3, [r3, #20]
 80124f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124f4:	2be0      	cmp	r3, #224	@ 0xe0
 80124f6:	f000 80bb 	beq.w	8012670 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80124fa:	4b64      	ldr	r3, [pc, #400]	@ (801268c <icmp_input+0x1f0>)
 80124fc:	695b      	ldr	r3, [r3, #20]
 80124fe:	4a63      	ldr	r2, [pc, #396]	@ (801268c <icmp_input+0x1f0>)
 8012500:	6812      	ldr	r2, [r2, #0]
 8012502:	4611      	mov	r1, r2
 8012504:	4618      	mov	r0, r3
 8012506:	f000 fc0b 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	f040 80b1 	bne.w	8012674 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	891b      	ldrh	r3, [r3, #8]
 8012516:	2b07      	cmp	r3, #7
 8012518:	f240 80a5 	bls.w	8012666 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801251c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801251e:	330e      	adds	r3, #14
 8012520:	4619      	mov	r1, r3
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7f6 f84c 	bl	80085c0 <pbuf_add_header>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d04b      	beq.n	80125c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	891a      	ldrh	r2, [r3, #8]
 8012532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012534:	4413      	add	r3, r2
 8012536:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	891b      	ldrh	r3, [r3, #8]
 801253c:	8b7a      	ldrh	r2, [r7, #26]
 801253e:	429a      	cmp	r2, r3
 8012540:	f0c0 809a 	bcc.w	8012678 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012544:	8b7b      	ldrh	r3, [r7, #26]
 8012546:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801254a:	4619      	mov	r1, r3
 801254c:	200e      	movs	r0, #14
 801254e:	f7f5 fde9 	bl	8008124 <pbuf_alloc>
 8012552:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 8090 	beq.w	801267c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	895b      	ldrh	r3, [r3, #10]
 8012560:	461a      	mov	r2, r3
 8012562:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012564:	3308      	adds	r3, #8
 8012566:	429a      	cmp	r2, r3
 8012568:	d203      	bcs.n	8012572 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801256a:	6978      	ldr	r0, [r7, #20]
 801256c:	f7f6 f8be 	bl	80086ec <pbuf_free>
          goto icmperr;
 8012570:	e085      	b.n	801267e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801257a:	4618      	mov	r0, r3
 801257c:	f001 fd27 	bl	8013fce <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012580:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012582:	4619      	mov	r1, r3
 8012584:	6978      	ldr	r0, [r7, #20]
 8012586:	f7f6 f82b 	bl	80085e0 <pbuf_remove_header>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d009      	beq.n	80125a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012590:	4b40      	ldr	r3, [pc, #256]	@ (8012694 <icmp_input+0x1f8>)
 8012592:	22b6      	movs	r2, #182	@ 0xb6
 8012594:	4940      	ldr	r1, [pc, #256]	@ (8012698 <icmp_input+0x1fc>)
 8012596:	4841      	ldr	r0, [pc, #260]	@ (801269c <icmp_input+0x200>)
 8012598:	f001 fc18 	bl	8013dcc <iprintf>
          pbuf_free(r);
 801259c:	6978      	ldr	r0, [r7, #20]
 801259e:	f7f6 f8a5 	bl	80086ec <pbuf_free>
          goto icmperr;
 80125a2:	e06c      	b.n	801267e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80125a4:	6879      	ldr	r1, [r7, #4]
 80125a6:	6978      	ldr	r0, [r7, #20]
 80125a8:	f7f6 f9c8 	bl	800893c <pbuf_copy>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d003      	beq.n	80125ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80125b2:	6978      	ldr	r0, [r7, #20]
 80125b4:	f7f6 f89a 	bl	80086ec <pbuf_free>
          goto icmperr;
 80125b8:	e061      	b.n	801267e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f7f6 f896 	bl	80086ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	607b      	str	r3, [r7, #4]
 80125c4:	e00f      	b.n	80125e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80125c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125c8:	330e      	adds	r3, #14
 80125ca:	4619      	mov	r1, r3
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7f6 f807 	bl	80085e0 <pbuf_remove_header>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d006      	beq.n	80125e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80125d8:	4b2e      	ldr	r3, [pc, #184]	@ (8012694 <icmp_input+0x1f8>)
 80125da:	22c7      	movs	r2, #199	@ 0xc7
 80125dc:	4930      	ldr	r1, [pc, #192]	@ (80126a0 <icmp_input+0x204>)
 80125de:	482f      	ldr	r0, [pc, #188]	@ (801269c <icmp_input+0x200>)
 80125e0:	f001 fbf4 	bl	8013dcc <iprintf>
          goto icmperr;
 80125e4:	e04b      	b.n	801267e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80125ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80125ee:	4619      	mov	r1, r3
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7f5 ffe5 	bl	80085c0 <pbuf_add_header>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d12b      	bne.n	8012654 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801260a:	4b20      	ldr	r3, [pc, #128]	@ (801268c <icmp_input+0x1f0>)
 801260c:	691a      	ldr	r2, [r3, #16]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	2200      	movs	r2, #0
 8012616:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	2200      	movs	r2, #0
 801261c:	709a      	strb	r2, [r3, #2]
 801261e:	2200      	movs	r2, #0
 8012620:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	22ff      	movs	r2, #255	@ 0xff
 8012626:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	729a      	strb	r2, [r3, #10]
 801262e:	2200      	movs	r2, #0
 8012630:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	9302      	str	r3, [sp, #8]
 8012636:	2301      	movs	r3, #1
 8012638:	9301      	str	r3, [sp, #4]
 801263a:	2300      	movs	r3, #0
 801263c:	9300      	str	r3, [sp, #0]
 801263e:	23ff      	movs	r3, #255	@ 0xff
 8012640:	2200      	movs	r2, #0
 8012642:	69f9      	ldr	r1, [r7, #28]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f000 fa93 	bl	8012b70 <ip4_output_if>
 801264a:	4603      	mov	r3, r0
 801264c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801264e:	e001      	b.n	8012654 <icmp_input+0x1b8>
      break;
 8012650:	bf00      	nop
 8012652:	e000      	b.n	8012656 <icmp_input+0x1ba>
      break;
 8012654:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7f6 f848 	bl	80086ec <pbuf_free>
  return;
 801265c:	e013      	b.n	8012686 <icmp_input+0x1ea>
    goto lenerr;
 801265e:	bf00      	nop
 8012660:	e002      	b.n	8012668 <icmp_input+0x1cc>
    goto lenerr;
 8012662:	bf00      	nop
 8012664:	e000      	b.n	8012668 <icmp_input+0x1cc>
        goto lenerr;
 8012666:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7f6 f83f 	bl	80086ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801266e:	e00a      	b.n	8012686 <icmp_input+0x1ea>
        goto icmperr;
 8012670:	bf00      	nop
 8012672:	e004      	b.n	801267e <icmp_input+0x1e2>
        goto icmperr;
 8012674:	bf00      	nop
 8012676:	e002      	b.n	801267e <icmp_input+0x1e2>
          goto icmperr;
 8012678:	bf00      	nop
 801267a:	e000      	b.n	801267e <icmp_input+0x1e2>
          goto icmperr;
 801267c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801267e:	6878      	ldr	r0, [r7, #4]
 8012680:	f7f6 f834 	bl	80086ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012684:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012686:	3728      	adds	r7, #40	@ 0x28
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	200056a0 	.word	0x200056a0
 8012690:	200056b4 	.word	0x200056b4
 8012694:	08017994 	.word	0x08017994
 8012698:	080179cc 	.word	0x080179cc
 801269c:	08017a04 	.word	0x08017a04
 80126a0:	08017a2c 	.word	0x08017a2c

080126a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	460b      	mov	r3, r1
 80126ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80126b0:	78fb      	ldrb	r3, [r7, #3]
 80126b2:	461a      	mov	r2, r3
 80126b4:	2103      	movs	r1, #3
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 f814 	bl	80126e4 <icmp_send_response>
}
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80126d0:	78fb      	ldrb	r3, [r7, #3]
 80126d2:	461a      	mov	r2, r3
 80126d4:	210b      	movs	r1, #11
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f804 	bl	80126e4 <icmp_send_response>
}
 80126dc:	bf00      	nop
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b08c      	sub	sp, #48	@ 0x30
 80126e8:	af04      	add	r7, sp, #16
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	460b      	mov	r3, r1
 80126ee:	70fb      	strb	r3, [r7, #3]
 80126f0:	4613      	mov	r3, r2
 80126f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80126f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80126f8:	2124      	movs	r1, #36	@ 0x24
 80126fa:	2022      	movs	r0, #34	@ 0x22
 80126fc:	f7f5 fd12 	bl	8008124 <pbuf_alloc>
 8012700:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d04c      	beq.n	80127a2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	895b      	ldrh	r3, [r3, #10]
 801270c:	2b23      	cmp	r3, #35	@ 0x23
 801270e:	d806      	bhi.n	801271e <icmp_send_response+0x3a>
 8012710:	4b26      	ldr	r3, [pc, #152]	@ (80127ac <icmp_send_response+0xc8>)
 8012712:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8012716:	4926      	ldr	r1, [pc, #152]	@ (80127b0 <icmp_send_response+0xcc>)
 8012718:	4826      	ldr	r0, [pc, #152]	@ (80127b4 <icmp_send_response+0xd0>)
 801271a:	f001 fb57 	bl	8013dcc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	78fa      	ldrb	r2, [r7, #3]
 801272e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	78ba      	ldrb	r2, [r7, #2]
 8012734:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	2200      	movs	r2, #0
 801273a:	711a      	strb	r2, [r3, #4]
 801273c:	2200      	movs	r2, #0
 801273e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	2200      	movs	r2, #0
 8012744:	719a      	strb	r2, [r3, #6]
 8012746:	2200      	movs	r2, #0
 8012748:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	f103 0008 	add.w	r0, r3, #8
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	221c      	movs	r2, #28
 8012758:	4619      	mov	r1, r3
 801275a:	f001 fc38 	bl	8013fce <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012764:	f107 030c 	add.w	r3, r7, #12
 8012768:	4618      	mov	r0, r3
 801276a:	f000 f825 	bl	80127b8 <ip4_route>
 801276e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d011      	beq.n	801279a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2200      	movs	r2, #0
 801277a:	709a      	strb	r2, [r3, #2]
 801277c:	2200      	movs	r2, #0
 801277e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012780:	f107 020c 	add.w	r2, r7, #12
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	9302      	str	r3, [sp, #8]
 8012788:	2301      	movs	r3, #1
 801278a:	9301      	str	r3, [sp, #4]
 801278c:	2300      	movs	r3, #0
 801278e:	9300      	str	r3, [sp, #0]
 8012790:	23ff      	movs	r3, #255	@ 0xff
 8012792:	2100      	movs	r1, #0
 8012794:	69f8      	ldr	r0, [r7, #28]
 8012796:	f000 f9eb 	bl	8012b70 <ip4_output_if>
  }
  pbuf_free(q);
 801279a:	69f8      	ldr	r0, [r7, #28]
 801279c:	f7f5 ffa6 	bl	80086ec <pbuf_free>
 80127a0:	e000      	b.n	80127a4 <icmp_send_response+0xc0>
    return;
 80127a2:	bf00      	nop
}
 80127a4:	3720      	adds	r7, #32
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	08017994 	.word	0x08017994
 80127b0:	08017a60 	.word	0x08017a60
 80127b4:	08017a04 	.word	0x08017a04

080127b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80127c0:	4b33      	ldr	r3, [pc, #204]	@ (8012890 <ip4_route+0xd8>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	60fb      	str	r3, [r7, #12]
 80127c6:	e036      	b.n	8012836 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80127ce:	f003 0301 	and.w	r3, r3, #1
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d02b      	beq.n	8012830 <ip4_route+0x78>
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80127de:	089b      	lsrs	r3, r3, #2
 80127e0:	f003 0301 	and.w	r3, r3, #1
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d022      	beq.n	8012830 <ip4_route+0x78>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	3304      	adds	r3, #4
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d01d      	beq.n	8012830 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	3304      	adds	r3, #4
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	405a      	eors	r2, r3
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	3308      	adds	r3, #8
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	4013      	ands	r3, r2
 8012808:	2b00      	cmp	r3, #0
 801280a:	d101      	bne.n	8012810 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	e038      	b.n	8012882 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d108      	bne.n	8012830 <ip4_route+0x78>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681a      	ldr	r2, [r3, #0]
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	330c      	adds	r3, #12
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	429a      	cmp	r2, r3
 801282a:	d101      	bne.n	8012830 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	e028      	b.n	8012882 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1c5      	bne.n	80127c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801283c:	4b15      	ldr	r3, [pc, #84]	@ (8012894 <ip4_route+0xdc>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d01a      	beq.n	801287a <ip4_route+0xc2>
 8012844:	4b13      	ldr	r3, [pc, #76]	@ (8012894 <ip4_route+0xdc>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801284c:	f003 0301 	and.w	r3, r3, #1
 8012850:	2b00      	cmp	r3, #0
 8012852:	d012      	beq.n	801287a <ip4_route+0xc2>
 8012854:	4b0f      	ldr	r3, [pc, #60]	@ (8012894 <ip4_route+0xdc>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801285c:	f003 0304 	and.w	r3, r3, #4
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00a      	beq.n	801287a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012864:	4b0b      	ldr	r3, [pc, #44]	@ (8012894 <ip4_route+0xdc>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	3304      	adds	r3, #4
 801286a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801286c:	2b00      	cmp	r3, #0
 801286e:	d004      	beq.n	801287a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b7f      	cmp	r3, #127	@ 0x7f
 8012878:	d101      	bne.n	801287e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801287a:	2300      	movs	r3, #0
 801287c:	e001      	b.n	8012882 <ip4_route+0xca>
  }

  return netif_default;
 801287e:	4b05      	ldr	r3, [pc, #20]	@ (8012894 <ip4_route+0xdc>)
 8012880:	681b      	ldr	r3, [r3, #0]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3714      	adds	r7, #20
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop
 8012890:	200085d0 	.word	0x200085d0
 8012894:	200085d4 	.word	0x200085d4

08012898 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d016      	beq.n	80128de <ip4_input_accept+0x46>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3304      	adds	r3, #4
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d011      	beq.n	80128de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80128ba:	4b0b      	ldr	r3, [pc, #44]	@ (80128e8 <ip4_input_accept+0x50>)
 80128bc:	695a      	ldr	r2, [r3, #20]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	3304      	adds	r3, #4
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d008      	beq.n	80128da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80128c8:	4b07      	ldr	r3, [pc, #28]	@ (80128e8 <ip4_input_accept+0x50>)
 80128ca:	695b      	ldr	r3, [r3, #20]
 80128cc:	6879      	ldr	r1, [r7, #4]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f000 fa26 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 80128d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d001      	beq.n	80128de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80128da:	2301      	movs	r3, #1
 80128dc:	e000      	b.n	80128e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	200056a0 	.word	0x200056a0

080128ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b088      	sub	sp, #32
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80128f6:	2301      	movs	r3, #1
 80128f8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	091b      	lsrs	r3, r3, #4
 8012906:	b2db      	uxtb	r3, r3
 8012908:	2b04      	cmp	r3, #4
 801290a:	d004      	beq.n	8012916 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7f5 feed 	bl	80086ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012912:	2300      	movs	r3, #0
 8012914:	e123      	b.n	8012b5e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012916:	69fb      	ldr	r3, [r7, #28]
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	f003 030f 	and.w	r3, r3, #15
 801291e:	b2db      	uxtb	r3, r3
 8012920:	009b      	lsls	r3, r3, #2
 8012922:	b2db      	uxtb	r3, r3
 8012924:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	885b      	ldrh	r3, [r3, #2]
 801292a:	b29b      	uxth	r3, r3
 801292c:	4618      	mov	r0, r3
 801292e:	f7f4 fb0d 	bl	8006f4c <lwip_htons>
 8012932:	4603      	mov	r3, r0
 8012934:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	891b      	ldrh	r3, [r3, #8]
 801293a:	8a3a      	ldrh	r2, [r7, #16]
 801293c:	429a      	cmp	r2, r3
 801293e:	d204      	bcs.n	801294a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012940:	8a3b      	ldrh	r3, [r7, #16]
 8012942:	4619      	mov	r1, r3
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7f5 fd4b 	bl	80083e0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	895b      	ldrh	r3, [r3, #10]
 801294e:	8a7a      	ldrh	r2, [r7, #18]
 8012950:	429a      	cmp	r2, r3
 8012952:	d807      	bhi.n	8012964 <ip4_input+0x78>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	891b      	ldrh	r3, [r3, #8]
 8012958:	8a3a      	ldrh	r2, [r7, #16]
 801295a:	429a      	cmp	r2, r3
 801295c:	d802      	bhi.n	8012964 <ip4_input+0x78>
 801295e:	8a7b      	ldrh	r3, [r7, #18]
 8012960:	2b13      	cmp	r3, #19
 8012962:	d804      	bhi.n	801296e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7f5 fec1 	bl	80086ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801296a:	2300      	movs	r3, #0
 801296c:	e0f7      	b.n	8012b5e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	691b      	ldr	r3, [r3, #16]
 8012972:	4a7d      	ldr	r2, [pc, #500]	@ (8012b68 <ip4_input+0x27c>)
 8012974:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	68db      	ldr	r3, [r3, #12]
 801297a:	4a7b      	ldr	r2, [pc, #492]	@ (8012b68 <ip4_input+0x27c>)
 801297c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801297e:	4b7a      	ldr	r3, [pc, #488]	@ (8012b68 <ip4_input+0x27c>)
 8012980:	695b      	ldr	r3, [r3, #20]
 8012982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012986:	2be0      	cmp	r3, #224	@ 0xe0
 8012988:	d112      	bne.n	80129b0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012990:	f003 0301 	and.w	r3, r3, #1
 8012994:	b2db      	uxtb	r3, r3
 8012996:	2b00      	cmp	r3, #0
 8012998:	d007      	beq.n	80129aa <ip4_input+0xbe>
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	3304      	adds	r3, #4
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d002      	beq.n	80129aa <ip4_input+0xbe>
      netif = inp;
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	61bb      	str	r3, [r7, #24]
 80129a8:	e02a      	b.n	8012a00 <ip4_input+0x114>
    } else {
      netif = NULL;
 80129aa:	2300      	movs	r3, #0
 80129ac:	61bb      	str	r3, [r7, #24]
 80129ae:	e027      	b.n	8012a00 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80129b0:	6838      	ldr	r0, [r7, #0]
 80129b2:	f7ff ff71 	bl	8012898 <ip4_input_accept>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <ip4_input+0xd6>
      netif = inp;
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	61bb      	str	r3, [r7, #24]
 80129c0:	e01e      	b.n	8012a00 <ip4_input+0x114>
    } else {
      netif = NULL;
 80129c2:	2300      	movs	r3, #0
 80129c4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80129c6:	4b68      	ldr	r3, [pc, #416]	@ (8012b68 <ip4_input+0x27c>)
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80129ce:	d017      	beq.n	8012a00 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80129d0:	4b66      	ldr	r3, [pc, #408]	@ (8012b6c <ip4_input+0x280>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	61bb      	str	r3, [r7, #24]
 80129d6:	e00e      	b.n	80129f6 <ip4_input+0x10a>
          if (netif == inp) {
 80129d8:	69ba      	ldr	r2, [r7, #24]
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d006      	beq.n	80129ee <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80129e0:	69b8      	ldr	r0, [r7, #24]
 80129e2:	f7ff ff59 	bl	8012898 <ip4_input_accept>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d108      	bne.n	80129fe <ip4_input+0x112>
 80129ec:	e000      	b.n	80129f0 <ip4_input+0x104>
            continue;
 80129ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	61bb      	str	r3, [r7, #24]
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1ed      	bne.n	80129d8 <ip4_input+0xec>
 80129fc:	e000      	b.n	8012a00 <ip4_input+0x114>
            break;
 80129fe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012a00:	69bb      	ldr	r3, [r7, #24]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d111      	bne.n	8012a2a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	7a5b      	ldrb	r3, [r3, #9]
 8012a0a:	2b11      	cmp	r3, #17
 8012a0c:	d10d      	bne.n	8012a2a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012a0e:	8a7b      	ldrh	r3, [r7, #18]
 8012a10:	69fa      	ldr	r2, [r7, #28]
 8012a12:	4413      	add	r3, r2
 8012a14:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	885b      	ldrh	r3, [r3, #2]
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012a20:	d103      	bne.n	8012a2a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d017      	beq.n	8012a60 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012a30:	4b4d      	ldr	r3, [pc, #308]	@ (8012b68 <ip4_input+0x27c>)
 8012a32:	691b      	ldr	r3, [r3, #16]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d013      	beq.n	8012a60 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a38:	4b4b      	ldr	r3, [pc, #300]	@ (8012b68 <ip4_input+0x27c>)
 8012a3a:	691b      	ldr	r3, [r3, #16]
 8012a3c:	6839      	ldr	r1, [r7, #0]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f000 f96e 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d105      	bne.n	8012a56 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012a4a:	4b47      	ldr	r3, [pc, #284]	@ (8012b68 <ip4_input+0x27c>)
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a52:	2be0      	cmp	r3, #224	@ 0xe0
 8012a54:	d104      	bne.n	8012a60 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7f5 fe48 	bl	80086ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e07e      	b.n	8012b5e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d104      	bne.n	8012a70 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7f5 fe40 	bl	80086ec <pbuf_free>
    return ERR_OK;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	e076      	b.n	8012b5e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	88db      	ldrh	r3, [r3, #6]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	461a      	mov	r2, r3
 8012a78:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00b      	beq.n	8012a9a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fc92 	bl	80133ac <ip4_reass>
 8012a88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d101      	bne.n	8012a94 <ip4_input+0x1a8>
      return ERR_OK;
 8012a90:	2300      	movs	r3, #0
 8012a92:	e064      	b.n	8012b5e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012a9a:	4a33      	ldr	r2, [pc, #204]	@ (8012b68 <ip4_input+0x27c>)
 8012a9c:	69bb      	ldr	r3, [r7, #24]
 8012a9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012aa0:	4a31      	ldr	r2, [pc, #196]	@ (8012b68 <ip4_input+0x27c>)
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012aa6:	4a30      	ldr	r2, [pc, #192]	@ (8012b68 <ip4_input+0x27c>)
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	f003 030f 	and.w	r3, r3, #15
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	009b      	lsls	r3, r3, #2
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	461a      	mov	r2, r3
 8012abc:	4b2a      	ldr	r3, [pc, #168]	@ (8012b68 <ip4_input+0x27c>)
 8012abe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012ac0:	8a7b      	ldrh	r3, [r7, #18]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7f5 fd8b 	bl	80085e0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	7a5b      	ldrb	r3, [r3, #9]
 8012ace:	2b11      	cmp	r3, #17
 8012ad0:	d006      	beq.n	8012ae0 <ip4_input+0x1f4>
 8012ad2:	2b11      	cmp	r3, #17
 8012ad4:	dc13      	bgt.n	8012afe <ip4_input+0x212>
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	d00c      	beq.n	8012af4 <ip4_input+0x208>
 8012ada:	2b06      	cmp	r3, #6
 8012adc:	d005      	beq.n	8012aea <ip4_input+0x1fe>
 8012ade:	e00e      	b.n	8012afe <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012ae0:	6839      	ldr	r1, [r7, #0]
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7fc faee 	bl	800f0c4 <udp_input>
        break;
 8012ae8:	e026      	b.n	8012b38 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012aea:	6839      	ldr	r1, [r7, #0]
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7f7 fedd 	bl	800a8ac <tcp_input>
        break;
 8012af2:	e021      	b.n	8012b38 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7ff fcd0 	bl	801249c <icmp_input>
        break;
 8012afc:	e01c      	b.n	8012b38 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012afe:	4b1a      	ldr	r3, [pc, #104]	@ (8012b68 <ip4_input+0x27c>)
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	69b9      	ldr	r1, [r7, #24]
 8012b04:	4618      	mov	r0, r3
 8012b06:	f000 f90b 	bl	8012d20 <ip4_addr_isbroadcast_u32>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d10f      	bne.n	8012b30 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b10:	4b15      	ldr	r3, [pc, #84]	@ (8012b68 <ip4_input+0x27c>)
 8012b12:	695b      	ldr	r3, [r3, #20]
 8012b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b18:	2be0      	cmp	r3, #224	@ 0xe0
 8012b1a:	d009      	beq.n	8012b30 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012b1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b20:	4619      	mov	r1, r3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f7f5 fdcf 	bl	80086c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012b28:	2102      	movs	r1, #2
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff fdba 	bl	80126a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7f5 fddb 	bl	80086ec <pbuf_free>
        break;
 8012b36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012b38:	4b0b      	ldr	r3, [pc, #44]	@ (8012b68 <ip4_input+0x27c>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8012b68 <ip4_input+0x27c>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012b44:	4b08      	ldr	r3, [pc, #32]	@ (8012b68 <ip4_input+0x27c>)
 8012b46:	2200      	movs	r2, #0
 8012b48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012b4a:	4b07      	ldr	r3, [pc, #28]	@ (8012b68 <ip4_input+0x27c>)
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012b50:	4b05      	ldr	r3, [pc, #20]	@ (8012b68 <ip4_input+0x27c>)
 8012b52:	2200      	movs	r2, #0
 8012b54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012b56:	4b04      	ldr	r3, [pc, #16]	@ (8012b68 <ip4_input+0x27c>)
 8012b58:	2200      	movs	r2, #0
 8012b5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3720      	adds	r7, #32
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	200056a0 	.word	0x200056a0
 8012b6c:	200085d0 	.word	0x200085d0

08012b70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b08a      	sub	sp, #40	@ 0x28
 8012b74:	af04      	add	r7, sp, #16
 8012b76:	60f8      	str	r0, [r7, #12]
 8012b78:	60b9      	str	r1, [r7, #8]
 8012b7a:	607a      	str	r2, [r7, #4]
 8012b7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d009      	beq.n	8012b9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d003      	beq.n	8012b96 <ip4_output_if+0x26>
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d102      	bne.n	8012b9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b98:	3304      	adds	r3, #4
 8012b9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012b9c:	78fa      	ldrb	r2, [r7, #3]
 8012b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ba0:	9302      	str	r3, [sp, #8]
 8012ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	6979      	ldr	r1, [r7, #20]
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f000 f805 	bl	8012bc4 <ip4_output_if_src>
 8012bba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	3718      	adds	r7, #24
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bd80      	pop	{r7, pc}

08012bc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	7b9b      	ldrb	r3, [r3, #14]
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d006      	beq.n	8012be8 <ip4_output_if_src+0x24>
 8012bda:	4b4b      	ldr	r3, [pc, #300]	@ (8012d08 <ip4_output_if_src+0x144>)
 8012bdc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012be0:	494a      	ldr	r1, [pc, #296]	@ (8012d0c <ip4_output_if_src+0x148>)
 8012be2:	484b      	ldr	r0, [pc, #300]	@ (8012d10 <ip4_output_if_src+0x14c>)
 8012be4:	f001 f8f2 	bl	8013dcc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d060      	beq.n	8012cb0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012bee:	2314      	movs	r3, #20
 8012bf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012bf2:	2114      	movs	r1, #20
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	f7f5 fce3 	bl	80085c0 <pbuf_add_header>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d002      	beq.n	8012c06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012c00:	f06f 0301 	mvn.w	r3, #1
 8012c04:	e07c      	b.n	8012d00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	895b      	ldrh	r3, [r3, #10]
 8012c10:	2b13      	cmp	r3, #19
 8012c12:	d806      	bhi.n	8012c22 <ip4_output_if_src+0x5e>
 8012c14:	4b3c      	ldr	r3, [pc, #240]	@ (8012d08 <ip4_output_if_src+0x144>)
 8012c16:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012c1a:	493e      	ldr	r1, [pc, #248]	@ (8012d14 <ip4_output_if_src+0x150>)
 8012c1c:	483c      	ldr	r0, [pc, #240]	@ (8012d10 <ip4_output_if_src+0x14c>)
 8012c1e:	f001 f8d5 	bl	8013dcc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	78fa      	ldrb	r2, [r7, #3]
 8012c26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012c2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012c38:	8b7b      	ldrh	r3, [r7, #26]
 8012c3a:	089b      	lsrs	r3, r3, #2
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	b2db      	uxtb	r3, r3
 8012c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012c4a:	69fb      	ldr	r3, [r7, #28]
 8012c4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012c50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	891b      	ldrh	r3, [r3, #8]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f4 f978 	bl	8006f4c <lwip_htons>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	461a      	mov	r2, r3
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	2200      	movs	r2, #0
 8012c68:	719a      	strb	r2, [r3, #6]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8012d18 <ip4_output_if_src+0x154>)
 8012c70:	881b      	ldrh	r3, [r3, #0]
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7f4 f96a 	bl	8006f4c <lwip_htons>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012c80:	4b25      	ldr	r3, [pc, #148]	@ (8012d18 <ip4_output_if_src+0x154>)
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	3301      	adds	r3, #1
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	4b23      	ldr	r3, [pc, #140]	@ (8012d18 <ip4_output_if_src+0x154>)
 8012c8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d104      	bne.n	8012c9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012c92:	4b22      	ldr	r3, [pc, #136]	@ (8012d1c <ip4_output_if_src+0x158>)
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	69fb      	ldr	r3, [r7, #28]
 8012c98:	60da      	str	r2, [r3, #12]
 8012c9a:	e003      	b.n	8012ca4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	681a      	ldr	r2, [r3, #0]
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	729a      	strb	r2, [r3, #10]
 8012caa:	2200      	movs	r2, #0
 8012cac:	72da      	strb	r2, [r3, #11]
 8012cae:	e00f      	b.n	8012cd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	895b      	ldrh	r3, [r3, #10]
 8012cb4:	2b13      	cmp	r3, #19
 8012cb6:	d802      	bhi.n	8012cbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012cb8:	f06f 0301 	mvn.w	r3, #1
 8012cbc:	e020      	b.n	8012d00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	685b      	ldr	r3, [r3, #4]
 8012cc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012cca:	f107 0314 	add.w	r3, r7, #20
 8012cce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00c      	beq.n	8012cf2 <ip4_output_if_src+0x12e>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	891a      	ldrh	r2, [r3, #8]
 8012cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d906      	bls.n	8012cf2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012ce8:	68f8      	ldr	r0, [r7, #12]
 8012cea:	f000 fd53 	bl	8013794 <ip4_frag>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	e006      	b.n	8012d00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf4:	695b      	ldr	r3, [r3, #20]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	68f9      	ldr	r1, [r7, #12]
 8012cfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cfc:	4798      	blx	r3
 8012cfe:	4603      	mov	r3, r0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3720      	adds	r7, #32
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	08017a8c 	.word	0x08017a8c
 8012d0c:	08017ac0 	.word	0x08017ac0
 8012d10:	08017acc 	.word	0x08017acc
 8012d14:	08017af4 	.word	0x08017af4
 8012d18:	20008762 	.word	0x20008762
 8012d1c:	08018204 	.word	0x08018204

08012d20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d34:	d002      	beq.n	8012d3c <ip4_addr_isbroadcast_u32+0x1c>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d101      	bne.n	8012d40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	e02a      	b.n	8012d96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012d46:	f003 0302 	and.w	r3, r3, #2
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e021      	b.n	8012d96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	3304      	adds	r3, #4
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	687a      	ldr	r2, [r7, #4]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d101      	bne.n	8012d62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e019      	b.n	8012d96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	3304      	adds	r3, #4
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	405a      	eors	r2, r3
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	3308      	adds	r3, #8
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	4013      	ands	r3, r2
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10d      	bne.n	8012d94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	3308      	adds	r3, #8
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	43da      	mvns	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	3308      	adds	r3, #8
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d101      	bne.n	8012d94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012d90:	2301      	movs	r3, #1
 8012d92:	e000      	b.n	8012d96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012d94:	2300      	movs	r3, #0
  }
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3714      	adds	r7, #20
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr
	...

08012da4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012daa:	2300      	movs	r3, #0
 8012dac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012dae:	4b12      	ldr	r3, [pc, #72]	@ (8012df8 <ip_reass_tmr+0x54>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012db4:	e018      	b.n	8012de8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	7fdb      	ldrb	r3, [r3, #31]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00b      	beq.n	8012dd6 <ip_reass_tmr+0x32>
      r->timer--;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	7fdb      	ldrb	r3, [r3, #31]
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	60fb      	str	r3, [r7, #12]
 8012dd4:	e008      	b.n	8012de8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012de0:	68b9      	ldr	r1, [r7, #8]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 f80a 	bl	8012dfc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1e3      	bne.n	8012db6 <ip_reass_tmr+0x12>
    }
  }
}
 8012dee:	bf00      	nop
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	20008764 	.word	0x20008764

08012dfc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b088      	sub	sp, #32
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d105      	bne.n	8012e1e <ip_reass_free_complete_datagram+0x22>
 8012e12:	4b45      	ldr	r3, [pc, #276]	@ (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e14:	22ab      	movs	r2, #171	@ 0xab
 8012e16:	4945      	ldr	r1, [pc, #276]	@ (8012f2c <ip_reass_free_complete_datagram+0x130>)
 8012e18:	4845      	ldr	r0, [pc, #276]	@ (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e1a:	f000 ffd7 	bl	8013dcc <iprintf>
  if (prev != NULL) {
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d00a      	beq.n	8012e3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d005      	beq.n	8012e3a <ip_reass_free_complete_datagram+0x3e>
 8012e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e30:	22ad      	movs	r2, #173	@ 0xad
 8012e32:	4940      	ldr	r1, [pc, #256]	@ (8012f34 <ip_reass_free_complete_datagram+0x138>)
 8012e34:	483e      	ldr	r0, [pc, #248]	@ (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e36:	f000 ffc9 	bl	8013dcc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	889b      	ldrh	r3, [r3, #4]
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d12a      	bne.n	8012ea2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	6858      	ldr	r0, [r3, #4]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3308      	adds	r3, #8
 8012e62:	2214      	movs	r2, #20
 8012e64:	4619      	mov	r1, r3
 8012e66:	f001 f8b2 	bl	8013fce <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	69b8      	ldr	r0, [r7, #24]
 8012e6e:	f7ff fc29 	bl	80126c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012e72:	69b8      	ldr	r0, [r7, #24]
 8012e74:	f7f5 fcc2 	bl	80087fc <pbuf_clen>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012e7c:	8bfa      	ldrh	r2, [r7, #30]
 8012e7e:	8a7b      	ldrh	r3, [r7, #18]
 8012e80:	4413      	add	r3, r2
 8012e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e86:	db05      	blt.n	8012e94 <ip_reass_free_complete_datagram+0x98>
 8012e88:	4b27      	ldr	r3, [pc, #156]	@ (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012e8a:	22bc      	movs	r2, #188	@ 0xbc
 8012e8c:	492a      	ldr	r1, [pc, #168]	@ (8012f38 <ip_reass_free_complete_datagram+0x13c>)
 8012e8e:	4828      	ldr	r0, [pc, #160]	@ (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012e90:	f000 ff9c 	bl	8013dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012e94:	8bfa      	ldrh	r2, [r7, #30]
 8012e96:	8a7b      	ldrh	r3, [r7, #18]
 8012e98:	4413      	add	r3, r2
 8012e9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012e9c:	69b8      	ldr	r0, [r7, #24]
 8012e9e:	f7f5 fc25 	bl	80086ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012ea8:	e01f      	b.n	8012eea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012eba:	68f8      	ldr	r0, [r7, #12]
 8012ebc:	f7f5 fc9e 	bl	80087fc <pbuf_clen>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ec4:	8bfa      	ldrh	r2, [r7, #30]
 8012ec6:	8a7b      	ldrh	r3, [r7, #18]
 8012ec8:	4413      	add	r3, r2
 8012eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ece:	db05      	blt.n	8012edc <ip_reass_free_complete_datagram+0xe0>
 8012ed0:	4b15      	ldr	r3, [pc, #84]	@ (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012ed2:	22cc      	movs	r2, #204	@ 0xcc
 8012ed4:	4918      	ldr	r1, [pc, #96]	@ (8012f38 <ip_reass_free_complete_datagram+0x13c>)
 8012ed6:	4816      	ldr	r0, [pc, #88]	@ (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012ed8:	f000 ff78 	bl	8013dcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012edc:	8bfa      	ldrh	r2, [r7, #30]
 8012ede:	8a7b      	ldrh	r3, [r7, #18]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f7f5 fc01 	bl	80086ec <pbuf_free>
  while (p != NULL) {
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1dc      	bne.n	8012eaa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 f8c2 	bl	801307c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012ef8:	4b10      	ldr	r3, [pc, #64]	@ (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	8bfa      	ldrh	r2, [r7, #30]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d905      	bls.n	8012f0e <ip_reass_free_complete_datagram+0x112>
 8012f02:	4b09      	ldr	r3, [pc, #36]	@ (8012f28 <ip_reass_free_complete_datagram+0x12c>)
 8012f04:	22d2      	movs	r2, #210	@ 0xd2
 8012f06:	490e      	ldr	r1, [pc, #56]	@ (8012f40 <ip_reass_free_complete_datagram+0x144>)
 8012f08:	4809      	ldr	r0, [pc, #36]	@ (8012f30 <ip_reass_free_complete_datagram+0x134>)
 8012f0a:	f000 ff5f 	bl	8013dcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012f10:	881a      	ldrh	r2, [r3, #0]
 8012f12:	8bfb      	ldrh	r3, [r7, #30]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	4b08      	ldr	r3, [pc, #32]	@ (8012f3c <ip_reass_free_complete_datagram+0x140>)
 8012f1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012f1c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3720      	adds	r7, #32
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	08017b24 	.word	0x08017b24
 8012f2c:	08017b60 	.word	0x08017b60
 8012f30:	08017b6c 	.word	0x08017b6c
 8012f34:	08017b94 	.word	0x08017b94
 8012f38:	08017ba8 	.word	0x08017ba8
 8012f3c:	20008768 	.word	0x20008768
 8012f40:	08017bc8 	.word	0x08017bc8

08012f44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b08a      	sub	sp, #40	@ 0x28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012f56:	2300      	movs	r3, #0
 8012f58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012f62:	4b28      	ldr	r3, [pc, #160]	@ (8013004 <ip_reass_remove_oldest_datagram+0xc0>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012f68:	e030      	b.n	8012fcc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6c:	695a      	ldr	r2, [r3, #20]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d10c      	bne.n	8012f90 <ip_reass_remove_oldest_datagram+0x4c>
 8012f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f78:	699a      	ldr	r2, [r3, #24]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	691b      	ldr	r3, [r3, #16]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d106      	bne.n	8012f90 <ip_reass_remove_oldest_datagram+0x4c>
 8012f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f84:	899a      	ldrh	r2, [r3, #12]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	889b      	ldrh	r3, [r3, #4]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d014      	beq.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012f90:	693b      	ldr	r3, [r7, #16]
 8012f92:	3301      	adds	r3, #1
 8012f94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d104      	bne.n	8012fa6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	61bb      	str	r3, [r7, #24]
 8012fa4:	e009      	b.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa8:	7fda      	ldrb	r2, [r3, #31]
 8012faa:	6a3b      	ldr	r3, [r7, #32]
 8012fac:	7fdb      	ldrb	r3, [r3, #31]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d803      	bhi.n	8012fba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d001      	beq.n	8012fc6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fc4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d1cb      	bne.n	8012f6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d008      	beq.n	8012fea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012fd8:	69b9      	ldr	r1, [r7, #24]
 8012fda:	6a38      	ldr	r0, [r7, #32]
 8012fdc:	f7ff ff0e 	bl	8012dfc <ip_reass_free_complete_datagram>
 8012fe0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4413      	add	r3, r2
 8012fe8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012fea:	697a      	ldr	r2, [r7, #20]
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	429a      	cmp	r2, r3
 8012ff0:	da02      	bge.n	8012ff8 <ip_reass_remove_oldest_datagram+0xb4>
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	dcac      	bgt.n	8012f52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012ff8:	697b      	ldr	r3, [r7, #20]
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3728      	adds	r7, #40	@ 0x28
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	20008764 	.word	0x20008764

08013008 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013012:	2004      	movs	r0, #4
 8013014:	f7f4 fc78 	bl	8007908 <memp_malloc>
 8013018:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d110      	bne.n	8013042 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013020:	6839      	ldr	r1, [r7, #0]
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f7ff ff8e 	bl	8012f44 <ip_reass_remove_oldest_datagram>
 8013028:	4602      	mov	r2, r0
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	4293      	cmp	r3, r2
 801302e:	dc03      	bgt.n	8013038 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013030:	2004      	movs	r0, #4
 8013032:	f7f4 fc69 	bl	8007908 <memp_malloc>
 8013036:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d101      	bne.n	8013042 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801303e:	2300      	movs	r3, #0
 8013040:	e016      	b.n	8013070 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013042:	2220      	movs	r2, #32
 8013044:	2100      	movs	r1, #0
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f000 ff25 	bl	8013e96 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	220f      	movs	r2, #15
 8013050:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013052:	4b09      	ldr	r3, [pc, #36]	@ (8013078 <ip_reass_enqueue_new_datagram+0x70>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801305a:	4a07      	ldr	r2, [pc, #28]	@ (8013078 <ip_reass_enqueue_new_datagram+0x70>)
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	3308      	adds	r3, #8
 8013064:	2214      	movs	r2, #20
 8013066:	6879      	ldr	r1, [r7, #4]
 8013068:	4618      	mov	r0, r3
 801306a:	f000 ffb0 	bl	8013fce <memcpy>
  return ipr;
 801306e:	68fb      	ldr	r3, [r7, #12]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3710      	adds	r7, #16
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}
 8013078:	20008764 	.word	0x20008764

0801307c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013086:	4b10      	ldr	r3, [pc, #64]	@ (80130c8 <ip_reass_dequeue_datagram+0x4c>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	429a      	cmp	r2, r3
 801308e:	d104      	bne.n	801309a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a0c      	ldr	r2, [pc, #48]	@ (80130c8 <ip_reass_dequeue_datagram+0x4c>)
 8013096:	6013      	str	r3, [r2, #0]
 8013098:	e00d      	b.n	80130b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d106      	bne.n	80130ae <ip_reass_dequeue_datagram+0x32>
 80130a0:	4b0a      	ldr	r3, [pc, #40]	@ (80130cc <ip_reass_dequeue_datagram+0x50>)
 80130a2:	f240 1245 	movw	r2, #325	@ 0x145
 80130a6:	490a      	ldr	r1, [pc, #40]	@ (80130d0 <ip_reass_dequeue_datagram+0x54>)
 80130a8:	480a      	ldr	r0, [pc, #40]	@ (80130d4 <ip_reass_dequeue_datagram+0x58>)
 80130aa:	f000 fe8f 	bl	8013dcc <iprintf>
    prev->next = ipr->next;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80130b6:	6879      	ldr	r1, [r7, #4]
 80130b8:	2004      	movs	r0, #4
 80130ba:	f7f4 fc95 	bl	80079e8 <memp_free>
}
 80130be:	bf00      	nop
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	20008764 	.word	0x20008764
 80130cc:	08017b24 	.word	0x08017b24
 80130d0:	08017bec 	.word	0x08017bec
 80130d4:	08017b6c 	.word	0x08017b6c

080130d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b08c      	sub	sp, #48	@ 0x30
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80130e8:	2301      	movs	r3, #1
 80130ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	885b      	ldrh	r3, [r3, #2]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f3 ff27 	bl	8006f4c <lwip_htons>
 80130fe:	4603      	mov	r3, r0
 8013100:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	f003 030f 	and.w	r3, r3, #15
 801310a:	b2db      	uxtb	r3, r3
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013110:	7e7b      	ldrb	r3, [r7, #25]
 8013112:	b29b      	uxth	r3, r3
 8013114:	8b7a      	ldrh	r2, [r7, #26]
 8013116:	429a      	cmp	r2, r3
 8013118:	d202      	bcs.n	8013120 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801311a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801311e:	e135      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013120:	7e7b      	ldrb	r3, [r7, #25]
 8013122:	b29b      	uxth	r3, r3
 8013124:	8b7a      	ldrh	r2, [r7, #26]
 8013126:	1ad3      	subs	r3, r2, r3
 8013128:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	88db      	ldrh	r3, [r3, #6]
 801312e:	b29b      	uxth	r3, r3
 8013130:	4618      	mov	r0, r3
 8013132:	f7f3 ff0b 	bl	8006f4c <lwip_htons>
 8013136:	4603      	mov	r3, r0
 8013138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801313c:	b29b      	uxth	r3, r3
 801313e:	00db      	lsls	r3, r3, #3
 8013140:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314a:	2200      	movs	r2, #0
 801314c:	701a      	strb	r2, [r3, #0]
 801314e:	2200      	movs	r2, #0
 8013150:	705a      	strb	r2, [r3, #1]
 8013152:	2200      	movs	r2, #0
 8013154:	709a      	strb	r2, [r3, #2]
 8013156:	2200      	movs	r2, #0
 8013158:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801315c:	8afa      	ldrh	r2, [r7, #22]
 801315e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013160:	8afa      	ldrh	r2, [r7, #22]
 8013162:	8b7b      	ldrh	r3, [r7, #26]
 8013164:	4413      	add	r3, r2
 8013166:	b29a      	uxth	r2, r3
 8013168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316e:	88db      	ldrh	r3, [r3, #6]
 8013170:	b29b      	uxth	r3, r3
 8013172:	8afa      	ldrh	r2, [r7, #22]
 8013174:	429a      	cmp	r2, r3
 8013176:	d902      	bls.n	801317e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801317c:	e106      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	627b      	str	r3, [r7, #36]	@ 0x24
 8013184:	e068      	b.n	8013258 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318e:	889b      	ldrh	r3, [r3, #4]
 8013190:	b29a      	uxth	r2, r3
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	889b      	ldrh	r3, [r3, #4]
 8013196:	b29b      	uxth	r3, r3
 8013198:	429a      	cmp	r2, r3
 801319a:	d235      	bcs.n	8013208 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801319c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80131a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d020      	beq.n	80131ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80131a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131aa:	889b      	ldrh	r3, [r3, #4]
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b0:	88db      	ldrh	r3, [r3, #6]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d307      	bcc.n	80131c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80131b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ba:	88db      	ldrh	r3, [r3, #6]
 80131bc:	b29a      	uxth	r2, r3
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	889b      	ldrh	r3, [r3, #4]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d902      	bls.n	80131ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80131cc:	e0de      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80131ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80131d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d6:	88db      	ldrh	r3, [r3, #6]
 80131d8:	b29a      	uxth	r2, r3
 80131da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131dc:	889b      	ldrh	r3, [r3, #4]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d03d      	beq.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80131e8:	e03a      	b.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80131ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ec:	88db      	ldrh	r3, [r3, #6]
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	889b      	ldrh	r3, [r3, #4]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d902      	bls.n	8013200 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80131fe:	e0c5      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	605a      	str	r2, [r3, #4]
      break;
 8013206:	e02b      	b.n	8013260 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320a:	889b      	ldrh	r3, [r3, #4]
 801320c:	b29a      	uxth	r2, r3
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	889b      	ldrh	r3, [r3, #4]
 8013212:	b29b      	uxth	r3, r3
 8013214:	429a      	cmp	r2, r3
 8013216:	d102      	bne.n	801321e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801321c:	e0b6      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801321e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013220:	889b      	ldrh	r3, [r3, #4]
 8013222:	b29a      	uxth	r2, r3
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	88db      	ldrh	r3, [r3, #6]
 8013228:	b29b      	uxth	r3, r3
 801322a:	429a      	cmp	r2, r3
 801322c:	d202      	bcs.n	8013234 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801322e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013232:	e0ab      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013236:	2b00      	cmp	r3, #0
 8013238:	d009      	beq.n	801324e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801323c:	88db      	ldrh	r3, [r3, #6]
 801323e:	b29a      	uxth	r2, r3
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	889b      	ldrh	r3, [r3, #4]
 8013244:	b29b      	uxth	r3, r3
 8013246:	429a      	cmp	r2, r3
 8013248:	d001      	beq.n	801324e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801324a:	2300      	movs	r3, #0
 801324c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325a:	2b00      	cmp	r3, #0
 801325c:	d193      	bne.n	8013186 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801325e:	e000      	b.n	8013262 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013260:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013264:	2b00      	cmp	r3, #0
 8013266:	d12d      	bne.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326a:	2b00      	cmp	r3, #0
 801326c:	d01c      	beq.n	80132a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801326e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013270:	88db      	ldrh	r3, [r3, #6]
 8013272:	b29a      	uxth	r2, r3
 8013274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013276:	889b      	ldrh	r3, [r3, #4]
 8013278:	b29b      	uxth	r3, r3
 801327a:	429a      	cmp	r2, r3
 801327c:	d906      	bls.n	801328c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801327e:	4b45      	ldr	r3, [pc, #276]	@ (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013280:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013284:	4944      	ldr	r1, [pc, #272]	@ (8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013286:	4845      	ldr	r0, [pc, #276]	@ (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013288:	f000 fda0 	bl	8013dcc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013294:	88db      	ldrh	r3, [r3, #6]
 8013296:	b29a      	uxth	r2, r3
 8013298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801329a:	889b      	ldrh	r3, [r3, #4]
 801329c:	b29b      	uxth	r3, r3
 801329e:	429a      	cmp	r2, r3
 80132a0:	d010      	beq.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80132a2:	2300      	movs	r3, #0
 80132a4:	623b      	str	r3, [r7, #32]
 80132a6:	e00d      	b.n	80132c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	685b      	ldr	r3, [r3, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d006      	beq.n	80132be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80132b0:	4b38      	ldr	r3, [pc, #224]	@ (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80132b2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80132b6:	493a      	ldr	r1, [pc, #232]	@ (80133a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80132b8:	4838      	ldr	r0, [pc, #224]	@ (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80132ba:	f000 fd87 	bl	8013dcc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	68ba      	ldr	r2, [r7, #8]
 80132c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d105      	bne.n	80132d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	7f9b      	ldrb	r3, [r3, #30]
 80132ce:	f003 0301 	and.w	r3, r3, #1
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d059      	beq.n	801338a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d04f      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d006      	beq.n	80132f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	889b      	ldrh	r3, [r3, #4]
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	623b      	str	r3, [r7, #32]
 80132f6:	e041      	b.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80132f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80132fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013302:	e012      	b.n	801332a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801330c:	88db      	ldrh	r3, [r3, #6]
 801330e:	b29a      	uxth	r2, r3
 8013310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013312:	889b      	ldrh	r3, [r3, #4]
 8013314:	b29b      	uxth	r3, r3
 8013316:	429a      	cmp	r2, r3
 8013318:	d002      	beq.n	8013320 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	623b      	str	r3, [r7, #32]
            break;
 801331e:	e007      	b.n	8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013322:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1e9      	bne.n	8013304 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d022      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d106      	bne.n	801334c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801333e:	4b15      	ldr	r3, [pc, #84]	@ (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013340:	f240 12df 	movw	r2, #479	@ 0x1df
 8013344:	4917      	ldr	r1, [pc, #92]	@ (80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013346:	4815      	ldr	r0, [pc, #84]	@ (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013348:	f000 fd40 	bl	8013dcc <iprintf>
          LWIP_ASSERT("sanity check",
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013354:	429a      	cmp	r2, r3
 8013356:	d106      	bne.n	8013366 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013358:	4b0e      	ldr	r3, [pc, #56]	@ (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801335a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801335e:	4911      	ldr	r1, [pc, #68]	@ (80133a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013360:	480e      	ldr	r0, [pc, #56]	@ (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013362:	f000 fd33 	bl	8013dcc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d006      	beq.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801336e:	4b09      	ldr	r3, [pc, #36]	@ (8013394 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013370:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013374:	490c      	ldr	r1, [pc, #48]	@ (80133a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013376:	4809      	ldr	r0, [pc, #36]	@ (801339c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013378:	f000 fd28 	bl	8013dcc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801337c:	6a3b      	ldr	r3, [r7, #32]
 801337e:	2b00      	cmp	r3, #0
 8013380:	bf14      	ite	ne
 8013382:	2301      	movne	r3, #1
 8013384:	2300      	moveq	r3, #0
 8013386:	b2db      	uxtb	r3, r3
 8013388:	e000      	b.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3730      	adds	r7, #48	@ 0x30
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	08017b24 	.word	0x08017b24
 8013398:	08017c08 	.word	0x08017c08
 801339c:	08017b6c 	.word	0x08017b6c
 80133a0:	08017c28 	.word	0x08017c28
 80133a4:	08017c60 	.word	0x08017c60
 80133a8:	08017c70 	.word	0x08017c70

080133ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b08e      	sub	sp, #56	@ 0x38
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80133ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f003 030f 	and.w	r3, r3, #15
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	2b14      	cmp	r3, #20
 80133ca:	f040 8171 	bne.w	80136b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80133ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d0:	88db      	ldrh	r3, [r3, #6]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7f3 fdb9 	bl	8006f4c <lwip_htons>
 80133da:	4603      	mov	r3, r0
 80133dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	00db      	lsls	r3, r3, #3
 80133e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80133e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e8:	885b      	ldrh	r3, [r3, #2]
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f3 fdad 	bl	8006f4c <lwip_htons>
 80133f2:	4603      	mov	r3, r0
 80133f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80133f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	f003 030f 	and.w	r3, r3, #15
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013406:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801340a:	b29b      	uxth	r3, r3
 801340c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801340e:	429a      	cmp	r2, r3
 8013410:	f0c0 8150 	bcc.w	80136b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013414:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013418:	b29b      	uxth	r3, r3
 801341a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7f5 f9eb 	bl	80087fc <pbuf_clen>
 8013426:	4603      	mov	r3, r0
 8013428:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801342a:	4b8c      	ldr	r3, [pc, #560]	@ (801365c <ip4_reass+0x2b0>)
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	8c3b      	ldrh	r3, [r7, #32]
 8013432:	4413      	add	r3, r2
 8013434:	2b0a      	cmp	r3, #10
 8013436:	dd10      	ble.n	801345a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013438:	8c3b      	ldrh	r3, [r7, #32]
 801343a:	4619      	mov	r1, r3
 801343c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801343e:	f7ff fd81 	bl	8012f44 <ip_reass_remove_oldest_datagram>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	f000 8137 	beq.w	80136b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801344a:	4b84      	ldr	r3, [pc, #528]	@ (801365c <ip4_reass+0x2b0>)
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	461a      	mov	r2, r3
 8013450:	8c3b      	ldrh	r3, [r7, #32]
 8013452:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013454:	2b0a      	cmp	r3, #10
 8013456:	f300 812f 	bgt.w	80136b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801345a:	4b81      	ldr	r3, [pc, #516]	@ (8013660 <ip4_reass+0x2b4>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	633b      	str	r3, [r7, #48]	@ 0x30
 8013460:	e015      	b.n	801348e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013464:	695a      	ldr	r2, [r3, #20]
 8013466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	429a      	cmp	r2, r3
 801346c:	d10c      	bne.n	8013488 <ip4_reass+0xdc>
 801346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013470:	699a      	ldr	r2, [r3, #24]
 8013472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	429a      	cmp	r2, r3
 8013478:	d106      	bne.n	8013488 <ip4_reass+0xdc>
 801347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801347c:	899a      	ldrh	r2, [r3, #12]
 801347e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013480:	889b      	ldrh	r3, [r3, #4]
 8013482:	b29b      	uxth	r3, r3
 8013484:	429a      	cmp	r2, r3
 8013486:	d006      	beq.n	8013496 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	633b      	str	r3, [r7, #48]	@ 0x30
 801348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013490:	2b00      	cmp	r3, #0
 8013492:	d1e6      	bne.n	8013462 <ip4_reass+0xb6>
 8013494:	e000      	b.n	8013498 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013496:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349a:	2b00      	cmp	r3, #0
 801349c:	d109      	bne.n	80134b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801349e:	8c3b      	ldrh	r3, [r7, #32]
 80134a0:	4619      	mov	r1, r3
 80134a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134a4:	f7ff fdb0 	bl	8013008 <ip_reass_enqueue_new_datagram>
 80134a8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80134aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11c      	bne.n	80134ea <ip4_reass+0x13e>
      goto nullreturn;
 80134b0:	e105      	b.n	80136be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80134b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b4:	88db      	ldrh	r3, [r3, #6]
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7f3 fd47 	bl	8006f4c <lwip_htons>
 80134be:	4603      	mov	r3, r0
 80134c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d110      	bne.n	80134ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80134c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ca:	89db      	ldrh	r3, [r3, #14]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f3 fd3d 	bl	8006f4c <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d006      	beq.n	80134ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80134dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134de:	3308      	adds	r3, #8
 80134e0:	2214      	movs	r2, #20
 80134e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80134e4:	4618      	mov	r0, r3
 80134e6:	f000 fd72 	bl	8013fce <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80134ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ec:	88db      	ldrh	r3, [r3, #6]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	f003 0320 	and.w	r3, r3, #32
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	bf0c      	ite	eq
 80134f8:	2301      	moveq	r3, #1
 80134fa:	2300      	movne	r3, #0
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013500:	69fb      	ldr	r3, [r7, #28]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d00e      	beq.n	8013524 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013506:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801350a:	4413      	add	r3, r2
 801350c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801350e:	8b7a      	ldrh	r2, [r7, #26]
 8013510:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013512:	429a      	cmp	r2, r3
 8013514:	f0c0 80a0 	bcc.w	8013658 <ip4_reass+0x2ac>
 8013518:	8b7b      	ldrh	r3, [r7, #26]
 801351a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801351e:	4293      	cmp	r3, r2
 8013520:	f200 809a 	bhi.w	8013658 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013524:	69fa      	ldr	r2, [r7, #28]
 8013526:	6879      	ldr	r1, [r7, #4]
 8013528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801352a:	f7ff fdd5 	bl	80130d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801352e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013536:	f000 809b 	beq.w	8013670 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801353a:	4b48      	ldr	r3, [pc, #288]	@ (801365c <ip4_reass+0x2b0>)
 801353c:	881a      	ldrh	r2, [r3, #0]
 801353e:	8c3b      	ldrh	r3, [r7, #32]
 8013540:	4413      	add	r3, r2
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b45      	ldr	r3, [pc, #276]	@ (801365c <ip4_reass+0x2b0>)
 8013546:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00d      	beq.n	801356a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801354e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013552:	4413      	add	r3, r2
 8013554:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013558:	8a7a      	ldrh	r2, [r7, #18]
 801355a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355e:	7f9b      	ldrb	r3, [r3, #30]
 8013560:	f043 0301 	orr.w	r3, r3, #1
 8013564:	b2da      	uxtb	r2, r3
 8013566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013568:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d171      	bne.n	8013654 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013572:	8b9b      	ldrh	r3, [r3, #28]
 8013574:	3314      	adds	r3, #20
 8013576:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801358c:	3308      	adds	r3, #8
 801358e:	2214      	movs	r2, #20
 8013590:	4619      	mov	r1, r3
 8013592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013594:	f000 fd1b 	bl	8013fce <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013598:	8a3b      	ldrh	r3, [r7, #16]
 801359a:	4618      	mov	r0, r3
 801359c:	f7f3 fcd6 	bl	8006f4c <lwip_htons>
 80135a0:	4603      	mov	r3, r0
 80135a2:	461a      	mov	r2, r3
 80135a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80135a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135aa:	2200      	movs	r2, #0
 80135ac:	719a      	strb	r2, [r3, #6]
 80135ae:	2200      	movs	r2, #0
 80135b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80135b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135b4:	2200      	movs	r2, #0
 80135b6:	729a      	strb	r2, [r3, #10]
 80135b8:	2200      	movs	r2, #0
 80135ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80135bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80135c2:	e00d      	b.n	80135e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80135c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80135ca:	2114      	movs	r1, #20
 80135cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80135ce:	f7f5 f807 	bl	80085e0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80135d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7f5 f94b 	bl	8008870 <pbuf_cat>
      r = iprh->next_pbuf;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80135e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d1ee      	bne.n	80135c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80135e6:	4b1e      	ldr	r3, [pc, #120]	@ (8013660 <ip4_reass+0x2b4>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d102      	bne.n	80135f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80135f0:	2300      	movs	r3, #0
 80135f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135f4:	e010      	b.n	8013618 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80135f6:	4b1a      	ldr	r3, [pc, #104]	@ (8013660 <ip4_reass+0x2b4>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80135fc:	e007      	b.n	801360e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80135fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013604:	429a      	cmp	r2, r3
 8013606:	d006      	beq.n	8013616 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1f4      	bne.n	80135fe <ip4_reass+0x252>
 8013614:	e000      	b.n	8013618 <ip4_reass+0x26c>
          break;
 8013616:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013618:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801361a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801361c:	f7ff fd2e 	bl	801307c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7f5 f8eb 	bl	80087fc <pbuf_clen>
 8013626:	4603      	mov	r3, r0
 8013628:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801362a:	4b0c      	ldr	r3, [pc, #48]	@ (801365c <ip4_reass+0x2b0>)
 801362c:	881b      	ldrh	r3, [r3, #0]
 801362e:	8c3a      	ldrh	r2, [r7, #32]
 8013630:	429a      	cmp	r2, r3
 8013632:	d906      	bls.n	8013642 <ip4_reass+0x296>
 8013634:	4b0b      	ldr	r3, [pc, #44]	@ (8013664 <ip4_reass+0x2b8>)
 8013636:	f240 229b 	movw	r2, #667	@ 0x29b
 801363a:	490b      	ldr	r1, [pc, #44]	@ (8013668 <ip4_reass+0x2bc>)
 801363c:	480b      	ldr	r0, [pc, #44]	@ (801366c <ip4_reass+0x2c0>)
 801363e:	f000 fbc5 	bl	8013dcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013642:	4b06      	ldr	r3, [pc, #24]	@ (801365c <ip4_reass+0x2b0>)
 8013644:	881a      	ldrh	r2, [r3, #0]
 8013646:	8c3b      	ldrh	r3, [r7, #32]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	b29a      	uxth	r2, r3
 801364c:	4b03      	ldr	r3, [pc, #12]	@ (801365c <ip4_reass+0x2b0>)
 801364e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	e038      	b.n	80136c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013654:	2300      	movs	r3, #0
 8013656:	e036      	b.n	80136c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013658:	bf00      	nop
 801365a:	e00a      	b.n	8013672 <ip4_reass+0x2c6>
 801365c:	20008768 	.word	0x20008768
 8013660:	20008764 	.word	0x20008764
 8013664:	08017b24 	.word	0x08017b24
 8013668:	08017c94 	.word	0x08017c94
 801366c:	08017b6c 	.word	0x08017b6c
    goto nullreturn_ipr;
 8013670:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013674:	2b00      	cmp	r3, #0
 8013676:	d106      	bne.n	8013686 <ip4_reass+0x2da>
 8013678:	4b15      	ldr	r3, [pc, #84]	@ (80136d0 <ip4_reass+0x324>)
 801367a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801367e:	4915      	ldr	r1, [pc, #84]	@ (80136d4 <ip4_reass+0x328>)
 8013680:	4815      	ldr	r0, [pc, #84]	@ (80136d8 <ip4_reass+0x32c>)
 8013682:	f000 fba3 	bl	8013dcc <iprintf>
  if (ipr->p == NULL) {
 8013686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d116      	bne.n	80136bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801368e:	4b13      	ldr	r3, [pc, #76]	@ (80136dc <ip4_reass+0x330>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013694:	429a      	cmp	r2, r3
 8013696:	d006      	beq.n	80136a6 <ip4_reass+0x2fa>
 8013698:	4b0d      	ldr	r3, [pc, #52]	@ (80136d0 <ip4_reass+0x324>)
 801369a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801369e:	4910      	ldr	r1, [pc, #64]	@ (80136e0 <ip4_reass+0x334>)
 80136a0:	480d      	ldr	r0, [pc, #52]	@ (80136d8 <ip4_reass+0x32c>)
 80136a2:	f000 fb93 	bl	8013dcc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80136a6:	2100      	movs	r1, #0
 80136a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136aa:	f7ff fce7 	bl	801307c <ip_reass_dequeue_datagram>
 80136ae:	e006      	b.n	80136be <ip4_reass+0x312>
    goto nullreturn;
 80136b0:	bf00      	nop
 80136b2:	e004      	b.n	80136be <ip4_reass+0x312>
    goto nullreturn;
 80136b4:	bf00      	nop
 80136b6:	e002      	b.n	80136be <ip4_reass+0x312>
      goto nullreturn;
 80136b8:	bf00      	nop
 80136ba:	e000      	b.n	80136be <ip4_reass+0x312>
  }

nullreturn:
 80136bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7f5 f814 	bl	80086ec <pbuf_free>
  return NULL;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3738      	adds	r7, #56	@ 0x38
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	08017b24 	.word	0x08017b24
 80136d4:	08017cb0 	.word	0x08017cb0
 80136d8:	08017b6c 	.word	0x08017b6c
 80136dc:	20008764 	.word	0x20008764
 80136e0:	08017cbc 	.word	0x08017cbc

080136e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80136e8:	2005      	movs	r0, #5
 80136ea:	f7f4 f90d 	bl	8007908 <memp_malloc>
 80136ee:	4603      	mov	r3, r0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013702:	4b07      	ldr	r3, [pc, #28]	@ (8013720 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013704:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013708:	4906      	ldr	r1, [pc, #24]	@ (8013724 <ip_frag_free_pbuf_custom_ref+0x30>)
 801370a:	4807      	ldr	r0, [pc, #28]	@ (8013728 <ip_frag_free_pbuf_custom_ref+0x34>)
 801370c:	f000 fb5e 	bl	8013dcc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	2005      	movs	r0, #5
 8013714:	f7f4 f968 	bl	80079e8 <memp_free>
}
 8013718:	bf00      	nop
 801371a:	3708      	adds	r7, #8
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	08017b24 	.word	0x08017b24
 8013724:	08017cdc 	.word	0x08017cdc
 8013728:	08017b6c 	.word	0x08017b6c

0801372c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d106      	bne.n	801374c <ipfrag_free_pbuf_custom+0x20>
 801373e:	4b11      	ldr	r3, [pc, #68]	@ (8013784 <ipfrag_free_pbuf_custom+0x58>)
 8013740:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013744:	4910      	ldr	r1, [pc, #64]	@ (8013788 <ipfrag_free_pbuf_custom+0x5c>)
 8013746:	4811      	ldr	r0, [pc, #68]	@ (801378c <ipfrag_free_pbuf_custom+0x60>)
 8013748:	f000 fb40 	bl	8013dcc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	429a      	cmp	r2, r3
 8013752:	d006      	beq.n	8013762 <ipfrag_free_pbuf_custom+0x36>
 8013754:	4b0b      	ldr	r3, [pc, #44]	@ (8013784 <ipfrag_free_pbuf_custom+0x58>)
 8013756:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801375a:	490d      	ldr	r1, [pc, #52]	@ (8013790 <ipfrag_free_pbuf_custom+0x64>)
 801375c:	480b      	ldr	r0, [pc, #44]	@ (801378c <ipfrag_free_pbuf_custom+0x60>)
 801375e:	f000 fb35 	bl	8013dcc <iprintf>
  if (pcr->original != NULL) {
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	695b      	ldr	r3, [r3, #20]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d004      	beq.n	8013774 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	695b      	ldr	r3, [r3, #20]
 801376e:	4618      	mov	r0, r3
 8013770:	f7f4 ffbc 	bl	80086ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7ff ffbd 	bl	80136f4 <ip_frag_free_pbuf_custom_ref>
}
 801377a:	bf00      	nop
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	08017b24 	.word	0x08017b24
 8013788:	08017ce8 	.word	0x08017ce8
 801378c:	08017b6c 	.word	0x08017b6c
 8013790:	08017cf4 	.word	0x08017cf4

08013794 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b094      	sub	sp, #80	@ 0x50
 8013798:	af02      	add	r7, sp, #8
 801379a:	60f8      	str	r0, [r7, #12]
 801379c:	60b9      	str	r1, [r7, #8]
 801379e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80137a0:	2300      	movs	r3, #0
 80137a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137aa:	3b14      	subs	r3, #20
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	da00      	bge.n	80137b2 <ip4_frag+0x1e>
 80137b0:	3307      	adds	r3, #7
 80137b2:	10db      	asrs	r3, r3, #3
 80137b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80137b6:	2314      	movs	r3, #20
 80137b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80137c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80137c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	f003 030f 	and.w	r3, r3, #15
 80137cc:	b2db      	uxtb	r3, r3
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	2b14      	cmp	r3, #20
 80137d4:	d002      	beq.n	80137dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80137d6:	f06f 0305 	mvn.w	r3, #5
 80137da:	e110      	b.n	80139fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	895b      	ldrh	r3, [r3, #10]
 80137e0:	2b13      	cmp	r3, #19
 80137e2:	d809      	bhi.n	80137f8 <ip4_frag+0x64>
 80137e4:	4b88      	ldr	r3, [pc, #544]	@ (8013a08 <ip4_frag+0x274>)
 80137e6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80137ea:	4988      	ldr	r1, [pc, #544]	@ (8013a0c <ip4_frag+0x278>)
 80137ec:	4888      	ldr	r0, [pc, #544]	@ (8013a10 <ip4_frag+0x27c>)
 80137ee:	f000 faed 	bl	8013dcc <iprintf>
 80137f2:	f06f 0305 	mvn.w	r3, #5
 80137f6:	e102      	b.n	80139fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80137f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137fa:	88db      	ldrh	r3, [r3, #6]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	4618      	mov	r0, r3
 8013800:	f7f3 fba4 	bl	8006f4c <lwip_htons>
 8013804:	4603      	mov	r3, r0
 8013806:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013808:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801380a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801380e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013812:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013818:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	891b      	ldrh	r3, [r3, #8]
 801381e:	3b14      	subs	r3, #20
 8013820:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013824:	e0e1      	b.n	80139ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013826:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013828:	00db      	lsls	r3, r3, #3
 801382a:	b29b      	uxth	r3, r3
 801382c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013830:	4293      	cmp	r3, r2
 8013832:	bf28      	it	cs
 8013834:	4613      	movcs	r3, r2
 8013836:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013838:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801383c:	2114      	movs	r1, #20
 801383e:	200e      	movs	r0, #14
 8013840:	f7f4 fc70 	bl	8008124 <pbuf_alloc>
 8013844:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 80d5 	beq.w	80139f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013850:	895b      	ldrh	r3, [r3, #10]
 8013852:	2b13      	cmp	r3, #19
 8013854:	d806      	bhi.n	8013864 <ip4_frag+0xd0>
 8013856:	4b6c      	ldr	r3, [pc, #432]	@ (8013a08 <ip4_frag+0x274>)
 8013858:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801385c:	496d      	ldr	r1, [pc, #436]	@ (8013a14 <ip4_frag+0x280>)
 801385e:	486c      	ldr	r0, [pc, #432]	@ (8013a10 <ip4_frag+0x27c>)
 8013860:	f000 fab4 	bl	8013dcc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	2214      	movs	r2, #20
 801386a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801386c:	4618      	mov	r0, r3
 801386e:	f000 fbae 	bl	8013fce <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013878:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801387a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801387e:	e064      	b.n	801394a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	895a      	ldrh	r2, [r3, #10]
 8013884:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013886:	1ad3      	subs	r3, r2, r3
 8013888:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	895b      	ldrh	r3, [r3, #10]
 801388e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013890:	429a      	cmp	r2, r3
 8013892:	d906      	bls.n	80138a2 <ip4_frag+0x10e>
 8013894:	4b5c      	ldr	r3, [pc, #368]	@ (8013a08 <ip4_frag+0x274>)
 8013896:	f240 322d 	movw	r2, #813	@ 0x32d
 801389a:	495f      	ldr	r1, [pc, #380]	@ (8013a18 <ip4_frag+0x284>)
 801389c:	485c      	ldr	r0, [pc, #368]	@ (8013a10 <ip4_frag+0x27c>)
 801389e:	f000 fa95 	bl	8013dcc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80138a2:	8bfa      	ldrh	r2, [r7, #30]
 80138a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80138a8:	4293      	cmp	r3, r2
 80138aa:	bf28      	it	cs
 80138ac:	4613      	movcs	r3, r2
 80138ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80138b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d105      	bne.n	80138c6 <ip4_frag+0x132>
        poff = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
        continue;
 80138c4:	e041      	b.n	801394a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80138c6:	f7ff ff0d 	bl	80136e4 <ip_frag_alloc_pbuf_custom_ref>
 80138ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80138d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80138d4:	f7f4 ff0a 	bl	80086ec <pbuf_free>
        goto memerr;
 80138d8:	e08f      	b.n	80139fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80138da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80138e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80138e2:	4413      	add	r3, r2
 80138e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80138e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80138ec:	9201      	str	r2, [sp, #4]
 80138ee:	9300      	str	r3, [sp, #0]
 80138f0:	4603      	mov	r3, r0
 80138f2:	2241      	movs	r2, #65	@ 0x41
 80138f4:	2000      	movs	r0, #0
 80138f6:	f7f4 fd3f 	bl	8008378 <pbuf_alloced_custom>
 80138fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d106      	bne.n	8013910 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013902:	69b8      	ldr	r0, [r7, #24]
 8013904:	f7ff fef6 	bl	80136f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801390a:	f7f4 feef 	bl	80086ec <pbuf_free>
        goto memerr;
 801390e:	e074      	b.n	80139fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f7f4 ff8b 	bl	800882c <pbuf_ref>
      pcr->original = p;
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	4a3f      	ldr	r2, [pc, #252]	@ (8013a1c <ip4_frag+0x288>)
 8013920:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013922:	6979      	ldr	r1, [r7, #20]
 8013924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013926:	f7f4 ffa3 	bl	8008870 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801392a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801392e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013938:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801393c:	2b00      	cmp	r3, #0
 801393e:	d004      	beq.n	801394a <ip4_frag+0x1b6>
        poff = 0;
 8013940:	2300      	movs	r3, #0
 8013942:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801394a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801394e:	2b00      	cmp	r3, #0
 8013950:	d196      	bne.n	8013880 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013952:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013958:	4413      	add	r3, r2
 801395a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013960:	f1a3 0213 	sub.w	r2, r3, #19
 8013964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013968:	429a      	cmp	r2, r3
 801396a:	bfcc      	ite	gt
 801396c:	2301      	movgt	r3, #1
 801396e:	2300      	movle	r3, #0
 8013970:	b2db      	uxtb	r3, r3
 8013972:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013974:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801397c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d002      	beq.n	801398a <ip4_frag+0x1f6>
 8013984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013986:	2b00      	cmp	r3, #0
 8013988:	d003      	beq.n	8013992 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801398a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801398c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013990:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013992:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013994:	4618      	mov	r0, r3
 8013996:	f7f3 fad9 	bl	8006f4c <lwip_htons>
 801399a:	4603      	mov	r3, r0
 801399c:	461a      	mov	r2, r3
 801399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80139a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80139a4:	3314      	adds	r3, #20
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7f3 facf 	bl	8006f4c <lwip_htons>
 80139ae:	4603      	mov	r3, r0
 80139b0:	461a      	mov	r2, r3
 80139b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80139b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b8:	2200      	movs	r2, #0
 80139ba:	729a      	strb	r2, [r3, #10]
 80139bc:	2200      	movs	r2, #0
 80139be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	695b      	ldr	r3, [r3, #20]
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80139c8:	68b8      	ldr	r0, [r7, #8]
 80139ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80139cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80139ce:	f7f4 fe8d 	bl	80086ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 80139d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80139d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80139d8:	1ad3      	subs	r3, r2, r3
 80139da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80139de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80139e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80139e4:	4413      	add	r3, r2
 80139e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80139ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f47f af19 	bne.w	8013826 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	e002      	b.n	80139fe <ip4_frag+0x26a>
      goto memerr;
 80139f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80139fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3748      	adds	r7, #72	@ 0x48
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	08017b24 	.word	0x08017b24
 8013a0c:	08017d00 	.word	0x08017d00
 8013a10:	08017b6c 	.word	0x08017b6c
 8013a14:	08017d1c 	.word	0x08017d1c
 8013a18:	08017d3c 	.word	0x08017d3c
 8013a1c:	0801372d 	.word	0x0801372d

08013a20 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b086      	sub	sp, #24
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013a2a:	230e      	movs	r3, #14
 8013a2c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	895b      	ldrh	r3, [r3, #10]
 8013a32:	2b0e      	cmp	r3, #14
 8013a34:	d96e      	bls.n	8013b14 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	7bdb      	ldrb	r3, [r3, #15]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d106      	bne.n	8013a4c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013a44:	3301      	adds	r3, #1
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	7b1a      	ldrb	r2, [r3, #12]
 8013a56:	7b5b      	ldrb	r3, [r3, #13]
 8013a58:	021b      	lsls	r3, r3, #8
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	f003 0301 	and.w	r3, r3, #1
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d023      	beq.n	8013ab2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d10f      	bne.n	8013a92 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	785b      	ldrb	r3, [r3, #1]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d11b      	bne.n	8013ab2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013a7e:	2b5e      	cmp	r3, #94	@ 0x5e
 8013a80:	d117      	bne.n	8013ab2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	7b5b      	ldrb	r3, [r3, #13]
 8013a86:	f043 0310 	orr.w	r3, r3, #16
 8013a8a:	b2da      	uxtb	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	735a      	strb	r2, [r3, #13]
 8013a90:	e00f      	b.n	8013ab2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	2206      	movs	r2, #6
 8013a96:	4928      	ldr	r1, [pc, #160]	@ (8013b38 <ethernet_input+0x118>)
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 f9ec 	bl	8013e76 <memcmp>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d106      	bne.n	8013ab2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	7b5b      	ldrb	r3, [r3, #13]
 8013aa8:	f043 0308 	orr.w	r3, r3, #8
 8013aac:	b2da      	uxtb	r2, r3
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013ab2:	89fb      	ldrh	r3, [r7, #14]
 8013ab4:	2b08      	cmp	r3, #8
 8013ab6:	d003      	beq.n	8013ac0 <ethernet_input+0xa0>
 8013ab8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013abc:	d014      	beq.n	8013ae8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013abe:	e032      	b.n	8013b26 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013ac6:	f003 0308 	and.w	r3, r3, #8
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d024      	beq.n	8013b18 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ace:	8afb      	ldrh	r3, [r7, #22]
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7f4 fd84 	bl	80085e0 <pbuf_remove_header>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d11e      	bne.n	8013b1c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ade:	6839      	ldr	r1, [r7, #0]
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7fe ff03 	bl	80128ec <ip4_input>
      break;
 8013ae6:	e013      	b.n	8013b10 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013aee:	f003 0308 	and.w	r3, r3, #8
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d014      	beq.n	8013b20 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013af6:	8afb      	ldrh	r3, [r7, #22]
 8013af8:	4619      	mov	r1, r3
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7f4 fd70 	bl	80085e0 <pbuf_remove_header>
 8013b00:	4603      	mov	r3, r0
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d10e      	bne.n	8013b24 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013b06:	6839      	ldr	r1, [r7, #0]
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7fe f89f 	bl	8011c4c <etharp_input>
      break;
 8013b0e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013b10:	2300      	movs	r3, #0
 8013b12:	e00c      	b.n	8013b2e <ethernet_input+0x10e>
    goto free_and_return;
 8013b14:	bf00      	nop
 8013b16:	e006      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b18:	bf00      	nop
 8013b1a:	e004      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b1c:	bf00      	nop
 8013b1e:	e002      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b20:	bf00      	nop
 8013b22:	e000      	b.n	8013b26 <ethernet_input+0x106>
        goto free_and_return;
 8013b24:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7f4 fde0 	bl	80086ec <pbuf_free>
  return ERR_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3718      	adds	r7, #24
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	0801820c 	.word	0x0801820c

08013b3c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	607a      	str	r2, [r7, #4]
 8013b48:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013b4a:	8c3b      	ldrh	r3, [r7, #32]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f7f3 f9fd 	bl	8006f4c <lwip_htons>
 8013b52:	4603      	mov	r3, r0
 8013b54:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013b56:	210e      	movs	r1, #14
 8013b58:	68b8      	ldr	r0, [r7, #8]
 8013b5a:	f7f4 fd31 	bl	80085c0 <pbuf_add_header>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d125      	bne.n	8013bb0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	8afa      	ldrh	r2, [r7, #22]
 8013b6e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	2206      	movs	r2, #6
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	4618      	mov	r0, r3
 8013b78:	f000 fa29 	bl	8013fce <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	3306      	adds	r3, #6
 8013b80:	2206      	movs	r2, #6
 8013b82:	6879      	ldr	r1, [r7, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 fa22 	bl	8013fce <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b90:	2b06      	cmp	r3, #6
 8013b92:	d006      	beq.n	8013ba2 <ethernet_output+0x66>
 8013b94:	4b0a      	ldr	r3, [pc, #40]	@ (8013bc0 <ethernet_output+0x84>)
 8013b96:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013b9a:	490a      	ldr	r1, [pc, #40]	@ (8013bc4 <ethernet_output+0x88>)
 8013b9c:	480a      	ldr	r0, [pc, #40]	@ (8013bc8 <ethernet_output+0x8c>)
 8013b9e:	f000 f915 	bl	8013dcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	699b      	ldr	r3, [r3, #24]
 8013ba6:	68b9      	ldr	r1, [r7, #8]
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	4798      	blx	r3
 8013bac:	4603      	mov	r3, r0
 8013bae:	e002      	b.n	8013bb6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013bb0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013bb2:	f06f 0301 	mvn.w	r3, #1
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3718      	adds	r7, #24
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08017d4c 	.word	0x08017d4c
 8013bc4:	08017d84 	.word	0x08017d84
 8013bc8:	08017db8 	.word	0x08017db8

08013bcc <rand>:
 8013bcc:	4b16      	ldr	r3, [pc, #88]	@ (8013c28 <rand+0x5c>)
 8013bce:	b510      	push	{r4, lr}
 8013bd0:	681c      	ldr	r4, [r3, #0]
 8013bd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013bd4:	b9b3      	cbnz	r3, 8013c04 <rand+0x38>
 8013bd6:	2018      	movs	r0, #24
 8013bd8:	f000 fa70 	bl	80140bc <malloc>
 8013bdc:	4602      	mov	r2, r0
 8013bde:	6320      	str	r0, [r4, #48]	@ 0x30
 8013be0:	b920      	cbnz	r0, 8013bec <rand+0x20>
 8013be2:	4b12      	ldr	r3, [pc, #72]	@ (8013c2c <rand+0x60>)
 8013be4:	4812      	ldr	r0, [pc, #72]	@ (8013c30 <rand+0x64>)
 8013be6:	2152      	movs	r1, #82	@ 0x52
 8013be8:	f000 fa00 	bl	8013fec <__assert_func>
 8013bec:	4911      	ldr	r1, [pc, #68]	@ (8013c34 <rand+0x68>)
 8013bee:	4b12      	ldr	r3, [pc, #72]	@ (8013c38 <rand+0x6c>)
 8013bf0:	e9c0 1300 	strd	r1, r3, [r0]
 8013bf4:	4b11      	ldr	r3, [pc, #68]	@ (8013c3c <rand+0x70>)
 8013bf6:	6083      	str	r3, [r0, #8]
 8013bf8:	230b      	movs	r3, #11
 8013bfa:	8183      	strh	r3, [r0, #12]
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	2001      	movs	r0, #1
 8013c00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013c04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013c06:	480e      	ldr	r0, [pc, #56]	@ (8013c40 <rand+0x74>)
 8013c08:	690b      	ldr	r3, [r1, #16]
 8013c0a:	694c      	ldr	r4, [r1, #20]
 8013c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8013c44 <rand+0x78>)
 8013c0e:	4358      	muls	r0, r3
 8013c10:	fb02 0004 	mla	r0, r2, r4, r0
 8013c14:	fba3 3202 	umull	r3, r2, r3, r2
 8013c18:	3301      	adds	r3, #1
 8013c1a:	eb40 0002 	adc.w	r0, r0, r2
 8013c1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013c22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013c26:	bd10      	pop	{r4, pc}
 8013c28:	20000044 	.word	0x20000044
 8013c2c:	0801821a 	.word	0x0801821a
 8013c30:	08018231 	.word	0x08018231
 8013c34:	abcd330e 	.word	0xabcd330e
 8013c38:	e66d1234 	.word	0xe66d1234
 8013c3c:	0005deec 	.word	0x0005deec
 8013c40:	5851f42d 	.word	0x5851f42d
 8013c44:	4c957f2d 	.word	0x4c957f2d

08013c48 <std>:
 8013c48:	2300      	movs	r3, #0
 8013c4a:	b510      	push	{r4, lr}
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8013c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c56:	6083      	str	r3, [r0, #8]
 8013c58:	8181      	strh	r1, [r0, #12]
 8013c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8013c5c:	81c2      	strh	r2, [r0, #14]
 8013c5e:	6183      	str	r3, [r0, #24]
 8013c60:	4619      	mov	r1, r3
 8013c62:	2208      	movs	r2, #8
 8013c64:	305c      	adds	r0, #92	@ 0x5c
 8013c66:	f000 f916 	bl	8013e96 <memset>
 8013c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca0 <std+0x58>)
 8013c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca4 <std+0x5c>)
 8013c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013c72:	4b0d      	ldr	r3, [pc, #52]	@ (8013ca8 <std+0x60>)
 8013c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013c76:	4b0d      	ldr	r3, [pc, #52]	@ (8013cac <std+0x64>)
 8013c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8013c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8013cb0 <std+0x68>)
 8013c7c:	6224      	str	r4, [r4, #32]
 8013c7e:	429c      	cmp	r4, r3
 8013c80:	d006      	beq.n	8013c90 <std+0x48>
 8013c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013c86:	4294      	cmp	r4, r2
 8013c88:	d002      	beq.n	8013c90 <std+0x48>
 8013c8a:	33d0      	adds	r3, #208	@ 0xd0
 8013c8c:	429c      	cmp	r4, r3
 8013c8e:	d105      	bne.n	8013c9c <std+0x54>
 8013c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c98:	f000 b98e 	b.w	8013fb8 <__retarget_lock_init_recursive>
 8013c9c:	bd10      	pop	{r4, pc}
 8013c9e:	bf00      	nop
 8013ca0:	08013df1 	.word	0x08013df1
 8013ca4:	08013e13 	.word	0x08013e13
 8013ca8:	08013e4b 	.word	0x08013e4b
 8013cac:	08013e6f 	.word	0x08013e6f
 8013cb0:	2000876c 	.word	0x2000876c

08013cb4 <stdio_exit_handler>:
 8013cb4:	4a02      	ldr	r2, [pc, #8]	@ (8013cc0 <stdio_exit_handler+0xc>)
 8013cb6:	4903      	ldr	r1, [pc, #12]	@ (8013cc4 <stdio_exit_handler+0x10>)
 8013cb8:	4803      	ldr	r0, [pc, #12]	@ (8013cc8 <stdio_exit_handler+0x14>)
 8013cba:	f000 b869 	b.w	8013d90 <_fwalk_sglue>
 8013cbe:	bf00      	nop
 8013cc0:	20000038 	.word	0x20000038
 8013cc4:	080148cd 	.word	0x080148cd
 8013cc8:	20000048 	.word	0x20000048

08013ccc <cleanup_stdio>:
 8013ccc:	6841      	ldr	r1, [r0, #4]
 8013cce:	4b0c      	ldr	r3, [pc, #48]	@ (8013d00 <cleanup_stdio+0x34>)
 8013cd0:	4299      	cmp	r1, r3
 8013cd2:	b510      	push	{r4, lr}
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	d001      	beq.n	8013cdc <cleanup_stdio+0x10>
 8013cd8:	f000 fdf8 	bl	80148cc <_fflush_r>
 8013cdc:	68a1      	ldr	r1, [r4, #8]
 8013cde:	4b09      	ldr	r3, [pc, #36]	@ (8013d04 <cleanup_stdio+0x38>)
 8013ce0:	4299      	cmp	r1, r3
 8013ce2:	d002      	beq.n	8013cea <cleanup_stdio+0x1e>
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	f000 fdf1 	bl	80148cc <_fflush_r>
 8013cea:	68e1      	ldr	r1, [r4, #12]
 8013cec:	4b06      	ldr	r3, [pc, #24]	@ (8013d08 <cleanup_stdio+0x3c>)
 8013cee:	4299      	cmp	r1, r3
 8013cf0:	d004      	beq.n	8013cfc <cleanup_stdio+0x30>
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cf8:	f000 bde8 	b.w	80148cc <_fflush_r>
 8013cfc:	bd10      	pop	{r4, pc}
 8013cfe:	bf00      	nop
 8013d00:	2000876c 	.word	0x2000876c
 8013d04:	200087d4 	.word	0x200087d4
 8013d08:	2000883c 	.word	0x2000883c

08013d0c <global_stdio_init.part.0>:
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8013d3c <global_stdio_init.part.0+0x30>)
 8013d10:	4c0b      	ldr	r4, [pc, #44]	@ (8013d40 <global_stdio_init.part.0+0x34>)
 8013d12:	4a0c      	ldr	r2, [pc, #48]	@ (8013d44 <global_stdio_init.part.0+0x38>)
 8013d14:	601a      	str	r2, [r3, #0]
 8013d16:	4620      	mov	r0, r4
 8013d18:	2200      	movs	r2, #0
 8013d1a:	2104      	movs	r1, #4
 8013d1c:	f7ff ff94 	bl	8013c48 <std>
 8013d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d24:	2201      	movs	r2, #1
 8013d26:	2109      	movs	r1, #9
 8013d28:	f7ff ff8e 	bl	8013c48 <std>
 8013d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d30:	2202      	movs	r2, #2
 8013d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d36:	2112      	movs	r1, #18
 8013d38:	f7ff bf86 	b.w	8013c48 <std>
 8013d3c:	200088a4 	.word	0x200088a4
 8013d40:	2000876c 	.word	0x2000876c
 8013d44:	08013cb5 	.word	0x08013cb5

08013d48 <__sfp_lock_acquire>:
 8013d48:	4801      	ldr	r0, [pc, #4]	@ (8013d50 <__sfp_lock_acquire+0x8>)
 8013d4a:	f000 b936 	b.w	8013fba <__retarget_lock_acquire_recursive>
 8013d4e:	bf00      	nop
 8013d50:	200088ad 	.word	0x200088ad

08013d54 <__sfp_lock_release>:
 8013d54:	4801      	ldr	r0, [pc, #4]	@ (8013d5c <__sfp_lock_release+0x8>)
 8013d56:	f000 b931 	b.w	8013fbc <__retarget_lock_release_recursive>
 8013d5a:	bf00      	nop
 8013d5c:	200088ad 	.word	0x200088ad

08013d60 <__sinit>:
 8013d60:	b510      	push	{r4, lr}
 8013d62:	4604      	mov	r4, r0
 8013d64:	f7ff fff0 	bl	8013d48 <__sfp_lock_acquire>
 8013d68:	6a23      	ldr	r3, [r4, #32]
 8013d6a:	b11b      	cbz	r3, 8013d74 <__sinit+0x14>
 8013d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d70:	f7ff bff0 	b.w	8013d54 <__sfp_lock_release>
 8013d74:	4b04      	ldr	r3, [pc, #16]	@ (8013d88 <__sinit+0x28>)
 8013d76:	6223      	str	r3, [r4, #32]
 8013d78:	4b04      	ldr	r3, [pc, #16]	@ (8013d8c <__sinit+0x2c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d1f5      	bne.n	8013d6c <__sinit+0xc>
 8013d80:	f7ff ffc4 	bl	8013d0c <global_stdio_init.part.0>
 8013d84:	e7f2      	b.n	8013d6c <__sinit+0xc>
 8013d86:	bf00      	nop
 8013d88:	08013ccd 	.word	0x08013ccd
 8013d8c:	200088a4 	.word	0x200088a4

08013d90 <_fwalk_sglue>:
 8013d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d94:	4607      	mov	r7, r0
 8013d96:	4688      	mov	r8, r1
 8013d98:	4614      	mov	r4, r2
 8013d9a:	2600      	movs	r6, #0
 8013d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013da0:	f1b9 0901 	subs.w	r9, r9, #1
 8013da4:	d505      	bpl.n	8013db2 <_fwalk_sglue+0x22>
 8013da6:	6824      	ldr	r4, [r4, #0]
 8013da8:	2c00      	cmp	r4, #0
 8013daa:	d1f7      	bne.n	8013d9c <_fwalk_sglue+0xc>
 8013dac:	4630      	mov	r0, r6
 8013dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db2:	89ab      	ldrh	r3, [r5, #12]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d907      	bls.n	8013dc8 <_fwalk_sglue+0x38>
 8013db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	d003      	beq.n	8013dc8 <_fwalk_sglue+0x38>
 8013dc0:	4629      	mov	r1, r5
 8013dc2:	4638      	mov	r0, r7
 8013dc4:	47c0      	blx	r8
 8013dc6:	4306      	orrs	r6, r0
 8013dc8:	3568      	adds	r5, #104	@ 0x68
 8013dca:	e7e9      	b.n	8013da0 <_fwalk_sglue+0x10>

08013dcc <iprintf>:
 8013dcc:	b40f      	push	{r0, r1, r2, r3}
 8013dce:	b507      	push	{r0, r1, r2, lr}
 8013dd0:	4906      	ldr	r1, [pc, #24]	@ (8013dec <iprintf+0x20>)
 8013dd2:	ab04      	add	r3, sp, #16
 8013dd4:	6808      	ldr	r0, [r1, #0]
 8013dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dda:	6881      	ldr	r1, [r0, #8]
 8013ddc:	9301      	str	r3, [sp, #4]
 8013dde:	f000 fa4d 	bl	801427c <_vfiprintf_r>
 8013de2:	b003      	add	sp, #12
 8013de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013de8:	b004      	add	sp, #16
 8013dea:	4770      	bx	lr
 8013dec:	20000044 	.word	0x20000044

08013df0 <__sread>:
 8013df0:	b510      	push	{r4, lr}
 8013df2:	460c      	mov	r4, r1
 8013df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013df8:	f000 f896 	bl	8013f28 <_read_r>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	bfab      	itete	ge
 8013e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013e02:	89a3      	ldrhlt	r3, [r4, #12]
 8013e04:	181b      	addge	r3, r3, r0
 8013e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013e0a:	bfac      	ite	ge
 8013e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013e0e:	81a3      	strhlt	r3, [r4, #12]
 8013e10:	bd10      	pop	{r4, pc}

08013e12 <__swrite>:
 8013e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e16:	461f      	mov	r7, r3
 8013e18:	898b      	ldrh	r3, [r1, #12]
 8013e1a:	05db      	lsls	r3, r3, #23
 8013e1c:	4605      	mov	r5, r0
 8013e1e:	460c      	mov	r4, r1
 8013e20:	4616      	mov	r6, r2
 8013e22:	d505      	bpl.n	8013e30 <__swrite+0x1e>
 8013e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e28:	2302      	movs	r3, #2
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f000 f86a 	bl	8013f04 <_lseek_r>
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013e3a:	81a3      	strh	r3, [r4, #12]
 8013e3c:	4632      	mov	r2, r6
 8013e3e:	463b      	mov	r3, r7
 8013e40:	4628      	mov	r0, r5
 8013e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e46:	f000 b881 	b.w	8013f4c <_write_r>

08013e4a <__sseek>:
 8013e4a:	b510      	push	{r4, lr}
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e52:	f000 f857 	bl	8013f04 <_lseek_r>
 8013e56:	1c43      	adds	r3, r0, #1
 8013e58:	89a3      	ldrh	r3, [r4, #12]
 8013e5a:	bf15      	itete	ne
 8013e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013e66:	81a3      	strheq	r3, [r4, #12]
 8013e68:	bf18      	it	ne
 8013e6a:	81a3      	strhne	r3, [r4, #12]
 8013e6c:	bd10      	pop	{r4, pc}

08013e6e <__sclose>:
 8013e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e72:	f000 b837 	b.w	8013ee4 <_close_r>

08013e76 <memcmp>:
 8013e76:	b510      	push	{r4, lr}
 8013e78:	3901      	subs	r1, #1
 8013e7a:	4402      	add	r2, r0
 8013e7c:	4290      	cmp	r0, r2
 8013e7e:	d101      	bne.n	8013e84 <memcmp+0xe>
 8013e80:	2000      	movs	r0, #0
 8013e82:	e005      	b.n	8013e90 <memcmp+0x1a>
 8013e84:	7803      	ldrb	r3, [r0, #0]
 8013e86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013e8a:	42a3      	cmp	r3, r4
 8013e8c:	d001      	beq.n	8013e92 <memcmp+0x1c>
 8013e8e:	1b18      	subs	r0, r3, r4
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	3001      	adds	r0, #1
 8013e94:	e7f2      	b.n	8013e7c <memcmp+0x6>

08013e96 <memset>:
 8013e96:	4402      	add	r2, r0
 8013e98:	4603      	mov	r3, r0
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d100      	bne.n	8013ea0 <memset+0xa>
 8013e9e:	4770      	bx	lr
 8013ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8013ea4:	e7f9      	b.n	8013e9a <memset+0x4>

08013ea6 <strchr>:
 8013ea6:	b2c9      	uxtb	r1, r1
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eb0:	b112      	cbz	r2, 8013eb8 <strchr+0x12>
 8013eb2:	428a      	cmp	r2, r1
 8013eb4:	d1f9      	bne.n	8013eaa <strchr+0x4>
 8013eb6:	4770      	bx	lr
 8013eb8:	2900      	cmp	r1, #0
 8013eba:	bf18      	it	ne
 8013ebc:	2000      	movne	r0, #0
 8013ebe:	4770      	bx	lr

08013ec0 <strncmp>:
 8013ec0:	b510      	push	{r4, lr}
 8013ec2:	b16a      	cbz	r2, 8013ee0 <strncmp+0x20>
 8013ec4:	3901      	subs	r1, #1
 8013ec6:	1884      	adds	r4, r0, r2
 8013ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ecc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d103      	bne.n	8013edc <strncmp+0x1c>
 8013ed4:	42a0      	cmp	r0, r4
 8013ed6:	d001      	beq.n	8013edc <strncmp+0x1c>
 8013ed8:	2a00      	cmp	r2, #0
 8013eda:	d1f5      	bne.n	8013ec8 <strncmp+0x8>
 8013edc:	1ad0      	subs	r0, r2, r3
 8013ede:	bd10      	pop	{r4, pc}
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	e7fc      	b.n	8013ede <strncmp+0x1e>

08013ee4 <_close_r>:
 8013ee4:	b538      	push	{r3, r4, r5, lr}
 8013ee6:	4d06      	ldr	r5, [pc, #24]	@ (8013f00 <_close_r+0x1c>)
 8013ee8:	2300      	movs	r3, #0
 8013eea:	4604      	mov	r4, r0
 8013eec:	4608      	mov	r0, r1
 8013eee:	602b      	str	r3, [r5, #0]
 8013ef0:	f7ec ffee 	bl	8000ed0 <_close>
 8013ef4:	1c43      	adds	r3, r0, #1
 8013ef6:	d102      	bne.n	8013efe <_close_r+0x1a>
 8013ef8:	682b      	ldr	r3, [r5, #0]
 8013efa:	b103      	cbz	r3, 8013efe <_close_r+0x1a>
 8013efc:	6023      	str	r3, [r4, #0]
 8013efe:	bd38      	pop	{r3, r4, r5, pc}
 8013f00:	200088a8 	.word	0x200088a8

08013f04 <_lseek_r>:
 8013f04:	b538      	push	{r3, r4, r5, lr}
 8013f06:	4d07      	ldr	r5, [pc, #28]	@ (8013f24 <_lseek_r+0x20>)
 8013f08:	4604      	mov	r4, r0
 8013f0a:	4608      	mov	r0, r1
 8013f0c:	4611      	mov	r1, r2
 8013f0e:	2200      	movs	r2, #0
 8013f10:	602a      	str	r2, [r5, #0]
 8013f12:	461a      	mov	r2, r3
 8013f14:	f7ed f803 	bl	8000f1e <_lseek>
 8013f18:	1c43      	adds	r3, r0, #1
 8013f1a:	d102      	bne.n	8013f22 <_lseek_r+0x1e>
 8013f1c:	682b      	ldr	r3, [r5, #0]
 8013f1e:	b103      	cbz	r3, 8013f22 <_lseek_r+0x1e>
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	200088a8 	.word	0x200088a8

08013f28 <_read_r>:
 8013f28:	b538      	push	{r3, r4, r5, lr}
 8013f2a:	4d07      	ldr	r5, [pc, #28]	@ (8013f48 <_read_r+0x20>)
 8013f2c:	4604      	mov	r4, r0
 8013f2e:	4608      	mov	r0, r1
 8013f30:	4611      	mov	r1, r2
 8013f32:	2200      	movs	r2, #0
 8013f34:	602a      	str	r2, [r5, #0]
 8013f36:	461a      	mov	r2, r3
 8013f38:	f7ec ff91 	bl	8000e5e <_read>
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d102      	bne.n	8013f46 <_read_r+0x1e>
 8013f40:	682b      	ldr	r3, [r5, #0]
 8013f42:	b103      	cbz	r3, 8013f46 <_read_r+0x1e>
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	bd38      	pop	{r3, r4, r5, pc}
 8013f48:	200088a8 	.word	0x200088a8

08013f4c <_write_r>:
 8013f4c:	b538      	push	{r3, r4, r5, lr}
 8013f4e:	4d07      	ldr	r5, [pc, #28]	@ (8013f6c <_write_r+0x20>)
 8013f50:	4604      	mov	r4, r0
 8013f52:	4608      	mov	r0, r1
 8013f54:	4611      	mov	r1, r2
 8013f56:	2200      	movs	r2, #0
 8013f58:	602a      	str	r2, [r5, #0]
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	f7ec ff9c 	bl	8000e98 <_write>
 8013f60:	1c43      	adds	r3, r0, #1
 8013f62:	d102      	bne.n	8013f6a <_write_r+0x1e>
 8013f64:	682b      	ldr	r3, [r5, #0]
 8013f66:	b103      	cbz	r3, 8013f6a <_write_r+0x1e>
 8013f68:	6023      	str	r3, [r4, #0]
 8013f6a:	bd38      	pop	{r3, r4, r5, pc}
 8013f6c:	200088a8 	.word	0x200088a8

08013f70 <__libc_init_array>:
 8013f70:	b570      	push	{r4, r5, r6, lr}
 8013f72:	4d0d      	ldr	r5, [pc, #52]	@ (8013fa8 <__libc_init_array+0x38>)
 8013f74:	4c0d      	ldr	r4, [pc, #52]	@ (8013fac <__libc_init_array+0x3c>)
 8013f76:	1b64      	subs	r4, r4, r5
 8013f78:	10a4      	asrs	r4, r4, #2
 8013f7a:	2600      	movs	r6, #0
 8013f7c:	42a6      	cmp	r6, r4
 8013f7e:	d109      	bne.n	8013f94 <__libc_init_array+0x24>
 8013f80:	4d0b      	ldr	r5, [pc, #44]	@ (8013fb0 <__libc_init_array+0x40>)
 8013f82:	4c0c      	ldr	r4, [pc, #48]	@ (8013fb4 <__libc_init_array+0x44>)
 8013f84:	f000 fe50 	bl	8014c28 <_init>
 8013f88:	1b64      	subs	r4, r4, r5
 8013f8a:	10a4      	asrs	r4, r4, #2
 8013f8c:	2600      	movs	r6, #0
 8013f8e:	42a6      	cmp	r6, r4
 8013f90:	d105      	bne.n	8013f9e <__libc_init_array+0x2e>
 8013f92:	bd70      	pop	{r4, r5, r6, pc}
 8013f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f98:	4798      	blx	r3
 8013f9a:	3601      	adds	r6, #1
 8013f9c:	e7ee      	b.n	8013f7c <__libc_init_array+0xc>
 8013f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fa2:	4798      	blx	r3
 8013fa4:	3601      	adds	r6, #1
 8013fa6:	e7f2      	b.n	8013f8e <__libc_init_array+0x1e>
 8013fa8:	08018300 	.word	0x08018300
 8013fac:	08018300 	.word	0x08018300
 8013fb0:	08018300 	.word	0x08018300
 8013fb4:	08018304 	.word	0x08018304

08013fb8 <__retarget_lock_init_recursive>:
 8013fb8:	4770      	bx	lr

08013fba <__retarget_lock_acquire_recursive>:
 8013fba:	4770      	bx	lr

08013fbc <__retarget_lock_release_recursive>:
 8013fbc:	4770      	bx	lr

08013fbe <strcpy>:
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fc4:	f803 2b01 	strb.w	r2, [r3], #1
 8013fc8:	2a00      	cmp	r2, #0
 8013fca:	d1f9      	bne.n	8013fc0 <strcpy+0x2>
 8013fcc:	4770      	bx	lr

08013fce <memcpy>:
 8013fce:	440a      	add	r2, r1
 8013fd0:	4291      	cmp	r1, r2
 8013fd2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013fd6:	d100      	bne.n	8013fda <memcpy+0xc>
 8013fd8:	4770      	bx	lr
 8013fda:	b510      	push	{r4, lr}
 8013fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fe4:	4291      	cmp	r1, r2
 8013fe6:	d1f9      	bne.n	8013fdc <memcpy+0xe>
 8013fe8:	bd10      	pop	{r4, pc}
	...

08013fec <__assert_func>:
 8013fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fee:	4614      	mov	r4, r2
 8013ff0:	461a      	mov	r2, r3
 8013ff2:	4b09      	ldr	r3, [pc, #36]	@ (8014018 <__assert_func+0x2c>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	68d8      	ldr	r0, [r3, #12]
 8013ffa:	b14c      	cbz	r4, 8014010 <__assert_func+0x24>
 8013ffc:	4b07      	ldr	r3, [pc, #28]	@ (801401c <__assert_func+0x30>)
 8013ffe:	9100      	str	r1, [sp, #0]
 8014000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014004:	4906      	ldr	r1, [pc, #24]	@ (8014020 <__assert_func+0x34>)
 8014006:	462b      	mov	r3, r5
 8014008:	f000 fc88 	bl	801491c <fiprintf>
 801400c:	f000 fd3c 	bl	8014a88 <abort>
 8014010:	4b04      	ldr	r3, [pc, #16]	@ (8014024 <__assert_func+0x38>)
 8014012:	461c      	mov	r4, r3
 8014014:	e7f3      	b.n	8013ffe <__assert_func+0x12>
 8014016:	bf00      	nop
 8014018:	20000044 	.word	0x20000044
 801401c:	08018289 	.word	0x08018289
 8014020:	08018296 	.word	0x08018296
 8014024:	080182c4 	.word	0x080182c4

08014028 <_free_r>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	4605      	mov	r5, r0
 801402c:	2900      	cmp	r1, #0
 801402e:	d041      	beq.n	80140b4 <_free_r+0x8c>
 8014030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014034:	1f0c      	subs	r4, r1, #4
 8014036:	2b00      	cmp	r3, #0
 8014038:	bfb8      	it	lt
 801403a:	18e4      	addlt	r4, r4, r3
 801403c:	f000 f8e8 	bl	8014210 <__malloc_lock>
 8014040:	4a1d      	ldr	r2, [pc, #116]	@ (80140b8 <_free_r+0x90>)
 8014042:	6813      	ldr	r3, [r2, #0]
 8014044:	b933      	cbnz	r3, 8014054 <_free_r+0x2c>
 8014046:	6063      	str	r3, [r4, #4]
 8014048:	6014      	str	r4, [r2, #0]
 801404a:	4628      	mov	r0, r5
 801404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014050:	f000 b8e4 	b.w	801421c <__malloc_unlock>
 8014054:	42a3      	cmp	r3, r4
 8014056:	d908      	bls.n	801406a <_free_r+0x42>
 8014058:	6820      	ldr	r0, [r4, #0]
 801405a:	1821      	adds	r1, r4, r0
 801405c:	428b      	cmp	r3, r1
 801405e:	bf01      	itttt	eq
 8014060:	6819      	ldreq	r1, [r3, #0]
 8014062:	685b      	ldreq	r3, [r3, #4]
 8014064:	1809      	addeq	r1, r1, r0
 8014066:	6021      	streq	r1, [r4, #0]
 8014068:	e7ed      	b.n	8014046 <_free_r+0x1e>
 801406a:	461a      	mov	r2, r3
 801406c:	685b      	ldr	r3, [r3, #4]
 801406e:	b10b      	cbz	r3, 8014074 <_free_r+0x4c>
 8014070:	42a3      	cmp	r3, r4
 8014072:	d9fa      	bls.n	801406a <_free_r+0x42>
 8014074:	6811      	ldr	r1, [r2, #0]
 8014076:	1850      	adds	r0, r2, r1
 8014078:	42a0      	cmp	r0, r4
 801407a:	d10b      	bne.n	8014094 <_free_r+0x6c>
 801407c:	6820      	ldr	r0, [r4, #0]
 801407e:	4401      	add	r1, r0
 8014080:	1850      	adds	r0, r2, r1
 8014082:	4283      	cmp	r3, r0
 8014084:	6011      	str	r1, [r2, #0]
 8014086:	d1e0      	bne.n	801404a <_free_r+0x22>
 8014088:	6818      	ldr	r0, [r3, #0]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	6053      	str	r3, [r2, #4]
 801408e:	4408      	add	r0, r1
 8014090:	6010      	str	r0, [r2, #0]
 8014092:	e7da      	b.n	801404a <_free_r+0x22>
 8014094:	d902      	bls.n	801409c <_free_r+0x74>
 8014096:	230c      	movs	r3, #12
 8014098:	602b      	str	r3, [r5, #0]
 801409a:	e7d6      	b.n	801404a <_free_r+0x22>
 801409c:	6820      	ldr	r0, [r4, #0]
 801409e:	1821      	adds	r1, r4, r0
 80140a0:	428b      	cmp	r3, r1
 80140a2:	bf04      	itt	eq
 80140a4:	6819      	ldreq	r1, [r3, #0]
 80140a6:	685b      	ldreq	r3, [r3, #4]
 80140a8:	6063      	str	r3, [r4, #4]
 80140aa:	bf04      	itt	eq
 80140ac:	1809      	addeq	r1, r1, r0
 80140ae:	6021      	streq	r1, [r4, #0]
 80140b0:	6054      	str	r4, [r2, #4]
 80140b2:	e7ca      	b.n	801404a <_free_r+0x22>
 80140b4:	bd38      	pop	{r3, r4, r5, pc}
 80140b6:	bf00      	nop
 80140b8:	200088b4 	.word	0x200088b4

080140bc <malloc>:
 80140bc:	4b02      	ldr	r3, [pc, #8]	@ (80140c8 <malloc+0xc>)
 80140be:	4601      	mov	r1, r0
 80140c0:	6818      	ldr	r0, [r3, #0]
 80140c2:	f000 b825 	b.w	8014110 <_malloc_r>
 80140c6:	bf00      	nop
 80140c8:	20000044 	.word	0x20000044

080140cc <sbrk_aligned>:
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	4e0f      	ldr	r6, [pc, #60]	@ (801410c <sbrk_aligned+0x40>)
 80140d0:	460c      	mov	r4, r1
 80140d2:	6831      	ldr	r1, [r6, #0]
 80140d4:	4605      	mov	r5, r0
 80140d6:	b911      	cbnz	r1, 80140de <sbrk_aligned+0x12>
 80140d8:	f000 fcc6 	bl	8014a68 <_sbrk_r>
 80140dc:	6030      	str	r0, [r6, #0]
 80140de:	4621      	mov	r1, r4
 80140e0:	4628      	mov	r0, r5
 80140e2:	f000 fcc1 	bl	8014a68 <_sbrk_r>
 80140e6:	1c43      	adds	r3, r0, #1
 80140e8:	d103      	bne.n	80140f2 <sbrk_aligned+0x26>
 80140ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80140ee:	4620      	mov	r0, r4
 80140f0:	bd70      	pop	{r4, r5, r6, pc}
 80140f2:	1cc4      	adds	r4, r0, #3
 80140f4:	f024 0403 	bic.w	r4, r4, #3
 80140f8:	42a0      	cmp	r0, r4
 80140fa:	d0f8      	beq.n	80140ee <sbrk_aligned+0x22>
 80140fc:	1a21      	subs	r1, r4, r0
 80140fe:	4628      	mov	r0, r5
 8014100:	f000 fcb2 	bl	8014a68 <_sbrk_r>
 8014104:	3001      	adds	r0, #1
 8014106:	d1f2      	bne.n	80140ee <sbrk_aligned+0x22>
 8014108:	e7ef      	b.n	80140ea <sbrk_aligned+0x1e>
 801410a:	bf00      	nop
 801410c:	200088b0 	.word	0x200088b0

08014110 <_malloc_r>:
 8014110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014114:	1ccd      	adds	r5, r1, #3
 8014116:	f025 0503 	bic.w	r5, r5, #3
 801411a:	3508      	adds	r5, #8
 801411c:	2d0c      	cmp	r5, #12
 801411e:	bf38      	it	cc
 8014120:	250c      	movcc	r5, #12
 8014122:	2d00      	cmp	r5, #0
 8014124:	4606      	mov	r6, r0
 8014126:	db01      	blt.n	801412c <_malloc_r+0x1c>
 8014128:	42a9      	cmp	r1, r5
 801412a:	d904      	bls.n	8014136 <_malloc_r+0x26>
 801412c:	230c      	movs	r3, #12
 801412e:	6033      	str	r3, [r6, #0]
 8014130:	2000      	movs	r0, #0
 8014132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014136:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801420c <_malloc_r+0xfc>
 801413a:	f000 f869 	bl	8014210 <__malloc_lock>
 801413e:	f8d8 3000 	ldr.w	r3, [r8]
 8014142:	461c      	mov	r4, r3
 8014144:	bb44      	cbnz	r4, 8014198 <_malloc_r+0x88>
 8014146:	4629      	mov	r1, r5
 8014148:	4630      	mov	r0, r6
 801414a:	f7ff ffbf 	bl	80140cc <sbrk_aligned>
 801414e:	1c43      	adds	r3, r0, #1
 8014150:	4604      	mov	r4, r0
 8014152:	d158      	bne.n	8014206 <_malloc_r+0xf6>
 8014154:	f8d8 4000 	ldr.w	r4, [r8]
 8014158:	4627      	mov	r7, r4
 801415a:	2f00      	cmp	r7, #0
 801415c:	d143      	bne.n	80141e6 <_malloc_r+0xd6>
 801415e:	2c00      	cmp	r4, #0
 8014160:	d04b      	beq.n	80141fa <_malloc_r+0xea>
 8014162:	6823      	ldr	r3, [r4, #0]
 8014164:	4639      	mov	r1, r7
 8014166:	4630      	mov	r0, r6
 8014168:	eb04 0903 	add.w	r9, r4, r3
 801416c:	f000 fc7c 	bl	8014a68 <_sbrk_r>
 8014170:	4581      	cmp	r9, r0
 8014172:	d142      	bne.n	80141fa <_malloc_r+0xea>
 8014174:	6821      	ldr	r1, [r4, #0]
 8014176:	1a6d      	subs	r5, r5, r1
 8014178:	4629      	mov	r1, r5
 801417a:	4630      	mov	r0, r6
 801417c:	f7ff ffa6 	bl	80140cc <sbrk_aligned>
 8014180:	3001      	adds	r0, #1
 8014182:	d03a      	beq.n	80141fa <_malloc_r+0xea>
 8014184:	6823      	ldr	r3, [r4, #0]
 8014186:	442b      	add	r3, r5
 8014188:	6023      	str	r3, [r4, #0]
 801418a:	f8d8 3000 	ldr.w	r3, [r8]
 801418e:	685a      	ldr	r2, [r3, #4]
 8014190:	bb62      	cbnz	r2, 80141ec <_malloc_r+0xdc>
 8014192:	f8c8 7000 	str.w	r7, [r8]
 8014196:	e00f      	b.n	80141b8 <_malloc_r+0xa8>
 8014198:	6822      	ldr	r2, [r4, #0]
 801419a:	1b52      	subs	r2, r2, r5
 801419c:	d420      	bmi.n	80141e0 <_malloc_r+0xd0>
 801419e:	2a0b      	cmp	r2, #11
 80141a0:	d917      	bls.n	80141d2 <_malloc_r+0xc2>
 80141a2:	1961      	adds	r1, r4, r5
 80141a4:	42a3      	cmp	r3, r4
 80141a6:	6025      	str	r5, [r4, #0]
 80141a8:	bf18      	it	ne
 80141aa:	6059      	strne	r1, [r3, #4]
 80141ac:	6863      	ldr	r3, [r4, #4]
 80141ae:	bf08      	it	eq
 80141b0:	f8c8 1000 	streq.w	r1, [r8]
 80141b4:	5162      	str	r2, [r4, r5]
 80141b6:	604b      	str	r3, [r1, #4]
 80141b8:	4630      	mov	r0, r6
 80141ba:	f000 f82f 	bl	801421c <__malloc_unlock>
 80141be:	f104 000b 	add.w	r0, r4, #11
 80141c2:	1d23      	adds	r3, r4, #4
 80141c4:	f020 0007 	bic.w	r0, r0, #7
 80141c8:	1ac2      	subs	r2, r0, r3
 80141ca:	bf1c      	itt	ne
 80141cc:	1a1b      	subne	r3, r3, r0
 80141ce:	50a3      	strne	r3, [r4, r2]
 80141d0:	e7af      	b.n	8014132 <_malloc_r+0x22>
 80141d2:	6862      	ldr	r2, [r4, #4]
 80141d4:	42a3      	cmp	r3, r4
 80141d6:	bf0c      	ite	eq
 80141d8:	f8c8 2000 	streq.w	r2, [r8]
 80141dc:	605a      	strne	r2, [r3, #4]
 80141de:	e7eb      	b.n	80141b8 <_malloc_r+0xa8>
 80141e0:	4623      	mov	r3, r4
 80141e2:	6864      	ldr	r4, [r4, #4]
 80141e4:	e7ae      	b.n	8014144 <_malloc_r+0x34>
 80141e6:	463c      	mov	r4, r7
 80141e8:	687f      	ldr	r7, [r7, #4]
 80141ea:	e7b6      	b.n	801415a <_malloc_r+0x4a>
 80141ec:	461a      	mov	r2, r3
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	42a3      	cmp	r3, r4
 80141f2:	d1fb      	bne.n	80141ec <_malloc_r+0xdc>
 80141f4:	2300      	movs	r3, #0
 80141f6:	6053      	str	r3, [r2, #4]
 80141f8:	e7de      	b.n	80141b8 <_malloc_r+0xa8>
 80141fa:	230c      	movs	r3, #12
 80141fc:	6033      	str	r3, [r6, #0]
 80141fe:	4630      	mov	r0, r6
 8014200:	f000 f80c 	bl	801421c <__malloc_unlock>
 8014204:	e794      	b.n	8014130 <_malloc_r+0x20>
 8014206:	6005      	str	r5, [r0, #0]
 8014208:	e7d6      	b.n	80141b8 <_malloc_r+0xa8>
 801420a:	bf00      	nop
 801420c:	200088b4 	.word	0x200088b4

08014210 <__malloc_lock>:
 8014210:	4801      	ldr	r0, [pc, #4]	@ (8014218 <__malloc_lock+0x8>)
 8014212:	f7ff bed2 	b.w	8013fba <__retarget_lock_acquire_recursive>
 8014216:	bf00      	nop
 8014218:	200088ac 	.word	0x200088ac

0801421c <__malloc_unlock>:
 801421c:	4801      	ldr	r0, [pc, #4]	@ (8014224 <__malloc_unlock+0x8>)
 801421e:	f7ff becd 	b.w	8013fbc <__retarget_lock_release_recursive>
 8014222:	bf00      	nop
 8014224:	200088ac 	.word	0x200088ac

08014228 <__sfputc_r>:
 8014228:	6893      	ldr	r3, [r2, #8]
 801422a:	3b01      	subs	r3, #1
 801422c:	2b00      	cmp	r3, #0
 801422e:	b410      	push	{r4}
 8014230:	6093      	str	r3, [r2, #8]
 8014232:	da08      	bge.n	8014246 <__sfputc_r+0x1e>
 8014234:	6994      	ldr	r4, [r2, #24]
 8014236:	42a3      	cmp	r3, r4
 8014238:	db01      	blt.n	801423e <__sfputc_r+0x16>
 801423a:	290a      	cmp	r1, #10
 801423c:	d103      	bne.n	8014246 <__sfputc_r+0x1e>
 801423e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014242:	f000 bb7d 	b.w	8014940 <__swbuf_r>
 8014246:	6813      	ldr	r3, [r2, #0]
 8014248:	1c58      	adds	r0, r3, #1
 801424a:	6010      	str	r0, [r2, #0]
 801424c:	7019      	strb	r1, [r3, #0]
 801424e:	4608      	mov	r0, r1
 8014250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014254:	4770      	bx	lr

08014256 <__sfputs_r>:
 8014256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014258:	4606      	mov	r6, r0
 801425a:	460f      	mov	r7, r1
 801425c:	4614      	mov	r4, r2
 801425e:	18d5      	adds	r5, r2, r3
 8014260:	42ac      	cmp	r4, r5
 8014262:	d101      	bne.n	8014268 <__sfputs_r+0x12>
 8014264:	2000      	movs	r0, #0
 8014266:	e007      	b.n	8014278 <__sfputs_r+0x22>
 8014268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801426c:	463a      	mov	r2, r7
 801426e:	4630      	mov	r0, r6
 8014270:	f7ff ffda 	bl	8014228 <__sfputc_r>
 8014274:	1c43      	adds	r3, r0, #1
 8014276:	d1f3      	bne.n	8014260 <__sfputs_r+0xa>
 8014278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801427c <_vfiprintf_r>:
 801427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014280:	460d      	mov	r5, r1
 8014282:	b09d      	sub	sp, #116	@ 0x74
 8014284:	4614      	mov	r4, r2
 8014286:	4698      	mov	r8, r3
 8014288:	4606      	mov	r6, r0
 801428a:	b118      	cbz	r0, 8014294 <_vfiprintf_r+0x18>
 801428c:	6a03      	ldr	r3, [r0, #32]
 801428e:	b90b      	cbnz	r3, 8014294 <_vfiprintf_r+0x18>
 8014290:	f7ff fd66 	bl	8013d60 <__sinit>
 8014294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014296:	07d9      	lsls	r1, r3, #31
 8014298:	d405      	bmi.n	80142a6 <_vfiprintf_r+0x2a>
 801429a:	89ab      	ldrh	r3, [r5, #12]
 801429c:	059a      	lsls	r2, r3, #22
 801429e:	d402      	bmi.n	80142a6 <_vfiprintf_r+0x2a>
 80142a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80142a2:	f7ff fe8a 	bl	8013fba <__retarget_lock_acquire_recursive>
 80142a6:	89ab      	ldrh	r3, [r5, #12]
 80142a8:	071b      	lsls	r3, r3, #28
 80142aa:	d501      	bpl.n	80142b0 <_vfiprintf_r+0x34>
 80142ac:	692b      	ldr	r3, [r5, #16]
 80142ae:	b99b      	cbnz	r3, 80142d8 <_vfiprintf_r+0x5c>
 80142b0:	4629      	mov	r1, r5
 80142b2:	4630      	mov	r0, r6
 80142b4:	f000 fb82 	bl	80149bc <__swsetup_r>
 80142b8:	b170      	cbz	r0, 80142d8 <_vfiprintf_r+0x5c>
 80142ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80142bc:	07dc      	lsls	r4, r3, #31
 80142be:	d504      	bpl.n	80142ca <_vfiprintf_r+0x4e>
 80142c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142c4:	b01d      	add	sp, #116	@ 0x74
 80142c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ca:	89ab      	ldrh	r3, [r5, #12]
 80142cc:	0598      	lsls	r0, r3, #22
 80142ce:	d4f7      	bmi.n	80142c0 <_vfiprintf_r+0x44>
 80142d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80142d2:	f7ff fe73 	bl	8013fbc <__retarget_lock_release_recursive>
 80142d6:	e7f3      	b.n	80142c0 <_vfiprintf_r+0x44>
 80142d8:	2300      	movs	r3, #0
 80142da:	9309      	str	r3, [sp, #36]	@ 0x24
 80142dc:	2320      	movs	r3, #32
 80142de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80142e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80142e6:	2330      	movs	r3, #48	@ 0x30
 80142e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014498 <_vfiprintf_r+0x21c>
 80142ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80142f0:	f04f 0901 	mov.w	r9, #1
 80142f4:	4623      	mov	r3, r4
 80142f6:	469a      	mov	sl, r3
 80142f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142fc:	b10a      	cbz	r2, 8014302 <_vfiprintf_r+0x86>
 80142fe:	2a25      	cmp	r2, #37	@ 0x25
 8014300:	d1f9      	bne.n	80142f6 <_vfiprintf_r+0x7a>
 8014302:	ebba 0b04 	subs.w	fp, sl, r4
 8014306:	d00b      	beq.n	8014320 <_vfiprintf_r+0xa4>
 8014308:	465b      	mov	r3, fp
 801430a:	4622      	mov	r2, r4
 801430c:	4629      	mov	r1, r5
 801430e:	4630      	mov	r0, r6
 8014310:	f7ff ffa1 	bl	8014256 <__sfputs_r>
 8014314:	3001      	adds	r0, #1
 8014316:	f000 80a7 	beq.w	8014468 <_vfiprintf_r+0x1ec>
 801431a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801431c:	445a      	add	r2, fp
 801431e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014320:	f89a 3000 	ldrb.w	r3, [sl]
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 809f 	beq.w	8014468 <_vfiprintf_r+0x1ec>
 801432a:	2300      	movs	r3, #0
 801432c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014334:	f10a 0a01 	add.w	sl, sl, #1
 8014338:	9304      	str	r3, [sp, #16]
 801433a:	9307      	str	r3, [sp, #28]
 801433c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014340:	931a      	str	r3, [sp, #104]	@ 0x68
 8014342:	4654      	mov	r4, sl
 8014344:	2205      	movs	r2, #5
 8014346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801434a:	4853      	ldr	r0, [pc, #332]	@ (8014498 <_vfiprintf_r+0x21c>)
 801434c:	f7eb ff90 	bl	8000270 <memchr>
 8014350:	9a04      	ldr	r2, [sp, #16]
 8014352:	b9d8      	cbnz	r0, 801438c <_vfiprintf_r+0x110>
 8014354:	06d1      	lsls	r1, r2, #27
 8014356:	bf44      	itt	mi
 8014358:	2320      	movmi	r3, #32
 801435a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801435e:	0713      	lsls	r3, r2, #28
 8014360:	bf44      	itt	mi
 8014362:	232b      	movmi	r3, #43	@ 0x2b
 8014364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014368:	f89a 3000 	ldrb.w	r3, [sl]
 801436c:	2b2a      	cmp	r3, #42	@ 0x2a
 801436e:	d015      	beq.n	801439c <_vfiprintf_r+0x120>
 8014370:	9a07      	ldr	r2, [sp, #28]
 8014372:	4654      	mov	r4, sl
 8014374:	2000      	movs	r0, #0
 8014376:	f04f 0c0a 	mov.w	ip, #10
 801437a:	4621      	mov	r1, r4
 801437c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014380:	3b30      	subs	r3, #48	@ 0x30
 8014382:	2b09      	cmp	r3, #9
 8014384:	d94b      	bls.n	801441e <_vfiprintf_r+0x1a2>
 8014386:	b1b0      	cbz	r0, 80143b6 <_vfiprintf_r+0x13a>
 8014388:	9207      	str	r2, [sp, #28]
 801438a:	e014      	b.n	80143b6 <_vfiprintf_r+0x13a>
 801438c:	eba0 0308 	sub.w	r3, r0, r8
 8014390:	fa09 f303 	lsl.w	r3, r9, r3
 8014394:	4313      	orrs	r3, r2
 8014396:	9304      	str	r3, [sp, #16]
 8014398:	46a2      	mov	sl, r4
 801439a:	e7d2      	b.n	8014342 <_vfiprintf_r+0xc6>
 801439c:	9b03      	ldr	r3, [sp, #12]
 801439e:	1d19      	adds	r1, r3, #4
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	9103      	str	r1, [sp, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	bfbb      	ittet	lt
 80143a8:	425b      	neglt	r3, r3
 80143aa:	f042 0202 	orrlt.w	r2, r2, #2
 80143ae:	9307      	strge	r3, [sp, #28]
 80143b0:	9307      	strlt	r3, [sp, #28]
 80143b2:	bfb8      	it	lt
 80143b4:	9204      	strlt	r2, [sp, #16]
 80143b6:	7823      	ldrb	r3, [r4, #0]
 80143b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80143ba:	d10a      	bne.n	80143d2 <_vfiprintf_r+0x156>
 80143bc:	7863      	ldrb	r3, [r4, #1]
 80143be:	2b2a      	cmp	r3, #42	@ 0x2a
 80143c0:	d132      	bne.n	8014428 <_vfiprintf_r+0x1ac>
 80143c2:	9b03      	ldr	r3, [sp, #12]
 80143c4:	1d1a      	adds	r2, r3, #4
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	9203      	str	r2, [sp, #12]
 80143ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80143ce:	3402      	adds	r4, #2
 80143d0:	9305      	str	r3, [sp, #20]
 80143d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80144a8 <_vfiprintf_r+0x22c>
 80143d6:	7821      	ldrb	r1, [r4, #0]
 80143d8:	2203      	movs	r2, #3
 80143da:	4650      	mov	r0, sl
 80143dc:	f7eb ff48 	bl	8000270 <memchr>
 80143e0:	b138      	cbz	r0, 80143f2 <_vfiprintf_r+0x176>
 80143e2:	9b04      	ldr	r3, [sp, #16]
 80143e4:	eba0 000a 	sub.w	r0, r0, sl
 80143e8:	2240      	movs	r2, #64	@ 0x40
 80143ea:	4082      	lsls	r2, r0
 80143ec:	4313      	orrs	r3, r2
 80143ee:	3401      	adds	r4, #1
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143f6:	4829      	ldr	r0, [pc, #164]	@ (801449c <_vfiprintf_r+0x220>)
 80143f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80143fc:	2206      	movs	r2, #6
 80143fe:	f7eb ff37 	bl	8000270 <memchr>
 8014402:	2800      	cmp	r0, #0
 8014404:	d03f      	beq.n	8014486 <_vfiprintf_r+0x20a>
 8014406:	4b26      	ldr	r3, [pc, #152]	@ (80144a0 <_vfiprintf_r+0x224>)
 8014408:	bb1b      	cbnz	r3, 8014452 <_vfiprintf_r+0x1d6>
 801440a:	9b03      	ldr	r3, [sp, #12]
 801440c:	3307      	adds	r3, #7
 801440e:	f023 0307 	bic.w	r3, r3, #7
 8014412:	3308      	adds	r3, #8
 8014414:	9303      	str	r3, [sp, #12]
 8014416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014418:	443b      	add	r3, r7
 801441a:	9309      	str	r3, [sp, #36]	@ 0x24
 801441c:	e76a      	b.n	80142f4 <_vfiprintf_r+0x78>
 801441e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014422:	460c      	mov	r4, r1
 8014424:	2001      	movs	r0, #1
 8014426:	e7a8      	b.n	801437a <_vfiprintf_r+0xfe>
 8014428:	2300      	movs	r3, #0
 801442a:	3401      	adds	r4, #1
 801442c:	9305      	str	r3, [sp, #20]
 801442e:	4619      	mov	r1, r3
 8014430:	f04f 0c0a 	mov.w	ip, #10
 8014434:	4620      	mov	r0, r4
 8014436:	f810 2b01 	ldrb.w	r2, [r0], #1
 801443a:	3a30      	subs	r2, #48	@ 0x30
 801443c:	2a09      	cmp	r2, #9
 801443e:	d903      	bls.n	8014448 <_vfiprintf_r+0x1cc>
 8014440:	2b00      	cmp	r3, #0
 8014442:	d0c6      	beq.n	80143d2 <_vfiprintf_r+0x156>
 8014444:	9105      	str	r1, [sp, #20]
 8014446:	e7c4      	b.n	80143d2 <_vfiprintf_r+0x156>
 8014448:	fb0c 2101 	mla	r1, ip, r1, r2
 801444c:	4604      	mov	r4, r0
 801444e:	2301      	movs	r3, #1
 8014450:	e7f0      	b.n	8014434 <_vfiprintf_r+0x1b8>
 8014452:	ab03      	add	r3, sp, #12
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	462a      	mov	r2, r5
 8014458:	4b12      	ldr	r3, [pc, #72]	@ (80144a4 <_vfiprintf_r+0x228>)
 801445a:	a904      	add	r1, sp, #16
 801445c:	4630      	mov	r0, r6
 801445e:	f3af 8000 	nop.w
 8014462:	4607      	mov	r7, r0
 8014464:	1c78      	adds	r0, r7, #1
 8014466:	d1d6      	bne.n	8014416 <_vfiprintf_r+0x19a>
 8014468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801446a:	07d9      	lsls	r1, r3, #31
 801446c:	d405      	bmi.n	801447a <_vfiprintf_r+0x1fe>
 801446e:	89ab      	ldrh	r3, [r5, #12]
 8014470:	059a      	lsls	r2, r3, #22
 8014472:	d402      	bmi.n	801447a <_vfiprintf_r+0x1fe>
 8014474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014476:	f7ff fda1 	bl	8013fbc <__retarget_lock_release_recursive>
 801447a:	89ab      	ldrh	r3, [r5, #12]
 801447c:	065b      	lsls	r3, r3, #25
 801447e:	f53f af1f 	bmi.w	80142c0 <_vfiprintf_r+0x44>
 8014482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014484:	e71e      	b.n	80142c4 <_vfiprintf_r+0x48>
 8014486:	ab03      	add	r3, sp, #12
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	462a      	mov	r2, r5
 801448c:	4b05      	ldr	r3, [pc, #20]	@ (80144a4 <_vfiprintf_r+0x228>)
 801448e:	a904      	add	r1, sp, #16
 8014490:	4630      	mov	r0, r6
 8014492:	f000 f879 	bl	8014588 <_printf_i>
 8014496:	e7e4      	b.n	8014462 <_vfiprintf_r+0x1e6>
 8014498:	080182c5 	.word	0x080182c5
 801449c:	080182cf 	.word	0x080182cf
 80144a0:	00000000 	.word	0x00000000
 80144a4:	08014257 	.word	0x08014257
 80144a8:	080182cb 	.word	0x080182cb

080144ac <_printf_common>:
 80144ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144b0:	4616      	mov	r6, r2
 80144b2:	4698      	mov	r8, r3
 80144b4:	688a      	ldr	r2, [r1, #8]
 80144b6:	690b      	ldr	r3, [r1, #16]
 80144b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80144bc:	4293      	cmp	r3, r2
 80144be:	bfb8      	it	lt
 80144c0:	4613      	movlt	r3, r2
 80144c2:	6033      	str	r3, [r6, #0]
 80144c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80144c8:	4607      	mov	r7, r0
 80144ca:	460c      	mov	r4, r1
 80144cc:	b10a      	cbz	r2, 80144d2 <_printf_common+0x26>
 80144ce:	3301      	adds	r3, #1
 80144d0:	6033      	str	r3, [r6, #0]
 80144d2:	6823      	ldr	r3, [r4, #0]
 80144d4:	0699      	lsls	r1, r3, #26
 80144d6:	bf42      	ittt	mi
 80144d8:	6833      	ldrmi	r3, [r6, #0]
 80144da:	3302      	addmi	r3, #2
 80144dc:	6033      	strmi	r3, [r6, #0]
 80144de:	6825      	ldr	r5, [r4, #0]
 80144e0:	f015 0506 	ands.w	r5, r5, #6
 80144e4:	d106      	bne.n	80144f4 <_printf_common+0x48>
 80144e6:	f104 0a19 	add.w	sl, r4, #25
 80144ea:	68e3      	ldr	r3, [r4, #12]
 80144ec:	6832      	ldr	r2, [r6, #0]
 80144ee:	1a9b      	subs	r3, r3, r2
 80144f0:	42ab      	cmp	r3, r5
 80144f2:	dc26      	bgt.n	8014542 <_printf_common+0x96>
 80144f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80144f8:	6822      	ldr	r2, [r4, #0]
 80144fa:	3b00      	subs	r3, #0
 80144fc:	bf18      	it	ne
 80144fe:	2301      	movne	r3, #1
 8014500:	0692      	lsls	r2, r2, #26
 8014502:	d42b      	bmi.n	801455c <_printf_common+0xb0>
 8014504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014508:	4641      	mov	r1, r8
 801450a:	4638      	mov	r0, r7
 801450c:	47c8      	blx	r9
 801450e:	3001      	adds	r0, #1
 8014510:	d01e      	beq.n	8014550 <_printf_common+0xa4>
 8014512:	6823      	ldr	r3, [r4, #0]
 8014514:	6922      	ldr	r2, [r4, #16]
 8014516:	f003 0306 	and.w	r3, r3, #6
 801451a:	2b04      	cmp	r3, #4
 801451c:	bf02      	ittt	eq
 801451e:	68e5      	ldreq	r5, [r4, #12]
 8014520:	6833      	ldreq	r3, [r6, #0]
 8014522:	1aed      	subeq	r5, r5, r3
 8014524:	68a3      	ldr	r3, [r4, #8]
 8014526:	bf0c      	ite	eq
 8014528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801452c:	2500      	movne	r5, #0
 801452e:	4293      	cmp	r3, r2
 8014530:	bfc4      	itt	gt
 8014532:	1a9b      	subgt	r3, r3, r2
 8014534:	18ed      	addgt	r5, r5, r3
 8014536:	2600      	movs	r6, #0
 8014538:	341a      	adds	r4, #26
 801453a:	42b5      	cmp	r5, r6
 801453c:	d11a      	bne.n	8014574 <_printf_common+0xc8>
 801453e:	2000      	movs	r0, #0
 8014540:	e008      	b.n	8014554 <_printf_common+0xa8>
 8014542:	2301      	movs	r3, #1
 8014544:	4652      	mov	r2, sl
 8014546:	4641      	mov	r1, r8
 8014548:	4638      	mov	r0, r7
 801454a:	47c8      	blx	r9
 801454c:	3001      	adds	r0, #1
 801454e:	d103      	bne.n	8014558 <_printf_common+0xac>
 8014550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014558:	3501      	adds	r5, #1
 801455a:	e7c6      	b.n	80144ea <_printf_common+0x3e>
 801455c:	18e1      	adds	r1, r4, r3
 801455e:	1c5a      	adds	r2, r3, #1
 8014560:	2030      	movs	r0, #48	@ 0x30
 8014562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014566:	4422      	add	r2, r4
 8014568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801456c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014570:	3302      	adds	r3, #2
 8014572:	e7c7      	b.n	8014504 <_printf_common+0x58>
 8014574:	2301      	movs	r3, #1
 8014576:	4622      	mov	r2, r4
 8014578:	4641      	mov	r1, r8
 801457a:	4638      	mov	r0, r7
 801457c:	47c8      	blx	r9
 801457e:	3001      	adds	r0, #1
 8014580:	d0e6      	beq.n	8014550 <_printf_common+0xa4>
 8014582:	3601      	adds	r6, #1
 8014584:	e7d9      	b.n	801453a <_printf_common+0x8e>
	...

08014588 <_printf_i>:
 8014588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801458c:	7e0f      	ldrb	r7, [r1, #24]
 801458e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014590:	2f78      	cmp	r7, #120	@ 0x78
 8014592:	4691      	mov	r9, r2
 8014594:	4680      	mov	r8, r0
 8014596:	460c      	mov	r4, r1
 8014598:	469a      	mov	sl, r3
 801459a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801459e:	d807      	bhi.n	80145b0 <_printf_i+0x28>
 80145a0:	2f62      	cmp	r7, #98	@ 0x62
 80145a2:	d80a      	bhi.n	80145ba <_printf_i+0x32>
 80145a4:	2f00      	cmp	r7, #0
 80145a6:	f000 80d1 	beq.w	801474c <_printf_i+0x1c4>
 80145aa:	2f58      	cmp	r7, #88	@ 0x58
 80145ac:	f000 80b8 	beq.w	8014720 <_printf_i+0x198>
 80145b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80145b8:	e03a      	b.n	8014630 <_printf_i+0xa8>
 80145ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80145be:	2b15      	cmp	r3, #21
 80145c0:	d8f6      	bhi.n	80145b0 <_printf_i+0x28>
 80145c2:	a101      	add	r1, pc, #4	@ (adr r1, 80145c8 <_printf_i+0x40>)
 80145c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80145c8:	08014621 	.word	0x08014621
 80145cc:	08014635 	.word	0x08014635
 80145d0:	080145b1 	.word	0x080145b1
 80145d4:	080145b1 	.word	0x080145b1
 80145d8:	080145b1 	.word	0x080145b1
 80145dc:	080145b1 	.word	0x080145b1
 80145e0:	08014635 	.word	0x08014635
 80145e4:	080145b1 	.word	0x080145b1
 80145e8:	080145b1 	.word	0x080145b1
 80145ec:	080145b1 	.word	0x080145b1
 80145f0:	080145b1 	.word	0x080145b1
 80145f4:	08014733 	.word	0x08014733
 80145f8:	0801465f 	.word	0x0801465f
 80145fc:	080146ed 	.word	0x080146ed
 8014600:	080145b1 	.word	0x080145b1
 8014604:	080145b1 	.word	0x080145b1
 8014608:	08014755 	.word	0x08014755
 801460c:	080145b1 	.word	0x080145b1
 8014610:	0801465f 	.word	0x0801465f
 8014614:	080145b1 	.word	0x080145b1
 8014618:	080145b1 	.word	0x080145b1
 801461c:	080146f5 	.word	0x080146f5
 8014620:	6833      	ldr	r3, [r6, #0]
 8014622:	1d1a      	adds	r2, r3, #4
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	6032      	str	r2, [r6, #0]
 8014628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801462c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014630:	2301      	movs	r3, #1
 8014632:	e09c      	b.n	801476e <_printf_i+0x1e6>
 8014634:	6833      	ldr	r3, [r6, #0]
 8014636:	6820      	ldr	r0, [r4, #0]
 8014638:	1d19      	adds	r1, r3, #4
 801463a:	6031      	str	r1, [r6, #0]
 801463c:	0606      	lsls	r6, r0, #24
 801463e:	d501      	bpl.n	8014644 <_printf_i+0xbc>
 8014640:	681d      	ldr	r5, [r3, #0]
 8014642:	e003      	b.n	801464c <_printf_i+0xc4>
 8014644:	0645      	lsls	r5, r0, #25
 8014646:	d5fb      	bpl.n	8014640 <_printf_i+0xb8>
 8014648:	f9b3 5000 	ldrsh.w	r5, [r3]
 801464c:	2d00      	cmp	r5, #0
 801464e:	da03      	bge.n	8014658 <_printf_i+0xd0>
 8014650:	232d      	movs	r3, #45	@ 0x2d
 8014652:	426d      	negs	r5, r5
 8014654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014658:	4858      	ldr	r0, [pc, #352]	@ (80147bc <_printf_i+0x234>)
 801465a:	230a      	movs	r3, #10
 801465c:	e011      	b.n	8014682 <_printf_i+0xfa>
 801465e:	6821      	ldr	r1, [r4, #0]
 8014660:	6833      	ldr	r3, [r6, #0]
 8014662:	0608      	lsls	r0, r1, #24
 8014664:	f853 5b04 	ldr.w	r5, [r3], #4
 8014668:	d402      	bmi.n	8014670 <_printf_i+0xe8>
 801466a:	0649      	lsls	r1, r1, #25
 801466c:	bf48      	it	mi
 801466e:	b2ad      	uxthmi	r5, r5
 8014670:	2f6f      	cmp	r7, #111	@ 0x6f
 8014672:	4852      	ldr	r0, [pc, #328]	@ (80147bc <_printf_i+0x234>)
 8014674:	6033      	str	r3, [r6, #0]
 8014676:	bf14      	ite	ne
 8014678:	230a      	movne	r3, #10
 801467a:	2308      	moveq	r3, #8
 801467c:	2100      	movs	r1, #0
 801467e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014682:	6866      	ldr	r6, [r4, #4]
 8014684:	60a6      	str	r6, [r4, #8]
 8014686:	2e00      	cmp	r6, #0
 8014688:	db05      	blt.n	8014696 <_printf_i+0x10e>
 801468a:	6821      	ldr	r1, [r4, #0]
 801468c:	432e      	orrs	r6, r5
 801468e:	f021 0104 	bic.w	r1, r1, #4
 8014692:	6021      	str	r1, [r4, #0]
 8014694:	d04b      	beq.n	801472e <_printf_i+0x1a6>
 8014696:	4616      	mov	r6, r2
 8014698:	fbb5 f1f3 	udiv	r1, r5, r3
 801469c:	fb03 5711 	mls	r7, r3, r1, r5
 80146a0:	5dc7      	ldrb	r7, [r0, r7]
 80146a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146a6:	462f      	mov	r7, r5
 80146a8:	42bb      	cmp	r3, r7
 80146aa:	460d      	mov	r5, r1
 80146ac:	d9f4      	bls.n	8014698 <_printf_i+0x110>
 80146ae:	2b08      	cmp	r3, #8
 80146b0:	d10b      	bne.n	80146ca <_printf_i+0x142>
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	07df      	lsls	r7, r3, #31
 80146b6:	d508      	bpl.n	80146ca <_printf_i+0x142>
 80146b8:	6923      	ldr	r3, [r4, #16]
 80146ba:	6861      	ldr	r1, [r4, #4]
 80146bc:	4299      	cmp	r1, r3
 80146be:	bfde      	ittt	le
 80146c0:	2330      	movle	r3, #48	@ 0x30
 80146c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80146c6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80146ca:	1b92      	subs	r2, r2, r6
 80146cc:	6122      	str	r2, [r4, #16]
 80146ce:	f8cd a000 	str.w	sl, [sp]
 80146d2:	464b      	mov	r3, r9
 80146d4:	aa03      	add	r2, sp, #12
 80146d6:	4621      	mov	r1, r4
 80146d8:	4640      	mov	r0, r8
 80146da:	f7ff fee7 	bl	80144ac <_printf_common>
 80146de:	3001      	adds	r0, #1
 80146e0:	d14a      	bne.n	8014778 <_printf_i+0x1f0>
 80146e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80146e6:	b004      	add	sp, #16
 80146e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ec:	6823      	ldr	r3, [r4, #0]
 80146ee:	f043 0320 	orr.w	r3, r3, #32
 80146f2:	6023      	str	r3, [r4, #0]
 80146f4:	4832      	ldr	r0, [pc, #200]	@ (80147c0 <_printf_i+0x238>)
 80146f6:	2778      	movs	r7, #120	@ 0x78
 80146f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	6831      	ldr	r1, [r6, #0]
 8014700:	061f      	lsls	r7, r3, #24
 8014702:	f851 5b04 	ldr.w	r5, [r1], #4
 8014706:	d402      	bmi.n	801470e <_printf_i+0x186>
 8014708:	065f      	lsls	r7, r3, #25
 801470a:	bf48      	it	mi
 801470c:	b2ad      	uxthmi	r5, r5
 801470e:	6031      	str	r1, [r6, #0]
 8014710:	07d9      	lsls	r1, r3, #31
 8014712:	bf44      	itt	mi
 8014714:	f043 0320 	orrmi.w	r3, r3, #32
 8014718:	6023      	strmi	r3, [r4, #0]
 801471a:	b11d      	cbz	r5, 8014724 <_printf_i+0x19c>
 801471c:	2310      	movs	r3, #16
 801471e:	e7ad      	b.n	801467c <_printf_i+0xf4>
 8014720:	4826      	ldr	r0, [pc, #152]	@ (80147bc <_printf_i+0x234>)
 8014722:	e7e9      	b.n	80146f8 <_printf_i+0x170>
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	f023 0320 	bic.w	r3, r3, #32
 801472a:	6023      	str	r3, [r4, #0]
 801472c:	e7f6      	b.n	801471c <_printf_i+0x194>
 801472e:	4616      	mov	r6, r2
 8014730:	e7bd      	b.n	80146ae <_printf_i+0x126>
 8014732:	6833      	ldr	r3, [r6, #0]
 8014734:	6825      	ldr	r5, [r4, #0]
 8014736:	6961      	ldr	r1, [r4, #20]
 8014738:	1d18      	adds	r0, r3, #4
 801473a:	6030      	str	r0, [r6, #0]
 801473c:	062e      	lsls	r6, r5, #24
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	d501      	bpl.n	8014746 <_printf_i+0x1be>
 8014742:	6019      	str	r1, [r3, #0]
 8014744:	e002      	b.n	801474c <_printf_i+0x1c4>
 8014746:	0668      	lsls	r0, r5, #25
 8014748:	d5fb      	bpl.n	8014742 <_printf_i+0x1ba>
 801474a:	8019      	strh	r1, [r3, #0]
 801474c:	2300      	movs	r3, #0
 801474e:	6123      	str	r3, [r4, #16]
 8014750:	4616      	mov	r6, r2
 8014752:	e7bc      	b.n	80146ce <_printf_i+0x146>
 8014754:	6833      	ldr	r3, [r6, #0]
 8014756:	1d1a      	adds	r2, r3, #4
 8014758:	6032      	str	r2, [r6, #0]
 801475a:	681e      	ldr	r6, [r3, #0]
 801475c:	6862      	ldr	r2, [r4, #4]
 801475e:	2100      	movs	r1, #0
 8014760:	4630      	mov	r0, r6
 8014762:	f7eb fd85 	bl	8000270 <memchr>
 8014766:	b108      	cbz	r0, 801476c <_printf_i+0x1e4>
 8014768:	1b80      	subs	r0, r0, r6
 801476a:	6060      	str	r0, [r4, #4]
 801476c:	6863      	ldr	r3, [r4, #4]
 801476e:	6123      	str	r3, [r4, #16]
 8014770:	2300      	movs	r3, #0
 8014772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014776:	e7aa      	b.n	80146ce <_printf_i+0x146>
 8014778:	6923      	ldr	r3, [r4, #16]
 801477a:	4632      	mov	r2, r6
 801477c:	4649      	mov	r1, r9
 801477e:	4640      	mov	r0, r8
 8014780:	47d0      	blx	sl
 8014782:	3001      	adds	r0, #1
 8014784:	d0ad      	beq.n	80146e2 <_printf_i+0x15a>
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	079b      	lsls	r3, r3, #30
 801478a:	d413      	bmi.n	80147b4 <_printf_i+0x22c>
 801478c:	68e0      	ldr	r0, [r4, #12]
 801478e:	9b03      	ldr	r3, [sp, #12]
 8014790:	4298      	cmp	r0, r3
 8014792:	bfb8      	it	lt
 8014794:	4618      	movlt	r0, r3
 8014796:	e7a6      	b.n	80146e6 <_printf_i+0x15e>
 8014798:	2301      	movs	r3, #1
 801479a:	4632      	mov	r2, r6
 801479c:	4649      	mov	r1, r9
 801479e:	4640      	mov	r0, r8
 80147a0:	47d0      	blx	sl
 80147a2:	3001      	adds	r0, #1
 80147a4:	d09d      	beq.n	80146e2 <_printf_i+0x15a>
 80147a6:	3501      	adds	r5, #1
 80147a8:	68e3      	ldr	r3, [r4, #12]
 80147aa:	9903      	ldr	r1, [sp, #12]
 80147ac:	1a5b      	subs	r3, r3, r1
 80147ae:	42ab      	cmp	r3, r5
 80147b0:	dcf2      	bgt.n	8014798 <_printf_i+0x210>
 80147b2:	e7eb      	b.n	801478c <_printf_i+0x204>
 80147b4:	2500      	movs	r5, #0
 80147b6:	f104 0619 	add.w	r6, r4, #25
 80147ba:	e7f5      	b.n	80147a8 <_printf_i+0x220>
 80147bc:	080182d6 	.word	0x080182d6
 80147c0:	080182e7 	.word	0x080182e7

080147c4 <__sflush_r>:
 80147c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80147c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147cc:	0716      	lsls	r6, r2, #28
 80147ce:	4605      	mov	r5, r0
 80147d0:	460c      	mov	r4, r1
 80147d2:	d454      	bmi.n	801487e <__sflush_r+0xba>
 80147d4:	684b      	ldr	r3, [r1, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	dc02      	bgt.n	80147e0 <__sflush_r+0x1c>
 80147da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80147dc:	2b00      	cmp	r3, #0
 80147de:	dd48      	ble.n	8014872 <__sflush_r+0xae>
 80147e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80147e2:	2e00      	cmp	r6, #0
 80147e4:	d045      	beq.n	8014872 <__sflush_r+0xae>
 80147e6:	2300      	movs	r3, #0
 80147e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80147ec:	682f      	ldr	r7, [r5, #0]
 80147ee:	6a21      	ldr	r1, [r4, #32]
 80147f0:	602b      	str	r3, [r5, #0]
 80147f2:	d030      	beq.n	8014856 <__sflush_r+0x92>
 80147f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80147f6:	89a3      	ldrh	r3, [r4, #12]
 80147f8:	0759      	lsls	r1, r3, #29
 80147fa:	d505      	bpl.n	8014808 <__sflush_r+0x44>
 80147fc:	6863      	ldr	r3, [r4, #4]
 80147fe:	1ad2      	subs	r2, r2, r3
 8014800:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014802:	b10b      	cbz	r3, 8014808 <__sflush_r+0x44>
 8014804:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014806:	1ad2      	subs	r2, r2, r3
 8014808:	2300      	movs	r3, #0
 801480a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801480c:	6a21      	ldr	r1, [r4, #32]
 801480e:	4628      	mov	r0, r5
 8014810:	47b0      	blx	r6
 8014812:	1c43      	adds	r3, r0, #1
 8014814:	89a3      	ldrh	r3, [r4, #12]
 8014816:	d106      	bne.n	8014826 <__sflush_r+0x62>
 8014818:	6829      	ldr	r1, [r5, #0]
 801481a:	291d      	cmp	r1, #29
 801481c:	d82b      	bhi.n	8014876 <__sflush_r+0xb2>
 801481e:	4a2a      	ldr	r2, [pc, #168]	@ (80148c8 <__sflush_r+0x104>)
 8014820:	40ca      	lsrs	r2, r1
 8014822:	07d6      	lsls	r6, r2, #31
 8014824:	d527      	bpl.n	8014876 <__sflush_r+0xb2>
 8014826:	2200      	movs	r2, #0
 8014828:	6062      	str	r2, [r4, #4]
 801482a:	04d9      	lsls	r1, r3, #19
 801482c:	6922      	ldr	r2, [r4, #16]
 801482e:	6022      	str	r2, [r4, #0]
 8014830:	d504      	bpl.n	801483c <__sflush_r+0x78>
 8014832:	1c42      	adds	r2, r0, #1
 8014834:	d101      	bne.n	801483a <__sflush_r+0x76>
 8014836:	682b      	ldr	r3, [r5, #0]
 8014838:	b903      	cbnz	r3, 801483c <__sflush_r+0x78>
 801483a:	6560      	str	r0, [r4, #84]	@ 0x54
 801483c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801483e:	602f      	str	r7, [r5, #0]
 8014840:	b1b9      	cbz	r1, 8014872 <__sflush_r+0xae>
 8014842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014846:	4299      	cmp	r1, r3
 8014848:	d002      	beq.n	8014850 <__sflush_r+0x8c>
 801484a:	4628      	mov	r0, r5
 801484c:	f7ff fbec 	bl	8014028 <_free_r>
 8014850:	2300      	movs	r3, #0
 8014852:	6363      	str	r3, [r4, #52]	@ 0x34
 8014854:	e00d      	b.n	8014872 <__sflush_r+0xae>
 8014856:	2301      	movs	r3, #1
 8014858:	4628      	mov	r0, r5
 801485a:	47b0      	blx	r6
 801485c:	4602      	mov	r2, r0
 801485e:	1c50      	adds	r0, r2, #1
 8014860:	d1c9      	bne.n	80147f6 <__sflush_r+0x32>
 8014862:	682b      	ldr	r3, [r5, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d0c6      	beq.n	80147f6 <__sflush_r+0x32>
 8014868:	2b1d      	cmp	r3, #29
 801486a:	d001      	beq.n	8014870 <__sflush_r+0xac>
 801486c:	2b16      	cmp	r3, #22
 801486e:	d11e      	bne.n	80148ae <__sflush_r+0xea>
 8014870:	602f      	str	r7, [r5, #0]
 8014872:	2000      	movs	r0, #0
 8014874:	e022      	b.n	80148bc <__sflush_r+0xf8>
 8014876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801487a:	b21b      	sxth	r3, r3
 801487c:	e01b      	b.n	80148b6 <__sflush_r+0xf2>
 801487e:	690f      	ldr	r7, [r1, #16]
 8014880:	2f00      	cmp	r7, #0
 8014882:	d0f6      	beq.n	8014872 <__sflush_r+0xae>
 8014884:	0793      	lsls	r3, r2, #30
 8014886:	680e      	ldr	r6, [r1, #0]
 8014888:	bf08      	it	eq
 801488a:	694b      	ldreq	r3, [r1, #20]
 801488c:	600f      	str	r7, [r1, #0]
 801488e:	bf18      	it	ne
 8014890:	2300      	movne	r3, #0
 8014892:	eba6 0807 	sub.w	r8, r6, r7
 8014896:	608b      	str	r3, [r1, #8]
 8014898:	f1b8 0f00 	cmp.w	r8, #0
 801489c:	dde9      	ble.n	8014872 <__sflush_r+0xae>
 801489e:	6a21      	ldr	r1, [r4, #32]
 80148a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80148a2:	4643      	mov	r3, r8
 80148a4:	463a      	mov	r2, r7
 80148a6:	4628      	mov	r0, r5
 80148a8:	47b0      	blx	r6
 80148aa:	2800      	cmp	r0, #0
 80148ac:	dc08      	bgt.n	80148c0 <__sflush_r+0xfc>
 80148ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148b6:	81a3      	strh	r3, [r4, #12]
 80148b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c0:	4407      	add	r7, r0
 80148c2:	eba8 0800 	sub.w	r8, r8, r0
 80148c6:	e7e7      	b.n	8014898 <__sflush_r+0xd4>
 80148c8:	20400001 	.word	0x20400001

080148cc <_fflush_r>:
 80148cc:	b538      	push	{r3, r4, r5, lr}
 80148ce:	690b      	ldr	r3, [r1, #16]
 80148d0:	4605      	mov	r5, r0
 80148d2:	460c      	mov	r4, r1
 80148d4:	b913      	cbnz	r3, 80148dc <_fflush_r+0x10>
 80148d6:	2500      	movs	r5, #0
 80148d8:	4628      	mov	r0, r5
 80148da:	bd38      	pop	{r3, r4, r5, pc}
 80148dc:	b118      	cbz	r0, 80148e6 <_fflush_r+0x1a>
 80148de:	6a03      	ldr	r3, [r0, #32]
 80148e0:	b90b      	cbnz	r3, 80148e6 <_fflush_r+0x1a>
 80148e2:	f7ff fa3d 	bl	8013d60 <__sinit>
 80148e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d0f3      	beq.n	80148d6 <_fflush_r+0xa>
 80148ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80148f0:	07d0      	lsls	r0, r2, #31
 80148f2:	d404      	bmi.n	80148fe <_fflush_r+0x32>
 80148f4:	0599      	lsls	r1, r3, #22
 80148f6:	d402      	bmi.n	80148fe <_fflush_r+0x32>
 80148f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148fa:	f7ff fb5e 	bl	8013fba <__retarget_lock_acquire_recursive>
 80148fe:	4628      	mov	r0, r5
 8014900:	4621      	mov	r1, r4
 8014902:	f7ff ff5f 	bl	80147c4 <__sflush_r>
 8014906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014908:	07da      	lsls	r2, r3, #31
 801490a:	4605      	mov	r5, r0
 801490c:	d4e4      	bmi.n	80148d8 <_fflush_r+0xc>
 801490e:	89a3      	ldrh	r3, [r4, #12]
 8014910:	059b      	lsls	r3, r3, #22
 8014912:	d4e1      	bmi.n	80148d8 <_fflush_r+0xc>
 8014914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014916:	f7ff fb51 	bl	8013fbc <__retarget_lock_release_recursive>
 801491a:	e7dd      	b.n	80148d8 <_fflush_r+0xc>

0801491c <fiprintf>:
 801491c:	b40e      	push	{r1, r2, r3}
 801491e:	b503      	push	{r0, r1, lr}
 8014920:	4601      	mov	r1, r0
 8014922:	ab03      	add	r3, sp, #12
 8014924:	4805      	ldr	r0, [pc, #20]	@ (801493c <fiprintf+0x20>)
 8014926:	f853 2b04 	ldr.w	r2, [r3], #4
 801492a:	6800      	ldr	r0, [r0, #0]
 801492c:	9301      	str	r3, [sp, #4]
 801492e:	f7ff fca5 	bl	801427c <_vfiprintf_r>
 8014932:	b002      	add	sp, #8
 8014934:	f85d eb04 	ldr.w	lr, [sp], #4
 8014938:	b003      	add	sp, #12
 801493a:	4770      	bx	lr
 801493c:	20000044 	.word	0x20000044

08014940 <__swbuf_r>:
 8014940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014942:	460e      	mov	r6, r1
 8014944:	4614      	mov	r4, r2
 8014946:	4605      	mov	r5, r0
 8014948:	b118      	cbz	r0, 8014952 <__swbuf_r+0x12>
 801494a:	6a03      	ldr	r3, [r0, #32]
 801494c:	b90b      	cbnz	r3, 8014952 <__swbuf_r+0x12>
 801494e:	f7ff fa07 	bl	8013d60 <__sinit>
 8014952:	69a3      	ldr	r3, [r4, #24]
 8014954:	60a3      	str	r3, [r4, #8]
 8014956:	89a3      	ldrh	r3, [r4, #12]
 8014958:	071a      	lsls	r2, r3, #28
 801495a:	d501      	bpl.n	8014960 <__swbuf_r+0x20>
 801495c:	6923      	ldr	r3, [r4, #16]
 801495e:	b943      	cbnz	r3, 8014972 <__swbuf_r+0x32>
 8014960:	4621      	mov	r1, r4
 8014962:	4628      	mov	r0, r5
 8014964:	f000 f82a 	bl	80149bc <__swsetup_r>
 8014968:	b118      	cbz	r0, 8014972 <__swbuf_r+0x32>
 801496a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801496e:	4638      	mov	r0, r7
 8014970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014972:	6823      	ldr	r3, [r4, #0]
 8014974:	6922      	ldr	r2, [r4, #16]
 8014976:	1a98      	subs	r0, r3, r2
 8014978:	6963      	ldr	r3, [r4, #20]
 801497a:	b2f6      	uxtb	r6, r6
 801497c:	4283      	cmp	r3, r0
 801497e:	4637      	mov	r7, r6
 8014980:	dc05      	bgt.n	801498e <__swbuf_r+0x4e>
 8014982:	4621      	mov	r1, r4
 8014984:	4628      	mov	r0, r5
 8014986:	f7ff ffa1 	bl	80148cc <_fflush_r>
 801498a:	2800      	cmp	r0, #0
 801498c:	d1ed      	bne.n	801496a <__swbuf_r+0x2a>
 801498e:	68a3      	ldr	r3, [r4, #8]
 8014990:	3b01      	subs	r3, #1
 8014992:	60a3      	str	r3, [r4, #8]
 8014994:	6823      	ldr	r3, [r4, #0]
 8014996:	1c5a      	adds	r2, r3, #1
 8014998:	6022      	str	r2, [r4, #0]
 801499a:	701e      	strb	r6, [r3, #0]
 801499c:	6962      	ldr	r2, [r4, #20]
 801499e:	1c43      	adds	r3, r0, #1
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d004      	beq.n	80149ae <__swbuf_r+0x6e>
 80149a4:	89a3      	ldrh	r3, [r4, #12]
 80149a6:	07db      	lsls	r3, r3, #31
 80149a8:	d5e1      	bpl.n	801496e <__swbuf_r+0x2e>
 80149aa:	2e0a      	cmp	r6, #10
 80149ac:	d1df      	bne.n	801496e <__swbuf_r+0x2e>
 80149ae:	4621      	mov	r1, r4
 80149b0:	4628      	mov	r0, r5
 80149b2:	f7ff ff8b 	bl	80148cc <_fflush_r>
 80149b6:	2800      	cmp	r0, #0
 80149b8:	d0d9      	beq.n	801496e <__swbuf_r+0x2e>
 80149ba:	e7d6      	b.n	801496a <__swbuf_r+0x2a>

080149bc <__swsetup_r>:
 80149bc:	b538      	push	{r3, r4, r5, lr}
 80149be:	4b29      	ldr	r3, [pc, #164]	@ (8014a64 <__swsetup_r+0xa8>)
 80149c0:	4605      	mov	r5, r0
 80149c2:	6818      	ldr	r0, [r3, #0]
 80149c4:	460c      	mov	r4, r1
 80149c6:	b118      	cbz	r0, 80149d0 <__swsetup_r+0x14>
 80149c8:	6a03      	ldr	r3, [r0, #32]
 80149ca:	b90b      	cbnz	r3, 80149d0 <__swsetup_r+0x14>
 80149cc:	f7ff f9c8 	bl	8013d60 <__sinit>
 80149d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149d4:	0719      	lsls	r1, r3, #28
 80149d6:	d422      	bmi.n	8014a1e <__swsetup_r+0x62>
 80149d8:	06da      	lsls	r2, r3, #27
 80149da:	d407      	bmi.n	80149ec <__swsetup_r+0x30>
 80149dc:	2209      	movs	r2, #9
 80149de:	602a      	str	r2, [r5, #0]
 80149e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149e4:	81a3      	strh	r3, [r4, #12]
 80149e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149ea:	e033      	b.n	8014a54 <__swsetup_r+0x98>
 80149ec:	0758      	lsls	r0, r3, #29
 80149ee:	d512      	bpl.n	8014a16 <__swsetup_r+0x5a>
 80149f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149f2:	b141      	cbz	r1, 8014a06 <__swsetup_r+0x4a>
 80149f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149f8:	4299      	cmp	r1, r3
 80149fa:	d002      	beq.n	8014a02 <__swsetup_r+0x46>
 80149fc:	4628      	mov	r0, r5
 80149fe:	f7ff fb13 	bl	8014028 <_free_r>
 8014a02:	2300      	movs	r3, #0
 8014a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8014a06:	89a3      	ldrh	r3, [r4, #12]
 8014a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014a0c:	81a3      	strh	r3, [r4, #12]
 8014a0e:	2300      	movs	r3, #0
 8014a10:	6063      	str	r3, [r4, #4]
 8014a12:	6923      	ldr	r3, [r4, #16]
 8014a14:	6023      	str	r3, [r4, #0]
 8014a16:	89a3      	ldrh	r3, [r4, #12]
 8014a18:	f043 0308 	orr.w	r3, r3, #8
 8014a1c:	81a3      	strh	r3, [r4, #12]
 8014a1e:	6923      	ldr	r3, [r4, #16]
 8014a20:	b94b      	cbnz	r3, 8014a36 <__swsetup_r+0x7a>
 8014a22:	89a3      	ldrh	r3, [r4, #12]
 8014a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a2c:	d003      	beq.n	8014a36 <__swsetup_r+0x7a>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	4628      	mov	r0, r5
 8014a32:	f000 f856 	bl	8014ae2 <__smakebuf_r>
 8014a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a3a:	f013 0201 	ands.w	r2, r3, #1
 8014a3e:	d00a      	beq.n	8014a56 <__swsetup_r+0x9a>
 8014a40:	2200      	movs	r2, #0
 8014a42:	60a2      	str	r2, [r4, #8]
 8014a44:	6962      	ldr	r2, [r4, #20]
 8014a46:	4252      	negs	r2, r2
 8014a48:	61a2      	str	r2, [r4, #24]
 8014a4a:	6922      	ldr	r2, [r4, #16]
 8014a4c:	b942      	cbnz	r2, 8014a60 <__swsetup_r+0xa4>
 8014a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014a52:	d1c5      	bne.n	80149e0 <__swsetup_r+0x24>
 8014a54:	bd38      	pop	{r3, r4, r5, pc}
 8014a56:	0799      	lsls	r1, r3, #30
 8014a58:	bf58      	it	pl
 8014a5a:	6962      	ldrpl	r2, [r4, #20]
 8014a5c:	60a2      	str	r2, [r4, #8]
 8014a5e:	e7f4      	b.n	8014a4a <__swsetup_r+0x8e>
 8014a60:	2000      	movs	r0, #0
 8014a62:	e7f7      	b.n	8014a54 <__swsetup_r+0x98>
 8014a64:	20000044 	.word	0x20000044

08014a68 <_sbrk_r>:
 8014a68:	b538      	push	{r3, r4, r5, lr}
 8014a6a:	4d06      	ldr	r5, [pc, #24]	@ (8014a84 <_sbrk_r+0x1c>)
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	4604      	mov	r4, r0
 8014a70:	4608      	mov	r0, r1
 8014a72:	602b      	str	r3, [r5, #0]
 8014a74:	f7ec fa60 	bl	8000f38 <_sbrk>
 8014a78:	1c43      	adds	r3, r0, #1
 8014a7a:	d102      	bne.n	8014a82 <_sbrk_r+0x1a>
 8014a7c:	682b      	ldr	r3, [r5, #0]
 8014a7e:	b103      	cbz	r3, 8014a82 <_sbrk_r+0x1a>
 8014a80:	6023      	str	r3, [r4, #0]
 8014a82:	bd38      	pop	{r3, r4, r5, pc}
 8014a84:	200088a8 	.word	0x200088a8

08014a88 <abort>:
 8014a88:	b508      	push	{r3, lr}
 8014a8a:	2006      	movs	r0, #6
 8014a8c:	f000 f88e 	bl	8014bac <raise>
 8014a90:	2001      	movs	r0, #1
 8014a92:	f7ec f9d9 	bl	8000e48 <_exit>

08014a96 <__swhatbuf_r>:
 8014a96:	b570      	push	{r4, r5, r6, lr}
 8014a98:	460c      	mov	r4, r1
 8014a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	b096      	sub	sp, #88	@ 0x58
 8014aa2:	4615      	mov	r5, r2
 8014aa4:	461e      	mov	r6, r3
 8014aa6:	da0d      	bge.n	8014ac4 <__swhatbuf_r+0x2e>
 8014aa8:	89a3      	ldrh	r3, [r4, #12]
 8014aaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014aae:	f04f 0100 	mov.w	r1, #0
 8014ab2:	bf14      	ite	ne
 8014ab4:	2340      	movne	r3, #64	@ 0x40
 8014ab6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014aba:	2000      	movs	r0, #0
 8014abc:	6031      	str	r1, [r6, #0]
 8014abe:	602b      	str	r3, [r5, #0]
 8014ac0:	b016      	add	sp, #88	@ 0x58
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}
 8014ac4:	466a      	mov	r2, sp
 8014ac6:	f000 f879 	bl	8014bbc <_fstat_r>
 8014aca:	2800      	cmp	r0, #0
 8014acc:	dbec      	blt.n	8014aa8 <__swhatbuf_r+0x12>
 8014ace:	9901      	ldr	r1, [sp, #4]
 8014ad0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014ad4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014ad8:	4259      	negs	r1, r3
 8014ada:	4159      	adcs	r1, r3
 8014adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ae0:	e7eb      	b.n	8014aba <__swhatbuf_r+0x24>

08014ae2 <__smakebuf_r>:
 8014ae2:	898b      	ldrh	r3, [r1, #12]
 8014ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ae6:	079d      	lsls	r5, r3, #30
 8014ae8:	4606      	mov	r6, r0
 8014aea:	460c      	mov	r4, r1
 8014aec:	d507      	bpl.n	8014afe <__smakebuf_r+0x1c>
 8014aee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014af2:	6023      	str	r3, [r4, #0]
 8014af4:	6123      	str	r3, [r4, #16]
 8014af6:	2301      	movs	r3, #1
 8014af8:	6163      	str	r3, [r4, #20]
 8014afa:	b003      	add	sp, #12
 8014afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014afe:	ab01      	add	r3, sp, #4
 8014b00:	466a      	mov	r2, sp
 8014b02:	f7ff ffc8 	bl	8014a96 <__swhatbuf_r>
 8014b06:	9f00      	ldr	r7, [sp, #0]
 8014b08:	4605      	mov	r5, r0
 8014b0a:	4639      	mov	r1, r7
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f7ff faff 	bl	8014110 <_malloc_r>
 8014b12:	b948      	cbnz	r0, 8014b28 <__smakebuf_r+0x46>
 8014b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b18:	059a      	lsls	r2, r3, #22
 8014b1a:	d4ee      	bmi.n	8014afa <__smakebuf_r+0x18>
 8014b1c:	f023 0303 	bic.w	r3, r3, #3
 8014b20:	f043 0302 	orr.w	r3, r3, #2
 8014b24:	81a3      	strh	r3, [r4, #12]
 8014b26:	e7e2      	b.n	8014aee <__smakebuf_r+0xc>
 8014b28:	89a3      	ldrh	r3, [r4, #12]
 8014b2a:	6020      	str	r0, [r4, #0]
 8014b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014b30:	81a3      	strh	r3, [r4, #12]
 8014b32:	9b01      	ldr	r3, [sp, #4]
 8014b34:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014b38:	b15b      	cbz	r3, 8014b52 <__smakebuf_r+0x70>
 8014b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f000 f84e 	bl	8014be0 <_isatty_r>
 8014b44:	b128      	cbz	r0, 8014b52 <__smakebuf_r+0x70>
 8014b46:	89a3      	ldrh	r3, [r4, #12]
 8014b48:	f023 0303 	bic.w	r3, r3, #3
 8014b4c:	f043 0301 	orr.w	r3, r3, #1
 8014b50:	81a3      	strh	r3, [r4, #12]
 8014b52:	89a3      	ldrh	r3, [r4, #12]
 8014b54:	431d      	orrs	r5, r3
 8014b56:	81a5      	strh	r5, [r4, #12]
 8014b58:	e7cf      	b.n	8014afa <__smakebuf_r+0x18>

08014b5a <_raise_r>:
 8014b5a:	291f      	cmp	r1, #31
 8014b5c:	b538      	push	{r3, r4, r5, lr}
 8014b5e:	4605      	mov	r5, r0
 8014b60:	460c      	mov	r4, r1
 8014b62:	d904      	bls.n	8014b6e <_raise_r+0x14>
 8014b64:	2316      	movs	r3, #22
 8014b66:	6003      	str	r3, [r0, #0]
 8014b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b6c:	bd38      	pop	{r3, r4, r5, pc}
 8014b6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014b70:	b112      	cbz	r2, 8014b78 <_raise_r+0x1e>
 8014b72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b76:	b94b      	cbnz	r3, 8014b8c <_raise_r+0x32>
 8014b78:	4628      	mov	r0, r5
 8014b7a:	f000 f853 	bl	8014c24 <_getpid_r>
 8014b7e:	4622      	mov	r2, r4
 8014b80:	4601      	mov	r1, r0
 8014b82:	4628      	mov	r0, r5
 8014b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b88:	f000 b83a 	b.w	8014c00 <_kill_r>
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d00a      	beq.n	8014ba6 <_raise_r+0x4c>
 8014b90:	1c59      	adds	r1, r3, #1
 8014b92:	d103      	bne.n	8014b9c <_raise_r+0x42>
 8014b94:	2316      	movs	r3, #22
 8014b96:	6003      	str	r3, [r0, #0]
 8014b98:	2001      	movs	r0, #1
 8014b9a:	e7e7      	b.n	8014b6c <_raise_r+0x12>
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	4798      	blx	r3
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	e7e0      	b.n	8014b6c <_raise_r+0x12>
	...

08014bac <raise>:
 8014bac:	4b02      	ldr	r3, [pc, #8]	@ (8014bb8 <raise+0xc>)
 8014bae:	4601      	mov	r1, r0
 8014bb0:	6818      	ldr	r0, [r3, #0]
 8014bb2:	f7ff bfd2 	b.w	8014b5a <_raise_r>
 8014bb6:	bf00      	nop
 8014bb8:	20000044 	.word	0x20000044

08014bbc <_fstat_r>:
 8014bbc:	b538      	push	{r3, r4, r5, lr}
 8014bbe:	4d07      	ldr	r5, [pc, #28]	@ (8014bdc <_fstat_r+0x20>)
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	4608      	mov	r0, r1
 8014bc6:	4611      	mov	r1, r2
 8014bc8:	602b      	str	r3, [r5, #0]
 8014bca:	f7ec f98d 	bl	8000ee8 <_fstat>
 8014bce:	1c43      	adds	r3, r0, #1
 8014bd0:	d102      	bne.n	8014bd8 <_fstat_r+0x1c>
 8014bd2:	682b      	ldr	r3, [r5, #0]
 8014bd4:	b103      	cbz	r3, 8014bd8 <_fstat_r+0x1c>
 8014bd6:	6023      	str	r3, [r4, #0]
 8014bd8:	bd38      	pop	{r3, r4, r5, pc}
 8014bda:	bf00      	nop
 8014bdc:	200088a8 	.word	0x200088a8

08014be0 <_isatty_r>:
 8014be0:	b538      	push	{r3, r4, r5, lr}
 8014be2:	4d06      	ldr	r5, [pc, #24]	@ (8014bfc <_isatty_r+0x1c>)
 8014be4:	2300      	movs	r3, #0
 8014be6:	4604      	mov	r4, r0
 8014be8:	4608      	mov	r0, r1
 8014bea:	602b      	str	r3, [r5, #0]
 8014bec:	f7ec f98c 	bl	8000f08 <_isatty>
 8014bf0:	1c43      	adds	r3, r0, #1
 8014bf2:	d102      	bne.n	8014bfa <_isatty_r+0x1a>
 8014bf4:	682b      	ldr	r3, [r5, #0]
 8014bf6:	b103      	cbz	r3, 8014bfa <_isatty_r+0x1a>
 8014bf8:	6023      	str	r3, [r4, #0]
 8014bfa:	bd38      	pop	{r3, r4, r5, pc}
 8014bfc:	200088a8 	.word	0x200088a8

08014c00 <_kill_r>:
 8014c00:	b538      	push	{r3, r4, r5, lr}
 8014c02:	4d07      	ldr	r5, [pc, #28]	@ (8014c20 <_kill_r+0x20>)
 8014c04:	2300      	movs	r3, #0
 8014c06:	4604      	mov	r4, r0
 8014c08:	4608      	mov	r0, r1
 8014c0a:	4611      	mov	r1, r2
 8014c0c:	602b      	str	r3, [r5, #0]
 8014c0e:	f7ec f909 	bl	8000e24 <_kill>
 8014c12:	1c43      	adds	r3, r0, #1
 8014c14:	d102      	bne.n	8014c1c <_kill_r+0x1c>
 8014c16:	682b      	ldr	r3, [r5, #0]
 8014c18:	b103      	cbz	r3, 8014c1c <_kill_r+0x1c>
 8014c1a:	6023      	str	r3, [r4, #0]
 8014c1c:	bd38      	pop	{r3, r4, r5, pc}
 8014c1e:	bf00      	nop
 8014c20:	200088a8 	.word	0x200088a8

08014c24 <_getpid_r>:
 8014c24:	f7ec b8f5 	b.w	8000e12 <_getpid>

08014c28 <_init>:
 8014c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2a:	bf00      	nop
 8014c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c2e:	bc08      	pop	{r3}
 8014c30:	469e      	mov	lr, r3
 8014c32:	4770      	bx	lr

08014c34 <_fini>:
 8014c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c36:	bf00      	nop
 8014c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3a:	bc08      	pop	{r3}
 8014c3c:	469e      	mov	lr, r3
 8014c3e:	4770      	bx	lr
